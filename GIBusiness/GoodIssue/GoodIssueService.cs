using AspNetCore.Reporting;
using BomBusiness;
using Business.Library;
using Comone.Utils;
using DataAccess;
using GIBusiness.AutoNumber;
using GIBusiness.GoodsIssue;
using GIBusiness.PlanGoodIssue;
using GIBusiness.Reports;
using GIBusiness.TagOut;
using GIDataAccess.Models;
using InterfaceBusiness;
using MasterBusiness.GoodsIssue;
using MasterDataBusiness.ViewModels;
using Microsoft.EntityFrameworkCore;
using PlanGIBusiness.Libs;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Text;
using static GIBusiness.GoodIssue.SearchDetailModel;
using static MasterDataBusiness.ViewModels.PopupGIRunWaveViewModel;
using System.Threading.Tasks;
using System.Threading;
namespace GIBusiness.GoodIssue
{
    public class GoodIssueService
    {
        private GIDbContext db;
        private GIDbContext dblog;
        private BinbalanceDbContext dbBinbalance;

        public GoodIssueService()
        {
            db = new GIDbContext();
            dblog = new GIDbContext();
            dbBinbalance = new BinbalanceDbContext();
        }
        public GoodIssueService(GIDbContext db, GIDbContext dblog , BinbalanceDbContext dbBinbalance)
        {
            this.db = db;
            this.dblog = dblog;
            this.dbBinbalance = dbBinbalance;
        }



        #region CreateDataTable
        public static DataTable CreateDataTable<T>(IEnumerable<T> list)
        {
            Type type = typeof(T);
            var properties = type.GetProperties();

            DataTable dataTable = new DataTable();
            foreach (PropertyInfo info in properties)
            {
                dataTable.Columns.Add(new DataColumn(info.Name, Nullable.GetUnderlyingType(info.PropertyType) ?? info.PropertyType));

            }

            foreach (T entity in list)
            {
                object[] values = new object[properties.Length];
                for (int i = 0; i < properties.Length; i++)
                {
                    values[i] = properties[i].GetValue(entity);
                }

                dataTable.Rows.Add(values);
            }

            return dataTable;
        }

        #endregion

        #region AutobasicSuggestion
        public List<ItemListViewModel> autobasicSuggestion(ItemListViewModel data)
        {
            var items = new List<ItemListViewModel>();
            try
            {
                if (!string.IsNullOrEmpty(data.key))
                {
                    var query1 = db.View_GoodsIssue.Where(c => c.PlanGoodsIssue_No.Contains(data.key)).Select(s => new ItemListViewModel
                    {
                        name = s.PlanGoodsIssue_No,
                        key = s.PlanGoodsIssue_No
                    }).Distinct();

                    var query2 = db.View_GoodsIssue.Where(c => c.Owner_Name.Contains(data.key)).Select(s => new ItemListViewModel
                    {
                        name = s.Owner_Name,
                        key = s.Owner_Name
                    }).Distinct();

                    var query3 = db.View_GoodsIssue.Where(c => c.Create_By.Contains(data.key)).Select(s => new ItemListViewModel
                    {
                        name = s.Create_By,
                        key = s.Create_By

                    }).Distinct();
                    var query4 = db.View_GoodsIssue.Where(c => c.GoodsIssue_No.Contains(data.key)).Select(s => new ItemListViewModel
                    {
                        name = s.GoodsIssue_No,
                        key = s.GoodsIssue_No

                    }).Distinct();
                    var query5 = db.View_GoodsIssue.Where(c => c.DocumentType_Name.Contains(data.key)).Select(s => new ItemListViewModel
                    {
                        name = s.DocumentType_Name,
                        key = s.DocumentType_Name

                    }).Distinct();

                    var query = query1.Union(query2).Union(query2).Union(query3).Union(query4).Union(query5);

                    items = query.OrderBy(c => c.name).Take(10).ToList();
                }

            }
            catch (Exception ex)
            {

            }

            return items;
        }

        #endregion

        #region autoPlanGoodIssueNo
        public List<ItemListViewModel> autoPlanGoodIssueNo(ItemListViewModel data)
        {
            try
            {
                var query = db.View_GoodsIssue.AsQueryable();

                if (!string.IsNullOrEmpty(data.key))
                {
                    query = query.Where(c => c.PlanGoodsIssue_No.Contains(data.key));

                }

                var items = new List<ItemListViewModel>();

                var result = query.Select(c => new { c.PlanGoodsIssue_No }).Distinct().Take(10).ToList();


                foreach (var item in result)
                {
                    var resultItem = new ItemListViewModel
                    {
                        name = item.PlanGoodsIssue_No
                    };
                    items.Add(resultItem);

                }



                return items;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

        #region  autoGoodIssueNo
        public List<ItemListViewModel> autoGoodIssueNo(ItemListViewModel data)
        {
            try
            {
                var query = db.View_GoodsIssue.AsQueryable();

                if (!string.IsNullOrEmpty(data.key))
                {
                    query = query.Where(c => c.GoodsIssue_No.Contains(data.key));

                }

                var items = new List<ItemListViewModel>();

                var result = query.Select(c => new { c.GoodsIssue_Index, c.GoodsIssue_No }).Distinct().Take(10).ToList();


                foreach (var item in result)
                {
                    var resultItem = new ItemListViewModel
                    {
                        index = item.GoodsIssue_Index,
                        name = item.GoodsIssue_No
                    };
                    items.Add(resultItem);

                }



                return items;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region AutoOwnerfilter
        public List<ItemListViewModel> autoOwnerfilter(ItemListViewModel data)
        {
            try
            {
                var result = new List<ItemListViewModel>();

                var filterModel = new ItemListViewModel();
                if (!string.IsNullOrEmpty(data.key))
                {
                    filterModel.key = data.key;
                }

                //GetConfig
                result = utils.SendDataApi<List<ItemListViewModel>>(new AppSettingConfig().GetUrl("autoOwnerFilter"), filterModel.sJson());
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

        #region AutoUser
        public List<ItemListViewModel> autoUser(ItemListViewModel data)
        {
            try
            {
                var result = new List<ItemListViewModel>();


                var filterModel = new ItemListViewModel();

                if (!string.IsNullOrEmpty(data.key))
                {
                    filterModel.key = data.key;
                }


                //GetConfig
                result = utils.SendDataApi<List<ItemListViewModel>>(new AppSettingConfig().GetUrl("autoUserfilter"), filterModel.sJson());

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

        #region  autoGoodIssueNo
        public List<ItemListViewModel> autoGI(ItemListViewModel data)
        {
            var items = new List<ItemListViewModel>();
            try
            {
                if (!string.IsNullOrEmpty(data.key))
                {
                    var query = db.IM_GoodsIssue.Where(c => c.GoodsIssue_No.Contains(data.key) && c.Document_Status != -1).Select(s => new ItemListViewModel
                    {
                        index = s.GoodsIssue_Index,
                        name = s.GoodsIssue_No,
                    }).Distinct();

                    items = query.OrderBy(c => c.name).Take(10).ToList();
                }

                return items;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region  autoGoodIssueNo
        public List<ItemListViewModel> autoGI_SUB(ItemListViewModel data)
        {
            var items = new List<ItemListViewModel>();
            try
            {
                if (!string.IsNullOrEmpty(data.key))
                {
                    var query = db.IM_GoodsIssue.Where(c => c.GoodsIssue_No.Contains(data.key) && c.Document_Status != -1 && c.DocumentType_Index == Guid.Parse("FF1B95C3-BDC1-46F8-BF26-D50527B35985")).Select(s => new ItemListViewModel
                    {
                        index = s.GoodsIssue_Index,
                        id = s.GoodsIssue_No,
                    }).Distinct();

                    items = query.OrderBy(c => c.name).Take(10).ToList();
                }

                return items;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region DropdownDocumentType
        public List<DocumentTypeViewModel> DropdownDocumentType(DocumentTypeViewModel data)
        {
            try
            {
                var result = new List<DocumentTypeViewModel>();

                var filterModel = new DocumentTypeViewModel();


                filterModel.process_Index = new Guid("2E026669-99BD-4DE0-8818-534F29F7B89D");

                //GetConfig
                result = utils.SendDataApi<List<DocumentTypeViewModel>>(new AppSettingConfig().GetUrl("dropDownDocumentType"), filterModel.sJson());

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

        #region dropdownWarehouse
        public List<warehouseDocViewModel> dropdownWarehouse(warehouseDocViewModel data)
        {
            try
            {
                var result = new List<warehouseDocViewModel>();

                var filterModel = new warehouseDocViewModel();

                //GetConfig
                result = utils.SendDataApi<List<warehouseDocViewModel>>(new AppSettingConfig().GetUrl("dropdownWarehouse"), filterModel.sJson());

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

        #region dropdownCurrency
        public List<CurrencyViewModel> dropdownCurrency(CurrencyViewModel data)
        {
            try
            {
                //GetConfig
                var result = utils.SendDataApi<List<CurrencyViewModel>>(new AppSettingConfig().GetUrl("dropdownCurrency"), new { }.sJson());

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

        #region DropdownStatus
        public List<ProcessStatusViewModel> dropdownStatus(ProcessStatusViewModel data)
        {
            try
            {
                var result = new List<ProcessStatusViewModel>();

                var filterModel = new ProcessStatusViewModel();


                filterModel.process_Index = new Guid("2E026669-99BD-4DE0-8818-534F29F7B89D");

                //GetConfig
                result = utils.SendDataApi<List<ProcessStatusViewModel>>(new AppSettingConfig().GetUrl("dropdownStatus"), filterModel.sJson());

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

        #region DropdownDocumentTypeWave
        public List<WaveViewModel> DropdownDocumentTypeWave(WaveViewModel data)
        {
            try
            {

                //GetConfig
                var result = utils.SendDataApi<List<WaveViewModel>>(new AppSettingConfig().GetUrl("dropDownWave"), data.sJson());

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

        #region dropdownOwner
        public List<OwnerViewModel> dropdownOwner(OwnerViewModel data)
        {
            try
            {

                //GetConfig
                var result = utils.SendDataApi<List<OwnerViewModel>>(new AppSettingConfig().GetUrl("dropdownOwner"), new { }.sJson());

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

        #region filter
        public actionResultViewModel filter(SearchDetailModel model)
        {
            try
            {
                var ProcessStatus = new List<ProcessStatusViewModel>();

                var filterModel = new ProcessStatusViewModel();

                filterModel.process_Index = new Guid("2E026669-99BD-4DE0-8818-534F29F7B89D");

                //GetConfig
                ProcessStatus = utils.SendDataApi<List<ProcessStatusViewModel>>(new AppSettingConfig().GetUrl("processStatus"), filterModel.sJson());


                var query = db.View_GoodsIssue.AsQueryable();

                //query = query.Where(c => !(c.Document_Status == -2));

                #region advanceSearch
                if (model.advanceSearch == true)
                {
                    if (!string.IsNullOrEmpty(model.planGoodsIssue_No))
                    {
                        query = query.Where(c => c.PlanGoodsIssue_No.Contains(model.planGoodsIssue_No));
                    }

                    //if (!string.IsNullOrEmpty(model.owner_Name))
                    //{
                    //    query = query.Where(c => c.Owner_Name.Contains(model.owner_Name));
                    //}

                    if (!string.IsNullOrEmpty(model.owner_Index.ToString()))
                    {
                        query = query.Where(c => c.Owner_Index == model.owner_Index);
                    }

                    if (!string.IsNullOrEmpty(model.goodsIssue_No))
                    {
                        query = query.Where(c => c.GoodsIssue_No.Contains(model.goodsIssue_No));
                    }

                    if (!string.IsNullOrEmpty(model.document_Status.ToString()))
                    {
                        query = query.Where(c => c.Document_Status == (model.document_Status));
                    }

                    if (!string.IsNullOrEmpty(model.processStatus_Name))
                    {
                        int DocumentStatue = 0;


                        if (ProcessStatus.Count > 0)
                        {
                            DocumentStatue = ProcessStatus.FirstOrDefault(c => c.processStatus_Name == model.processStatus_Name).processStatus_Id.sParse<int>();
                        }

                        query = query.Where(c => c.Document_Status == DocumentStatue);
                    }


                    if (!string.IsNullOrEmpty(model.goodsIssue_Date) && !string.IsNullOrEmpty(model.goodsIssue_Date_To))
                    {
                        var dateStart = model.goodsIssue_Date.toBetweenDate();
                        var dateEnd = model.goodsIssue_Date_To.toBetweenDate();
                        query = query.Where(c => c.GoodsIssue_Date >= dateStart.start && c.GoodsIssue_Date <= dateEnd.end);
                    }
                    else if (!string.IsNullOrEmpty(model.goodsIssue_Date))
                    {
                        var goodsIssue_Date_From = model.goodsIssue_Date.toBetweenDate();
                        query = query.Where(c => c.GoodsIssue_Date >= goodsIssue_Date_From.start);
                    }
                    else if (!string.IsNullOrEmpty(model.goodsIssue_Date_To))
                    {
                        var goodsIssue_Date_To = model.goodsIssue_Date_To.toBetweenDate();
                        query = query.Where(c => c.GoodsIssue_Date <= goodsIssue_Date_To.start);
                    }

                    if (!string.IsNullOrEmpty(model.planGoodsIssue_Due_Date) && !string.IsNullOrEmpty(model.planGoodsIssue_Due_Date_To))
                    {
                        var dateStart = model.planGoodsIssue_Due_Date.toBetweenDate();
                        var dateEnd = model.planGoodsIssue_Due_Date_To.toBetweenDate();
                        query = query.Where(c => c.PlanGoodsIssue_Due_Date >= dateStart.start && c.PlanGoodsIssue_Due_Date <= dateEnd.end);
                    }

                    else if (!string.IsNullOrEmpty(model.planGoodsIssue_Due_Date))
                    {
                        var planGoodsIssue_due_date_From = model.planGoodsIssue_Due_Date.toBetweenDate();
                        query = query.Where(c => c.PlanGoodsIssue_Due_Date >= planGoodsIssue_due_date_From.start);
                    }
                    else if (!string.IsNullOrEmpty(model.planGoodsIssue_Due_Date_To))
                    {
                        var planGoodsIssue_due_date_To = model.planGoodsIssue_Due_Date_To.toBetweenDate();
                        query = query.Where(c => c.PlanGoodsIssue_Due_Date <= planGoodsIssue_due_date_To.start);
                    }

                    if (!string.IsNullOrEmpty(model.create_By))
                    {
                        query = query.Where(c => c.Create_By == (model.create_By));
                    }

                    if (!string.IsNullOrEmpty(model.documentType_Index.ToString()))
                    {
                        query = query.Where(c => c.DocumentType_Index == model.documentType_Index);
                    }
                }

                #endregion

                #region Basic
                else
                {
                    if (!string.IsNullOrEmpty(model.key))
                    {
                        query = query.Where(c => c.GoodsIssue_No.Contains(model.key)
                                            || c.Owner_Name.Contains(model.key)
                                            || c.Create_By.Contains(model.key)
                                            || c.DocumentType_Name.Contains(model.key)
                                            || c.PlanGoodsIssue_No.Contains(model.key)
                                            || c.Qty.Equals(model.key)
                                            || c.Weight.Equals(model.key)
                                            );
                    }

                    if (!string.IsNullOrEmpty(model.goodsIssue_Date) && !string.IsNullOrEmpty(model.goodsIssue_Date))
                    {
                        var dateStart = model.goodsIssue_Date.toBetweenDate();
                        var dateEnd = model.goodsIssue_Date_To.toBetweenDate();
                        query = query.Where(c => c.GoodsIssue_Date >= dateStart.start && c.GoodsIssue_Date <= dateEnd.end);
                    }
                    else if (!string.IsNullOrEmpty(model.goodsIssue_Date))
                    {
                        var goodsIssue_Date_From = model.goodsIssue_Date.toBetweenDate();
                        query = query.Where(c => c.GoodsIssue_Date >= goodsIssue_Date_From.start);
                    }
                    else if (!string.IsNullOrEmpty(model.goodsIssue_Date_To))
                    {
                        var goodsIssue_Date_To = model.goodsIssue_Date_To.toBetweenDate();
                        query = query.Where(c => c.GoodsIssue_Date <= goodsIssue_Date_To.start);
                    }

                    var statusModels = new List<int?>();
                    var sortModels = new List<SortModel>();

                    if (model.status.Count > 0)
                    {
                        foreach (var item in model.status)
                        {
                            statusModels.Add(item.value);
                            //if (item.value == 0)
                            //{
                            //    statusModels.Add(0);
                            //}
                            //if (item.value == 1)
                            //{
                            //    statusModels.Add(1);
                            //}
                            //if (item.value == 3)
                            //{
                            //    statusModels.Add(3);
                            //}
                            //if (item.value == -1)
                            //{
                            //    statusModels.Add(-1);
                            //}
                        }
                        query = query.Where(c => statusModels.Contains(c.Document_Status));
                    }

                    if (model.sort.Count > 0)
                    {
                        foreach (var item in model.sort)
                        {

                            if (item.value == "GoodsIssue_No")
                            {
                                sortModels.Add(new SortModel
                                {
                                    ColId = "GoodsIssue_No",
                                    Sort = "desc"
                                });
                            }
                            if (item.value == "GoodsIssue_Date")
                            {
                                sortModels.Add(new SortModel
                                {
                                    ColId = "GoodsIssue_Date",
                                    Sort = "desc"
                                });
                            }
                            if (item.value == "Document_Date")
                            {
                                sortModels.Add(new SortModel
                                {
                                    ColId = "Document_Date",
                                    Sort = "desc"
                                });
                            }
                            if (item.value == "DocumentType_Name")
                            {
                                sortModels.Add(new SortModel
                                {
                                    ColId = "DocumentType_Name",
                                    Sort = "desc"
                                });
                            }
                            if (item.value == "Qty")
                            {
                                sortModels.Add(new SortModel
                                {
                                    ColId = "Qty",
                                    Sort = "desc"
                                });
                            }
                            if (item.value == "Weight")
                            {
                                sortModels.Add(new SortModel
                                {
                                    ColId = "Weight",
                                    Sort = "desc"
                                });
                            }
                            if (item.value == "ProcessStatus_Name")
                            {
                                sortModels.Add(new SortModel
                                {
                                    ColId = "Document_Status",
                                    Sort = "desc"
                                });
                            }
                            if (item.value == "Create_By")
                            {
                                sortModels.Add(new SortModel
                                {
                                    ColId = "Create_By",
                                    Sort = "desc"
                                });

                            }
                        }
                        query = query.KWOrderBy(sortModels);

                    }

                }

                #endregion

                var Item = new List<View_GoodsIssue>();
                var TotalRow = new List<View_GoodsIssue>();


                TotalRow = query.OrderByDescending(o => o.GoodsIssue_No).ThenByDescending(o => o.GoodsIssue_No).ToList();

                if (model.sort.Count == 0)
                {
                    query = query.OrderByDescending(o => o.GoodsIssue_No).ThenByDescending(o => o.GoodsIssue_No);
                }


                if (model.CurrentPage != 0 && model.PerPage != 0)
                {
                    query = query.Skip(((model.CurrentPage - 1) * model.PerPage));
                }

                if (model.PerPage != 0)
                {
                    query = query.Take(model.PerPage);

                }

                Item = query.ToList();


                String Statue = "";
                var result = new List<SearchDetailModel>();

                //var groupItem = Item.GroupBy(g => new View_GoodsIssue
                //{
                //    GoodsIssue_Index = g.GoodsIssue_Index,
                //    PlanGoodsIssue_No = g.PlanGoodsIssue_No,
                //    GoodsIssue_No = g.GoodsIssue_No,
                //    GoodsIssue_Date = g.GoodsIssue_Date,
                //    PlanGoodsIssue_Date = g.PlanGoodsIssue_Date,
                //    PlanGoodsIssue_Due_Date = g.PlanGoodsIssue_Due_Date,
                //    DocumentType_Index = g.DocumentType_Index,
                //    DocumentType_Name = g.DocumentType_Name,
                //    Document_Status = g.Document_Status,
                //    Qty = g.Qty,
                //    Weight = g.Weight,
                //    Create_By = g.Create_By,
                //}).ToList();

                foreach (var item in Item)
                {
                    var ref_no = db.IM_GoodsIssueItemLocation.Where(c => c.GoodsIssue_Index == item.GoodsIssue_Index && c.Document_Status != -1 && c.Document_Status != -2).Select(s => s.Ref_Document_No).Distinct().ToList();
                    var round = db.IM_PlanGoodsIssue.Where(c => c.PlanGoodsIssue_No == ref_no.FirstOrDefault()).Select(s => s.Round_Name.Replace(".", ":")).ToList();
                    string roundend = (round.Count > 0 && !string.IsNullOrEmpty(round[0]) ) ? DateTime.Parse(round[0].Replace(".", ":")).AddHours(2).ToString("HH:mm") : "";
                    var resultItem = new SearchDetailModel();
                    resultItem.goodsIssue_Index = item.GoodsIssue_Index;
                    resultItem.planGoodsIssue_No = string.Join(",", ref_no.Take(3)) + (ref_no.Count > 3 ? "..." : "");
                    resultItem.goodsIssue_No = item.GoodsIssue_No;
                    resultItem.goodsIssue_Date = item.GoodsIssue_Date.toString();
                    resultItem.planGoodsIssue_Date = item.PlanGoodsIssue_Date.toString();
                    resultItem.planGoodsIssue_Due_Date = item.PlanGoodsIssue_Due_Date.toString();
                    resultItem.documentType_Index = item.DocumentType_Index;
                    resultItem.documentType_Name = item.DocumentType_Name;
                    resultItem.document_Status = item.Document_Status;
                    resultItem.owner_Index = item.Owner_Index;
                    resultItem.owner_Id = item.Owner_Id;
                    resultItem.owner_Name = item.Owner_Name;

                    Statue = item.Document_Status.ToString();
                    var ProcessStatusName = ProcessStatus.Where(c => c.processStatus_Id == Statue).FirstOrDefault();
                    resultItem.processStatus_Name = ProcessStatusName?.processStatus_Name;

                    resultItem.qty = item.Qty;
                    resultItem.weight = item.Weight;
                    resultItem.create_By = item.Create_By;

                    resultItem.update_By = item.Update_By;
                    resultItem.cancel_By = item.Cancel_By;

                    resultItem.documentRef_No1 = item.DocumentRef_No1;
                    resultItem.documentRef_No2 = item.DocumentRef_No2;
                    resultItem.GI_status = item.GI_status;
                    resultItem.WCS_status = item.WCS_status;

                    var taskIndex = db.IM_TaskItem.Where(c => c.Ref_Document_Index == item.GoodsIssue_Index).GroupBy(g => g.Task_Index).ToList();

                    var checktask = db.IM_Task.Where(c => taskIndex.Select(s => s.Key).Contains(c.Task_Index) && c.Document_Status != -1 && c.Document_Status != 2).Count();
                    if (checktask == 0)
                    {
                        resultItem.isConfirmStock = true;
                    }
                    resultItem.round_Name = (round.Count > 0 && !string.IsNullOrEmpty(round[0])) ? round[0] + "-" + roundend : "";

                    result.Add(resultItem);
                }
                var count = TotalRow.Count;

                //var resultGroup = result.GroupBy(g => new SearchDetailModel
                //{
                //    goodsIssue_Index = g.goodsIssue_Index,
                //    planGoodsIssue_No = g.planGoodsIssue_No,
                //    goodsIssue_No = g.goodsIssue_No,
                //    goodsIssue_Date = g.goodsIssue_Date,
                //    planGoodsIssue_Date = g.planGoodsIssue_Date,
                //    planGoodsIssue_Due_Date = g.planGoodsIssue_Due_Date,
                //    documentType_Index = g.documentType_Index,
                //    documentType_Name = g.documentType_Name,
                //    document_Status = g.document_Status,
                //    processStatus_Name = g.processStatus_Name,
                //    qty = g.qty,
                //    weight = g.weight,
                //    create_By = g.create_By,
                //}).ToList();

                var actionResult = new actionResultViewModel();
                actionResult.itemsGI = result.ToList();
                actionResult.pagination = new Pagination() { TotalRow = count, CurrentPage = model.CurrentPage, PerPage = model.PerPage, };

                return actionResult;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

        #region find
        public GoodIssueViewModel find(Guid id)
        {
            try
            {
                var resultItem = new GoodIssueViewModel();

                var query = db.IM_GoodsIssue.Find(id);

                resultItem.goodsIssue_Index = query.GoodsIssue_Index;
                resultItem.owner_Index = query.Owner_Index;
                resultItem.owner_Id = query.Owner_Id;
                resultItem.owner_Name = query.Owner_Name;
                resultItem.documentType_Index = query.DocumentType_Index;
                resultItem.documentType_Id = query.DocumentType_Id;
                resultItem.documentType_Name = query.DocumentType_Name;
                resultItem.goodsIssue_No = query.GoodsIssue_No;
                resultItem.goodsIssue_Date = query.GoodsIssue_Date.toString();
                resultItem.goodsIssue_Time = query.GoodsIssue_Time;
                resultItem.document_Date = query.Document_Date.toString();
                resultItem.documentRef_No1 = query.DocumentRef_No1;
                resultItem.documentRef_No2 = query.DocumentRef_No2;
                resultItem.documentRef_No3 = query.DocumentRef_No3;
                resultItem.documentRef_No4 = query.DocumentRef_No4;
                resultItem.documentRef_No5 = query.DocumentRef_No5;
                resultItem.document_Remark = query.Document_Remark;
                resultItem.document_Status = query.Document_Status;
                resultItem.udf_1 = query.UDF_1;
                resultItem.udf_2 = query.UDF_2;
                resultItem.udf_3 = query.UDF_3;
                resultItem.udf_4 = query.UDF_4;
                resultItem.udf_5 = query.UDF_5;
                resultItem.documentPriority_Status = query.DocumentPriority_Status;
                resultItem.picking_Status = query.Picking_Status;
                resultItem.create_By = query.Create_By;
                resultItem.create_Date = query.Create_Date;
                resultItem.update_By = query.Update_By;
                resultItem.update_Date = query.Update_Date;
                resultItem.cancel_By = query.Cancel_By;
                resultItem.cancel_Date = query.Cancel_Date;
                resultItem.warehouse_Index = query.Warehouse_Index;
                resultItem.warehouse_Id = query.Warehouse_Id;
                resultItem.warehouse_Name = query.Warehouse_Name;
                resultItem.cancel_Status = query.Cancel_Status;
                resultItem.runWave_Status = query.RunWave_Status;
                resultItem.wave_Index = query.Wave_Index;

                return resultItem;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

        public actionResultPopupGIViewModel PopupGIRunWave(SearchDetailModel model)
        {
            try
            {
                //GetConfig
                var objectwhere = new { CurrentPage = model.CurrentPage, PerPage = model.PerPage, planGoodsIssue_No = model.planGoodsIssue_No, owner_Index = model.owner_Index, owner_Name = model.owner_Name, round_Name = model.round_Name, route_Name = model.route_Name, planGoodsIssue_Due_Date = model.planGoodsIssue_Due_Date };
                var result = utils.SendDataApi<actionResultPopupGIViewModel>(new AppSettingConfig().GetUrl("PopupGIRunWave"), objectwhere.sJson());

                foreach (var re in result.items)
                {
                    foreach (var r in re.itemDetail)
                    {
                        var sumqty = db.IM_GoodsIssueItemLocation.Where(c => c.Ref_Document_Index == r.planGoodsIssue_Index && c.Ref_DocumentItem_Index == r.planGoodsIssueItem_Index && c.Document_Status != -2 && c.Document_Status != -1).ToList().Sum(s => s.TotalQty);
                        r.qty = r.qty;
                        //r.qty = (r.totalQty - sumqty);
                        r.qtyPlan = (r.totalQty - sumqty);
                        r.totalQty = (r.totalQty - sumqty);
                    }
                }

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public actionResultGoodsIssueHeaderViewModel goodsissueHeader(GoodsIssueHeaderViewModel model)
        {

            String State = "Start";
            String msglog = "";
            var olog = new logtxt();


            try
            {
                Guid gi_index = !string.IsNullOrEmpty(model.goodsIssue_Index) ? new Guid(model.goodsIssue_Index) : new Guid("00000000-0000-0000-0000-000000000000");
                var gi = db.IM_GoodsIssue.Find(gi_index);
                if (gi == null)
                {

                    var filterModel = new GenDocumentTypeViewModel();


                    filterModel.process_Index = new Guid("2E026669-99BD-4DE0-8818-534F29F7B89D");
                    filterModel.documentType_Index = new Guid(model.documentType_Index);
                    //GetConfig
                    var dropDownDocumentType = utils.SendDataApi<List<GenDocumentTypeViewModel>>(new AppSettingConfig().GetUrl("dropDownDocumentType"), filterModel.sJson());

                    //DataTable resultDocumentType = CreateDataTable(dropDownDocumentType);

                    //var DocumentType = new SqlParameter("DocumentType", SqlDbType.Structured);
                    //DocumentType.TypeName = "[dbo].[ms_DocumentTypeData]";
                    //DocumentType.Value = resultDocumentType;

                    //var DocumentType_Index = new SqlParameter("@DocumentType_Index", model.documentType_Index);

                    //var DocDate = new SqlParameter("@DocDate", DateTime.Now);

                    //var resultParameter = new SqlParameter("@txtReturn", SqlDbType.NVarChar);
                    //resultParameter.Size = 2000; // some meaningfull value
                    //resultParameter.Direction = ParameterDirection.Output;
                    //db.Database.ExecuteSqlCommand("EXEC sp_Gen_DocumentNumber @DocumentType_Index , @DocDate, @DocumentType, @txtReturn OUTPUT", DocumentType_Index, DocDate, DocumentType, resultParameter);
                    //var result = resultParameter.Value;
                    var genDoc = new AutoNumberService();
                    //string DocNo = "";
                    DateTime DocumentDate = DateTime.Now;
                    String DocNum = genDoc.genAutoDocmentNumber(dropDownDocumentType, DocumentDate);



                    var newGI = new im_GoodsIssue();
                    newGI.GoodsIssue_Index = Guid.NewGuid();
                    newGI.Owner_Index = !string.IsNullOrEmpty(model.owner_Index) ? new Guid(model.owner_Index) : Guid.Parse("00000000-0000-0000-0000-000000000000");
                    newGI.Owner_Id = !string.IsNullOrEmpty(model.owner_Index) ? model.owner_Id : "";
                    newGI.Owner_Name = !string.IsNullOrEmpty(model.owner_Index) ? model.owner_Name : "";
                    newGI.DocumentType_Index = new Guid(model.documentType_Index);
                    newGI.DocumentType_Id = model.documentType_Id;
                    newGI.DocumentType_Name = model.documentType_Name;
                    newGI.GoodsIssue_No = DocNum;
                    newGI.GoodsIssue_Date = model.goodsIssue_Date.toDateDefault();
                    newGI.GoodsIssue_Time = model.goodsIssue_Time;
                    newGI.DocumentRef_No1 = model.documentRef_No1;
                    newGI.Document_Remark = model.document_Remark;
                    newGI.DocumentPriority_Status = model.documentPriority_Status;
                    newGI.Document_Date = model.document_Date.toDate();
                    newGI.Warehouse_Index = !string.IsNullOrEmpty(model.warehouse_Index) ? new Guid(model.warehouse_Index) : (Guid?)null;
                    newGI.Warehouse_Id = !string.IsNullOrEmpty(model.warehouse_Index) ? model.warehouse_Id : null;
                    newGI.Warehouse_Name = !string.IsNullOrEmpty(model.warehouse_Index) ? model.warehouse_Name : null;
                    newGI.Document_Status = -2;
                    newGI.Create_By = model.create_by;
                    newGI.Create_Date = DateTime.Now;
                    db.IM_GoodsIssue.Add(newGI);

                    model.goodsIssue_Index = newGI.GoodsIssue_Index.ToString();
                    model.goodsIssue_No = newGI.GoodsIssue_No;
                }
                else
                {
                    if (gi.Document_Status == 0)
                    {
                        gi.Owner_Index = !string.IsNullOrEmpty(model.owner_Index) ? new Guid(model.owner_Index) : Guid.Parse("00000000-0000-0000-0000-000000000000");
                        gi.Owner_Id = !string.IsNullOrEmpty(model.owner_Index) ? model.owner_Id : "";
                        gi.Owner_Name = !string.IsNullOrEmpty(model.owner_Index) ? model.owner_Name : "";
                        gi.DocumentType_Index = new Guid(model.documentType_Index);
                        gi.DocumentType_Id = model.documentType_Id;
                        gi.DocumentType_Name = model.documentType_Name;
                        gi.GoodsIssue_Date = model.goodsIssue_Date.toDateDefault();
                        gi.GoodsIssue_Time = model.goodsIssue_Time;
                        gi.DocumentRef_No1 = model.documentRef_No1;
                        gi.Document_Remark = model.document_Remark;
                        gi.Document_Date = model.document_Date.toDate();
                        gi.Warehouse_Index = !string.IsNullOrEmpty(model.warehouse_Index) ? new Guid(model.warehouse_Index) : (Guid?)null;
                        gi.Warehouse_Id = !string.IsNullOrEmpty(model.warehouse_Index) ? model.warehouse_Id : null;
                        gi.Warehouse_Name = !string.IsNullOrEmpty(model.warehouse_Index) ? model.warehouse_Name : null;
                        gi.Update_By = model.create_by;
                        gi.Update_Date = DateTime.Now;
                    }
                }
                var transactionx = db.Database.BeginTransaction();
                try
                {
                    db.SaveChanges();
                    transactionx.Commit();
                }

                catch (Exception exy)
                {
                    msglog = State + " ex Rollback " + exy.Message.ToString();
                    olog.logging("SavePlanGR", msglog);
                    transactionx.Rollback();

                    throw exy;

                }
                var result = new actionResultGoodsIssueHeaderViewModel();
                result.items = model;
                result.resultIsUse = true;
                return result;

            }
            catch (Exception ex)
            {
                var result = new actionResultGoodsIssueHeaderViewModel();
                result.resultIsUse = false;
                result.resultMsg = ex.Message;
                return result;
            }
        }

        public actionResultPickbinbalanceViewModel pickProduct(PickbinbalanceViewModel model)
        {
            String State = "Start " + model.sJson();
            String msglog = "";
            var olog = new logtxt();
            try
            {
                var result = new actionResultPickbinbalanceViewModel();

                var resultPlanGoodsIssue = new DocumentViewModel();

                resultPlanGoodsIssue.listDocumentViewModel = new List<DocumentViewModel>();

                decimal? listDataplanGoodsIssueItem = 0;

                decimal sumqty = 0;

                if (!string.IsNullOrEmpty(model.ref_Document_Index) && !string.IsNullOrEmpty(model.ref_DocumentItem_Index))
                {

                    var Plan = new DocumentViewModel();

                    //Plan.document_No = model.ref_Document_No;
                    Plan.document_Index = new Guid(model.ref_Document_Index);
                    Plan.documentItem_Index = new Guid(model.ref_DocumentItem_Index);

                    resultPlanGoodsIssue.listDocumentViewModel.Add(Plan);

                    listDataplanGoodsIssueItem = utils.SendDataApi<List<PlanGoodIssueViewModelItem>>(new AppSettingConfig().GetUrl("FilterPGI"), resultPlanGoodsIssue.sJson()).FirstOrDefault().totalQty;

                    sumqty = db.IM_GoodsIssueItemLocation.Where(c => c.Ref_Document_Index == new Guid(model.ref_Document_Index) && c.Ref_DocumentItem_Index == new Guid(model.ref_DocumentItem_Index) && c.Document_Status != -1).ToList().Sum(s => s.TotalQty);
                    if ((sumqty + (model.pick * (model.unit.productconversion_Ratio ?? 1))) > listDataplanGoodsIssueItem)
                    {
                        result.resultMsg = "QTY เกิน";
                        result.resultIsUse = false;
                        return result;
                    }
                }

                var dataBinbalance = utils.SendDataApi<BinBalanceViewModel>(new AppSettingConfig().GetUrl("findBinbalance"), model.sJson());
                if (!dataBinbalance.resultIsUse)
                {
                    result.resultMsg = "";
                    result.resultIsUse = false;
                    return result;
                }
                else
                {
                    //decimal? QtyBal = dataBinbalance.binBalance_QtyBal - dataBinbalance.binBalance_QtyReserve;

                    if (!string.IsNullOrEmpty(model.unit?.productConversion_Index.ToString()))
                    {
                        model.productConversion_Ratio = model.unit.productconversion_Ratio;
                    }

                    var GoodsIssueItemLocation = new im_GoodsIssueItemLocation();
                    GoodsIssueItemLocation.GoodsIssueItemLocation_Index = Guid.NewGuid();
                    GoodsIssueItemLocation.GoodsIssue_Index = new Guid(model.goodsIssue_Index);
                    GoodsIssueItemLocation.TagItem_Index = dataBinbalance.tagItem_Index;
                    GoodsIssueItemLocation.Tag_Index = dataBinbalance.tag_Index;
                    GoodsIssueItemLocation.Tag_No = dataBinbalance.tag_No;
                    GoodsIssueItemLocation.Product_Index = dataBinbalance.product_Index;
                    GoodsIssueItemLocation.Product_Id = dataBinbalance.product_Id;
                    GoodsIssueItemLocation.Product_Name = dataBinbalance.product_Name;
                    GoodsIssueItemLocation.Product_SecondName = dataBinbalance.product_SecondName;
                    GoodsIssueItemLocation.Product_ThirdName = dataBinbalance.product_ThirdName;
                    GoodsIssueItemLocation.Product_Lot = dataBinbalance.product_Lot;
                    GoodsIssueItemLocation.ItemStatus_Index = dataBinbalance.itemStatus_Index;
                    GoodsIssueItemLocation.ItemStatus_Id = dataBinbalance.itemStatus_Id;
                    GoodsIssueItemLocation.ItemStatus_Name = dataBinbalance.itemStatus_Name;
                    GoodsIssueItemLocation.Location_Index = dataBinbalance.location_Index;
                    GoodsIssueItemLocation.Location_Id = dataBinbalance.location_Id;
                    GoodsIssueItemLocation.Location_Name = dataBinbalance.location_Name;
                    //GoodsIssueItemLocation.Qty = (Decimal)QtyBal / (Decimal)model.productConversion_Ratio;
                    //GoodsIssueItemLocation.Ratio = (Decimal)model.productConversion_Ratio;
                    //GoodsIssueItemLocation.TotalQty = (Decimal)QtyBal;
                    GoodsIssueItemLocation.QtyPlan = model.qty == null ? null : model.qty;
                    GoodsIssueItemLocation.Qty = (Decimal)model.pick;
                    //GoodsIssueItemLocation.Ratio = (Decimal)model.productConversion_Ratio;
                    //GoodsIssueItemLocation.TotalQty = (Decimal)model.pick * (Decimal)model.productConversion_Ratio;
                    GoodsIssueItemLocation.Ratio = (Decimal)model.unit.productconversion_Ratio;
                    GoodsIssueItemLocation.TotalQty = (Decimal)model.pick * (Decimal)model.unit.productconversion_Ratio;
                    GoodsIssueItemLocation.ProductConversion_Index = (Guid)model.unit.productConversion_Index;
                    GoodsIssueItemLocation.ProductConversion_Id = model.unit.productConversion_Id;
                    GoodsIssueItemLocation.ProductConversion_Name = model.unit.productConversion_Name;
                    GoodsIssueItemLocation.MFG_Date = dataBinbalance.goodsReceive_MFG_Date;
                    GoodsIssueItemLocation.EXP_Date = dataBinbalance.goodsReceive_EXP_Date;

                    model.unitWeight = dataBinbalance.binBalance_UnitWeightBal;

                    GoodsIssueItemLocation.UnitWeight = dataBinbalance.binBalance_UnitWeightBal;
                    GoodsIssueItemLocation.UnitWeight_Index = dataBinbalance.binBalance_UnitWeightBal_Index;
                    GoodsIssueItemLocation.UnitWeight_Id = dataBinbalance.binBalance_UnitWeightBal_Id;
                    GoodsIssueItemLocation.UnitWeight_Name = dataBinbalance.binBalance_UnitWeightBal_Name;
                    GoodsIssueItemLocation.UnitWeightRatio = dataBinbalance.binBalance_UnitWeightBalRatio;

                    GoodsIssueItemLocation.Weight = (model.pick ?? 0) * (dataBinbalance.binBalance_UnitWeightBal ?? 0);
                    GoodsIssueItemLocation.Weight_Index = dataBinbalance.binBalance_UnitWeightBal_Index;
                    GoodsIssueItemLocation.Weight_Id = dataBinbalance.binBalance_WeightBal_Id;
                    GoodsIssueItemLocation.Weight_Name = dataBinbalance.binBalance_UnitWeightBal_Id;
                    GoodsIssueItemLocation.WeightRatio = dataBinbalance.binBalance_UnitWeightBalRatio;

                    GoodsIssueItemLocation.UnitNetWeight = GoodsIssueItemLocation.Weight;
                    GoodsIssueItemLocation.UnitNetWeight_Index = dataBinbalance.binBalance_UnitNetWeightBal_Index;
                    GoodsIssueItemLocation.UnitNetWeight_Id = dataBinbalance.binBalance_UnitNetWeightBal_Id;
                    GoodsIssueItemLocation.UnitNetWeight_Name = dataBinbalance.binBalance_UnitNetWeightBal_Name;
                    GoodsIssueItemLocation.UnitNetWeightRatio = dataBinbalance.binBalance_UnitNetWeightBalRatio;

                    GoodsIssueItemLocation.NetWeight = (model.pick ?? 0) * GoodsIssueItemLocation.Weight;
                    GoodsIssueItemLocation.NetWeight_Index = dataBinbalance.binBalance_UnitNetWeightBal_Index;
                    GoodsIssueItemLocation.NetWeight_Id = dataBinbalance.binBalance_UnitNetWeightBal_Id;
                    GoodsIssueItemLocation.NetWeight_Name = dataBinbalance.binBalance_UnitNetWeightBal_Name;
                    GoodsIssueItemLocation.NetWeightRatio = dataBinbalance.binBalance_UnitNetWeightBalRatio;

                    GoodsIssueItemLocation.UnitGrsWeight = dataBinbalance.binBalance_UnitGrsWeightBal;
                    GoodsIssueItemLocation.UnitGrsWeight_Index = dataBinbalance.binBalance_UnitGrsWeightBal_Index;
                    GoodsIssueItemLocation.UnitGrsWeight_Id = dataBinbalance.binBalance_UnitGrsWeightBal_Id;
                    GoodsIssueItemLocation.UnitGrsWeight_Name = dataBinbalance.binBalance_UnitGrsWeightBal_Name;
                    GoodsIssueItemLocation.UnitGrsWeightRatio = dataBinbalance.binBalance_UnitGrsWeightBalRatio;

                    GoodsIssueItemLocation.GrsWeight = (model.pick ?? 0) * (dataBinbalance.binBalance_UnitGrsWeightBal ?? 0);
                    GoodsIssueItemLocation.GrsWeight_Index = dataBinbalance.binBalance_UnitGrsWeightBal_Index;
                    GoodsIssueItemLocation.GrsWeight_Id = dataBinbalance.binBalance_UnitGrsWeightBal_Id;
                    GoodsIssueItemLocation.GrsWeight_Name = dataBinbalance.binBalance_UnitGrsWeightBal_Name;
                    GoodsIssueItemLocation.GrsWeightRatio = dataBinbalance.binBalance_UnitGrsWeightBalRatio;

                    GoodsIssueItemLocation.UnitWidth = (dataBinbalance.binBalance_UnitWidthBal ?? 0);
                    GoodsIssueItemLocation.UnitWidth_Index = dataBinbalance.binBalance_UnitWidthBal_Index;
                    GoodsIssueItemLocation.UnitWidth_Id = dataBinbalance.binBalance_UnitWidthBal_Id;
                    GoodsIssueItemLocation.UnitWidth_Name = dataBinbalance.binBalance_UnitWidthBal_Name;
                    GoodsIssueItemLocation.UnitWidthRatio = dataBinbalance.binBalance_UnitWidthBalRatio;

                    GoodsIssueItemLocation.Width = (model.pick ?? 0) * (dataBinbalance.binBalance_UnitWidthBal ?? 0);
                    GoodsIssueItemLocation.Width_Index = dataBinbalance.binBalance_UnitWidthBal_Index;
                    GoodsIssueItemLocation.Width_Id = dataBinbalance.binBalance_UnitWidthBal_Id;
                    GoodsIssueItemLocation.Width_Name = dataBinbalance.binBalance_UnitWidthBal_Name;
                    GoodsIssueItemLocation.WidthRatio = dataBinbalance.binBalance_UnitWidthBalRatio;

                    GoodsIssueItemLocation.UnitLength = (dataBinbalance.binBalance_UnitLengthBal ?? 0);
                    GoodsIssueItemLocation.UnitLength_Index = dataBinbalance.binBalance_UnitLengthBal_Index;
                    GoodsIssueItemLocation.UnitLength_Id = dataBinbalance.binBalance_UnitLengthBal_Id;
                    GoodsIssueItemLocation.UnitLength_Name = dataBinbalance.binBalance_UnitLengthBal_Name;
                    GoodsIssueItemLocation.UnitLengthRatio = dataBinbalance.binBalance_UnitLengthBalRatio;

                    GoodsIssueItemLocation.Length = (model.pick ?? 0) * (dataBinbalance.binBalance_UnitLengthBal ?? 0);
                    GoodsIssueItemLocation.Length_Index = dataBinbalance.binBalance_UnitLengthBal_Index;
                    GoodsIssueItemLocation.Length_Id = dataBinbalance.binBalance_UnitLengthBal_Id;
                    GoodsIssueItemLocation.Length_Name = dataBinbalance.binBalance_UnitLengthBal_Name;
                    GoodsIssueItemLocation.LengthRatio = dataBinbalance.binBalance_UnitLengthBalRatio;

                    GoodsIssueItemLocation.UnitHeight = (dataBinbalance.binBalance_UnitHeightBal ?? 0);
                    GoodsIssueItemLocation.UnitHeight_Index = dataBinbalance.binBalance_UnitHeightBal_Index;
                    GoodsIssueItemLocation.UnitHeight_Id = dataBinbalance.binBalance_UnitHeightBal_Id;
                    GoodsIssueItemLocation.UnitHeight_Name = dataBinbalance.binBalance_UnitHeightBal_Name;
                    GoodsIssueItemLocation.UnitHeightRatio = dataBinbalance.binBalance_UnitHeightBalRatio;

                    GoodsIssueItemLocation.Height = (model.pick ?? 0) * (dataBinbalance.binBalance_UnitHeightBal ?? 0);
                    GoodsIssueItemLocation.Height_Index = dataBinbalance.binBalance_UnitHeightBal_Index;
                    GoodsIssueItemLocation.Height_Id = dataBinbalance.binBalance_UnitHeightBal_Id;
                    GoodsIssueItemLocation.Height_Name = dataBinbalance.binBalance_UnitHeightBal_Name;
                    GoodsIssueItemLocation.HeightRatio = dataBinbalance.binBalance_UnitHeightBalRatio;

                    GoodsIssueItemLocation.UnitVolume = (dataBinbalance.binBalance_UnitWidthBal ?? 0) * (dataBinbalance.binBalance_UnitLengthBal ?? 0) * (dataBinbalance.binBalance_UnitHeightBal ?? 0);
                    GoodsIssueItemLocation.Volume = (model.pick ?? 0) * GoodsIssueItemLocation.UnitVolume;

                    GoodsIssueItemLocation.UnitPrice = dataBinbalance.unitPrice ?? 0;
                    GoodsIssueItemLocation.UnitPrice_Index = dataBinbalance.unitPrice_Index;
                    GoodsIssueItemLocation.UnitPrice_Id = dataBinbalance.unitPrice_Id;
                    GoodsIssueItemLocation.UnitPrice_Name = dataBinbalance.unitPrice_Name;
                    GoodsIssueItemLocation.Price = (model.pick ?? 0) * (dataBinbalance.unitPrice ?? 0);
                    GoodsIssueItemLocation.Price_Index = dataBinbalance.unitPrice_Index;
                    GoodsIssueItemLocation.Price_Id = dataBinbalance.unitPrice_Id;
                    GoodsIssueItemLocation.Price_Name = dataBinbalance.unitPrice_Name;

                    //GoodsIssueItemLocation.Weight = (Decimal)dataBinbalance.binBalance_WeightBal; //((Decimal)model.pick * (Decimal)dataBinbalance.binBalance_WeightBegin) / (Decimal)dataBinbalance.binBalance_QtyBegin;

                    //GoodsIssueItemLocation.Volume = (Decimal)dataBinbalance.binBalance_VolumeBal;

                    GoodsIssueItemLocation.Document_Status = -2;

                    GoodsIssueItemLocation.Ref_Process_Index = new Guid("22744590-55D8-4448-88EF-5997C252111F");  // PLAN GI Process

                    GoodsIssueItemLocation.GoodsReceiveItem_Index = dataBinbalance.goodsReceiveItem_Index;
                    GoodsIssueItemLocation.Create_By = model.create_By;
                    GoodsIssueItemLocation.Create_Date = DateTime.Now;
                    GoodsIssueItemLocation.Ref_Document_Index = !string.IsNullOrEmpty(model.ref_Document_Index) ? new Guid(model.ref_Document_Index) : (Guid?)null;
                    GoodsIssueItemLocation.Ref_Document_No = model.ref_Document_No;
                    GoodsIssueItemLocation.Ref_DocumentItem_Index = !string.IsNullOrEmpty(model.ref_DocumentItem_Index) ? new Guid(model.ref_DocumentItem_Index) : (Guid?)null;
                    GoodsIssueItemLocation.Ref_Document_LineNum = model.ref_Document_LineNum;
                    GoodsIssueItemLocation.BinBalance_Index = dataBinbalance.binBalance_Index;
                    GoodsIssueItemLocation.GoodsIssue_No = model.goodsIssue_No;
                    GoodsIssueItemLocation.ERP_Location = dataBinbalance?.erp_Location;

                    //db.IM_GoodsIssueItemLocation.Add(GoodsIssueItemLocation);

                    //var transaction = db.Database.BeginTransaction(IsolationLevel.Serializable);
                    //try
                    //{
                    //    db.SaveChanges();
                    //    transaction.Commit();
                    //}
                    //catch (Exception exy)
                    //{
                    //    msglog = State + " ex Rollback " + exy.Message.ToString();
                    //    olog.logging("pickGI", msglog);
                    //    transaction.Rollback();
                    //    throw exy;
                    //}

                    model.goodsIssue_Index = GoodsIssueItemLocation.GoodsIssue_Index.ToString();
                    model.goodsIssueItemLocation_Index = GoodsIssueItemLocation.GoodsIssueItemLocation_Index.ToString();
                    model.goodsIssue_No = model.goodsIssue_No;
                    model.Process_Index = "22744590-55D8-4448-88EF-5997C252111F";
                    //model.GIIL = GoodsIssueItemLocation;
                    model.goodsReceive_Index = dataBinbalance?.goodsReceive_Index.ToString();
                    model.goodsReceive_No = dataBinbalance.goodsReceive_No;
                    model.goodsReceive_date = dataBinbalance?.goodsReceive_Date.toString();

                    model.productConversion_Ratio = model.unit.productconversion_Ratio;

                    var insetBinRe = utils.SendDataApi<actionResultPickbinbalanceViewModel>(new AppSettingConfig().GetUrl("pickProduct"), model.sJson());
                    if (insetBinRe.resultIsUse)
                    {
                        model.binCardReserve_Index = insetBinRe.items?.binCardReserve_Index;
                        //model.binCard_Index = insetBinRe.items?.binCard_Index;

                        //var sumqty2 = db.IM_GoodsIssueItemLocation.Where(c => c.Ref_Document_Index == new Guid(model.ref_Document_Index) && c.Ref_DocumentItem_Index == new Guid(model.ref_DocumentItem_Index)).ToList().Sum(s => s.TotalQty);
                        if ((sumqty + model.pick) == listDataplanGoodsIssueItem)
                        {
                            if (!string.IsNullOrEmpty(model.ref_DocumentItem_Index))
                            {
                                var List = new DocumentViewModel();

                                var ListPlanGiRunWave = new List<DocumentViewModel>();

                                var PlanGiRunWaveitem = new DocumentViewModel();
                                PlanGiRunWaveitem.documentItem_Index = new Guid(model.ref_DocumentItem_Index);
                                PlanGiRunWaveitem.whereDocument_Status = 0;
                                PlanGiRunWaveitem.document_Status = 1;

                                ListPlanGiRunWave.Add(PlanGiRunWaveitem);

                                List.listDocumentViewModel = ListPlanGiRunWave;

                                var UpdatePGII = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("UpdatePGII"), List.sJson());
                            }

                            var pgii = db.IM_PlanGoodsIssueItem.Where(c => c.PlanGoodsIssue_Index == new Guid(model.ref_Document_Index) && c.Document_Status == 0).Count();
                            if (pgii == 0)
                            {
                                var pgi = db.IM_PlanGoodsIssue.Where(c => c.PlanGoodsIssue_Index == new Guid(model.ref_Document_Index)).ToList();
                                foreach (var p in pgi)
                                {
                                    p.Document_Status = 3;
                                }
                            }
                        }

                        var transaction2 = db.Database.BeginTransaction(IsolationLevel.Serializable);
                        try
                        {
                            db.IM_GoodsIssueItemLocation.Add(GoodsIssueItemLocation);
                            db.SaveChanges();
                            transaction2.Commit();
                        }
                        catch (Exception exy)
                        {
                            msglog = State + " ex Rollback " + exy.Message.ToString();
                            olog.logging("pickGI", msglog);
                            transaction2.Rollback();
                            throw exy;
                        }
                    }
                    else
                    {
                        msglog = State + " ex Rollback " + insetBinRe.resultMsg.ToString();
                        olog.logging("pickGI", msglog);
                        result.resultMsg = insetBinRe.resultMsg;
                        result.resultIsUse = false;
                        return result;
                    }
                    result.resultIsUse = true;
                    result.items = model;
                    return result;
                }
            }
            catch (Exception ex)
            {
                msglog = State + " ex Rollback " + ex.Message.ToString();
                olog.logging("pickGI", msglog);
                var result = new actionResultPickbinbalanceViewModel();
                result.resultMsg = ex.Message;
                result.resultIsUse = false;
                return result;
            }
        }

        public actionResultPickbinbalanceViewModel pickProductUnpack(PickbinbalanceViewModel model)
        {
            String State = "Start " + model.sJson();
            String msglog = "";
            var olog = new logtxt();
            try
            {
                var result = new actionResultPickbinbalanceViewModel();

                var resultPlanGoodsIssue = new DocumentViewModel();

                resultPlanGoodsIssue.listDocumentViewModel = new List<DocumentViewModel>();

                decimal? listDataplanGoodsIssueItem = 0;

                decimal sumqty = 0;

                if (!string.IsNullOrEmpty(model.ref_Document_Index) && !string.IsNullOrEmpty(model.ref_DocumentItem_Index))
                {

                    var Plan = new DocumentViewModel();

                    //Plan.document_No = model.ref_Document_No;
                    Plan.document_Index = new Guid(model.ref_Document_Index);
                    Plan.documentItem_Index = new Guid(model.ref_DocumentItem_Index);

                    resultPlanGoodsIssue.listDocumentViewModel.Add(Plan);

                    listDataplanGoodsIssueItem = utils.SendDataApi<List<PlanGoodIssueViewModelItem>>(new AppSettingConfig().GetUrl("FilterPGI"), resultPlanGoodsIssue.sJson()).FirstOrDefault().totalQty;

                    sumqty = db.IM_GoodsIssueItemLocation.Where(c => c.Ref_Document_Index == new Guid(model.ref_Document_Index) && c.Ref_DocumentItem_Index == new Guid(model.ref_DocumentItem_Index) && c.Document_Status != -1).ToList().Sum(s => s.TotalQty);
                    if ((sumqty + (model.pick * (model.unit.productconversion_Ratio ?? 1))) > listDataplanGoodsIssueItem)
                    {
                        result.resultMsg = "QTY เกิน";
                        result.resultIsUse = false;
                        return result;
                    }
                }

                var dataBinbalance = utils.SendDataApi<BinBalanceViewModel>(new AppSettingConfig().GetUrl("findBinbalance"), model.sJson());
                if (!dataBinbalance.resultIsUse)
                {
                    result.resultMsg = "";
                    result.resultIsUse = false;
                    return result;
                }
                else
                {
                    //decimal? QtyBal = dataBinbalance.binBalance_QtyBal - dataBinbalance.binBalance_QtyReserve;

                    if (!string.IsNullOrEmpty(model.unit?.productConversion_Index.ToString()))
                    {
                        model.productConversion_Ratio = model.unit.productconversion_Ratio;
                    }

                    var GoodsIssueItemLocation = new im_GoodsIssueItemLocation();
                    GoodsIssueItemLocation.GoodsIssueItemLocation_Index = Guid.NewGuid();
                    GoodsIssueItemLocation.GoodsIssue_Index = new Guid(model.goodsIssue_Index);
                    GoodsIssueItemLocation.TagItem_Index = dataBinbalance.tagItem_Index;
                    GoodsIssueItemLocation.Tag_Index = dataBinbalance.tag_Index;
                    GoodsIssueItemLocation.Tag_No = dataBinbalance.tag_No;
                    GoodsIssueItemLocation.Product_Index = dataBinbalance.product_Index;
                    GoodsIssueItemLocation.Product_Id = dataBinbalance.product_Id;
                    GoodsIssueItemLocation.Product_Name = dataBinbalance.product_Name;
                    GoodsIssueItemLocation.Product_SecondName = dataBinbalance.product_SecondName;
                    GoodsIssueItemLocation.Product_ThirdName = dataBinbalance.product_ThirdName;
                    GoodsIssueItemLocation.Product_Lot = dataBinbalance.product_Lot;
                    GoodsIssueItemLocation.ItemStatus_Index = dataBinbalance.itemStatus_Index;
                    GoodsIssueItemLocation.ItemStatus_Id = dataBinbalance.itemStatus_Id;
                    GoodsIssueItemLocation.ItemStatus_Name = dataBinbalance.itemStatus_Name;
                    GoodsIssueItemLocation.Location_Index = dataBinbalance.location_Index;
                    GoodsIssueItemLocation.Location_Id = dataBinbalance.location_Id;
                    GoodsIssueItemLocation.Location_Name = dataBinbalance.location_Name;
                    //GoodsIssueItemLocation.Qty = (Decimal)QtyBal / (Decimal)model.productConversion_Ratio;
                    //GoodsIssueItemLocation.Ratio = (Decimal)model.productConversion_Ratio;
                    //GoodsIssueItemLocation.TotalQty = (Decimal)QtyBal;
                    GoodsIssueItemLocation.QtyPlan = model.qty == null ? null : model.qty;
                    GoodsIssueItemLocation.Qty = (Decimal)model.pick;
                    //GoodsIssueItemLocation.Ratio = (Decimal)model.productConversion_Ratio;
                    //GoodsIssueItemLocation.TotalQty = (Decimal)model.pick * (Decimal)model.productConversion_Ratio;
                    GoodsIssueItemLocation.Ratio = (Decimal)model.unit.productconversion_Ratio;
                    GoodsIssueItemLocation.TotalQty = (Decimal)model.pick * (Decimal)model.unit.productconversion_Ratio;
                    GoodsIssueItemLocation.ProductConversion_Index = (Guid)model.unit.productConversion_Index;
                    GoodsIssueItemLocation.ProductConversion_Id = model.unit.productConversion_Id;
                    GoodsIssueItemLocation.ProductConversion_Name = model.unit.productConversion_Name;
                    GoodsIssueItemLocation.MFG_Date = dataBinbalance.goodsReceive_MFG_Date;
                    GoodsIssueItemLocation.EXP_Date = dataBinbalance.goodsReceive_EXP_Date;

                    model.unitWeight = dataBinbalance.binBalance_UnitWeightBal;

                    GoodsIssueItemLocation.UnitWeight = dataBinbalance.binBalance_UnitWeightBal;
                    GoodsIssueItemLocation.UnitWeight_Index = dataBinbalance.binBalance_UnitWeightBal_Index;
                    GoodsIssueItemLocation.UnitWeight_Id = dataBinbalance.binBalance_UnitWeightBal_Id;
                    GoodsIssueItemLocation.UnitWeight_Name = dataBinbalance.binBalance_UnitWeightBal_Name;
                    GoodsIssueItemLocation.UnitWeightRatio = dataBinbalance.binBalance_UnitWeightBalRatio;

                    GoodsIssueItemLocation.Weight = (model.pick ?? 0) * (dataBinbalance.binBalance_UnitWeightBal ?? 0);
                    GoodsIssueItemLocation.Weight_Index = dataBinbalance.binBalance_UnitWeightBal_Index;
                    GoodsIssueItemLocation.Weight_Id = dataBinbalance.binBalance_WeightBal_Id;
                    GoodsIssueItemLocation.Weight_Name = dataBinbalance.binBalance_UnitWeightBal_Id;
                    GoodsIssueItemLocation.WeightRatio = dataBinbalance.binBalance_UnitWeightBalRatio;

                    GoodsIssueItemLocation.UnitNetWeight = GoodsIssueItemLocation.Weight;
                    GoodsIssueItemLocation.UnitNetWeight_Index = dataBinbalance.binBalance_UnitNetWeightBal_Index;
                    GoodsIssueItemLocation.UnitNetWeight_Id = dataBinbalance.binBalance_UnitNetWeightBal_Id;
                    GoodsIssueItemLocation.UnitNetWeight_Name = dataBinbalance.binBalance_UnitNetWeightBal_Name;
                    GoodsIssueItemLocation.UnitNetWeightRatio = dataBinbalance.binBalance_UnitNetWeightBalRatio;

                    GoodsIssueItemLocation.NetWeight = (model.pick ?? 0) * GoodsIssueItemLocation.Weight;
                    GoodsIssueItemLocation.NetWeight_Index = dataBinbalance.binBalance_UnitNetWeightBal_Index;
                    GoodsIssueItemLocation.NetWeight_Id = dataBinbalance.binBalance_UnitNetWeightBal_Id;
                    GoodsIssueItemLocation.NetWeight_Name = dataBinbalance.binBalance_UnitNetWeightBal_Name;
                    GoodsIssueItemLocation.NetWeightRatio = dataBinbalance.binBalance_UnitNetWeightBalRatio;

                    GoodsIssueItemLocation.UnitGrsWeight = dataBinbalance.binBalance_UnitGrsWeightBal;
                    GoodsIssueItemLocation.UnitGrsWeight_Index = dataBinbalance.binBalance_UnitGrsWeightBal_Index;
                    GoodsIssueItemLocation.UnitGrsWeight_Id = dataBinbalance.binBalance_UnitGrsWeightBal_Id;
                    GoodsIssueItemLocation.UnitGrsWeight_Name = dataBinbalance.binBalance_UnitGrsWeightBal_Name;
                    GoodsIssueItemLocation.UnitGrsWeightRatio = dataBinbalance.binBalance_UnitGrsWeightBalRatio;

                    GoodsIssueItemLocation.GrsWeight = (model.pick ?? 0) * (dataBinbalance.binBalance_UnitGrsWeightBal ?? 0);
                    GoodsIssueItemLocation.GrsWeight_Index = dataBinbalance.binBalance_UnitGrsWeightBal_Index;
                    GoodsIssueItemLocation.GrsWeight_Id = dataBinbalance.binBalance_UnitGrsWeightBal_Id;
                    GoodsIssueItemLocation.GrsWeight_Name = dataBinbalance.binBalance_UnitGrsWeightBal_Name;
                    GoodsIssueItemLocation.GrsWeightRatio = dataBinbalance.binBalance_UnitGrsWeightBalRatio;

                    GoodsIssueItemLocation.UnitWidth = (dataBinbalance.binBalance_UnitWidthBal ?? 0);
                    GoodsIssueItemLocation.UnitWidth_Index = dataBinbalance.binBalance_UnitWidthBal_Index;
                    GoodsIssueItemLocation.UnitWidth_Id = dataBinbalance.binBalance_UnitWidthBal_Id;
                    GoodsIssueItemLocation.UnitWidth_Name = dataBinbalance.binBalance_UnitWidthBal_Name;
                    GoodsIssueItemLocation.UnitWidthRatio = dataBinbalance.binBalance_UnitWidthBalRatio;

                    GoodsIssueItemLocation.Width = (model.pick ?? 0) * (dataBinbalance.binBalance_UnitWidthBal ?? 0);
                    GoodsIssueItemLocation.Width_Index = dataBinbalance.binBalance_UnitWidthBal_Index;
                    GoodsIssueItemLocation.Width_Id = dataBinbalance.binBalance_UnitWidthBal_Id;
                    GoodsIssueItemLocation.Width_Name = dataBinbalance.binBalance_UnitWidthBal_Name;
                    GoodsIssueItemLocation.WidthRatio = dataBinbalance.binBalance_UnitWidthBalRatio;

                    GoodsIssueItemLocation.UnitLength = (dataBinbalance.binBalance_UnitLengthBal ?? 0);
                    GoodsIssueItemLocation.UnitLength_Index = dataBinbalance.binBalance_UnitLengthBal_Index;
                    GoodsIssueItemLocation.UnitLength_Id = dataBinbalance.binBalance_UnitLengthBal_Id;
                    GoodsIssueItemLocation.UnitLength_Name = dataBinbalance.binBalance_UnitLengthBal_Name;
                    GoodsIssueItemLocation.UnitLengthRatio = dataBinbalance.binBalance_UnitLengthBalRatio;

                    GoodsIssueItemLocation.Length = (model.pick ?? 0) * (dataBinbalance.binBalance_UnitLengthBal ?? 0);
                    GoodsIssueItemLocation.Length_Index = dataBinbalance.binBalance_UnitLengthBal_Index;
                    GoodsIssueItemLocation.Length_Id = dataBinbalance.binBalance_UnitLengthBal_Id;
                    GoodsIssueItemLocation.Length_Name = dataBinbalance.binBalance_UnitLengthBal_Name;
                    GoodsIssueItemLocation.LengthRatio = dataBinbalance.binBalance_UnitLengthBalRatio;

                    GoodsIssueItemLocation.UnitHeight = (dataBinbalance.binBalance_UnitHeightBal ?? 0);
                    GoodsIssueItemLocation.UnitHeight_Index = dataBinbalance.binBalance_UnitHeightBal_Index;
                    GoodsIssueItemLocation.UnitHeight_Id = dataBinbalance.binBalance_UnitHeightBal_Id;
                    GoodsIssueItemLocation.UnitHeight_Name = dataBinbalance.binBalance_UnitHeightBal_Name;
                    GoodsIssueItemLocation.UnitHeightRatio = dataBinbalance.binBalance_UnitHeightBalRatio;

                    GoodsIssueItemLocation.Height = (model.pick ?? 0) * (dataBinbalance.binBalance_UnitHeightBal ?? 0);
                    GoodsIssueItemLocation.Height_Index = dataBinbalance.binBalance_UnitHeightBal_Index;
                    GoodsIssueItemLocation.Height_Id = dataBinbalance.binBalance_UnitHeightBal_Id;
                    GoodsIssueItemLocation.Height_Name = dataBinbalance.binBalance_UnitHeightBal_Name;
                    GoodsIssueItemLocation.HeightRatio = dataBinbalance.binBalance_UnitHeightBalRatio;

                    GoodsIssueItemLocation.UnitVolume = (dataBinbalance.binBalance_UnitWidthBal ?? 0) * (dataBinbalance.binBalance_UnitLengthBal ?? 0) * (dataBinbalance.binBalance_UnitHeightBal ?? 0);
                    GoodsIssueItemLocation.Volume = (model.pick ?? 0) * GoodsIssueItemLocation.UnitVolume;

                    GoodsIssueItemLocation.UnitPrice = dataBinbalance.unitPrice ?? 0;
                    GoodsIssueItemLocation.UnitPrice_Index = dataBinbalance.unitPrice_Index;
                    GoodsIssueItemLocation.UnitPrice_Id = dataBinbalance.unitPrice_Id;
                    GoodsIssueItemLocation.UnitPrice_Name = dataBinbalance.unitPrice_Name;
                    GoodsIssueItemLocation.Price = (model.pick ?? 0) * (dataBinbalance.unitPrice ?? 0);
                    GoodsIssueItemLocation.Price_Index = dataBinbalance.unitPrice_Index;
                    GoodsIssueItemLocation.Price_Id = dataBinbalance.unitPrice_Id;
                    GoodsIssueItemLocation.Price_Name = dataBinbalance.unitPrice_Name;

                    //GoodsIssueItemLocation.Weight = (Decimal)dataBinbalance.binBalance_WeightBal; //((Decimal)model.pick * (Decimal)dataBinbalance.binBalance_WeightBegin) / (Decimal)dataBinbalance.binBalance_QtyBegin;

                    //GoodsIssueItemLocation.Volume = (Decimal)dataBinbalance.binBalance_VolumeBal;

                    GoodsIssueItemLocation.Document_Status = -2;

                    GoodsIssueItemLocation.Ref_Process_Index = new Guid("22744590-55D8-4448-88EF-5997C252111F");  // PLAN GI Process

                    GoodsIssueItemLocation.GoodsReceiveItem_Index = dataBinbalance.goodsReceiveItem_Index;
                    GoodsIssueItemLocation.Create_By = model.create_By;
                    GoodsIssueItemLocation.Create_Date = DateTime.Now;
                    GoodsIssueItemLocation.Ref_Document_Index = !string.IsNullOrEmpty(model.ref_Document_Index) ? new Guid(model.ref_Document_Index) : (Guid?)null;
                    GoodsIssueItemLocation.Ref_Document_No = model.ref_Document_No;
                    GoodsIssueItemLocation.Ref_DocumentItem_Index = !string.IsNullOrEmpty(model.ref_DocumentItem_Index) ? new Guid(model.ref_DocumentItem_Index) : (Guid?)null;
                    GoodsIssueItemLocation.Ref_Document_LineNum = model.ref_Document_LineNum;
                    GoodsIssueItemLocation.BinBalance_Index = dataBinbalance.binBalance_Index;
                    GoodsIssueItemLocation.GoodsIssue_No = model.goodsIssue_No;
                    GoodsIssueItemLocation.ERP_Location = dataBinbalance?.erp_Location;

                    //db.IM_GoodsIssueItemLocation.Add(GoodsIssueItemLocation);

                    //var transaction = db.Database.BeginTransaction(IsolationLevel.Serializable);
                    //try
                    //{
                    //    db.SaveChanges();
                    //    transaction.Commit();
                    //}
                    //catch (Exception exy)
                    //{
                    //    msglog = State + " ex Rollback " + exy.Message.ToString();
                    //    olog.logging("pickGI", msglog);
                    //    transaction.Rollback();
                    //    throw exy;
                    //}

                    model.goodsIssue_Index = GoodsIssueItemLocation.GoodsIssue_Index.ToString();
                    model.goodsIssueItemLocation_Index = GoodsIssueItemLocation.GoodsIssueItemLocation_Index.ToString();
                    model.goodsIssue_No = model.goodsIssue_No;
                    model.Process_Index = "22744590-55D8-4448-88EF-5997C252111F";
                    //model.GIIL = GoodsIssueItemLocation;
                    model.goodsReceive_Index = dataBinbalance?.goodsReceive_Index.ToString();
                    model.goodsReceive_No = dataBinbalance.goodsReceive_No;
                    model.goodsReceive_date = dataBinbalance?.goodsReceive_Date.toString();

                    model.productConversion_Ratio = model.unit.productconversion_Ratio;
                    model.pick = model.pick * model.unit.productconversion_Ratio;

                    var insetBinRe = utils.SendDataApi<actionResultPickbinbalanceViewModel>(new AppSettingConfig().GetUrl("pickProduct"), model.sJson());
                    if (insetBinRe.resultIsUse)
                    {
                        model.binCardReserve_Index = insetBinRe.items?.binCardReserve_Index;
                        //model.binCard_Index = insetBinRe.items?.binCard_Index;

                        //var sumqty2 = db.IM_GoodsIssueItemLocation.Where(c => c.Ref_Document_Index == new Guid(model.ref_Document_Index) && c.Ref_DocumentItem_Index == new Guid(model.ref_DocumentItem_Index)).ToList().Sum(s => s.TotalQty);
                        if ((sumqty + model.pick) == listDataplanGoodsIssueItem)
                        {
                            if (!string.IsNullOrEmpty(model.ref_DocumentItem_Index))
                            {
                                var List = new DocumentViewModel();

                                var ListPlanGiRunWave = new List<DocumentViewModel>();

                                var PlanGiRunWaveitem = new DocumentViewModel();
                                PlanGiRunWaveitem.documentItem_Index = new Guid(model.ref_DocumentItem_Index);
                                PlanGiRunWaveitem.whereDocument_Status = 0;
                                PlanGiRunWaveitem.document_Status = 1;

                                ListPlanGiRunWave.Add(PlanGiRunWaveitem);

                                List.listDocumentViewModel = ListPlanGiRunWave;

                                var UpdatePGII = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("UpdatePGII"), List.sJson());
                            }

                            var pgii = db.IM_PlanGoodsIssueItem.Where(c => c.PlanGoodsIssue_Index == new Guid(model.ref_Document_Index) && c.Document_Status == 0).Count();
                            if (pgii == 0)
                            {
                                var pgi = db.IM_PlanGoodsIssue.Where(c => c.PlanGoodsIssue_Index == new Guid(model.ref_Document_Index)).ToList();
                                foreach (var p in pgi)
                                {
                                    p.Document_Status = 3;
                                }
                            }
                        }

                        var transaction2 = db.Database.BeginTransaction(IsolationLevel.Serializable);
                        try
                        {
                            db.IM_GoodsIssueItemLocation.Add(GoodsIssueItemLocation);
                            db.SaveChanges();
                            transaction2.Commit();
                        }
                        catch (Exception exy)
                        {
                            msglog = State + " ex Rollback " + exy.Message.ToString();
                            olog.logging("pickGI", msglog);
                            transaction2.Rollback();
                            throw exy;
                        }
                    }
                    else
                    {
                        msglog = State + " ex Rollback " + insetBinRe.resultMsg.ToString();
                        olog.logging("pickGI", msglog);
                        result.resultMsg = insetBinRe.resultMsg;
                        result.resultIsUse = false;
                        return result;
                    }
                    result.resultIsUse = true;
                    result.items = model;
                    return result;
                }
            }
            catch (Exception ex)
            {
                msglog = State + " ex Rollback " + ex.Message.ToString();
                olog.logging("pickGI", msglog);
                var result = new actionResultPickbinbalanceViewModel();
                result.resultMsg = ex.Message;
                result.resultIsUse = false;
                return result;
            }
        }

        public string deletePickProduct(PickbinbalanceViewModel model)
        {
            String State = "Start";
            String msglog = "";
            var olog = new logtxt();
            try
            {
                //var PGI = new List<im_PlanGoodsIssueItem>();
                //if (!string.IsNullOrEmpty(model.ref_DocumentItem_Index) && !string.IsNullOrEmpty(model.ref_Document_Index))
                //{
                //    PGI = db.IM_PlanGoodsIssueItem.Where(c => c.PlanGoodsIssueItem_Index == new Guid(model.ref_DocumentItem_Index) && c.PlanGoodsIssue_Index == new Guid(model.ref_Document_Index)).ToList();
                //}

                var taskitem = db.IM_TaskItem.Where(c => c.Ref_DocumentItem_Index == new Guid(model.goodsIssueItemLocation_Index) && c.Ref_Document_Index == new Guid(model.goodsIssue_Index) && c.Picking_Status == 2).Count();
                if (taskitem > 0)
                {
                    return "Product Relocate Go To Staging";
                }



                var GIL = db.IM_GoodsIssueItemLocation.Where(c => c.GoodsIssueItemLocation_Index == new Guid(model.goodsIssueItemLocation_Index) && c.GoodsIssue_Index == new Guid(model.goodsIssue_Index)).ToList();

                var transaction = db.Database.BeginTransaction(IsolationLevel.Serializable);
                try
                {
                    if (!string.IsNullOrEmpty(model.ref_DocumentItem_Index) && !string.IsNullOrEmpty(model.ref_Document_Index))
                    {
                        if (model.documentType_Index.ToLower() != "d7c596e9-bdff-4759-91db-fcec709e16b8")
                        {
                            var modelPGI = new { planGoodsIssueItem_Index = model.ref_DocumentItem_Index, planGoodsIssue_Index = model.ref_Document_Index };
                            var updatePGIIStatus = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("updateStatusPlanGIRunWave"), modelPGI.sJson());
                        }
                        else
                        {
                            var modelPGI = new { BOMItem_Index = model.ref_DocumentItem_Index, BOM_Index = model.ref_Document_Index };
                            var updatePGIIStatus = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("updateStatusBomRunWave"), modelPGI.sJson());
                        }
                    }
                    model.ref_Document_Index = model.goodsIssue_Index;
                    model.ref_DocumentItem_Index = model.goodsIssueItemLocation_Index;
                    var updateBinCardReserveStatus = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("updateBinCardReserve"), model.sJson());

                    if (updateBinCardReserveStatus)
                    {
                        if (GIL.FirstOrDefault().Document_Status == -2)
                        {
                            db.RemoveRange(GIL);
                        }
                        else
                        {
                            GIL.FirstOrDefault().Document_Status = -1;
                            GIL.FirstOrDefault().Update_By = model.create_By;
                            GIL.FirstOrDefault().Update_Date = DateTime.Now;
                        }
                        db.SaveChanges();
                        transaction.Commit();
                        return "Success";
                    }
                    else
                    {
                        transaction.Rollback();
                        return "Error";
                    }

                }

                catch (Exception exy)
                {
                    msglog = State + " ex Rollback " + exy.Message.ToString();
                    olog.logging("deletePickProduct", msglog);
                    transaction.Rollback();
                    throw exy;
                }

            }
            catch (Exception ex)
            {
                msglog = State + " ex Rollback " + ex.Message.ToString();
                olog.logging("deletePickProduct", msglog);
                return ex.Message;
            }
        }

        public bool ListdeletePickProduct(ListPickbinbalanceViewModel model)
        {
            String State = "Start";
            String msglog = "";
            var olog = new logtxt();
            try
            {
                foreach (var m in model.items)
                {
                    var GIL = db.IM_GoodsIssueItemLocation.Where(c => c.GoodsIssueItemLocation_Index == new Guid(m.goodsIssueItemLocation_Index) && c.GoodsIssue_Index == new Guid(m.goodsIssue_Index) && c.Document_Status == -2).ToList();
                    var GI = db.IM_GoodsIssue.Find(GIL.FirstOrDefault().GoodsIssue_Index);
                    if (!string.IsNullOrEmpty(m.ref_DocumentItem_Index) && !string.IsNullOrEmpty(m.ref_Document_Index))
                    {
                        if ((GI.DocumentType_Index ?? Guid.Empty) == new Guid("D7C596E9-BDFF-4759-91DB-FCEC709E16B8"))
                        {
                            var modelPGI = new { BOMItem_Index = m.ref_DocumentItem_Index, BOM_Index = m.ref_Document_Index };
                            var updatePGIIStatus = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("updateStatusBomRunWave"), modelPGI.sJson());
                        }
                        else
                        {
                            var modelPGI = new { planGoodsIssueItem_Index = m.ref_DocumentItem_Index, planGoodsIssue_Index = m.ref_Document_Index };
                            var updatePGIIStatus = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("updateStatusPlanGIRunWave"), modelPGI.sJson());
                        }
                    }
                    m.ref_Document_Index = m.goodsIssue_Index;
                    m.ref_DocumentItem_Index = m.goodsIssueItemLocation_Index;
                    var updateBinCardReserveStatus = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("updateBinCardReserve"), m.sJson());
                    if (updateBinCardReserveStatus)
                    {
                        GI.Document_Status = -3;
                        db.RemoveRange(GIL);
                    }
                }
                var transaction = db.Database.BeginTransaction();
                try
                {
                    db.SaveChanges();
                    transaction.Commit();
                }

                catch (Exception exy)
                {
                    msglog = State + " ex Rollback " + exy.Message.ToString();
                    olog.logging("deletePickProduct", msglog);
                    transaction.Rollback();
                    throw exy;
                }
                return false;
            }
            catch (Exception ex)
            {
                msglog = State + " ex Rollback " + ex.Message.ToString();
                olog.logging("deletePickProduct", msglog);
                return false;
            }
        }

        public actionResultRunWaveViewModelViewModel runwave(RunWaveFilterViewModel model)
        {
            String State = "Start";
            String msglog = "";
            var olog = new logtxt();
            var process = new Guid("2E026669-99BD-4DE0-8818-534F29F7B89D");
            var PlanGiRunWave = new List<Guid>();
            var listpgiinotinsert = new List<plangoodsissueitemViewModel>();
            try
            {
                int CheckRunwavePast = model.listGoodsIssueItemViewModel.Count();
                var result = new actionResultRunWaveViewModelViewModel();

                #region runwave status 10
                if (model.listGoodsIssueItemViewModel.Count > 0)
                {
                    foreach (var item in model.listGoodsIssueItemViewModel)
                    {
                        if (item.planGoodsIssueItem_Index != Guid.Parse("00000000-0000-0000-0000-000000000000"))
                        {
                            PlanGiRunWave.Add(item.planGoodsIssueItem_Index);
                        }
                    }
                }

                using (var db2 = new GIDbContext())
                {
                    var transaction = db2.Database.BeginTransaction(IsolationLevel.Serializable);
                    try
                    {
                        //update status 10
                        var pgi = db2.IM_PlanGoodsIssueItem.Where(c => PlanGiRunWave.Contains(c.PlanGoodsIssueItem_Index) && c.Document_Status == 0).ToList();
                        foreach (var p in pgi)
                        {
                            //p.Ref_WavePick_index = new Guid(model.goodsIssue_Index);
                            p.Document_Status = 1;
                        }
                        var GI = db2.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && (c.RunWave_Status == null || c.RunWave_Status == 0)).ToList();
                        foreach (var g in GI)
                        {
                            g.Wave_Index = new Guid(model.wave_Index);
                            g.RunWave_Status = 10;
                        }
                        db2.SaveChanges();
                        transaction.Commit();
                    }

                    catch (Exception exy)
                    {
                        msglog = State + " ex Rollback " + exy.Message.ToString();
                        olog.logging("runwave", msglog);
                        transaction.Rollback();
                        throw exy;
                    }
                }
                #endregion



                var planGIResultx = db.View_PLANWAVEV.Where(c => PlanGiRunWave.Contains(c.PlanGoodsIssueItem_Index))
                    .GroupBy(g => new
                    {
                        g.Product_Index,
                        g.Product_Id,
                        g.Product_Name,
                        g.Product_SecondName,
                        g.Product_ThirdName,
                        g.Product_Lot,
                        g.ItemStatus_Index,
                        g.ItemStatus_Id,
                        g.ItemStatus_Name,
                        g.MFG_Date,
                        g.EXP_Date,
                        g.DocumentRef_No1,
                        g.DocumentRef_No2,
                        g.DocumentRef_No3,
                        g.DocumentRef_No4,
                        g.DocumentRef_No5,
                        g.UDF_1,
                        g.UDF_2,
                        g.UDF_3,
                        g.UDF_4,
                        g.UDF_5,
                        //g.sum(TotalQty) as TotalQty,
                        //g.isnull(sum(GITotalQty), 0) as GITotalQty,
                        //g.sum(TotalQty) - isnull(sum(GITotalQty), 0)  AS QtyWave,
                        //g.ROW_NUMBER() OVER(Order by Product_Id) as RowNum,
                        g.Owner_Index,
                        g.PlanGoodsIssue_UDF_1,
                        g.PlanGoodsIssue_UDF_2,
                        g.PlanGoodsIssue_UDF_3,
                        g.PlanGoodsIssue_UDF_4,
                        g.PlanGoodsIssue_UDF_5
                    })
                    .Select(s => new
                    {
                        s.Key.Product_Index,
                        s.Key.Product_Id,
                        s.Key.Product_Name,
                        s.Key.Product_SecondName,
                        s.Key.Product_ThirdName,
                        s.Key.Product_Lot,
                        s.Key.ItemStatus_Index,
                        s.Key.ItemStatus_Id,
                        s.Key.ItemStatus_Name,
                        s.Key.MFG_Date,
                        s.Key.EXP_Date,
                        s.Key.DocumentRef_No1,
                        s.Key.DocumentRef_No2,
                        s.Key.DocumentRef_No3,
                        s.Key.DocumentRef_No4,
                        s.Key.DocumentRef_No5,
                        s.Key.UDF_1,
                        s.Key.UDF_2,
                        s.Key.UDF_3,
                        s.Key.UDF_4,
                        s.Key.UDF_5,
                        total = s.Sum(x => x.TotalQty),
                        GITotalQty = s.Sum(x => x.GITotalQty),
                        QtyWave = s.Sum(x => x.TotalQty) - s.Sum(x => x.GITotalQty),
                        //g.ROW_NUMBER() OVER(Order by Product_Id) as RowNum,
                        s.Key.Owner_Index,
                        s.Key.PlanGoodsIssue_UDF_1,
                        s.Key.PlanGoodsIssue_UDF_2,
                        s.Key.PlanGoodsIssue_UDF_3,
                        s.Key.PlanGoodsIssue_UDF_4,
                        s.Key.PlanGoodsIssue_UDF_5
                    }).ToList();

                if (planGIResultx.Count == 0)
                {
                    throw new Exception("Plan GI not found..");
                }


                //find wave template
                var jsGetWaveRule = new { process_Index = process, wave_Index = model.wave_Index };
                var getWaveRule = utils.SendDataApi<List<WaveRuleViewModel>>(new AppSettingConfig().GetUrl("getWaveRule"), jsGetWaveRule.sJson());

                if (getWaveRule.Count == 0)
                {
                    throw new Exception("Wave Template not found.");
                }


                bool isUseAttribute = false;

                foreach (var waveRule in getWaveRule)
                {
                    var jsgetViewWaveTemplate = new { process_Index = process, wave_Index = model.wave_Index, rule_Index = waveRule.rule_Index };
                    var getViewWaveTemplate = utils.SendDataApi<List<WaveTemplateViewModel>>(new AppSettingConfig().GetUrl("getViewWaveTemplate"), jsgetViewWaveTemplate.sJson());

                    var planGIWaveResult = db.View_PLANWAVEbyPLANGIV2.AsQueryable();

                    planGIWaveResult = planGIWaveResult.Where(c => PlanGiRunWave.Contains(c.PlanGoodsIssueItem_Index));

                    #region for RuleSource
                    var RuleSourceList = getViewWaveTemplate.Where(c => c.isSource == 1 && c.isSearch == 1).ToList();

                    foreach (var itemRuleSourceList in RuleSourceList)
                    {
                        if (itemRuleSourceList.ruleConditionOperation == "IN")
                        {
                            var dataarray = itemRuleSourceList.ruleCondition_Param.Replace("'", "").Split(',');
                            if (itemRuleSourceList.ruleConditionField_Name == "DocumentType_Id")
                            {
                                planGIWaveResult = planGIWaveResult.Where(c => dataarray.Contains(c.DocumentType_Id));
                            }
                            if (itemRuleSourceList.ruleConditionField_Name == "Owner_Id")
                            {
                                planGIWaveResult = planGIWaveResult.Where(c => dataarray.Contains(c.Owner_Id));
                            }
                            //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " IN (" + itemRuleSourceList.ruleCondition_Param + ") ";
                            //var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            //var predicate = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>(
                            //    Expression.Call(
                            //        Expression.PropertyOrField(param, itemRuleSourceList.ruleConditionField_Name),
                            //        "Contains", null, Expression.Constant(itemRuleSourceList.ruleCondition_Param)
                            //    ), param);
                            //planGIWaveResult = planGIWaveResult.Where(predicate);
                        }
                        else if (itemRuleSourceList.ruleConditionOperation == "=")
                        {
                            if (itemRuleSourceList.ruleConditionField_Name == "UseAttribute")
                            {
                                if (itemRuleSourceList.ruleCondition_Param.ToString().ToUpper() == "TRUE")
                                {
                                    isUseAttribute = true;
                                }
                                else
                                {
                                    isUseAttribute = false;
                                }

                            }
                            else
                            {
                                //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " = '" + itemRuleSourceList.ruleCondition_Param + "' ";
                                var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                                var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.Equal(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
                                    , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                                planGIWaveResult = planGIWaveResult.Where(lambda);
                            }


                        }
                        else if (itemRuleSourceList.ruleConditionOperation == ">")
                        {
                            //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " > '" + itemRuleSourceList.ruleCondition_Param + "' ";
                            var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.GreaterThan(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
                                , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            planGIWaveResult = planGIWaveResult.Where(lambda);

                        }
                        else if (itemRuleSourceList.ruleConditionOperation == "<")
                        {
                            //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " < '" + itemRuleSourceList.ruleCondition_Param + "' ";
                            var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.LessThan(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
                                , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            planGIWaveResult = planGIWaveResult.Where(lambda);
                        }
                        else if (itemRuleSourceList.ruleConditionOperation == "!=")
                        {
                            //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " != '" + itemRuleSourceList.ruleCondition_Param + "' ";
                            var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.NotEqual(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
                                , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            planGIWaveResult = planGIWaveResult.Where(lambda);
                        }
                        else if (itemRuleSourceList.ruleConditionOperation == ">=")
                        {
                            //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " >= '" + itemRuleSourceList.ruleCondition_Param + "' ";
                            var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.GreaterThanOrEqual(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
                                , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            planGIWaveResult = planGIWaveResult.Where(lambda);
                        }
                        else if (itemRuleSourceList.ruleConditionOperation == "<=")
                        {
                            //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " <= '" + itemRuleSourceList.ruleCondition_Param + "' ";
                            var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.LessThanOrEqual(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
                                , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            planGIWaveResult = planGIWaveResult.Where(lambda);
                        }
                        else if (itemRuleSourceList.ruleConditionOperation == "Like")
                        {
                            //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " Like '" + itemRuleSourceList.ruleCondition_Param + "' ";
                            var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            var predicate = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>(
                                Expression.Call(
                                    Expression.PropertyOrField(param, itemRuleSourceList.ruleConditionField_Name),
                                    "Contains", null, Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""))
                                ), param);
                            planGIWaveResult = planGIWaveResult.Where(predicate);
                        }
                    }
                    #endregion

                    #region for RuleDesSort
                    var RuleSourceSortList = getViewWaveTemplate.Where(c => c.isSource == 1 && c.isSort == 1).ToList();

                    string setWhereSourceSort = "";

                    if (RuleSourceSortList.Count > 0)
                    {
                        setWhereSourceSort += " Order by ";
                    }

                    int iRowsSourceSort = 0;
                    foreach (var itemRuleSourceSortList in RuleSourceSortList)
                    {
                        if (iRowsSourceSort == 0)
                        {
                            setWhereSourceSort += itemRuleSourceSortList.ruleConditionField_Name + ' ' + itemRuleSourceSortList.ruleCondition_Param;
                            var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, string>>(Expression.Property(param, itemRuleSourceSortList.ruleConditionField_Name), param);
                            if (itemRuleSourceSortList.ruleCondition_Param.ToUpper() == "DESC")
                            {
                                planGIWaveResult = planGIWaveResult.OrderByDescending(lambda);
                            }
                            else /*if (itemRuleSourceSortList.ruleCondition_Param.ToUpper() == "DESC")*/
                            {
                                planGIWaveResult = planGIWaveResult.OrderBy(lambda);
                            }
                        }
                        else
                        {
                            setWhereSourceSort += "," + itemRuleSourceSortList.ruleConditionField_Name + ' ' + itemRuleSourceSortList.ruleCondition_Param;
                            var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, string>>(Expression.Property(param, itemRuleSourceSortList.ruleConditionField_Name), param);
                            if (itemRuleSourceSortList.ruleCondition_Param.ToUpper() == "DESC")
                            {
                                planGIWaveResult = planGIWaveResult.OrderByDescending(lambda);
                            }
                            else /*if (itemRuleSourceSortList.ruleCondition_Param.ToUpper() == "DESC")*/
                            {
                                planGIWaveResult = planGIWaveResult.OrderBy(lambda);
                            }
                        }
                        iRowsSourceSort = iRowsSourceSort + 1;

                    }
                    #endregion


                    String SqlWhere = "";
                    var planGIWaveResult2 = planGIWaveResult.ToList();

                    if (planGIWaveResult2.Count != PlanGiRunWave.Count)
                    {
                        var listpgii = PlanGiRunWave.Where(c => !planGIWaveResult2.Select(s => s.PlanGoodsIssueItem_Index).Contains(c)).ToList();

                        if (listpgii.Count != 0)
                        {
                            using (var updatepginotProduct = new GIDbContext())
                            {
                                var transaction = updatepginotProduct.Database.BeginTransaction(IsolationLevel.Serializable);
                                try
                                {
                                    var pgii = model.listGoodsIssueItemViewModel.Where(c => listpgii.Contains(c.planGoodsIssueItem_Index)).ToList();
                                    foreach (var resultpgii in pgii)
                                    {
                                        listpgiinotinsert.Add(resultpgii);
                                    }

                                    var pgi = updatepginotProduct.IM_PlanGoodsIssueItem.Where(c => listpgii.Contains(c.PlanGoodsIssueItem_Index) && c.Document_Status == 1).ToList();
                                    foreach (var p in pgi)
                                    {
                                        p.Document_Status = 0;
                                    }
                                    updatepginotProduct.SaveChanges();
                                    transaction.Commit();
                                }

                                catch (Exception exy)
                                {
                                    msglog = State + " ex Rollback " + exy.Message.ToString();
                                    olog.logging("UpdateUserAssign", msglog);
                                    transaction.Rollback();
                                    throw exy;
                                }
                            }
                        }
                    }

                    // LOOP Group SUM PLAN GI
                    foreach (var item in planGIResultx)
                    {
                        var planGIWaveResult3 = planGIWaveResult2.AsQueryable();
                        var strwhere = new getViewBinbalanceViewModel();
                        //GET Condition  From Plan GI
                        #region query Plag Gi
                        if (item.Owner_Index.ToString() != "")
                        {
                            //SqlWhere += " And Convert(Nvarchar(200) ,Owner_Index) =  '" + item.Owner_Index.ToString() + "' ";
                            //SqlWhere += " And Owner_Index =  '" + item.Owner_Index + "' ";
                            strwhere.Owner_Index = item.Owner_Index;
                            planGIWaveResult3 = planGIWaveResult3.Where(c => c.Owner_Index == item.Owner_Index);
                        }
                        if (item.Product_Index.ToString() != "")
                        {
                            //SqlWhere += " And Convert(Nvarchar(200) , Product_Index ) = '" + item.Product_Index.ToString() + "' ";
                            //SqlWhere += " And Product_Index  = '" + item.Product_Index + "' ";
                            strwhere.Product_Index = item.Product_Index;
                            planGIWaveResult3 = planGIWaveResult3.Where(c => c.Product_Index == item.Product_Index);
                        }

                        //if (item.Product_Lot != null)
                        //{
                        //    if (item.Product_Lot.ToString() != "")
                        //    {
                        //        //SqlWhere += " And Product_Lot = '" + item.Product_Lot.ToString() + "' ";
                        //        strwhere.Product_Lot = item.Product_Lot;
                        //        planGIWaveResult3 = planGIWaveResult3.Where(c => c.Product_Lot == item.Product_Lot);
                        //    }
                        //}
                        if (item.ItemStatus_Index.ToString() != "")
                        {
                            //SqlWhere += " And Convert(Nvarchar(200) ,ItemStatus_Index) =  '" + item.ItemStatus_Index.ToString() + "' ";
                            //SqlWhere += " And ItemStatus_Index =  '" + item.ItemStatus_Index + "' ";
                            strwhere.ItemStatus_Index = item.ItemStatus_Index;
                            planGIWaveResult3 = planGIWaveResult3.Where(c => c.ItemStatus_Index == item.ItemStatus_Index);
                        }
                        if (item.MFG_Date != null)
                        {
                            if (item.MFG_Date.ToString() != "")
                            {
                                //strwhere.MFG_Date = item.MFG_Date;
                                // SqlWhere += " And MFG_Date = @MFG_Date ";
                            }
                        }
                        if (item.EXP_Date != null)
                        {
                            if (item.EXP_Date.ToString() != "")
                            {
                                //strwhere.EXP_Date = item.EXP_Date;
                                //SqlWhere += " And EXP_Date = @EXP_Date ";
                            }
                        }
                        if (isUseAttribute == true)
                        {
                            // ADD UDF 1-5 
                            strwhere.isUseAttribute = isUseAttribute;
                            if (item.UDF_1 != null)
                            {
                                //SqlWhere += " And Isnull(UDF_1,'') = '" + item.UDF_1.ToString() + "'";
                                strwhere.UDF_1 = item.UDF_1;
                                planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_1 == item.UDF_1);
                            }

                            if (item.UDF_2 != null)
                            {
                                //SqlWhere += " And  Isnull( UDF_2,'') = '" + item.UDF_2.ToString() + "'";
                                strwhere.UDF_2 = item.UDF_2;
                                planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_2 == item.UDF_2);
                            }

                            if (item.UDF_3 != null)
                            {
                                //SqlWhere += " And  Isnull(UDF_3,'') = '" + item.UDF_3.ToString() + "'";
                                strwhere.UDF_3 = item.UDF_3;
                                planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_3 == item.UDF_3);
                            }

                            if (item.UDF_4 != null)
                            {
                                //SqlWhere += " And  Isnull(UDF_4,'') = '" + item.UDF_4.ToString() + "'";
                                strwhere.UDF_4 = item.UDF_4;
                                planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_4 == item.UDF_4);
                            }

                            if (item.UDF_5 != null)
                            {
                                //SqlWhere += " And  Isnull(UDF_5,'') = '" + item.UDF_5.ToString() + "'";
                                strwhere.UDF_5 = item.UDF_5;
                                planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_5 == item.UDF_5);
                            }
                        }
                        #endregion

                        //planGIWaveResult = planGIWaveResult.Where(setWhereSource);

                        if (planGIWaveResult3.ToList().Count < 1)
                        {
                            continue;
                        }
                        #region update isuse and runwave status 20
                        strwhere.isuse = model.goodsIssue_Index;
                        var listDataBinbalance = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("updateIsuseViewBinbalance"), strwhere.sJson());
                        if (listDataBinbalance)
                        {
                            using (var db3 = new GIDbContext())
                            {
                                var transaction = db3.Database.BeginTransaction(IsolationLevel.Serializable);
                                try
                                {
                                    var GI = db3.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 10).ToList();
                                    foreach (var g in GI)
                                    {
                                        g.RunWave_Status = 20;
                                    }
                                    db3.SaveChanges();
                                    transaction.Commit();
                                }
                                catch (Exception exy)
                                {
                                    msglog = State + " ex Rollback " + exy.Message.ToString();
                                    olog.logging("runwave", msglog);
                                    transaction.Rollback();
                                    throw exy;
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Update IsUse Error");
                        }
                        #endregion

                        // Assign Qty for  wave Loop

                        decimal? QtyPlanGIRemian = 0;
                        foreach (var itemPlanGI in planGIWaveResult3)
                        {
                            var ListGoodsIssueItemLocation = new List<im_GoodsIssueItemLocation>();

                            QtyPlanGIRemian = itemPlanGI.TotalQty - itemPlanGI.GITotalQty;
                            //chkBinCardReserve = GIL
                            var chkGIL = db.IM_GoodsIssueItemLocation.Where(c => c.Ref_Document_Index == itemPlanGI.PlanGoodsIssue_Index && c.Ref_DocumentItem_Index == itemPlanGI.PlanGoodsIssueItem_Index && c.Document_Status != -1).ToList();
                            if (chkGIL.Count() != 0)
                            {

                                var chkBinCardReserve = new PickbinbalanceViewModel();
                                chkBinCardReserve.ref_Document_Index = chkGIL.FirstOrDefault().GoodsIssue_Index.ToString();
                                chkBinCardReserve.ref_DocumentItem_Index = chkGIL.FirstOrDefault().GoodsIssueItemLocation_Index.ToString();
                                var countBinCardReserve = utils.SendDataApi<int>(new AppSettingConfig().GetUrl("chkBinCardReserve"), chkBinCardReserve.sJson());
                                if (chkGIL.Count() != countBinCardReserve)
                                {
                                    using (var db7 = new GIDbContext())
                                    {
                                        var transaction = db7.Database.BeginTransaction(IsolationLevel.Serializable);
                                        try
                                        {
                                            db7.RemoveRange(chkGIL);
                                            db7.SaveChanges();
                                            transaction.Commit();
                                        }

                                        catch (Exception exy)
                                        {
                                            msglog = State + " ex Rollback " + exy.Message.ToString();
                                            olog.logging("runwave", msglog);
                                            transaction.Rollback();
                                            throw exy;
                                        }
                                    }
                                    QtyPlanGIRemian = itemPlanGI.TotalQty - 0;
                                }
                            }

                            #region view_waveBinbalance2
                            strwhere.isuse = model.goodsIssue_Index;
                            strwhere.isActive = true;
                            var listDataBinbalance2 = utils.SendDataApi<List<BinBalanceViewModel>>(new AppSettingConfig().GetUrl("getViewBinbalance"), strwhere.sJson());
                            var listDataLocation2 = utils.SendDataApi<List<locationViewModel>>(new AppSettingConfig().GetUrl("getLocationMaster"), new { }.sJson());
                            var listDataProduct2 = utils.SendDataApi<List<ProductViewModel>>(new AppSettingConfig().GetUrl("getProductMaster"), new { }.sJson());

                            var View_WaveBinBalance2 = (from BB in listDataBinbalance2
                                                        join LC in listDataLocation2 on BB.location_Index equals LC.location_Index into gj
                                                        from L in gj.DefaultIfEmpty()
                                                        join Prd in listDataProduct2 on BB.product_Index equals Prd.product_Index
                                                        where !(L.locationType_Index == Guid.Parse("14C5F85D-137D-470E-8C70-C1E535005DC3") || L.locationType_Index == Guid.Parse("2E9338D3-0931-4E36-B240-782BF9508641"))
                                                        && (BB.goodsReceive_EXP_Date != null ? BB.goodsReceive_EXP_Date.sParse<DateTime>().Subtract(DateTime.Now.AddDays(-1)).Days : 1) > (Prd.ProductShelfLife_D ?? 0)
                                                        select new View_WaveBinBalanceViewModel
                                                        {
                                                            binBalance_Index = BB.binBalance_Index.ToString(),
                                                            owner_Index = BB.owner_Index.ToString(),
                                                            owner_Id = BB.owner_Id,
                                                            owner_Name = BB.owner_Name,
                                                            location_Index = BB.location_Index.ToString(),
                                                            location_Id = BB.location_Id,
                                                            location_Name = BB.location_Name,
                                                            goodsReceive_Index = BB.goodsReceive_Index.ToString(),
                                                            goodsReceive_No = BB.goodsReceive_No,
                                                            goodsReceive_Date = BB.goodsReceive_Date.ToString(),
                                                            goodsReceiveItem_Index = BB.goodsReceiveItem_Index.ToString(),
                                                            goodsReceiveItemLocation_Index = BB.goodsReceiveItemLocation_Index.ToString(),
                                                            tagItem_Index = BB.tagItem_Index.ToString(),
                                                            tag_Index = BB.tag_Index.ToString(),
                                                            tag_No = BB.tag_No,
                                                            product_Index = BB.product_Index.ToString(),
                                                            product_Id = BB.product_Id,
                                                            product_Name = BB.product_Name,
                                                            product_SecondName = BB.product_SecondName,
                                                            product_ThirdName = BB.product_ThirdName,
                                                            product_Lot = BB.product_Lot,
                                                            itemStatus_Index = BB.itemStatus_Index.ToString(),
                                                            itemStatus_Id = BB.itemStatus_Id,
                                                            itemStatus_Name = BB.itemStatus_Name,
                                                            goodsReceive_MFG_Date = BB.goodsReceive_MFG_Date.ToString(),
                                                            goodsReceive_EXP_Date = BB.goodsReceive_EXP_Date.ToString(),
                                                            goodsReceive_ProductConversion_Index = BB.goodsReceive_ProductConversion_Index.ToString(),
                                                            goodsReceive_ProductConversion_Id = BB.goodsReceive_ProductConversion_Id.ToString(),
                                                            goodsReceive_ProductConversion_Name = BB.goodsReceive_ProductConversion_Name.ToString(),


                                                            binBalance_Ratio = BB.binBalance_Ratio,
                                                            binBalance_QtyBegin = BB.binBalance_QtyBegin,
                                                            binBalance_WeightBegin = BB.binBalance_WeightBegin,
                                                            binBalance_WeightBegin_Index = BB.binBalance_WeightBegin_Index,
                                                            binBalance_WeightBegin_Id = BB.binBalance_WeightBegin_Id,
                                                            binBalance_WeightBegin_Name = BB.binBalance_WeightBegin_Name,
                                                            binBalance_WeightBeginRatio = BB.binBalance_WeightBeginRatio,
                                                            binBalance_NetWeightBegin = BB.binBalance_NetWeightBegin,
                                                            binBalance_NetWeightBegin_Index = BB.binBalance_NetWeightBegin_Index,
                                                            binBalance_NetWeightBegin_Id = BB.binBalance_NetWeightBegin_Id,
                                                            binBalance_NetWeightBegin_Name = BB.binBalance_NetWeightBegin_Name,
                                                            binBalance_NetWeightBeginRatio = BB.binBalance_NetWeightBeginRatio,
                                                            binBalance_GrsWeightBegin = BB.binBalance_GrsWeightBegin,
                                                            binBalance_GrsWeightBegin_Index = BB.binBalance_GrsWeightBegin_Index,
                                                            binBalance_GrsWeightBegin_Id = BB.binBalance_GrsWeightBegin_Id,
                                                            binBalance_GrsWeightBegin_Name = BB.binBalance_GrsWeightBegin_Name,
                                                            binBalance_GrsWeightBeginRatio = BB.binBalance_GrsWeightBeginRatio,
                                                            binBalance_WidthBegin = BB.binBalance_WidthBegin,
                                                            binBalance_WidthBegin_Index = BB.binBalance_WidthBegin_Index,
                                                            binBalance_WidthBegin_Id = BB.binBalance_WidthBegin_Id,
                                                            binBalance_WidthBegin_Name = BB.binBalance_WidthBegin_Name,
                                                            binBalance_WidthBeginRatio = BB.binBalance_WidthBeginRatio,
                                                            binBalance_LengthBegin = BB.binBalance_LengthBegin,
                                                            binBalance_LengthBegin_Index = BB.binBalance_LengthBegin_Index,
                                                            binBalance_LengthBegin_Id = BB.binBalance_LengthBegin_Id,
                                                            binBalance_LengthBegin_Name = BB.binBalance_LengthBegin_Name,
                                                            binBalance_LengthBeginRatio = BB.binBalance_LengthBeginRatio,
                                                            binBalance_HeightBegin = BB.binBalance_HeightBegin,
                                                            binBalance_HeightBegin_Index = BB.binBalance_HeightBegin_Index,
                                                            binBalance_HeightBegin_Id = BB.binBalance_HeightBegin_Id,
                                                            binBalance_HeightBegin_Name = BB.binBalance_HeightBegin_Name,
                                                            binBalance_HeightBeginRatio = BB.binBalance_HeightBeginRatio,
                                                            binBalance_UnitVolumeBegin = BB.binBalance_UnitVolumeBegin,
                                                            binBalance_VolumeBegin = BB.binBalance_VolumeBegin,
                                                            binBalance_QtyBal = BB.binBalance_QtyBal,
                                                            binBalance_UnitWeightBal = BB.binBalance_UnitWeightBal,
                                                            binBalance_UnitWeightBal_Index = BB.binBalance_UnitWeightBal_Index,
                                                            binBalance_UnitWeightBal_Id = BB.binBalance_UnitWeightBal_Id,
                                                            binBalance_UnitWeightBal_Name = BB.binBalance_UnitWeightBal_Name,
                                                            binBalance_UnitWeightBalRatio = BB.binBalance_UnitWeightBalRatio,
                                                            binBalance_WeightBal = BB.binBalance_WeightBal,
                                                            binBalance_WeightBal_Index = BB.binBalance_WeightBal_Index,
                                                            binBalance_WeightBal_Id = BB.binBalance_WeightBal_Id,
                                                            binBalance_WeightBal_Name = BB.binBalance_WeightBal_Name,
                                                            binBalance_WeightBalRatio = BB.binBalance_WeightBalRatio,
                                                            binBalance_UnitNetWeightBal = BB.binBalance_UnitNetWeightBal,
                                                            binBalance_UnitNetWeightBal_Index = BB.binBalance_UnitNetWeightBal_Index,
                                                            binBalance_UnitNetWeightBal_Id = BB.binBalance_UnitNetWeightBal_Id,
                                                            binBalance_UnitNetWeightBal_Name = BB.binBalance_UnitNetWeightBal_Name,
                                                            binBalance_UnitNetWeightBalRatio = BB.binBalance_UnitNetWeightBalRatio,
                                                            binBalance_NetWeightBal = BB.binBalance_NetWeightBal,
                                                            binBalance_NetWeightBal_Index = BB.binBalance_NetWeightBal_Index,
                                                            binBalance_NetWeightBal_Id = BB.binBalance_NetWeightBal_Id,
                                                            binBalance_NetWeightBal_Name = BB.binBalance_NetWeightBal_Name,
                                                            binBalance_NetWeightBalRatio = BB.binBalance_NetWeightBalRatio,
                                                            binBalance_UnitGrsWeightBal = BB.binBalance_UnitGrsWeightBal,
                                                            binBalance_UnitGrsWeightBal_Index = BB.binBalance_UnitGrsWeightBal_Index,
                                                            binBalance_UnitGrsWeightBal_Id = BB.binBalance_UnitGrsWeightBal_Id,
                                                            binBalance_UnitGrsWeightBal_Name = BB.binBalance_UnitGrsWeightBal_Name,
                                                            binBalance_UnitGrsWeightBalRatio = BB.binBalance_UnitGrsWeightBalRatio,
                                                            binBalance_GrsWeightBal = BB.binBalance_GrsWeightBal,
                                                            binBalance_GrsWeightBal_Index = BB.binBalance_GrsWeightBal_Index,
                                                            binBalance_GrsWeightBal_Id = BB.binBalance_GrsWeightBal_Id,
                                                            binBalance_GrsWeightBal_Name = BB.binBalance_GrsWeightBal_Name,
                                                            binBalance_GrsWeightBalRatio = BB.binBalance_GrsWeightBalRatio,
                                                            binBalance_UnitWidthBal = BB.binBalance_UnitWidthBal,
                                                            binBalance_UnitWidthBal_Index = BB.binBalance_UnitWidthBal_Index,
                                                            binBalance_UnitWidthBal_Id = BB.binBalance_UnitWidthBal_Id,
                                                            binBalance_UnitWidthBal_Name = BB.binBalance_UnitWidthBal_Name,
                                                            binBalance_UnitWidthBalRatio = BB.binBalance_UnitWidthBalRatio,
                                                            binBalance_WidthBal = BB.binBalance_WidthBal,
                                                            binBalance_WidthBal_Index = BB.binBalance_WidthBal_Index,
                                                            binBalance_WidthBal_Id = BB.binBalance_WidthBal_Id,
                                                            binBalance_WidthBal_Name = BB.binBalance_WidthBal_Name,
                                                            binBalance_WidthBalRatio = BB.binBalance_WidthBalRatio,
                                                            binBalance_UnitLengthBal = BB.binBalance_UnitLengthBal,
                                                            binBalance_UnitLengthBal_Index = BB.binBalance_UnitLengthBal_Index,
                                                            binBalance_UnitLengthBal_Id = BB.binBalance_UnitLengthBal_Id,
                                                            binBalance_UnitLengthBal_Name = BB.binBalance_UnitLengthBal_Name,
                                                            binBalance_UnitLengthBalRatio = BB.binBalance_UnitLengthBalRatio,
                                                            binBalance_LengthBal = BB.binBalance_LengthBal,
                                                            binBalance_LengthBal_Index = BB.binBalance_LengthBal_Index,
                                                            binBalance_LengthBal_Id = BB.binBalance_LengthBal_Id,
                                                            binBalance_LengthBal_Name = BB.binBalance_LengthBal_Name,
                                                            binBalance_LengthBalRatio = BB.binBalance_LengthBalRatio,
                                                            binBalance_UnitHeightBal = BB.binBalance_UnitHeightBal,
                                                            binBalance_UnitHeightBal_Index = BB.binBalance_UnitHeightBal_Index,
                                                            binBalance_UnitHeightBal_Id = BB.binBalance_UnitHeightBal_Id,
                                                            binBalance_UnitHeightBal_Name = BB.binBalance_UnitHeightBal_Name,
                                                            binBalance_UnitHeightBalRatio = BB.binBalance_UnitHeightBalRatio,
                                                            binBalance_HeightBal = BB.binBalance_HeightBal,
                                                            binBalance_HeightBal_Index = BB.binBalance_HeightBal_Index,
                                                            binBalance_HeightBal_Id = BB.binBalance_HeightBal_Id,
                                                            binBalance_HeightBal_Name = BB.binBalance_HeightBal_Name,
                                                            binBalance_HeightBalRatio = BB.binBalance_HeightBalRatio,
                                                            binBalance_UnitVolumeBal = BB.binBalance_UnitVolumeBal,
                                                            binBalance_VolumeBal = BB.binBalance_VolumeBal,
                                                            binBalance_QtyReserve = BB.binBalance_QtyReserve,
                                                            binBalance_WeightReserve = BB.binBalance_WeightReserve,
                                                            binBalance_WeightReserve_Index = BB.binBalance_WeightReserve_Index,
                                                            binBalance_WeightReserve_Id = BB.binBalance_WeightReserve_Id,
                                                            binBalance_WeightReserve_Name = BB.binBalance_WeightReserve_Name,
                                                            binBalance_WeightReserveRatio = BB.binBalance_WeightReserveRatio,
                                                            binBalance_NetWeightReserve = BB.binBalance_NetWeightReserve,
                                                            binBalance_NetWeightReserve_Index = BB.binBalance_NetWeightReserve_Index,
                                                            binBalance_NetWeightReserve_Id = BB.binBalance_NetWeightReserve_Id,
                                                            binBalance_NetWeightReserve_Name = BB.binBalance_NetWeightReserve_Name,
                                                            binBalance_NetWeightReserveRatio = BB.binBalance_NetWeightReserveRatio,
                                                            binBalance_GrsWeightReserve = BB.binBalance_GrsWeightReserve,
                                                            binBalance_GrsWeightReserve_Index = BB.binBalance_GrsWeightReserve_Index,
                                                            binBalance_GrsWeightReserve_Id = BB.binBalance_GrsWeightReserve_Id,
                                                            binBalance_GrsWeightReserve_Name = BB.binBalance_GrsWeightReserve_Name,
                                                            binBalance_GrsWeightReserveRatio = BB.binBalance_GrsWeightReserveRatio,
                                                            binBalance_WidthReserve = BB.binBalance_WidthReserve,
                                                            binBalance_WidthReserve_Index = BB.binBalance_WidthReserve_Index,
                                                            binBalance_WidthReserve_Id = BB.binBalance_WidthReserve_Id,
                                                            binBalance_WidthReserve_Name = BB.binBalance_WidthReserve_Name,
                                                            binBalance_WidthReserveRatio = BB.binBalance_WidthReserveRatio,
                                                            binBalance_LengthReserve = BB.binBalance_LengthReserve,
                                                            binBalance_LengthReserve_Index = BB.binBalance_LengthReserve_Index,
                                                            binBalance_LengthReserve_Id = BB.binBalance_LengthReserve_Id,
                                                            binBalance_LengthReserve_Name = BB.binBalance_LengthReserve_Name,
                                                            binBalance_LengthReserveRatio = BB.binBalance_LengthReserveRatio,
                                                            binBalance_HeightReserve = BB.binBalance_HeightReserve,
                                                            binBalance_HeightReserve_Index = BB.binBalance_HeightReserve_Index,
                                                            binBalance_HeightReserve_Id = BB.binBalance_HeightReserve_Id,
                                                            binBalance_HeightReserve_Name = BB.binBalance_HeightReserve_Name,
                                                            binBalance_HeightReserveRatio = BB.binBalance_HeightReserveRatio,
                                                            binBalance_UnitVolumeReserve = BB.binBalance_UnitVolumeReserve,
                                                            binBalance_VolumeReserve = BB.binBalance_VolumeReserve,


                                                            productConversion_Index = BB.productConversion_Index.ToString(),
                                                            productConversion_Id = BB.productConversion_Id,
                                                            productConversion_Name = BB.productConversion_Name,
                                                            udf_1 = BB.uDF_1,
                                                            udf_2 = BB.uDF_2,
                                                            udf_3 = BB.uDF_3,
                                                            udf_4 = BB.uDF_4,
                                                            udf_5 = BB.uDF_5,
                                                            create_By = BB.create_By,
                                                            create_Date = BB.create_Date.ToString(),
                                                            update_By = BB.update_By,
                                                            update_Date = BB.update_Date.ToString(),
                                                            cancel_By = BB.cancel_By,
                                                            cancel_Date = BB.cancel_Date.ToString(),
                                                            isUse = BB.isUse,
                                                            binBalance_Status = BB.binBalance_Status,
                                                            picking_Seq = L.picking_Seq,
                                                            ageRemain = BB.ageRemain,

                                                            invoice_No = BB.invoice_No,
                                                            declaration_No = BB.declaration_No,
                                                            hs_Code = BB.hs_Code,
                                                            conutry_of_Origin = BB.conutry_of_Origin,
                                                            tax1 = BB.tax1,
                                                            tax1_Currency_Index = BB.tax1_Currency_Index,
                                                            tax1_Currency_Id = BB.tax1_Currency_Id,
                                                            tax1_Currency_Name = BB.tax1_Currency_Name,
                                                            tax2 = BB.tax2,
                                                            tax2_Currency_Index = BB.tax2_Currency_Index,
                                                            tax2_Currency_Id = BB.tax2_Currency_Id,
                                                            tax2_Currency_Name = BB.tax2_Currency_Name,
                                                            tax3 = BB.tax3,
                                                            tax3_Currency_Index = BB.tax3_Currency_Index,
                                                            tax3_Currency_Id = BB.tax3_Currency_Id,
                                                            tax3_Currency_Name = BB.tax3_Currency_Name,
                                                            tax4 = BB.tax4,
                                                            tax4_Currency_Index = BB.tax4_Currency_Index,
                                                            tax4_Currency_Id = BB.tax4_Currency_Id,
                                                            tax4_Currency_Name = BB.tax4_Currency_Name,
                                                            tax5 = BB.tax5,
                                                            tax5_Currency_Index = BB.tax5_Currency_Index,
                                                            tax5_Currency_Id = BB.tax5_Currency_Id,
                                                            tax5_Currency_Name = BB.tax5_Currency_Name,


                                                            productShelfLife_D = Prd.ProductShelfLife_D != null ? Prd.ProductShelfLife_D : 0,
                                                        }).AsQueryable();

                            #endregion

                            #region for RuleDesSort
                            var RuleDesList2 = getViewWaveTemplate.Where(c => c.isDestination == 1 && c.isSearch == 1).ToList();

                            //var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>(e, param);

                            foreach (var itemRuleDesList in RuleDesList2)
                            {
                                if (itemRuleDesList.ruleConditionOperation == "IN")
                                {
                                    if (itemRuleDesList.ruleConditionField_Name == "Zone_Id")
                                    {
                                        //setWhereDes += " And  Location_Index   in (  select   Location_Index  from ms_ZoneLocation   where  IsDelete <> -1 and Zone_Index  in (select Zone_Index from ms_Zone where IsDelete <> -1 and " + itemRuleDesList.ruleConditionField_Name + " IN (" + itemRuleDesList.ruleCondition_Param + " )" + ")) ";
                                        var listDataZoneLocation = utils.SendDataApi<List<ZoneLocationViewModel>>(new AppSettingConfig().GetUrl("getZoneLocationMaster"), new { }.sJson());
                                        var listDataZone = utils.SendDataApi<List<ZoneViewModel>>(new AppSettingConfig().GetUrl("getZoneMaster"), new { }.sJson());

                                        //var param = Expression.Parameter(typeof(ZoneViewModel), "x");
                                        //var predicate = Expression.Lambda<Func<ZoneViewModel, bool>>(
                                        //    Expression.Call(
                                        //        Expression.PropertyOrField(param, itemRuleDesList.ruleConditionField_Name),
                                        //        "Contains", null, Expression.Constant(itemRuleDesList.ruleCondition_Param)
                                        //    ), param);
                                        var dataarray = itemRuleDesList.ruleCondition_Param.Replace("'", "").Split(',');
                                        var dataZone = listDataZone.Where(c => dataarray.Contains(c.zone_Id)).ToList();
                                        var zoneArray = new List<Guid?>();
                                        foreach (var z in dataZone)
                                        {
                                            zoneArray.Add(z.zone_Index);
                                        }
                                        var listLocation_index = listDataZoneLocation.Where(c => zoneArray.Contains(c.zone_Index)).Select(s => s.location_Index.ToString()).ToList();
                                        View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => listLocation_index.Contains(c.location_Index));
                                    }
                                    else
                                    {
                                        var dataarray = itemRuleDesList.ruleCondition_Param.Replace("'", "").Split(',');
                                       
                                        if (itemRuleDesList.ruleConditionField_Name == "GoodsReceive_No")
                                        {
                                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.goodsReceive_No));
                                        }
                                        if (itemRuleDesList.ruleConditionField_Name == "ItemStatus_Id")
                                        {
                                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.itemStatus_Id));
                                        }
                                        if (itemRuleDesList.ruleConditionField_Name == "Location_Name")
                                        {
                                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.location_Name));
                                        }
                                        if (itemRuleDesList.ruleConditionField_Name == "Locationtype_Id")
                                        {
                                            //View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.location));
                                        }
                                        if (itemRuleDesList.ruleConditionField_Name == "Product_Id")
                                        {
                                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.product_Id));
                                        }
                                        if (itemRuleDesList.ruleConditionField_Name == "Product_Lot")
                                        {
                                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.product_Lot));
                                        }
                                        if (itemRuleDesList.ruleConditionField_Name == "Warehouse")
                                        {
                                            //planGIWaveResult = planGIWaveResult.Where(c => dataarray.Contains(c.Warehouse));
                                        }

                                        //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " IN (" + itemRuleDesList.ruleCondition_Param + ") ";
                                        //var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                        //var predicate = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>(
                                        //    Expression.Call(
                                        //        Expression.PropertyOrField(param, itemRuleDesList.ruleConditionField_Name),
                                        //        "Contains", null, Expression.Constant(itemRuleDesList.ruleCondition_Param)
                                        //    ), param);
                                        //View_WaveBinBalance = View_WaveBinBalance.Where(predicate);
                                    }
                                }
                                else if (itemRuleDesList.ruleConditionOperation == "=")
                                {
                                    if (itemRuleDesList.ruleConditionField_Name == "Zone_Id")
                                    {
                                        //setWhereDes += "  And  Location_Index   in (  select   Location_Index  from ms_ZoneLocation   where IsDelete <> -1 and Zone_Index  in (select Zone_Index from ms_Zone where IsDelete <> -1 and " + itemRuleDesList.ruleConditionField_Name + " = '" + itemRuleDesList.ruleCondition_Param + "' " + ")) ";
                                        var listDataZoneLocation = utils.SendDataApi<List<ZoneLocationViewModel>>(new AppSettingConfig().GetUrl("getZoneLocationMaster"), new { }.sJson());
                                        var listDataZone = utils.SendDataApi<List<ZoneViewModel>>(new AppSettingConfig().GetUrl("getZoneMaster"), new { }.sJson());

                                        var param = Expression.Parameter(typeof(ZoneViewModel), "x");
                                        var lambda = Expression.Lambda<Func<ZoneViewModel, bool>>((Expression)Expression.Equal(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                                            , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                                        var dataZone = listDataZone.AsQueryable().Where(lambda).ToList();
                                        var zoneArray = new List<Guid?>();
                                        foreach (var z in dataZone)
                                        {
                                            zoneArray.Add(z.zone_Index);
                                        }
                                        var listLocation_index = listDataZoneLocation.Where(c => zoneArray.Contains(c.zone_Index)).Select(s => s.location_Index.ToString()).ToList();
                                        View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => listLocation_index.Contains(c.location_Index));
                                    }
                                    else
                                    {
                                        //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " = '" + itemRuleDesList.ruleCondition_Param + "' ";
                                        var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                        var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.Equal(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                                            , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                                        View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
                                    }
                                }
                                else if (itemRuleDesList.ruleConditionOperation == ">")
                                {
                                    //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " > '" + itemRuleDesList.ruleCondition_Param + "' ";
                                    var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                    var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.GreaterThan(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                                        , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
                                }
                                else if (itemRuleDesList.ruleConditionOperation == "<")
                                {
                                    //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " < '" + itemRuleDesList.ruleCondition_Param + "' ";
                                    var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                    var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.LessThan(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                                        , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
                                }
                                else if (itemRuleDesList.ruleConditionOperation == "!=")
                                {
                                    //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " != '" + itemRuleDesList.ruleCondition_Param + "' ";
                                    var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                    var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.NotEqual(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                                        , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
                                }
                                else if (itemRuleDesList.ruleConditionOperation == ">=")
                                {
                                    //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " >= '" + itemRuleDesList.ruleCondition_Param + "' ";
                                    var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                    var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.GreaterThanOrEqual(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                                        , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
                                }
                                else if (itemRuleDesList.ruleConditionOperation == "<=")
                                {
                                    //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " <= '" + itemRuleDesList.ruleCondition_Param + "' ";
                                    var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                    var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.LessThanOrEqual(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                                        , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
                                }
                                else if (itemRuleDesList.ruleConditionOperation == "Like")
                                {
                                    //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " Like '" + itemRuleDesList.ruleCondition_Param + "' ";
                                    var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                    var predicate = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>(
                                        Expression.Call(
                                            Expression.PropertyOrField(param, itemRuleDesList.ruleConditionField_Name),
                                            "Contains", null, Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""))
                                        ), param);
                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(predicate);
                                }
                                //setWhereDes += "";

                            }
                            #endregion

                            #region for RuleDesSortList
                            var RuleDesSortList2 = getViewWaveTemplate.Where(c => c.isDestination == 1 && c.isSort == 1).ToList();

                            int iRowsDesSort2 = 0;
                            foreach (var itemRuleDesSortList in RuleDesSortList2)
                            {
                                if (iRowsDesSort2 == 0)
                                {
                                    //setWhereDesSort += itemRuleDesSortList.ruleConditionField_Name + ' ' + itemRuleDesSortList.ruleCondition_Param;
                                    var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                    var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, string>>(Expression.Property(param, itemRuleDesSortList.ruleConditionField_Name), param);
                                    if (itemRuleDesSortList.ruleCondition_Param.ToUpper() == "DESC")
                                    {
                                        View_WaveBinBalance2 = View_WaveBinBalance2.OrderByDescending(lambda);
                                    }
                                    else /*if (itemRuleDesSortList.ruleCondition_Param.ToUpper() == "DESC")*/
                                    {
                                        View_WaveBinBalance2 = View_WaveBinBalance2.OrderBy(lambda);
                                    }
                                }
                                else
                                {
                                    var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                    var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, string>>(Expression.Property(param, itemRuleDesSortList.ruleConditionField_Name), param);
                                    if (itemRuleDesSortList.ruleCondition_Param.ToUpper() == "DESC")
                                    {
                                        View_WaveBinBalance2 = View_WaveBinBalance2.OrderByDescending(lambda);
                                    }
                                    else /*if (itemRuleDesSortList.ruleCondition_Param.ToUpper() == "DESC")*/
                                    {
                                        View_WaveBinBalance2 = View_WaveBinBalance2.OrderBy(lambda);
                                    }
                                }
                                iRowsDesSort2 = iRowsDesSort2 + 1;

                            }
                            #endregion



                            var BinBalanceResult = View_WaveBinBalance2.ToList();
                            foreach (var itemBin in BinBalanceResult)
                            {

                                decimal? QtyBal = itemBin.binBalance_QtyBal - itemBin.binBalance_QtyReserve;
                                if (QtyPlanGIRemian <= 0)
                                {
                                    break;
                                }
                                if (QtyBal <= 0)
                                {
                                    continue;
                                }
                                if (QtyPlanGIRemian >= QtyBal && QtyBal > 0)
                                {
                                    // Add GI ITEMLOCATION 
                                    var GoodsIssueItemLocation = new im_GoodsIssueItemLocation();
                                    GoodsIssueItemLocation.GoodsIssueItemLocation_Index = Guid.NewGuid();
                                    GoodsIssueItemLocation.GoodsIssue_Index = new Guid(model.goodsIssue_Index);
                                    GoodsIssueItemLocation.TagItem_Index = new Guid(itemBin.tagItem_Index);
                                    GoodsIssueItemLocation.Tag_Index = new Guid(itemBin.tag_Index);
                                    GoodsIssueItemLocation.Tag_No = itemBin.tag_No;
                                    GoodsIssueItemLocation.Product_Index = new Guid(itemBin.product_Index);
                                    GoodsIssueItemLocation.Product_Id = itemBin.product_Id;
                                    GoodsIssueItemLocation.Product_Name = itemBin.product_Name;
                                    GoodsIssueItemLocation.Product_SecondName = itemBin.product_SecondName;
                                    GoodsIssueItemLocation.Product_ThirdName = itemBin.product_ThirdName;
                                    GoodsIssueItemLocation.Product_Lot = itemBin.product_Lot;
                                    GoodsIssueItemLocation.ItemStatus_Index = new Guid(itemBin.itemStatus_Index);
                                    GoodsIssueItemLocation.ItemStatus_Id = itemBin.itemStatus_Id;
                                    GoodsIssueItemLocation.ItemStatus_Name = itemBin.itemStatus_Name;
                                    GoodsIssueItemLocation.Location_Index = new Guid(itemBin.location_Index);
                                    GoodsIssueItemLocation.Location_Id = itemBin.location_Id;
                                    GoodsIssueItemLocation.Location_Name = itemBin.location_Name;
                                    GoodsIssueItemLocation.QtyPlan = (Decimal)itemPlanGI.TotalQtyRemian;
                                    GoodsIssueItemLocation.Qty = (Decimal)QtyBal / (Decimal)itemPlanGI.Ratio;
                                    GoodsIssueItemLocation.Ratio = (Decimal)itemPlanGI.Ratio;
                                    GoodsIssueItemLocation.TotalQty = (Decimal)QtyBal;
                                    GoodsIssueItemLocation.ProductConversion_Index = new Guid(itemBin.productConversion_Index);
                                    GoodsIssueItemLocation.ProductConversion_Id = itemBin.productConversion_Id;
                                    GoodsIssueItemLocation.ProductConversion_Name = itemBin.productConversion_Name;
                                    GoodsIssueItemLocation.MFG_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_MFG_Date) ? itemBin.goodsReceive_MFG_Date.toDate() : null;
                                    GoodsIssueItemLocation.EXP_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_EXP_Date) ? itemBin.goodsReceive_EXP_Date.toDate() : null;

                                    GoodsIssueItemLocation.UnitWeight = itemBin.binBalance_UnitWeightBal;
                                    GoodsIssueItemLocation.UnitWeight_Index = itemBin.binBalance_UnitWeightBal_Index;
                                    GoodsIssueItemLocation.UnitWeight_Id = itemBin.binBalance_UnitWeightBal_Id;
                                    GoodsIssueItemLocation.UnitWeight_Name = itemBin.binBalance_UnitWeightBal_Name;
                                    GoodsIssueItemLocation.UnitWeightRatio = itemBin.binBalance_UnitWeightBalRatio;

                                    GoodsIssueItemLocation.Weight = (itemBin.binBalance_WeightBal ?? 0) - (itemBin.binBalance_WeightReserve ?? 0);
                                    GoodsIssueItemLocation.Weight_Index = itemBin.binBalance_WeightBal_Index;
                                    GoodsIssueItemLocation.Weight_Id = itemBin.binBalance_WeightBal_Id;
                                    GoodsIssueItemLocation.Weight_Name = itemBin.binBalance_WeightBal_Name;
                                    GoodsIssueItemLocation.WeightRatio = itemBin.binBalance_WeightBalRatio;

                                    GoodsIssueItemLocation.UnitNetWeight = itemBin.binBalance_UnitNetWeightBal;
                                    GoodsIssueItemLocation.UnitNetWeight_Index = itemBin.binBalance_UnitNetWeightBal_Index;
                                    GoodsIssueItemLocation.UnitNetWeight_Id = itemBin.binBalance_UnitNetWeightBal_Id;
                                    GoodsIssueItemLocation.UnitNetWeight_Name = itemBin.binBalance_UnitNetWeightBal_Name;
                                    GoodsIssueItemLocation.UnitNetWeightRatio = itemBin.binBalance_UnitNetWeightBalRatio;

                                    GoodsIssueItemLocation.NetWeight = (itemBin.binBalance_NetWeightBal ?? 0) - (itemBin.binBalance_NetWeightReserve ?? 0);
                                    GoodsIssueItemLocation.NetWeight_Index = itemBin.binBalance_NetWeightBal_Index;
                                    GoodsIssueItemLocation.NetWeight_Id = itemBin.binBalance_NetWeightBal_Id;
                                    GoodsIssueItemLocation.NetWeight_Name = itemBin.binBalance_NetWeightBal_Name;
                                    GoodsIssueItemLocation.NetWeightRatio = itemBin.binBalance_NetWeightBalRatio;

                                    GoodsIssueItemLocation.UnitGrsWeight = itemBin.binBalance_UnitGrsWeightBal;
                                    GoodsIssueItemLocation.UnitGrsWeight_Index = itemBin.binBalance_UnitGrsWeightBal_Index;
                                    GoodsIssueItemLocation.UnitGrsWeight_Id = itemBin.binBalance_UnitGrsWeightBal_Id;
                                    GoodsIssueItemLocation.UnitGrsWeight_Name = itemBin.binBalance_UnitGrsWeightBal_Name;
                                    GoodsIssueItemLocation.UnitGrsWeightRatio = itemBin.binBalance_UnitGrsWeightBalRatio;

                                    GoodsIssueItemLocation.GrsWeight = (itemBin.binBalance_GrsWeightBal ?? 0) - (itemBin.binBalance_GrsWeightReserve ?? 0);
                                    GoodsIssueItemLocation.GrsWeight_Index = itemBin.binBalance_GrsWeightBal_Index;
                                    GoodsIssueItemLocation.GrsWeight_Id = itemBin.binBalance_GrsWeightBal_Id;
                                    GoodsIssueItemLocation.GrsWeight_Name = itemBin.binBalance_GrsWeightBal_Name;
                                    GoodsIssueItemLocation.GrsWeightRatio = itemBin.binBalance_GrsWeightBalRatio;

                                    GoodsIssueItemLocation.UnitWidth = (itemBin.binBalance_UnitWidthBal ?? 0);
                                    GoodsIssueItemLocation.UnitWidth_Index = itemBin.binBalance_UnitWidthBal_Index;
                                    GoodsIssueItemLocation.UnitWidth_Id = itemBin.binBalance_UnitWidthBal_Id;
                                    GoodsIssueItemLocation.UnitWidth_Name = itemBin.binBalance_UnitWidthBal_Name;
                                    GoodsIssueItemLocation.UnitWidthRatio = itemBin.binBalance_UnitWidthBalRatio;

                                    GoodsIssueItemLocation.Width = (itemBin.binBalance_WidthBal ?? 0) - (itemBin.binBalance_WidthReserve ?? 0);
                                    GoodsIssueItemLocation.Width_Index = itemBin.binBalance_WidthBal_Index;
                                    GoodsIssueItemLocation.Width_Id = itemBin.binBalance_WidthBal_Id;
                                    GoodsIssueItemLocation.Width_Name = itemBin.binBalance_WidthBal_Name;
                                    GoodsIssueItemLocation.WidthRatio = itemBin.binBalance_WidthBalRatio;

                                    GoodsIssueItemLocation.UnitLength = (itemBin.binBalance_UnitLengthBal ?? 0);
                                    GoodsIssueItemLocation.UnitLength_Index = itemBin.binBalance_UnitLengthBal_Index;
                                    GoodsIssueItemLocation.UnitLength_Id = itemBin.binBalance_UnitLengthBal_Id;
                                    GoodsIssueItemLocation.UnitLength_Name = itemBin.binBalance_UnitLengthBal_Name;
                                    GoodsIssueItemLocation.UnitLengthRatio = itemBin.binBalance_UnitLengthBalRatio;

                                    GoodsIssueItemLocation.Length = (itemBin.binBalance_LengthBal ?? 0) - (itemBin.binBalance_LengthReserve ?? 0);
                                    GoodsIssueItemLocation.Length_Index = itemBin.binBalance_LengthBal_Index;
                                    GoodsIssueItemLocation.Length_Id = itemBin.binBalance_LengthBal_Id;
                                    GoodsIssueItemLocation.Length_Name = itemBin.binBalance_LengthBal_Name;
                                    GoodsIssueItemLocation.LengthRatio = itemBin.binBalance_LengthBalRatio;

                                    GoodsIssueItemLocation.UnitHeight = (itemBin.binBalance_UnitHeightBal ?? 0);
                                    GoodsIssueItemLocation.UnitHeight_Index = itemBin.binBalance_UnitHeightBal_Index;
                                    GoodsIssueItemLocation.UnitHeight_Id = itemBin.binBalance_UnitHeightBal_Id;
                                    GoodsIssueItemLocation.UnitHeight_Name = itemBin.binBalance_UnitHeightBal_Name;
                                    GoodsIssueItemLocation.UnitHeightRatio = itemBin.binBalance_UnitHeightBalRatio;

                                    GoodsIssueItemLocation.Height = (itemBin.binBalance_HeightBal ?? 0) - (itemBin.binBalance_HeightReserve ?? 0);
                                    GoodsIssueItemLocation.Height_Index = itemBin.binBalance_HeightBal_Index;
                                    GoodsIssueItemLocation.Height_Id = itemBin.binBalance_HeightBal_Id;
                                    GoodsIssueItemLocation.Height_Name = itemBin.binBalance_HeightBal_Name;
                                    GoodsIssueItemLocation.HeightRatio = itemBin.binBalance_HeightBalRatio;

                                    GoodsIssueItemLocation.UnitVolume = (itemBin.binBalance_UnitVolumeBal ?? 0);
                                    GoodsIssueItemLocation.Volume = (itemBin.binBalance_VolumeBal ?? 0) - (itemBin.binBalance_VolumeReserve ?? 0);

                                    GoodsIssueItemLocation.UnitPrice = (itemPlanGI.UnitPrice ?? 0);
                                    GoodsIssueItemLocation.UnitPrice_Index = itemPlanGI.UnitPrice_Index;
                                    GoodsIssueItemLocation.UnitPrice_Id = itemPlanGI.UnitPrice_Id;
                                    GoodsIssueItemLocation.UnitPrice_Name = itemPlanGI.UnitPrice_Name;
                                    GoodsIssueItemLocation.Price = (itemPlanGI.Price ?? 0);
                                    GoodsIssueItemLocation.Price_Index = itemPlanGI.Price_Index;
                                    GoodsIssueItemLocation.Price_Id = itemPlanGI.Price_Id;
                                    GoodsIssueItemLocation.Price_Name = itemPlanGI.Price_Name;


                                    GoodsIssueItemLocation.DocumentRef_No1 = itemPlanGI.DocumentRef_No1;
                                    GoodsIssueItemLocation.DocumentRef_No2 = itemPlanGI.DocumentRef_No2;
                                    GoodsIssueItemLocation.DocumentRef_No3 = itemPlanGI.DocumentRef_No3;
                                    GoodsIssueItemLocation.DocumentRef_No4 = itemPlanGI.DocumentRef_No4;
                                    GoodsIssueItemLocation.DocumentRef_No5 = itemPlanGI.DocumentRef_No5;
                                    GoodsIssueItemLocation.Document_Status = -2;
                                    GoodsIssueItemLocation.UDF_1 = itemPlanGI.UDF_1;
                                    GoodsIssueItemLocation.UDF_2 = itemPlanGI.UDF_2;
                                    GoodsIssueItemLocation.UDF_3 = itemPlanGI.UDF_3;
                                    GoodsIssueItemLocation.UDF_4 = itemPlanGI.UDF_4;
                                    GoodsIssueItemLocation.UDF_5 = itemPlanGI.UDF_5;
                                    GoodsIssueItemLocation.Ref_Process_Index = new Guid("22744590-55D8-4448-88EF-5997C252111F");  // PLAN GI Process
                                    GoodsIssueItemLocation.Ref_Document_No = itemPlanGI.PlanGoodsIssue_No;
                                    GoodsIssueItemLocation.Ref_Document_Index = (Guid)itemPlanGI.PlanGoodsIssue_Index;
                                    GoodsIssueItemLocation.Ref_DocumentItem_Index = itemPlanGI.PlanGoodsIssueItem_Index;
                                    GoodsIssueItemLocation.GoodsReceiveItem_Index = new Guid(itemBin.goodsReceiveItem_Index);
                                    GoodsIssueItemLocation.Create_By = model.create_by;
                                    GoodsIssueItemLocation.Create_Date = DateTime.Now;
                                    GoodsIssueItemLocation.GoodsIssue_No = model.goodsIssue_No;
                                    GoodsIssueItemLocation.BinBalance_Index = new Guid(itemBin.binBalance_Index);


                                    GoodsIssueItemLocation.Invoice_No = itemBin.invoice_No;
                                    GoodsIssueItemLocation.Declaration_No = itemBin.declaration_No;
                                    GoodsIssueItemLocation.HS_Code = itemBin.hs_Code;
                                    GoodsIssueItemLocation.Conutry_of_Origin = itemBin.conutry_of_Origin;
                                    GoodsIssueItemLocation.Tax1 = itemBin.tax1;
                                    GoodsIssueItemLocation.Tax1_Currency_Index = itemBin.tax1_Currency_Index;
                                    GoodsIssueItemLocation.Tax1_Currency_Id = itemBin.tax1_Currency_Id;
                                    GoodsIssueItemLocation.Tax1_Currency_Name = itemBin.tax1_Currency_Name;
                                    GoodsIssueItemLocation.Tax2 = itemBin.tax2;
                                    GoodsIssueItemLocation.Tax2_Currency_Index = itemBin.tax2_Currency_Index;
                                    GoodsIssueItemLocation.Tax2_Currency_Id = itemBin.tax2_Currency_Id;
                                    GoodsIssueItemLocation.Tax2_Currency_Name = itemBin.tax2_Currency_Name;
                                    GoodsIssueItemLocation.Tax3 = itemBin.tax3;
                                    GoodsIssueItemLocation.Tax3_Currency_Index = itemBin.tax3_Currency_Index;
                                    GoodsIssueItemLocation.Tax3_Currency_Id = itemBin.tax3_Currency_Id;
                                    GoodsIssueItemLocation.Tax3_Currency_Name = itemBin.tax3_Currency_Name;
                                    GoodsIssueItemLocation.Tax4 = itemBin.tax4;
                                    GoodsIssueItemLocation.Tax4_Currency_Index = itemBin.tax4_Currency_Index;
                                    GoodsIssueItemLocation.Tax4_Currency_Id = itemBin.tax4_Currency_Id;
                                    GoodsIssueItemLocation.Tax4_Currency_Name = itemBin.tax4_Currency_Name;
                                    GoodsIssueItemLocation.Tax5 = itemBin.tax5;
                                    GoodsIssueItemLocation.Tax5_Currency_Index = itemBin.tax5_Currency_Index;
                                    GoodsIssueItemLocation.Tax5_Currency_Id = itemBin.tax5_Currency_Id;
                                    GoodsIssueItemLocation.Tax5_Currency_Name = itemBin.tax5_Currency_Name;




                                    ListGoodsIssueItemLocation.Add(GoodsIssueItemLocation);


                                    itemPlanGI.GITotalQty = itemPlanGI.GITotalQty + QtyBal;

                                    QtyPlanGIRemian = QtyPlanGIRemian - QtyBal;

                                }
                                else if (QtyPlanGIRemian < QtyBal && QtyPlanGIRemian > 0 && QtyBal > 0)
                                {
                                    var QtyPick = QtyPlanGIRemian;
                                    // Add GI ITEMLOCATION 
                                    var GoodsIssueItemLocation = new im_GoodsIssueItemLocation();
                                    GoodsIssueItemLocation.GoodsIssueItemLocation_Index = Guid.NewGuid();
                                    GoodsIssueItemLocation.GoodsIssue_Index = new Guid(model.goodsIssue_Index);
                                    GoodsIssueItemLocation.TagItem_Index = new Guid(itemBin.tagItem_Index);
                                    GoodsIssueItemLocation.Tag_Index = new Guid(itemBin.tag_Index);
                                    GoodsIssueItemLocation.Tag_No = itemBin.tag_No;
                                    GoodsIssueItemLocation.Product_Index = new Guid(itemBin.product_Index);
                                    GoodsIssueItemLocation.Product_Id = itemBin.product_Id;
                                    GoodsIssueItemLocation.Product_Name = itemBin.product_Name;
                                    GoodsIssueItemLocation.Product_SecondName = itemBin.product_SecondName;
                                    GoodsIssueItemLocation.Product_ThirdName = itemBin.product_ThirdName;
                                    GoodsIssueItemLocation.Product_Lot = itemBin.product_Lot;
                                    GoodsIssueItemLocation.ItemStatus_Index = new Guid(itemBin.itemStatus_Index);
                                    GoodsIssueItemLocation.ItemStatus_Id = itemBin.itemStatus_Id;
                                    GoodsIssueItemLocation.ItemStatus_Name = itemBin.itemStatus_Name;
                                    GoodsIssueItemLocation.Location_Index = new Guid(itemBin.location_Index);
                                    GoodsIssueItemLocation.Location_Id = itemBin.location_Id;
                                    GoodsIssueItemLocation.Location_Name = itemBin.location_Name;
                                    GoodsIssueItemLocation.QtyPlan = (Decimal)itemPlanGI.TotalQtyRemian;
                                    GoodsIssueItemLocation.Qty = (Decimal)QtyPick / (Decimal)itemPlanGI.Ratio;
                                    GoodsIssueItemLocation.Ratio = (Decimal)itemPlanGI.Ratio;
                                    GoodsIssueItemLocation.TotalQty = (Decimal)QtyPick;
                                    GoodsIssueItemLocation.ProductConversion_Index = new Guid(itemBin.productConversion_Index);
                                    GoodsIssueItemLocation.ProductConversion_Id = itemBin.productConversion_Id;
                                    GoodsIssueItemLocation.ProductConversion_Name = itemBin.productConversion_Name;
                                    GoodsIssueItemLocation.MFG_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_MFG_Date) ? itemBin.goodsReceive_MFG_Date.toDate() : null;
                                    GoodsIssueItemLocation.EXP_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_EXP_Date) ? itemBin.goodsReceive_EXP_Date.toDate() : null;

                                    if (itemBin.binBalance_WeightBegin == 0)
                                    {
                                        GoodsIssueItemLocation.Weight = 0;
                                    }
                                    else
                                    {
                                        GoodsIssueItemLocation.UnitWeight = itemBin.binBalance_UnitWeightBal;
                                        GoodsIssueItemLocation.UnitWeight_Index = itemBin.binBalance_UnitWeightBal_Index;
                                        GoodsIssueItemLocation.UnitWeight_Id = itemBin.binBalance_UnitWeightBal_Id;
                                        GoodsIssueItemLocation.UnitWeight_Name = itemBin.binBalance_UnitWeightBal_Name;
                                        GoodsIssueItemLocation.UnitWeightRatio = itemBin.binBalance_UnitWeightBalRatio;

                                        GoodsIssueItemLocation.Weight = (Decimal)(QtyPick * (itemBin.binBalance_UnitWeightBal ?? 0));
                                        GoodsIssueItemLocation.Weight_Index = itemBin.binBalance_UnitWeightBal_Index;
                                        GoodsIssueItemLocation.Weight_Id = itemBin.binBalance_UnitWeightBal_Id;
                                        GoodsIssueItemLocation.Weight_Name = itemBin.binBalance_UnitWeightBal_Name;
                                        GoodsIssueItemLocation.WeightRatio = itemBin.binBalance_UnitWeightBalRatio;
                                    }

                                    if (itemBin.binBalance_NetWeightBegin == 0)
                                    {
                                        GoodsIssueItemLocation.NetWeight = 0;
                                    }
                                    else
                                    {
                                        GoodsIssueItemLocation.UnitNetWeight = itemBin.binBalance_UnitNetWeightBal;
                                        GoodsIssueItemLocation.UnitNetWeight_Index = itemBin.binBalance_UnitNetWeightBal_Index;
                                        GoodsIssueItemLocation.UnitNetWeight_Id = itemBin.binBalance_UnitNetWeightBal_Id;
                                        GoodsIssueItemLocation.UnitNetWeight_Name = itemBin.binBalance_UnitNetWeightBal_Name;
                                        GoodsIssueItemLocation.UnitNetWeightRatio = itemBin.binBalance_UnitNetWeightBalRatio;

                                        GoodsIssueItemLocation.NetWeight = (Decimal)(QtyPick * (itemBin.binBalance_UnitNetWeightBal ?? 0));
                                        GoodsIssueItemLocation.NetWeight_Index = itemBin.binBalance_UnitNetWeightBal_Index;
                                        GoodsIssueItemLocation.NetWeight_Id = itemBin.binBalance_UnitNetWeightBal_Id;
                                        GoodsIssueItemLocation.NetWeight_Name = itemBin.binBalance_UnitNetWeightBal_Name;
                                        GoodsIssueItemLocation.NetWeightRatio = itemBin.binBalance_UnitNetWeightBalRatio;
                                    }

                                    if (itemBin.binBalance_GrsWeightBegin == 0)
                                    {
                                        GoodsIssueItemLocation.GrsWeight = 0;
                                    }
                                    else
                                    {
                                        GoodsIssueItemLocation.UnitGrsWeight = itemBin.binBalance_UnitGrsWeightBal;
                                        GoodsIssueItemLocation.UnitGrsWeight_Index = itemBin.binBalance_UnitGrsWeightBal_Index;
                                        GoodsIssueItemLocation.UnitGrsWeight_Id = itemBin.binBalance_UnitGrsWeightBal_Id;
                                        GoodsIssueItemLocation.UnitGrsWeight_Name = itemBin.binBalance_UnitGrsWeightBal_Name;
                                        GoodsIssueItemLocation.UnitGrsWeightRatio = itemBin.binBalance_UnitGrsWeightBalRatio;

                                        GoodsIssueItemLocation.GrsWeight = (Decimal)(QtyPick * (itemBin.binBalance_UnitGrsWeightBal ?? 0));
                                        GoodsIssueItemLocation.GrsWeight_Index = itemBin.binBalance_UnitGrsWeightBal_Index;
                                        GoodsIssueItemLocation.GrsWeight_Id = itemBin.binBalance_UnitGrsWeightBal_Id;
                                        GoodsIssueItemLocation.GrsWeight_Name = itemBin.binBalance_UnitGrsWeightBal_Name;
                                        GoodsIssueItemLocation.GrsWeightRatio = itemBin.binBalance_UnitGrsWeightBalRatio;
                                    }

                                    if (itemBin.binBalance_WidthBegin == 0)
                                    {
                                        GoodsIssueItemLocation.Width = 0;
                                    }
                                    else
                                    {
                                        GoodsIssueItemLocation.UnitWidth = (itemBin.binBalance_UnitWidthBal ?? 0);
                                        GoodsIssueItemLocation.UnitWidth_Index = itemBin.binBalance_UnitWidthBal_Index;
                                        GoodsIssueItemLocation.UnitWidth_Id = itemBin.binBalance_UnitWidthBal_Id;
                                        GoodsIssueItemLocation.UnitWidth_Name = itemBin.binBalance_UnitWidthBal_Name;
                                        GoodsIssueItemLocation.UnitWidthRatio = itemBin.binBalance_UnitWidthBalRatio;

                                        GoodsIssueItemLocation.Width = (Decimal)(QtyPick * (itemBin.binBalance_UnitWidthBal ?? 0));
                                        GoodsIssueItemLocation.Width_Index = itemBin.binBalance_UnitWidthBal_Index;
                                        GoodsIssueItemLocation.Width_Id = itemBin.binBalance_UnitWidthBal_Id;
                                        GoodsIssueItemLocation.Width_Name = itemBin.binBalance_UnitWidthBal_Name;
                                        GoodsIssueItemLocation.WidthRatio = itemBin.binBalance_UnitWidthBalRatio;
                                    }

                                    if (itemBin.binBalance_LengthBegin == 0)
                                    {
                                        GoodsIssueItemLocation.Length = 0;
                                    }
                                    else
                                    {
                                        GoodsIssueItemLocation.UnitLength = (itemBin.binBalance_UnitLengthBal ?? 0);
                                        GoodsIssueItemLocation.UnitLength_Index = itemBin.binBalance_UnitLengthBal_Index;
                                        GoodsIssueItemLocation.UnitLength_Id = itemBin.binBalance_UnitLengthBal_Id;
                                        GoodsIssueItemLocation.UnitLength_Name = itemBin.binBalance_UnitLengthBal_Name;
                                        GoodsIssueItemLocation.UnitLengthRatio = itemBin.binBalance_UnitLengthBalRatio;

                                        GoodsIssueItemLocation.Length = (Decimal)(QtyPick * (itemBin.binBalance_UnitWidthBal ?? 0));
                                        GoodsIssueItemLocation.Length_Index = itemBin.binBalance_UnitLengthBal_Index;
                                        GoodsIssueItemLocation.Length_Id = itemBin.binBalance_UnitLengthBal_Id;
                                        GoodsIssueItemLocation.Length_Name = itemBin.binBalance_UnitLengthBal_Name;
                                        GoodsIssueItemLocation.LengthRatio = itemBin.binBalance_UnitLengthBalRatio;
                                    }

                                    if (itemBin.binBalance_HeightBegin == 0)
                                    {
                                        GoodsIssueItemLocation.Height = 0;
                                    }
                                    else
                                    {
                                        GoodsIssueItemLocation.UnitHeight = (itemBin.binBalance_UnitHeightBal ?? 0);
                                        GoodsIssueItemLocation.UnitHeight_Index = itemBin.binBalance_UnitHeightBal_Index;
                                        GoodsIssueItemLocation.UnitHeight_Id = itemBin.binBalance_UnitHeightBal_Id;
                                        GoodsIssueItemLocation.UnitHeight_Name = itemBin.binBalance_UnitHeightBal_Name;
                                        GoodsIssueItemLocation.UnitHeightRatio = itemBin.binBalance_UnitHeightBalRatio;

                                        GoodsIssueItemLocation.Height = (Decimal)(QtyPick * (itemBin.binBalance_UnitHeightBal ?? 0));
                                        GoodsIssueItemLocation.Height_Index = itemBin.binBalance_UnitHeightBal_Index;
                                        GoodsIssueItemLocation.Height_Id = itemBin.binBalance_UnitHeightBal_Id;
                                        GoodsIssueItemLocation.Height_Name = itemBin.binBalance_UnitHeightBal_Name;
                                        GoodsIssueItemLocation.HeightRatio = itemBin.binBalance_UnitHeightBalRatio;
                                    }

                                    if (itemBin.binBalance_UnitVolumeBal == 0)
                                    {
                                        GoodsIssueItemLocation.UnitVolume = 0;
                                    }
                                    else
                                    {
                                        GoodsIssueItemLocation.UnitVolume = (itemBin.binBalance_UnitVolumeBal ?? 0);
                                        GoodsIssueItemLocation.Volume = (Decimal)(QtyPick * (itemBin.binBalance_UnitVolumeBal ?? 0));
                                    }

                                    GoodsIssueItemLocation.UnitPrice = (itemPlanGI.UnitPrice ?? 0);
                                    GoodsIssueItemLocation.UnitPrice_Index = itemPlanGI.UnitPrice_Index;
                                    GoodsIssueItemLocation.UnitPrice_Id = itemPlanGI.UnitPrice_Id;
                                    GoodsIssueItemLocation.UnitPrice_Name = itemPlanGI.UnitPrice_Name;
                                    GoodsIssueItemLocation.Price = (Decimal)(QtyPick * (itemPlanGI.Price ?? 0));
                                    GoodsIssueItemLocation.Price_Index = itemPlanGI.UnitPrice_Index;
                                    GoodsIssueItemLocation.Price_Id = itemPlanGI.UnitPrice_Id;
                                    GoodsIssueItemLocation.Price_Name = itemPlanGI.UnitPrice_Name;



                                    GoodsIssueItemLocation.DocumentRef_No1 = itemPlanGI.DocumentRef_No1;
                                    GoodsIssueItemLocation.DocumentRef_No2 = itemPlanGI.DocumentRef_No2;
                                    GoodsIssueItemLocation.DocumentRef_No3 = itemPlanGI.DocumentRef_No3;
                                    GoodsIssueItemLocation.DocumentRef_No4 = itemPlanGI.DocumentRef_No4;
                                    GoodsIssueItemLocation.DocumentRef_No5 = itemPlanGI.DocumentRef_No5;
                                    GoodsIssueItemLocation.Document_Status = -2;
                                    GoodsIssueItemLocation.UDF_1 = itemPlanGI.UDF_1;
                                    GoodsIssueItemLocation.UDF_2 = itemPlanGI.UDF_2;
                                    GoodsIssueItemLocation.UDF_3 = itemPlanGI.UDF_3;
                                    GoodsIssueItemLocation.UDF_4 = itemPlanGI.UDF_4;
                                    GoodsIssueItemLocation.UDF_5 = itemPlanGI.UDF_5;
                                    GoodsIssueItemLocation.Ref_Process_Index = new Guid("22744590-55D8-4448-88EF-5997C252111F");  // PLAN GI Process
                                    GoodsIssueItemLocation.Ref_Document_No = itemPlanGI.PlanGoodsIssue_No;
                                    GoodsIssueItemLocation.Ref_Document_Index = (Guid)itemPlanGI.PlanGoodsIssue_Index;
                                    GoodsIssueItemLocation.Ref_DocumentItem_Index = itemPlanGI.PlanGoodsIssueItem_Index;
                                    GoodsIssueItemLocation.GoodsReceiveItem_Index = new Guid(itemBin.goodsReceiveItem_Index);
                                    GoodsIssueItemLocation.Create_By = model.create_by;
                                    GoodsIssueItemLocation.Create_Date = DateTime.Now;
                                    GoodsIssueItemLocation.GoodsIssue_No = model.goodsIssue_No;
                                    GoodsIssueItemLocation.BinBalance_Index = new Guid(itemBin.binBalance_Index);

                                    GoodsIssueItemLocation.Invoice_No = itemBin.invoice_No;
                                    GoodsIssueItemLocation.Declaration_No = itemBin.declaration_No;
                                    GoodsIssueItemLocation.HS_Code = itemBin.hs_Code;
                                    GoodsIssueItemLocation.Conutry_of_Origin = itemBin.conutry_of_Origin;
                                    GoodsIssueItemLocation.Tax1 = itemBin.tax1;
                                    GoodsIssueItemLocation.Tax1_Currency_Index = itemBin.tax1_Currency_Index;
                                    GoodsIssueItemLocation.Tax1_Currency_Id = itemBin.tax1_Currency_Id;
                                    GoodsIssueItemLocation.Tax1_Currency_Name = itemBin.tax1_Currency_Name;
                                    GoodsIssueItemLocation.Tax2 = itemBin.tax2;
                                    GoodsIssueItemLocation.Tax2_Currency_Index = itemBin.tax2_Currency_Index;
                                    GoodsIssueItemLocation.Tax2_Currency_Id = itemBin.tax2_Currency_Id;
                                    GoodsIssueItemLocation.Tax2_Currency_Name = itemBin.tax2_Currency_Name;
                                    GoodsIssueItemLocation.Tax3 = itemBin.tax3;
                                    GoodsIssueItemLocation.Tax3_Currency_Index = itemBin.tax3_Currency_Index;
                                    GoodsIssueItemLocation.Tax3_Currency_Id = itemBin.tax3_Currency_Id;
                                    GoodsIssueItemLocation.Tax3_Currency_Name = itemBin.tax3_Currency_Name;
                                    GoodsIssueItemLocation.Tax4 = itemBin.tax4;
                                    GoodsIssueItemLocation.Tax4_Currency_Index = itemBin.tax4_Currency_Index;
                                    GoodsIssueItemLocation.Tax4_Currency_Id = itemBin.tax4_Currency_Id;
                                    GoodsIssueItemLocation.Tax4_Currency_Name = itemBin.tax4_Currency_Name;
                                    GoodsIssueItemLocation.Tax5 = itemBin.tax5;
                                    GoodsIssueItemLocation.Tax5_Currency_Index = itemBin.tax5_Currency_Index;
                                    GoodsIssueItemLocation.Tax5_Currency_Id = itemBin.tax5_Currency_Id;
                                    GoodsIssueItemLocation.Tax5_Currency_Name = itemBin.tax5_Currency_Name;

                                    ListGoodsIssueItemLocation.Add(GoodsIssueItemLocation);

                                    itemPlanGI.GITotalQty = itemPlanGI.GITotalQty + QtyPick;

                                    QtyPlanGIRemian = QtyPlanGIRemian - QtyPick;

                                }
                            }

                            #region inset GIL and runwave status 30
                            using (var db4 = new GIDbContext())
                            {
                                var transaction = db4.Database.BeginTransaction(IsolationLevel.Serializable);
                                try
                                {
                                    var GI = db4.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 20).ToList();
                                    foreach (var g in GI)
                                    {
                                        g.RunWave_Status = 30;
                                    }

                                    db4.IM_GoodsIssueItemLocation.AddRange(ListGoodsIssueItemLocation);
                                    db4.SaveChanges();
                                    transaction.Commit();
                                }
                                catch (Exception exy)
                                {
                                    msglog = State + " ex Rollback " + exy.Message.ToString();
                                    olog.logging("runwave", msglog);
                                    transaction.Rollback();
                                    throw exy;
                                }
                            }
                            #endregion


                            #region insert bincardreserve and runwave status 40

                            using (var Contact = new GIDbContext())
                            {
                                var GIL = Contact.IM_GoodsIssueItemLocation.Where(c => c.Ref_Document_Index == itemPlanGI.PlanGoodsIssue_Index && c.Ref_DocumentItem_Index == itemPlanGI.PlanGoodsIssueItem_Index && c.Document_Status != -1).ToList();
                                foreach (var g in GIL)
                                {
                                    var insertBinCardReserve = new PickbinbalanceViewModel();

                                    insertBinCardReserve.ref_Document_Index = g.GoodsIssue_Index.ToString();
                                    insertBinCardReserve.ref_DocumentItem_Index = g.GoodsIssueItemLocation_Index.ToString();
                                    insertBinCardReserve.goodsIssue_No = model.goodsIssue_No;
                                    insertBinCardReserve.Process_Index = "22744590-55D8-4448-88EF-5997C252111F";
                                    //model.GIIL = GoodsIssueItemLocation;
                                    insertBinCardReserve.create_By = model.create_by;
                                    insertBinCardReserve.pick = g.TotalQty;
                                    insertBinCardReserve.binbalance_Index = g.BinBalance_Index.ToString();
                                    insertBinCardReserve.wave_Index = Contact.IM_GoodsIssue.FirstOrDefault(f => f.GoodsIssue_Index == g.GoodsIssue_Index)?.Wave_Index.ToString();
                                    var insetBinRe = utils.SendDataApi<actionResultPickbinbalanceViewModel>(new AppSettingConfig().GetUrl("insertBinCardReserve"), insertBinCardReserve.sJson());
                                    if (insetBinRe.resultIsUse)
                                    {
                                        var transaction = Contact.Database.BeginTransaction(IsolationLevel.Serializable);
                                        try
                                        {
                                            var GI = Contact.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 30).ToList();
                                            foreach (var gg in GI)
                                            {
                                                gg.RunWave_Status = 40;
                                            }
                                            Contact.SaveChanges();
                                            transaction.Commit();
                                        }
                                        catch (Exception exy)
                                        {
                                            msglog = State + " ex Rollback " + exy.Message.ToString();
                                            olog.logging("runwave", msglog);
                                            transaction.Rollback();
                                            throw exy;
                                        }
                                    }
                                    else
                                    {
                                        var transaction = Contact.Database.BeginTransaction(IsolationLevel.Serializable);
                                        try
                                        {
                                            var GI = Contact.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && (c.RunWave_Status == 30 || c.RunWave_Status == 40)).ToList();
                                            foreach (var gg in GI)
                                            {
                                                gg.RunWave_Status = 30;
                                            }
                                            Contact.SaveChanges();
                                            transaction.Commit();
                                        }
                                        catch (Exception exy)
                                        {
                                            msglog = State + " ex Rollback " + exy.Message.ToString();
                                            olog.logging("runwave", msglog);
                                            transaction.Rollback();
                                            throw exy;
                                        }
                                        msglog = State + " ex Rollback " + "Insert BinCardReserve Error";
                                        olog.logging("runwave", msglog);
                                        result.resultMsg = "Insert BinCardReserve Error";
                                        result.resultIsUse = false;
                                        //return result;

                                    }
                                }
                            }
                            #endregion


                            var chkGIL2 = db.IM_GoodsIssueItemLocation.Where(c => c.Ref_Document_Index == itemPlanGI.PlanGoodsIssue_Index && c.Ref_DocumentItem_Index == itemPlanGI.PlanGoodsIssueItem_Index && c.Document_Status != -1).ToList();
                            var sumqty = chkGIL2.Sum(s => s.TotalQty);
                            if (chkGIL2.Count == 0 || sumqty != itemPlanGI.TotalQty)
                            {
                                using (var updatepgi = new GIDbContext())
                                {
                                    var transaction = updatepgi.Database.BeginTransaction(IsolationLevel.Serializable);
                                    try
                                    {
                                        var pgii = model.listGoodsIssueItemViewModel.Where(c => c.planGoodsIssueItem_Index == itemPlanGI.PlanGoodsIssueItem_Index).ToList();
                                        foreach (var resultpgii in pgii)
                                        {
                                            resultpgii.qtyPlan = (resultpgii.totalQty - sumqty);
                                            resultpgii.qty = (resultpgii.totalQty - sumqty);
                                            listpgiinotinsert.Add(resultpgii);
                                        }

                                        var pgi = updatepgi.IM_PlanGoodsIssueItem.Where(c => c.PlanGoodsIssueItem_Index == itemPlanGI.PlanGoodsIssueItem_Index && c.Document_Status == 1).ToList();
                                        foreach (var p in pgi)
                                        {
                                            p.Document_Status = 0;
                                        }
                                        updatepgi.SaveChanges();
                                        transaction.Commit();
                                    }

                                    catch (Exception exy)
                                    {
                                        msglog = State + " ex Rollback " + exy.Message.ToString();
                                        olog.logging("UpdateUserAssign", msglog);
                                        transaction.Rollback();
                                        throw exy;
                                    }

                                }
                            }
                        }

                        #region update isuse = '' and runwave 50
                        strwhere.isActive = true;
                        var updateIsuseViewBinbalance = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("updateIsuseViewBinbalance"), strwhere.sJson());
                        if (updateIsuseViewBinbalance)
                        {
                            using (var db5 = new GIDbContext())
                            {
                                var transaction = db5.Database.BeginTransaction(IsolationLevel.Serializable);
                                try
                                {
                                    var GI = db5.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 40).ToList();
                                    foreach (var g in GI)
                                    {
                                        g.RunWave_Status = 50;
                                    }
                                    db5.SaveChanges();
                                    transaction.Commit();
                                }
                                catch (Exception exy)
                                {
                                    msglog = State + " ex Rollback " + exy.Message.ToString();
                                    olog.logging("runwave", msglog);
                                    transaction.Rollback();
                                    throw exy;
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Update IsUse By Error");
                        }
                        #endregion
                    }
                }

                #region update PI status 3 and runwave status 60
                using (var db5 = new GIDbContext())
                {
                    var listPGI = new List<Guid>();
                    if (model.listGoodsIssueItemViewModel.Count > 0)
                    {
                        foreach (var item in model.listGoodsIssueItemViewModel)
                        {
                            if (item.planGoodsIssue_Index != Guid.Parse("00000000-0000-0000-0000-000000000000"))
                            {
                                listPGI.Add(item.planGoodsIssue_Index);
                            }
                        }
                    }
                    foreach (var item in listPGI)
                    {
                        var pgii = db5.IM_PlanGoodsIssueItem.Where(c => c.PlanGoodsIssue_Index == item && c.Document_Status == 0).Count();
                        if (pgii == 0)
                        {
                            var transaction = db5.Database.BeginTransaction(IsolationLevel.Serializable);
                            try
                            {
                                var pgi = db5.IM_PlanGoodsIssue.Where(c => c.PlanGoodsIssue_Index == item).ToList();
                                foreach (var p in pgi)
                                {
                                    p.Document_Status = 3;
                                }
                                //var GI = db5.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 50).ToList();
                                //foreach (var g in GI)
                                //{
                                //    g.Wave_Index = new Guid(model.wave_Index);
                                //    g.RunWave_Status = 60;
                                //}
                                db5.SaveChanges();
                                transaction.Commit();
                            }

                            catch (Exception exy)
                            {
                                msglog = State + " ex Rollback " + exy.Message.ToString();
                                olog.logging("runwave", msglog);
                                transaction.Rollback();
                                throw exy;
                            }
                        }
                    }
                }
                #endregion
                result.resultIsUse = true;
                result.resultMsg = CheckRunwavePast == listpgiinotinsert.Count() ? "สินค้าไม่เพียงพอ" : "หยิบวัสดุสำเร็จ";
                result.pgii = listpgiinotinsert;
                return result;
            }
            catch (Exception ex)
            {
                msglog = State + " ex Rollback " + ex.Message.ToString();
                olog.logging("runwave", msglog);
                var result = new actionResultRunWaveViewModelViewModel();
                result.resultIsUse = false;
                result.resultMsg = ex.Message;
                return result;
            }
        }

        public actionResultRunWaveViewModelViewModel runwaveV2(RunWaveFilterViewModel model)
        {
            String State = "Start";
            String msglog = "";
            var olog = new logtxt();
            var process = new Guid("2E026669-99BD-4DE0-8818-534F29F7B89D");
            var PlanGiRunWave = new List<Guid>();
            var ListPlanGiRunWave = new List<DocumentViewModel>();
            var listpgiinotinsert = new List<plangoodsissueitemViewModel>();
            try
            {

                int CheckRunwavePast = model.listGoodsIssueItemViewModel.Count();
                var result = new actionResultRunWaveViewModelViewModel();

                #region runwave status 10
                if (model.listGoodsIssueItemViewModel.Count > 0)
                {
                    foreach (var item in model.listGoodsIssueItemViewModel)
                    {
                        if (item.planGoodsIssueItem_Index != Guid.Parse("00000000-0000-0000-0000-000000000000"))
                        {
                            PlanGiRunWave.Add(item.planGoodsIssueItem_Index);
                            var PlanGiRunWaveitem = new DocumentViewModel();
                            PlanGiRunWaveitem.documentItem_Index = item.planGoodsIssueItem_Index;
                            PlanGiRunWaveitem.whereDocument_Status = 0;
                            PlanGiRunWaveitem.document_Status = 1;

                            ListPlanGiRunWave.Add(PlanGiRunWaveitem);
                        }
                    }
                }

                using (var db2 = new GIDbContext())
                {
                    var transaction = db2.Database.BeginTransaction(IsolationLevel.Serializable);
                    try
                    {
                        //update status 10
                        var objectPGII = new DocumentViewModel();
                        objectPGII.listDocumentViewModel = ListPlanGiRunWave;
                        var UpdatePGII = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("UpdatePGII"), objectPGII.sJson());
                        if (!UpdatePGII)
                        {
                            throw new Exception("Update Status PGII Error 1");
                        }
                        var GI = db2.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && (c.RunWave_Status == null || c.RunWave_Status == 0)).ToList();
                        foreach (var g in GI)
                        {
                            g.Wave_Index = new Guid(model.wave_Index);
                            g.RunWave_Status = 10;
                        }
                        db2.SaveChanges();
                        transaction.Commit();
                    }

                    catch (Exception exy)
                    {
                        msglog = State + " ex Rollback " + exy.Message.ToString();
                        olog.logging("runwave", msglog);
                        transaction.Rollback();
                        throw exy;
                    }
                }
                #endregion



                var planGIResultx = db.View_PLANWAVEV.Where(c => PlanGiRunWave.Contains(c.PlanGoodsIssueItem_Index))
                    .GroupBy(g => new
                    {
                        g.Product_Index,
                        g.Product_Id,
                        g.Product_Name,
                        g.Product_SecondName,
                        g.Product_ThirdName,
                        g.Product_Lot,
                        g.ItemStatus_Index,
                        g.ItemStatus_Id,
                        g.ItemStatus_Name,
                        g.MFG_Date,
                        g.EXP_Date,
                        g.DocumentRef_No1,
                        g.DocumentRef_No2,
                        g.DocumentRef_No3,
                        g.DocumentRef_No4,
                        g.DocumentRef_No5,
                        g.UDF_1,
                        g.UDF_2,
                        g.UDF_3,
                        g.UDF_4,
                        g.UDF_5,
                        //g.sum(TotalQty) as TotalQty,
                        //g.isnull(sum(GITotalQty), 0) as GITotalQty,
                        //g.sum(TotalQty) - isnull(sum(GITotalQty), 0)  AS QtyWave,
                        //g.ROW_NUMBER() OVER(Order by Product_Id) as RowNum,
                        g.Owner_Index,
                        g.PlanGoodsIssue_UDF_1,
                        g.PlanGoodsIssue_UDF_2,
                        g.PlanGoodsIssue_UDF_3,
                        g.PlanGoodsIssue_UDF_4,
                        g.PlanGoodsIssue_UDF_5
                    })
                    .Select(s => new
                    {
                        s.Key.Product_Index,
                        s.Key.Product_Id,
                        s.Key.Product_Name,
                        s.Key.Product_SecondName,
                        s.Key.Product_ThirdName,
                        s.Key.Product_Lot,
                        s.Key.ItemStatus_Index,
                        s.Key.ItemStatus_Id,
                        s.Key.ItemStatus_Name,
                        s.Key.MFG_Date,
                        s.Key.EXP_Date,
                        s.Key.DocumentRef_No1,
                        s.Key.DocumentRef_No2,
                        s.Key.DocumentRef_No3,
                        s.Key.DocumentRef_No4,
                        s.Key.DocumentRef_No5,
                        s.Key.UDF_1,
                        s.Key.UDF_2,
                        s.Key.UDF_3,
                        s.Key.UDF_4,
                        s.Key.UDF_5,
                        total = s.Sum(x => x.TotalQty),
                        GITotalQty = s.Sum(x => x.GITotalQty),
                        QtyWave = s.Sum(x => x.TotalQty) - s.Sum(x => x.GITotalQty),
                        //g.ROW_NUMBER() OVER(Order by Product_Id) as RowNum,
                        s.Key.Owner_Index,
                        s.Key.PlanGoodsIssue_UDF_1,
                        s.Key.PlanGoodsIssue_UDF_2,
                        s.Key.PlanGoodsIssue_UDF_3,
                        s.Key.PlanGoodsIssue_UDF_4,
                        s.Key.PlanGoodsIssue_UDF_5
                    }).ToList();

                if (planGIResultx.Count == 0)
                {
                    throw new Exception("Plan GI not found..");
                }


                //find wave template
                var jsGetWaveRule = new { process_Index = process, wave_Index = model.wave_Index };
                var getWaveRule = utils.SendDataApi<List<WaveRuleViewModel>>(new AppSettingConfig().GetUrl("getWaveRule"), jsGetWaveRule.sJson());

                if (getWaveRule.Count == 0)
                {
                    throw new Exception("Wave Template not found.");
                }


                bool isUseAttribute = false;

                foreach (var waveRule in getWaveRule)
                {
                    var jsgetViewWaveTemplate = new { process_Index = process, wave_Index = model.wave_Index, rule_Index = waveRule.rule_Index };
                    var getViewWaveTemplate = utils.SendDataApi<List<WaveTemplateViewModel>>(new AppSettingConfig().GetUrl("getViewWaveTemplate"), jsgetViewWaveTemplate.sJson());

                    var planGIWaveResult = db.View_PLANWAVEbyPLANGIV2.AsQueryable();

                    planGIWaveResult = planGIWaveResult.Where(c => PlanGiRunWave.Contains(c.PlanGoodsIssueItem_Index));

                    #region for RuleSource
                    var RuleSourceList = getViewWaveTemplate.Where(c => c.isSource == 1 && c.isSearch == 1).ToList();

                    foreach (var itemRuleSourceList in RuleSourceList)
                    {
                        if (itemRuleSourceList.ruleConditionOperation == "IN")
                        {
                            var dataarray = itemRuleSourceList.ruleCondition_Param.Replace("'", "").Split(',');
                            if (itemRuleSourceList.ruleConditionField_Name == "DocumentType_Id")
                            {
                                planGIWaveResult = planGIWaveResult.Where(c => dataarray.Contains(c.DocumentType_Id));
                            }
                            if (itemRuleSourceList.ruleConditionField_Name == "Owner_Id")
                            {
                                planGIWaveResult = planGIWaveResult.Where(c => dataarray.Contains(c.Owner_Id));
                            }
                            //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " IN (" + itemRuleSourceList.ruleCondition_Param + ") ";
                            //var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            //var predicate = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>(
                            //    Expression.Call(
                            //        Expression.PropertyOrField(param, itemRuleSourceList.ruleConditionField_Name),
                            //        "Contains", null, Expression.Constant(itemRuleSourceList.ruleCondition_Param)
                            //    ), param);
                            //planGIWaveResult = planGIWaveResult.Where(predicate);
                        }
                        else if (itemRuleSourceList.ruleConditionOperation == "=")
                        {
                            if (itemRuleSourceList.ruleConditionField_Name == "UseAttribute")
                            {
                                if (itemRuleSourceList.ruleCondition_Param.ToString().ToUpper() == "TRUE")
                                {
                                    isUseAttribute = true;
                                }
                                else
                                {
                                    isUseAttribute = false;
                                }

                            }
                            else
                            {
                                //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " = '" + itemRuleSourceList.ruleCondition_Param + "' ";
                                var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                                var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.Equal(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
                                    , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                                planGIWaveResult = planGIWaveResult.Where(lambda);
                            }


                        }
                        else if (itemRuleSourceList.ruleConditionOperation == ">")
                        {
                            //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " > '" + itemRuleSourceList.ruleCondition_Param + "' ";
                            var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.GreaterThan(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
                                , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            planGIWaveResult = planGIWaveResult.Where(lambda);

                        }
                        else if (itemRuleSourceList.ruleConditionOperation == "<")
                        {
                            //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " < '" + itemRuleSourceList.ruleCondition_Param + "' ";
                            var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.LessThan(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
                                , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            planGIWaveResult = planGIWaveResult.Where(lambda);
                        }
                        else if (itemRuleSourceList.ruleConditionOperation == "!=")
                        {
                            //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " != '" + itemRuleSourceList.ruleCondition_Param + "' ";
                            var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.NotEqual(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
                                , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            planGIWaveResult = planGIWaveResult.Where(lambda);
                        }
                        else if (itemRuleSourceList.ruleConditionOperation == ">=")
                        {
                            //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " >= '" + itemRuleSourceList.ruleCondition_Param + "' ";
                            var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.GreaterThanOrEqual(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
                                , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            planGIWaveResult = planGIWaveResult.Where(lambda);
                        }
                        else if (itemRuleSourceList.ruleConditionOperation == "<=")
                        {
                            //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " <= '" + itemRuleSourceList.ruleCondition_Param + "' ";
                            var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.LessThanOrEqual(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
                                , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            planGIWaveResult = planGIWaveResult.Where(lambda);
                        }
                        else if (itemRuleSourceList.ruleConditionOperation == "Like")
                        {
                            //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " Like '" + itemRuleSourceList.ruleCondition_Param + "' ";
                            var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            var predicate = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>(
                                Expression.Call(
                                    Expression.PropertyOrField(param, itemRuleSourceList.ruleConditionField_Name),
                                    "Contains", null, Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""))
                                ), param);
                            planGIWaveResult = planGIWaveResult.Where(predicate);
                        }
                    }
                    #endregion

                    #region for RuleDesSort
                    var RuleSourceSortList = getViewWaveTemplate.Where(c => c.isSource == 1 && c.isSort == 1).ToList();

                    string setWhereSourceSort = "";

                    if (RuleSourceSortList.Count > 0)
                    {
                        setWhereSourceSort += " Order by ";
                    }

                    int iRowsSourceSort = 0;
                    foreach (var itemRuleSourceSortList in RuleSourceSortList)
                    {
                        if (iRowsSourceSort == 0)
                        {
                            setWhereSourceSort += itemRuleSourceSortList.ruleConditionField_Name + ' ' + itemRuleSourceSortList.ruleCondition_Param;
                        }
                        else
                        {
                            setWhereSourceSort += "," + itemRuleSourceSortList.ruleConditionField_Name + ' ' + itemRuleSourceSortList.ruleCondition_Param;
                        }
                        iRowsSourceSort = iRowsSourceSort + 1;

                    }
                    #endregion


                    String SqlWhere = "";
                    var planGIWaveResult2 = planGIWaveResult.ToList();

                    //
                    if (planGIWaveResult2.Count != PlanGiRunWave.Count)
                    {
                        var listpgii = PlanGiRunWave.Where(c => !planGIWaveResult2.Select(s => s.PlanGoodsIssueItem_Index).Contains(c)).ToList();

                        if (listpgii.Count != 0)
                        {
                            ListPlanGiRunWave = new List<DocumentViewModel>();

                            var pgii = model.listGoodsIssueItemViewModel.Where(c => listpgii.Contains(c.planGoodsIssueItem_Index)).ToList();
                            foreach (var resultpgii in pgii)
                            {
                                listpgiinotinsert.Add(resultpgii);

                                var PlanGiRunWaveitem = new DocumentViewModel();
                                PlanGiRunWaveitem.documentItem_Index = resultpgii.planGoodsIssueItem_Index;
                                PlanGiRunWaveitem.whereDocument_Status = 1;
                                PlanGiRunWaveitem.document_Status = 0;

                                ListPlanGiRunWave.Add(PlanGiRunWaveitem);
                            }

                            var objectPGII = new DocumentViewModel();
                            objectPGII.listDocumentViewModel = ListPlanGiRunWave;
                            var UpdatePGII = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("UpdatePGII"), objectPGII.sJson());
                            if (UpdatePGII)
                            {
                                throw new Exception("Update Status PGII Error 2");
                            }
                        }
                    }

                    // LOOP Group SUM PLAN GI
                    foreach (var item in planGIResultx)
                    {
                        var planGIWaveResult3 = planGIWaveResult2.AsQueryable();
                        var strwhere = new getViewBinbalanceViewModel();
                        //GET Condition  From Plan GI
                        #region query Plag Gi
                        if (item.Owner_Index.ToString() != "")
                        {
                            //SqlWhere += " And Convert(Nvarchar(200) ,Owner_Index) =  '" + item.Owner_Index.ToString() + "' ";
                            //SqlWhere += " And Owner_Index =  '" + item.Owner_Index + "' ";
                            strwhere.Owner_Index = item.Owner_Index;
                            planGIWaveResult3 = planGIWaveResult3.Where(c => c.Owner_Index == item.Owner_Index);
                        }
                        if (item.Product_Index.ToString() != "")
                        {
                            //SqlWhere += " And Convert(Nvarchar(200) , Product_Index ) = '" + item.Product_Index.ToString() + "' ";
                            //SqlWhere += " And Product_Index  = '" + item.Product_Index + "' ";
                            strwhere.Product_Index = item.Product_Index;
                            planGIWaveResult3 = planGIWaveResult3.Where(c => c.Product_Index == item.Product_Index);
                        }

                        if (item.Product_Lot != null)
                        {
                            if (item.Product_Lot.ToString() != "")
                            {
                                //SqlWhere += " And Product_Lot = '" + item.Product_Lot.ToString() + "' ";
                                strwhere.Product_Lot = item.Product_Lot;
                                planGIWaveResult3 = planGIWaveResult3.Where(c => c.Product_Lot == item.Product_Lot);
                            }
                        }
                        if (item.ItemStatus_Index.ToString() != "")
                        {
                            //SqlWhere += " And Convert(Nvarchar(200) ,ItemStatus_Index) =  '" + item.ItemStatus_Index.ToString() + "' ";
                            //SqlWhere += " And ItemStatus_Index =  '" + item.ItemStatus_Index + "' ";
                            strwhere.ItemStatus_Index = item.ItemStatus_Index;
                            planGIWaveResult3 = planGIWaveResult3.Where(c => c.ItemStatus_Index == item.ItemStatus_Index);
                        }
                        if (item.MFG_Date != null)
                        {
                            if (item.MFG_Date.ToString() != "")
                            {
                                //strwhere.MFG_Date = item.MFG_Date;
                                // SqlWhere += " And MFG_Date = @MFG_Date ";
                            }
                        }
                        if (item.EXP_Date != null)
                        {
                            if (item.EXP_Date.ToString() != "")
                            {
                                //strwhere.EXP_Date = item.EXP_Date;
                                //SqlWhere += " And EXP_Date = @EXP_Date ";
                            }
                        }
                        if (isUseAttribute == true)
                        {
                            // ADD UDF 1-5 
                            strwhere.isUseAttribute = isUseAttribute;
                            if (item.UDF_1 != null)
                            {
                                //SqlWhere += " And Isnull(UDF_1,'') = '" + item.UDF_1.ToString() + "'";
                                strwhere.UDF_1 = item.UDF_1;
                                planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_1 == item.UDF_1);
                            }

                            if (item.UDF_2 != null)
                            {
                                //SqlWhere += " And  Isnull( UDF_2,'') = '" + item.UDF_2.ToString() + "'";
                                strwhere.UDF_2 = item.UDF_2;
                                planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_2 == item.UDF_2);
                            }

                            if (item.UDF_3 != null)
                            {
                                //SqlWhere += " And  Isnull(UDF_3,'') = '" + item.UDF_3.ToString() + "'";
                                strwhere.UDF_3 = item.UDF_3;
                                planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_3 == item.UDF_3);
                            }

                            if (item.UDF_4 != null)
                            {
                                //SqlWhere += " And  Isnull(UDF_4,'') = '" + item.UDF_4.ToString() + "'";
                                strwhere.UDF_4 = item.UDF_4;
                                planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_4 == item.UDF_4);
                            }

                            if (item.UDF_5 != null)
                            {
                                //SqlWhere += " And  Isnull(UDF_5,'') = '" + item.UDF_5.ToString() + "'";
                                strwhere.UDF_5 = item.UDF_5;
                                planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_5 == item.UDF_5);
                            }
                        }
                        #endregion

                        //planGIWaveResult = planGIWaveResult.Where(setWhereSource);

                        if (planGIWaveResult3.ToList().Count < 1)
                        {
                            continue;
                        }
                        #region update isuse and runwave status 20
                        strwhere.isuse = model.goodsIssue_Index;
                        var listDataBinbalance = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("updateIsuseViewBinbalance"), strwhere.sJson());
                        if (listDataBinbalance)
                        {
                            using (var db3 = new GIDbContext())
                            {
                                var transaction = db3.Database.BeginTransaction(IsolationLevel.Serializable);
                                try
                                {
                                    var GI = db3.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 10).ToList();
                                    foreach (var g in GI)
                                    {
                                        g.RunWave_Status = 20;
                                    }
                                    db3.SaveChanges();
                                    transaction.Commit();
                                }
                                catch (Exception exy)
                                {
                                    msglog = State + " ex Rollback " + exy.Message.ToString();
                                    olog.logging("runwave", msglog);
                                    transaction.Rollback();
                                    throw exy;
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Update IsUse Error");
                        }
                        #endregion

                        // Assign Qty for  wave Loop

                        decimal? QtyPlanGIRemian = 0;
                        foreach (var itemPlanGI in planGIWaveResult3)
                        {
                            var ListGoodsIssueItemLocation = new List<im_GoodsIssueItemLocation>();

                            QtyPlanGIRemian = itemPlanGI.TotalQty - itemPlanGI.GITotalQty;
                            //chkBinCardReserve = GIL
                            var chkGIL = db.IM_GoodsIssueItemLocation.Where(c => c.Ref_Document_Index == itemPlanGI.PlanGoodsIssue_Index && c.Ref_DocumentItem_Index == itemPlanGI.PlanGoodsIssueItem_Index).ToList();
                            if (chkGIL.Count() != 0)
                            {

                                var chkBinCardReserve = new PickbinbalanceViewModel();
                                chkBinCardReserve.ref_Document_Index = chkGIL.FirstOrDefault().GoodsIssue_Index.ToString();
                                chkBinCardReserve.ref_DocumentItem_Index = chkGIL.FirstOrDefault().GoodsIssueItemLocation_Index.ToString();
                                var countBinCardReserve = utils.SendDataApi<int>(new AppSettingConfig().GetUrl("chkBinCardReserve"), chkBinCardReserve.sJson());
                                if (chkGIL.Count() != countBinCardReserve)
                                {
                                    using (var db7 = new GIDbContext())
                                    {
                                        var transaction = db7.Database.BeginTransaction(IsolationLevel.Serializable);
                                        try
                                        {
                                            db7.RemoveRange(chkGIL);
                                            db7.SaveChanges();
                                            transaction.Commit();
                                        }

                                        catch (Exception exy)
                                        {
                                            msglog = State + " ex Rollback " + exy.Message.ToString();
                                            olog.logging("runwave", msglog);
                                            transaction.Rollback();
                                            throw exy;
                                        }
                                    }
                                    QtyPlanGIRemian = itemPlanGI.TotalQty - 0;
                                }
                            }

                            #region view_waveBinbalance2
                            strwhere.isuse = model.goodsIssue_Index;
                            strwhere.isActive = true;
                            var listDataBinbalance2 = utils.SendDataApi<List<BinBalanceViewModel>>(new AppSettingConfig().GetUrl("getViewBinbalance"), strwhere.sJson());
                            var listDataLocation2 = utils.SendDataApi<List<locationViewModel>>(new AppSettingConfig().GetUrl("getLocationMaster"), new { }.sJson());
                            var listDataProduct2 = utils.SendDataApi<List<ProductViewModel>>(new AppSettingConfig().GetUrl("getProductMaster"), new { }.sJson());

                            var View_WaveBinBalance2 = (from BB in listDataBinbalance2
                                                        join LC in listDataLocation2 on BB.location_Index equals LC.location_Index into gj
                                                        from L in gj.DefaultIfEmpty()
                                                        join Prd in listDataProduct2 on BB.product_Index equals Prd.product_Index
                                                        where L.locationType_Index != Guid.Parse("14C5F85D-137D-470E-8C70-C1E535005DC3")
                                                        && (BB.goodsReceive_EXP_Date != null ? DateTime.Now.Subtract(BB.goodsReceive_EXP_Date.sParse<DateTime>()).Days : 1)
                                                        > (Prd.ProductShelfLife_D != null ? Prd.ProductShelfLife_D : 0)
                                                        select new View_WaveBinBalanceViewModel
                                                        {
                                                            binBalance_Index = BB.binBalance_Index.ToString(),
                                                            owner_Index = BB.owner_Index.ToString(),
                                                            owner_Id = BB.owner_Id,
                                                            owner_Name = BB.owner_Name,
                                                            location_Index = BB.location_Index.ToString(),
                                                            location_Id = BB.location_Id,
                                                            location_Name = BB.location_Name,
                                                            goodsReceive_Index = BB.goodsReceive_Index.ToString(),
                                                            goodsReceive_No = BB.goodsReceive_No,
                                                            goodsReceive_Date = BB.goodsReceive_Date.ToString(),
                                                            goodsReceiveItem_Index = BB.goodsReceiveItem_Index.ToString(),
                                                            goodsReceiveItemLocation_Index = BB.goodsReceiveItemLocation_Index.ToString(),
                                                            tagItem_Index = BB.tagItem_Index.ToString(),
                                                            tag_Index = BB.tag_Index.ToString(),
                                                            tag_No = BB.tag_No,
                                                            product_Index = BB.product_Index.ToString(),
                                                            product_Id = BB.product_Id,
                                                            product_Name = BB.product_Name,
                                                            product_SecondName = BB.product_SecondName,
                                                            product_ThirdName = BB.product_ThirdName,
                                                            product_Lot = BB.product_Lot,
                                                            itemStatus_Index = BB.itemStatus_Index.ToString(),
                                                            itemStatus_Id = BB.itemStatus_Id,
                                                            itemStatus_Name = BB.itemStatus_Name,
                                                            goodsReceive_MFG_Date = BB.goodsReceive_MFG_Date.ToString(),
                                                            goodsReceive_EXP_Date = BB.goodsReceive_EXP_Date.ToString(),
                                                            goodsReceive_ProductConversion_Index = BB.goodsReceive_ProductConversion_Index.ToString(),
                                                            goodsReceive_ProductConversion_Id = BB.goodsReceive_ProductConversion_Id.ToString(),
                                                            goodsReceive_ProductConversion_Name = BB.goodsReceive_ProductConversion_Name.ToString(),
                                                            binBalance_Ratio = BB.binBalance_Ratio,
                                                            binBalance_QtyBegin = BB.binBalance_QtyBegin,
                                                            binBalance_WeightBegin = BB.binBalance_WeightBegin,
                                                            binBalance_VolumeBegin = BB.binBalance_VolumeBegin,
                                                            binBalance_QtyBal = BB.binBalance_QtyBal,
                                                            binBalance_WeightBal = BB.binBalance_WeightBal,
                                                            binBalance_VolumeBal = BB.binBalance_VolumeBal,
                                                            binBalance_QtyReserve = BB.binBalance_QtyReserve,
                                                            binBalance_WeightReserve = BB.binBalance_WeightReserve,
                                                            binBalance_VolumeReserve = BB.binBalance_VolumeReserve,
                                                            productConversion_Index = BB.productConversion_Index.ToString(),
                                                            productConversion_Id = BB.productConversion_Id,
                                                            productConversion_Name = BB.productConversion_Name,
                                                            udf_1 = BB.uDF_1,
                                                            udf_2 = BB.uDF_2,
                                                            udf_3 = BB.uDF_3,
                                                            udf_4 = BB.uDF_4,
                                                            udf_5 = BB.uDF_5,
                                                            create_By = BB.create_By,
                                                            create_Date = BB.create_Date.ToString(),
                                                            update_By = BB.update_By,
                                                            update_Date = BB.update_Date.ToString(),
                                                            cancel_By = BB.cancel_By,
                                                            cancel_Date = BB.cancel_Date.ToString(),
                                                            isUse = BB.isUse,
                                                            binBalance_Status = BB.binBalance_Status,
                                                            picking_Seq = L.picking_Seq,
                                                            ageRemain = BB.ageRemain,
                                                            productShelfLife_D = Prd.ProductShelfLife_D != null ? Prd.ProductShelfLife_D : 0,
                                                        }).AsQueryable();

                            #region for RuleDesSort
                            var RuleDesList2 = getViewWaveTemplate.Where(c => c.isDestination == 1 && c.isSearch == 1).ToList();

                            //var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>(e, param);

                            foreach (var itemRuleDesList in RuleDesList2)
                            {
                                if (itemRuleDesList.ruleConditionOperation == "IN")
                                {
                                    if (itemRuleDesList.ruleConditionField_Name == "Zone_Id")
                                    {
                                        //setWhereDes += " And  Location_Index   in (  select   Location_Index  from ms_ZoneLocation   where  IsDelete <> -1 and Zone_Index  in (select Zone_Index from ms_Zone where IsDelete <> -1 and " + itemRuleDesList.ruleConditionField_Name + " IN (" + itemRuleDesList.ruleCondition_Param + " )" + ")) ";
                                        var listDataZoneLocation = utils.SendDataApi<List<ZoneLocationViewModel>>(new AppSettingConfig().GetUrl("getZoneLocationMaster"), new { }.sJson());
                                        var listDataZone = utils.SendDataApi<List<ZoneViewModel>>(new AppSettingConfig().GetUrl("getZoneMaster"), new { }.sJson());

                                        //var param = Expression.Parameter(typeof(ZoneViewModel), "x");
                                        //var predicate = Expression.Lambda<Func<ZoneViewModel, bool>>(
                                        //    Expression.Call(
                                        //        Expression.PropertyOrField(param, itemRuleDesList.ruleConditionField_Name),
                                        //        "Contains", null, Expression.Constant(itemRuleDesList.ruleCondition_Param)
                                        //    ), param);
                                        var dataarray = itemRuleDesList.ruleCondition_Param.Replace("'", "").Split(',');
                                        var dataZone = listDataZone.Where(c => dataarray.Contains(c.zone_Id)).ToList();
                                        var zoneArray = new List<Guid?>();
                                        foreach (var z in dataZone)
                                        {
                                            zoneArray.Add(z.zone_Index);
                                        }
                                        var listLocation_index = listDataZoneLocation.Where(c => zoneArray.Contains(c.zone_Index)).Select(s => s.location_Index.ToString()).ToList();
                                        View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => listLocation_index.Contains(c.location_Index));
                                    }
                                    else
                                    {
                                        var dataarray = itemRuleDesList.ruleCondition_Param.Replace("'", "").Split(',');
                                        
                                        if (itemRuleDesList.ruleConditionField_Name == "GoodsReceive_No")
                                        {
                                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.goodsReceive_No));
                                        }
                                        if (itemRuleDesList.ruleConditionField_Name == "ItemStatus_Id")
                                        {
                                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.itemStatus_Id));
                                        }
                                        if (itemRuleDesList.ruleConditionField_Name == "Location_Name")
                                        {
                                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.location_Name));
                                        }
                                        if (itemRuleDesList.ruleConditionField_Name == "Locationtype_Id")
                                        {
                                            //View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.location));
                                        }
                                        if (itemRuleDesList.ruleConditionField_Name == "Product_Id")
                                        {
                                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.product_Id));
                                        }
                                        if (itemRuleDesList.ruleConditionField_Name == "Product_Lot")
                                        {
                                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.product_Lot));
                                        }
                                        if (itemRuleDesList.ruleConditionField_Name == "Warehouse")
                                        {
                                            //planGIWaveResult = planGIWaveResult.Where(c => dataarray.Contains(c.Warehouse));
                                        }

                                        //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " IN (" + itemRuleDesList.ruleCondition_Param + ") ";
                                        //var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                        //var predicate = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>(
                                        //    Expression.Call(
                                        //        Expression.PropertyOrField(param, itemRuleDesList.ruleConditionField_Name),
                                        //        "Contains", null, Expression.Constant(itemRuleDesList.ruleCondition_Param)
                                        //    ), param);
                                        //View_WaveBinBalance = View_WaveBinBalance.Where(predicate);
                                    }
                                }
                                else if (itemRuleDesList.ruleConditionOperation == "=")
                                {
                                    if (itemRuleDesList.ruleConditionField_Name == "Zone_Id")
                                    {
                                        //setWhereDes += "  And  Location_Index   in (  select   Location_Index  from ms_ZoneLocation   where IsDelete <> -1 and Zone_Index  in (select Zone_Index from ms_Zone where IsDelete <> -1 and " + itemRuleDesList.ruleConditionField_Name + " = '" + itemRuleDesList.ruleCondition_Param + "' " + ")) ";
                                        var listDataZoneLocation = utils.SendDataApi<List<ZoneLocationViewModel>>(new AppSettingConfig().GetUrl("getZoneLocationMaster"), new { }.sJson());
                                        var listDataZone = utils.SendDataApi<List<ZoneViewModel>>(new AppSettingConfig().GetUrl("getZoneMaster"), new { }.sJson());

                                        var param = Expression.Parameter(typeof(ZoneViewModel), "x");
                                        var lambda = Expression.Lambda<Func<ZoneViewModel, bool>>((Expression)Expression.Equal(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                                            , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                                        var dataZone = listDataZone.AsQueryable().Where(lambda).ToList();
                                        var zoneArray = new List<Guid?>();
                                        foreach (var z in dataZone)
                                        {
                                            zoneArray.Add(z.zone_Index);
                                        }
                                        var listLocation_index = listDataZoneLocation.Where(c => zoneArray.Contains(c.zone_Index)).Select(s => s.location_Index.ToString()).ToList();
                                        View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => listLocation_index.Contains(c.location_Index));
                                    }
                                    else
                                    {
                                        //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " = '" + itemRuleDesList.ruleCondition_Param + "' ";
                                        var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                        var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.Equal(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                                            , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                                        View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
                                    }
                                }
                                else if (itemRuleDesList.ruleConditionOperation == ">")
                                {
                                    //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " > '" + itemRuleDesList.ruleCondition_Param + "' ";
                                    var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                    var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.GreaterThan(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                                        , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
                                }
                                else if (itemRuleDesList.ruleConditionOperation == "<")
                                {
                                    //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " < '" + itemRuleDesList.ruleCondition_Param + "' ";
                                    var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                    var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.LessThan(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                                        , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
                                }
                                else if (itemRuleDesList.ruleConditionOperation == "!=")
                                {
                                    //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " != '" + itemRuleDesList.ruleCondition_Param + "' ";
                                    var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                    var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.NotEqual(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                                        , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
                                }
                                else if (itemRuleDesList.ruleConditionOperation == ">=")
                                {
                                    //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " >= '" + itemRuleDesList.ruleCondition_Param + "' ";
                                    var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                    var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.GreaterThanOrEqual(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                                        , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
                                }
                                else if (itemRuleDesList.ruleConditionOperation == "<=")
                                {
                                    //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " <= '" + itemRuleDesList.ruleCondition_Param + "' ";
                                    var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                    var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.LessThanOrEqual(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                                        , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
                                }
                                else if (itemRuleDesList.ruleConditionOperation == "Like")
                                {
                                    //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " Like '" + itemRuleDesList.ruleCondition_Param + "' ";
                                    var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                    var predicate = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>(
                                        Expression.Call(
                                            Expression.PropertyOrField(param, itemRuleDesList.ruleConditionField_Name),
                                            "Contains", null, Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""))
                                        ), param);
                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(predicate);
                                }
                                //setWhereDes += "";

                            }
                            #endregion

                            #region for RuleDesSortList
                            var RuleDesSortList2 = getViewWaveTemplate.Where(c => c.isDestination == 1 && c.isSort == 1).ToList();

                            int iRowsDesSort2 = 0;
                            foreach (var itemRuleDesSortList in RuleDesSortList2)
                            {
                                if (iRowsDesSort2 == 0)
                                {
                                    //setWhereDesSort += itemRuleDesSortList.ruleConditionField_Name + ' ' + itemRuleDesSortList.ruleCondition_Param;
                                    var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                    var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, string>>(Expression.Property(param, itemRuleDesSortList.ruleConditionField_Name), param);
                                    if (itemRuleDesSortList.ruleCondition_Param.ToUpper() == "ASC")
                                    {
                                        View_WaveBinBalance2 = View_WaveBinBalance2.OrderByDescending(lambda);
                                    }
                                    else if (itemRuleDesSortList.ruleCondition_Param.ToUpper() == "DESC")
                                    {
                                        View_WaveBinBalance2 = View_WaveBinBalance2.OrderBy(lambda);
                                    }
                                }
                                else
                                {
                                    var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                    var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, string>>(Expression.Property(param, itemRuleDesSortList.ruleConditionField_Name), param);
                                    if (itemRuleDesSortList.ruleCondition_Param.ToUpper() == "ASC")
                                    {
                                        View_WaveBinBalance2 = View_WaveBinBalance2.OrderByDescending(lambda);
                                    }
                                    else if (itemRuleDesSortList.ruleCondition_Param.ToUpper() == "DESC")
                                    {
                                        View_WaveBinBalance2 = View_WaveBinBalance2.OrderBy(lambda);
                                    }
                                }
                                iRowsDesSort2 = iRowsDesSort2 + 1;

                            }
                            #endregion

                            #endregion


                            var BinBalanceResult = View_WaveBinBalance2.ToList();
                            foreach (var itemBin in BinBalanceResult)
                            {

                                decimal? QtyBal = itemBin.binBalance_QtyBal - itemBin.binBalance_QtyReserve;
                                if (QtyPlanGIRemian <= 0)
                                {
                                    break;
                                }
                                if (QtyBal <= 0)
                                {
                                    continue;
                                }
                                if (QtyPlanGIRemian >= QtyBal && QtyBal > 0)
                                {
                                    // Add GI ITEMLOCATION 
                                    var GoodsIssueItemLocation = new im_GoodsIssueItemLocation();
                                    GoodsIssueItemLocation.GoodsIssueItemLocation_Index = Guid.NewGuid();
                                    GoodsIssueItemLocation.GoodsIssue_Index = new Guid(model.goodsIssue_Index);
                                    GoodsIssueItemLocation.TagItem_Index = new Guid(itemBin.tagItem_Index);
                                    GoodsIssueItemLocation.Tag_Index = new Guid(itemBin.tag_Index);
                                    GoodsIssueItemLocation.Tag_No = itemBin.tag_No;
                                    GoodsIssueItemLocation.Product_Index = new Guid(itemBin.product_Index);
                                    GoodsIssueItemLocation.Product_Id = itemBin.product_Id;
                                    GoodsIssueItemLocation.Product_Name = itemBin.product_Name;
                                    GoodsIssueItemLocation.Product_SecondName = itemBin.product_SecondName;
                                    GoodsIssueItemLocation.Product_ThirdName = itemBin.product_ThirdName;
                                    GoodsIssueItemLocation.Product_Lot = itemBin.product_Lot;
                                    GoodsIssueItemLocation.ItemStatus_Index = new Guid(itemBin.itemStatus_Index);
                                    GoodsIssueItemLocation.ItemStatus_Id = itemBin.itemStatus_Id;
                                    GoodsIssueItemLocation.ItemStatus_Name = itemBin.itemStatus_Name;
                                    GoodsIssueItemLocation.Location_Index = new Guid(itemBin.location_Index);
                                    GoodsIssueItemLocation.Location_Id = itemBin.location_Id;
                                    GoodsIssueItemLocation.Location_Name = itemBin.location_Name;
                                    GoodsIssueItemLocation.QtyPlan = (Decimal)itemPlanGI.TotalQty;
                                    GoodsIssueItemLocation.Qty = (Decimal)QtyBal / (Decimal)itemPlanGI.Ratio;
                                    GoodsIssueItemLocation.Ratio = (Decimal)itemPlanGI.Ratio;
                                    GoodsIssueItemLocation.TotalQty = (Decimal)QtyBal;
                                    GoodsIssueItemLocation.ProductConversion_Index = new Guid(itemBin.productConversion_Index);
                                    GoodsIssueItemLocation.ProductConversion_Id = itemBin.productConversion_Id;
                                    GoodsIssueItemLocation.ProductConversion_Name = itemBin.productConversion_Name;
                                    GoodsIssueItemLocation.MFG_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_MFG_Date) ? itemBin.goodsReceive_MFG_Date.toDate() : null;
                                    GoodsIssueItemLocation.EXP_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_EXP_Date) ? itemBin.goodsReceive_EXP_Date.toDate() : null;
                                    GoodsIssueItemLocation.Weight = (Decimal)itemBin.binBalance_WeightBal;
                                    GoodsIssueItemLocation.Volume = (Decimal)itemBin.binBalance_VolumeBal;
                                    GoodsIssueItemLocation.DocumentRef_No1 = itemPlanGI.DocumentRef_No1;
                                    GoodsIssueItemLocation.DocumentRef_No2 = itemPlanGI.DocumentRef_No2;
                                    GoodsIssueItemLocation.DocumentRef_No3 = itemPlanGI.DocumentRef_No3;
                                    GoodsIssueItemLocation.DocumentRef_No4 = itemPlanGI.DocumentRef_No4;
                                    GoodsIssueItemLocation.DocumentRef_No5 = itemPlanGI.DocumentRef_No5;
                                    GoodsIssueItemLocation.Document_Status = -2;
                                    GoodsIssueItemLocation.UDF_1 = itemPlanGI.UDF_1;
                                    GoodsIssueItemLocation.UDF_2 = itemPlanGI.UDF_2;
                                    GoodsIssueItemLocation.UDF_3 = itemPlanGI.UDF_3;
                                    GoodsIssueItemLocation.UDF_4 = itemPlanGI.UDF_4;
                                    GoodsIssueItemLocation.UDF_5 = itemPlanGI.UDF_5;
                                    GoodsIssueItemLocation.Ref_Process_Index = new Guid("22744590-55D8-4448-88EF-5997C252111F");  // PLAN GI Process
                                    GoodsIssueItemLocation.Ref_Document_No = itemPlanGI.PlanGoodsIssue_No;
                                    GoodsIssueItemLocation.Ref_Document_Index = (Guid)itemPlanGI.PlanGoodsIssue_Index;
                                    GoodsIssueItemLocation.Ref_DocumentItem_Index = itemPlanGI.PlanGoodsIssueItem_Index;
                                    GoodsIssueItemLocation.GoodsReceiveItem_Index = new Guid(itemBin.goodsReceiveItem_Index);
                                    GoodsIssueItemLocation.Create_By = model.create_by;
                                    GoodsIssueItemLocation.Create_Date = DateTime.Now;
                                    GoodsIssueItemLocation.GoodsIssue_No = model.goodsIssue_No;
                                    GoodsIssueItemLocation.BinBalance_Index = new Guid(itemBin.binBalance_Index);

                                    ListGoodsIssueItemLocation.Add(GoodsIssueItemLocation);
                                    //#region inset GIL and runwave status 30
                                    //using (var db4 = new GIDbContext())
                                    //{
                                    //    var transaction = db4.Database.BeginTransaction(IsolationLevel.Serializable);
                                    //    try
                                    //    {
                                    //        var GI = db4.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 20).ToList();
                                    //        foreach (var g in GI)
                                    //        {
                                    //            g.RunWave_Status = 30;
                                    //        }
                                    //        db4.IM_GoodsIssueItemLocation.Add(GoodsIssueItemLocation);
                                    //        db4.SaveChanges();
                                    //        transaction.Commit();
                                    //    }
                                    //    catch (Exception exy)
                                    //    {
                                    //        msglog = State + " ex Rollback " + exy.Message.ToString();
                                    //        olog.logging("runwave", msglog);
                                    //        transaction.Rollback();
                                    //        throw exy;
                                    //    }
                                    //}
                                    //#endregion


                                }
                                else if (QtyPlanGIRemian < QtyBal && QtyPlanGIRemian > 0 && QtyBal > 0)
                                {
                                    var QtyPick = QtyPlanGIRemian;
                                    // Add GI ITEMLOCATION 
                                    var GoodsIssueItemLocation = new im_GoodsIssueItemLocation();
                                    GoodsIssueItemLocation.GoodsIssueItemLocation_Index = Guid.NewGuid();
                                    GoodsIssueItemLocation.GoodsIssue_Index = new Guid(model.goodsIssue_Index);
                                    GoodsIssueItemLocation.TagItem_Index = new Guid(itemBin.tagItem_Index);
                                    GoodsIssueItemLocation.Tag_Index = new Guid(itemBin.tag_Index);
                                    GoodsIssueItemLocation.Tag_No = itemBin.tag_No;
                                    GoodsIssueItemLocation.Product_Index = new Guid(itemBin.product_Index);
                                    GoodsIssueItemLocation.Product_Id = itemBin.product_Id;
                                    GoodsIssueItemLocation.Product_Name = itemBin.product_Name;
                                    GoodsIssueItemLocation.Product_SecondName = itemBin.product_SecondName;
                                    GoodsIssueItemLocation.Product_ThirdName = itemBin.product_ThirdName;
                                    GoodsIssueItemLocation.Product_Lot = itemBin.product_Lot;
                                    GoodsIssueItemLocation.ItemStatus_Index = new Guid(itemBin.itemStatus_Index);
                                    GoodsIssueItemLocation.ItemStatus_Id = itemBin.itemStatus_Id;
                                    GoodsIssueItemLocation.ItemStatus_Name = itemBin.itemStatus_Name;
                                    GoodsIssueItemLocation.Location_Index = new Guid(itemBin.location_Index);
                                    GoodsIssueItemLocation.Location_Id = itemBin.location_Id;
                                    GoodsIssueItemLocation.Location_Name = itemBin.location_Name;
                                    GoodsIssueItemLocation.QtyPlan = (Decimal)itemPlanGI.TotalQty;
                                    GoodsIssueItemLocation.Qty = (Decimal)QtyPick / (Decimal)itemPlanGI.Ratio;
                                    GoodsIssueItemLocation.Ratio = (Decimal)itemPlanGI.Ratio;
                                    GoodsIssueItemLocation.TotalQty = (Decimal)QtyPick;
                                    GoodsIssueItemLocation.ProductConversion_Index = new Guid(itemBin.productConversion_Index);
                                    GoodsIssueItemLocation.ProductConversion_Id = itemBin.productConversion_Id;
                                    GoodsIssueItemLocation.ProductConversion_Name = itemBin.productConversion_Name;
                                    GoodsIssueItemLocation.MFG_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_MFG_Date) ? itemBin.goodsReceive_MFG_Date.toDate() : null;
                                    GoodsIssueItemLocation.EXP_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_EXP_Date) ? itemBin.goodsReceive_EXP_Date.toDate() : null;

                                    if (itemBin.binBalance_WeightBegin == 0)
                                    {
                                        GoodsIssueItemLocation.Weight = 0;
                                    }
                                    else
                                    {
                                        GoodsIssueItemLocation.Weight = (Decimal)(QtyPick * (itemBin.binBalance_WeightBegin / itemBin.binBalance_QtyBegin));

                                    }

                                    if (itemBin.binBalance_VolumeBegin == 0)
                                    {
                                        GoodsIssueItemLocation.Volume = 0;
                                    }
                                    else
                                    {
                                        GoodsIssueItemLocation.Volume = (Decimal)(QtyPick * (itemBin.binBalance_VolumeBegin / itemBin.binBalance_QtyBegin));

                                    }
                                    GoodsIssueItemLocation.DocumentRef_No1 = itemPlanGI.DocumentRef_No1;
                                    GoodsIssueItemLocation.DocumentRef_No2 = itemPlanGI.DocumentRef_No2;
                                    GoodsIssueItemLocation.DocumentRef_No3 = itemPlanGI.DocumentRef_No3;
                                    GoodsIssueItemLocation.DocumentRef_No4 = itemPlanGI.DocumentRef_No4;
                                    GoodsIssueItemLocation.DocumentRef_No5 = itemPlanGI.DocumentRef_No5;
                                    GoodsIssueItemLocation.Document_Status = -2;
                                    GoodsIssueItemLocation.UDF_1 = itemPlanGI.UDF_1;
                                    GoodsIssueItemLocation.UDF_2 = itemPlanGI.UDF_2;
                                    GoodsIssueItemLocation.UDF_3 = itemPlanGI.UDF_3;
                                    GoodsIssueItemLocation.UDF_4 = itemPlanGI.UDF_4;
                                    GoodsIssueItemLocation.UDF_5 = itemPlanGI.UDF_5;
                                    GoodsIssueItemLocation.Ref_Process_Index = new Guid("22744590-55D8-4448-88EF-5997C252111F");  // PLAN GI Process
                                    GoodsIssueItemLocation.Ref_Document_No = itemPlanGI.PlanGoodsIssue_No;
                                    GoodsIssueItemLocation.Ref_Document_Index = (Guid)itemPlanGI.PlanGoodsIssue_Index;
                                    GoodsIssueItemLocation.Ref_DocumentItem_Index = itemPlanGI.PlanGoodsIssueItem_Index;
                                    GoodsIssueItemLocation.GoodsReceiveItem_Index = new Guid(itemBin.goodsReceiveItem_Index);
                                    GoodsIssueItemLocation.Create_By = model.create_by;
                                    GoodsIssueItemLocation.GoodsIssue_No = model.goodsIssue_No;
                                    GoodsIssueItemLocation.BinBalance_Index = new Guid(itemBin.binBalance_Index);


                                    ListGoodsIssueItemLocation.Add(GoodsIssueItemLocation);
                                    //#region inset GIL and runwave status 30
                                    //using (var db4 = new GIDbContext())
                                    //{
                                    //    var transaction = db4.Database.BeginTransaction(IsolationLevel.Serializable);
                                    //    try
                                    //    {
                                    //        var GI = db4.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 20).ToList();
                                    //        foreach (var g in GI)
                                    //        {
                                    //            g.RunWave_Status = 30;
                                    //        }

                                    //        db4.IM_GoodsIssueItemLocation.Add(GoodsIssueItemLocation);
                                    //        db4.SaveChanges();
                                    //        transaction.Commit();
                                    //    }
                                    //    catch (Exception exy)
                                    //    {
                                    //        msglog = State + " ex Rollback " + exy.Message.ToString();
                                    //        olog.logging("runwave", msglog);
                                    //        transaction.Rollback();
                                    //        throw exy;
                                    //    }
                                    //}
                                    //#endregion
                                }
                            }

                            #region inset GIL and runwave status 30
                            using (var db4 = new GIDbContext())
                            {
                                var transaction = db4.Database.BeginTransaction(IsolationLevel.Serializable);
                                try
                                {
                                    var GI = db4.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 20).ToList();
                                    foreach (var g in GI)
                                    {
                                        g.RunWave_Status = 30;
                                    }

                                    db4.IM_GoodsIssueItemLocation.AddRange(ListGoodsIssueItemLocation);
                                    db4.SaveChanges();
                                    transaction.Commit();
                                }
                                catch (Exception exy)
                                {
                                    msglog = State + " ex Rollback " + exy.Message.ToString();
                                    olog.logging("runwave", msglog);
                                    transaction.Rollback();
                                    throw exy;
                                }
                            }
                            #endregion


                            #region insert bincardreserve and runwave status 40

                            using (var Contact = new GIDbContext())
                            {
                                var GIL = Contact.IM_GoodsIssueItemLocation.Where(c => c.Ref_Document_Index == itemPlanGI.PlanGoodsIssue_Index && c.Ref_DocumentItem_Index == itemPlanGI.PlanGoodsIssueItem_Index).ToList();
                                foreach (var g in GIL)
                                {
                                    var insertBinCardReserve = new PickbinbalanceViewModel();

                                    insertBinCardReserve.ref_Document_Index = g.GoodsIssue_Index.ToString();
                                    insertBinCardReserve.ref_DocumentItem_Index = g.GoodsIssueItemLocation_Index.ToString();
                                    insertBinCardReserve.goodsIssue_No = model.goodsIssue_No;
                                    insertBinCardReserve.Process_Index = "22744590-55D8-4448-88EF-5997C252111F";
                                    //model.GIIL = GoodsIssueItemLocation;
                                    insertBinCardReserve.create_By = model.create_by;
                                    insertBinCardReserve.pick = g.TotalQty;
                                    insertBinCardReserve.binbalance_Index = g.BinBalance_Index.ToString();
                                    insertBinCardReserve.wave_Index = Contact.IM_GoodsIssue.FirstOrDefault(f => f.GoodsIssue_Index == g.GoodsIssue_Index)?.Wave_Index.ToString();
                                    var insetBinRe = utils.SendDataApi<actionResultPickbinbalanceViewModel>(new AppSettingConfig().GetUrl("insertBinCardReserve"), insertBinCardReserve.sJson());
                                    if (insetBinRe.resultIsUse)
                                    {
                                        var transaction = Contact.Database.BeginTransaction(IsolationLevel.Serializable);
                                        try
                                        {
                                            var GI = Contact.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 30).ToList();
                                            foreach (var gg in GI)
                                            {
                                                gg.RunWave_Status = 40;
                                            }
                                            Contact.SaveChanges();
                                            transaction.Commit();
                                        }
                                        catch (Exception exy)
                                        {
                                            msglog = State + " ex Rollback " + exy.Message.ToString();
                                            olog.logging("runwave", msglog);
                                            transaction.Rollback();
                                            throw exy;
                                        }
                                    }
                                    else
                                    {
                                        var transaction = Contact.Database.BeginTransaction(IsolationLevel.Serializable);
                                        try
                                        {
                                            var GI = Contact.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && (c.RunWave_Status == 30 || c.RunWave_Status == 40)).ToList();
                                            foreach (var gg in GI)
                                            {
                                                gg.RunWave_Status = 30;
                                            }
                                            Contact.SaveChanges();
                                            transaction.Commit();
                                        }
                                        catch (Exception exy)
                                        {
                                            msglog = State + " ex Rollback " + exy.Message.ToString();
                                            olog.logging("runwave", msglog);
                                            transaction.Rollback();
                                            throw exy;
                                        }
                                        msglog = State + " ex Rollback " + "Insert BinCardReserve Error";
                                        olog.logging("runwave", msglog);
                                        result.resultMsg = "Insert BinCardReserve Error";
                                        result.resultIsUse = false;
                                        //return result;

                                    }
                                }
                            }
                            #endregion


                            var chkGIL2 = db.IM_GoodsIssueItemLocation.Where(c => c.Ref_Document_Index == itemPlanGI.PlanGoodsIssue_Index && c.Ref_DocumentItem_Index == itemPlanGI.PlanGoodsIssueItem_Index).Count();
                            if (chkGIL2 == 0)
                            {

                                var pgii = model.listGoodsIssueItemViewModel.Where(c => c.planGoodsIssueItem_Index == itemPlanGI.PlanGoodsIssueItem_Index).ToList();
                                foreach (var resultpgii in pgii)
                                {
                                    resultpgii.isDelete = true;
                                    listpgiinotinsert.Add(resultpgii);

                                    var PlanGiRunWaveitem = new DocumentViewModel();
                                    PlanGiRunWaveitem.documentItem_Index = resultpgii.planGoodsIssueItem_Index;
                                    PlanGiRunWaveitem.whereDocument_Status = 1;
                                    PlanGiRunWaveitem.document_Status = 0;

                                    ListPlanGiRunWave.Add(PlanGiRunWaveitem);
                                }

                                var UpdatePGII = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("UpdatePGII"), ListPlanGiRunWave.sJson());
                                if (UpdatePGII)
                                {
                                    throw new Exception("Update Status PGII Error 2");
                                }
                            }
                        }

                        #region update isuse = '' and runwave 50
                        strwhere.isActive = true;
                        var updateIsuseViewBinbalance = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("updateIsuseViewBinbalance"), strwhere.sJson());
                        if (updateIsuseViewBinbalance)
                        {
                            using (var db5 = new GIDbContext())
                            {
                                var transaction = db5.Database.BeginTransaction(IsolationLevel.Serializable);
                                try
                                {
                                    var GI = db5.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 40).ToList();
                                    foreach (var g in GI)
                                    {
                                        g.RunWave_Status = 50;
                                    }
                                    db5.SaveChanges();
                                    transaction.Commit();
                                }
                                catch (Exception exy)
                                {
                                    msglog = State + " ex Rollback " + exy.Message.ToString();
                                    olog.logging("runwave", msglog);
                                    transaction.Rollback();
                                    throw exy;
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Update IsUse By Error");
                        }
                        #endregion
                    }
                }

                #region update PI status 3 and runwave status 60
                using (var db5 = new GIDbContext())
                {
                    var listPGI = new List<Guid>();
                    if (model.listGoodsIssueItemViewModel.Count > 0)
                    {
                        foreach (var item in model.listGoodsIssueItemViewModel)
                        {
                            if (item.planGoodsIssue_Index != Guid.Parse("00000000-0000-0000-0000-000000000000"))
                            {
                                listPGI.Add(item.planGoodsIssue_Index);
                            }
                        }
                    }
                    foreach (var item in listPGI)
                    {
                        var pgii = db5.IM_PlanGoodsIssueItem.Where(c => c.PlanGoodsIssue_Index == item && c.Document_Status == 0).Count();
                        if (pgii == 0)
                        {
                            var transaction = db5.Database.BeginTransaction(IsolationLevel.Serializable);
                            try
                            {
                                var pgi = db5.IM_PlanGoodsIssue.Where(c => c.PlanGoodsIssue_Index == item).ToList();
                                foreach (var p in pgi)
                                {
                                    p.Document_Status = 3;
                                }
                                db5.SaveChanges();
                                transaction.Commit();
                            }

                            catch (Exception exy)
                            {
                                msglog = State + " ex Rollback " + exy.Message.ToString();
                                olog.logging("runwave", msglog);
                                transaction.Rollback();
                                throw exy;
                            }
                        }
                    }
                }
                #endregion
                result.resultIsUse = true;
                result.resultMsg = CheckRunwavePast == listpgiinotinsert.Count() ? "สินค้าไม่เพียงพอสำหรับการ.." : "Success";
                result.pgii = listpgiinotinsert;
                return result;
            }
            catch (Exception ex)
            {
                msglog = State + " ex Rollback " + ex.Message.ToString();
                olog.logging("runwave", msglog);
                var result = new actionResultRunWaveViewModelViewModel();
                result.resultIsUse = false;
                result.resultMsg = ex.Message;
                return result;
            }
        }

        public Result updateStatusAddData(GoodsIssueViewModel model)
        {
            String State = "Start";
            String msglog = "";
            var olog = new logtxt();
            try
            {
                var result = new Result();
                var GI = db.IM_GoodsIssue.Find(Guid.Parse(model.goodsIssue_Index));

                var GI_Index = new SqlParameter("@GI_Index", model.goodsIssue_Index);
                var resultx = db.Database.ExecuteSqlCommand("EXEC sp_GetCheckAfterTaskWave @GI_Index", GI_Index);

                foreach (var item in model.listGoodsIssueItemViewModel)
                {
                    var GIL = db.IM_GoodsIssueItemLocation.Find(Guid.Parse(item.goodsIssueItemLocation_Index));

                    GIL.Invoice_No = item.invoice_No;
                    GIL.Invoice_No_Out = item.invoice_No_Out;
                    GIL.Declaration_No = item.declaration_No;
                    GIL.Declaration_No_Out = item.declaration_No_Out;
                    GIL.HS_Code = item.hs_Code;
                    GIL.Conutry_of_Origin = item.conutry_of_Origin;
                    GIL.Tax1 = item.tax1;
                    GIL.Tax1_Currency_Index = item.tax1_Currency_Index;
                    GIL.Tax1_Currency_Id = item.tax1_Currency_Id;
                    GIL.Tax1_Currency_Name = item.tax1_Currency_Name;
                    GIL.Tax2 = item.tax2;
                    GIL.Tax2_Currency_Index = item.tax2_Currency_Index;
                    GIL.Tax2_Currency_Id = item.tax2_Currency_Id;
                    GIL.Tax2_Currency_Name = item.tax2_Currency_Name;
                    GIL.Tax3 = item.tax3;
                    GIL.Tax3_Currency_Index = item.tax3_Currency_Index;
                    GIL.Tax3_Currency_Id = item.tax3_Currency_Id;
                    GIL.Tax3_Currency_Name = item.tax3_Currency_Name;
                    GIL.Tax4 = item.tax4;
                    GIL.Tax4_Currency_Index = item.tax4_Currency_Index;
                    GIL.Tax4_Currency_Id = item.tax4_Currency_Id;
                    GIL.Tax4_Currency_Name = item.tax4_Currency_Name;
                    GIL.Tax5 = item.tax5;
                    GIL.Tax5_Currency_Index = item.tax5_Currency_Index;
                    GIL.Tax5_Currency_Id = item.tax5_Currency_Id;
                    GIL.Tax5_Currency_Name = item.tax5_Currency_Name;

                    GIL.Document_Status = 0;
                    GIL.Update_Date = DateTime.Now;
                    GIL.Update_By = model.create_by;
                }

                GI.Document_Remark = model.document_Remark;
                GI.DocumentPriority_Status = model.documentPriority_Status;
                GI.Warehouse_Index = !string.IsNullOrEmpty(model.warehouse_Index) ? new Guid(model.warehouse_Index) : (Guid?)null;
                GI.Warehouse_Id = !string.IsNullOrEmpty(model.warehouse_Index) ? model.warehouse_Id : null;
                GI.Warehouse_Name = !string.IsNullOrEmpty(model.warehouse_Index) ? model.warehouse_Name : null;

                GI.Document_Status = 0;
                GI.GI_status = 1;
                if (model.isUpdate)
                {
                    GI.Update_Date = DateTime.Now;
                    GI.Update_By = model.create_by;
                }
                var transactionGI = db.Database.BeginTransaction();
                try
                {
                    db.SaveChanges();
                    transactionGI.Commit();
                    result.resultIsUse = true;
                }

                catch (Exception exy)
                {
                    result.resultIsUse = false;
                    msglog = State + " ex Rollback " + exy.Message.ToString();
                    olog.logging("UpdateUserAssign", msglog);
                    transactionGI.Rollback();
                    throw exy;
                }

                //sp_GetCheckAfterTaskWave



                #region Create Task
                var GoodsIssueLocation = model.listGoodsIssueItemViewModel;
                var GoodsIssue = db.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.Document_Status == 0).ToList();

                #region 1 : 1

                var ViewJoinWarehouse = (from GIL in GoodsIssueLocation
                                         join Gi in GoodsIssue on new Guid(GIL.goodsIssue_Index) equals GI.GoodsIssue_Index

                                         select new View_AssignTaskJobViewModel
                                         {
                                             goodsIssue_Index = Gi.GoodsIssue_Index,
                                             goodsIssue_No = Gi.GoodsIssue_No,
                                             goodsIssueItemLocation_Index = new Guid(GIL.goodsIssueItemLocation_Index),
                                             goodsIssue_Date = Gi.GoodsIssue_Date,
                                             qty = GIL.qty,
                                             totalQty = GIL.totalQty,

                                             location_Index = new Guid(GIL.location_Index),
                                             location_Id = GIL.location_Id,
                                             location_Name = GIL.location_Name,
                                             tag_No   = GIL.tag_No,

                                         }).AsQueryable();


                var ResultGroup = ViewJoinWarehouse.GroupBy(c => new { c.goodsIssue_Index, c.goodsIssue_Date, c.location_Index, c.location_Id, c.location_Name ,c.tag_No})
                 .Select(group => new
                 {
                     GI = group.Key.goodsIssue_Index,
                     GID = group.Key.goodsIssue_Date,

                     LOCI = group.Key.location_Index,
                     LOCID = group.Key.location_Id,
                     LOCN = group.Key.location_Name,
                     TAG = group.Key.tag_No,
                     
                     ResultItem = group.OrderByDescending(o => o.location_Id).ThenByDescending(o => o.product_Id).ThenByDescending(o => o.qty).ToList()
                 }).ToList();

                var Template = "1";
                //var Template = "M";

                foreach (var item in ResultGroup)
                {
                    //  this.CreateTask(item.GI, item.GID, item.ResultItem, model.create_by, Template);
                    this.CreateTaskByLocation(item.GI, item.GID, item.ResultItem, model.create_by, Template, item.LOCI.ToString(), item.LOCN.ToString(), item.TAG.ToString());

                }

                #endregion
                foreach (var item in GoodsIssue)
                {
                    item.TaskGI_status = 1;
                }

                var transaction = db.Database.BeginTransaction();
                try
                {
                    db.SaveChanges();
                    transaction.Commit();
                    result.resultIsUse = true;

                    try
                    {
                     //   var AdjBom = updateCheckBOM(model);



                    }
                    catch (Exception exxxx)
                    {

                        olog.logging("UpdateUserAssign", "updateCheckBOM " + exxxx.Message.ToString());

                        //throw exxx;
                    }

                    //[sp_GetCheckAfterTask]
                    try
                    {
                        var GITask_Index = new SqlParameter("@GI_Index", model.goodsIssue_Index);
                        var resultTask = db.Database.ExecuteSqlCommand("EXEC sp_GetCheckAfterTask @GI_Index", GITask_Index);



                    }
                    catch (Exception exxx)
                    {

                        olog.logging("UpdateUserAssign", "sp_GetCheckAfterTask " + exxx.Message.ToString());

                        //throw exxx;
                    }




                }

                catch (Exception exy)
                {
                    result.resultIsUse = false;
                    msglog = State + " ex Rollback " + exy.Message.ToString();
                    olog.logging("UpdateUserAssign", msglog);
                    transaction.Rollback();
                    throw exy;
                }
                #endregion



                result.resultMsg = "Success";
                return result;
            }
            catch (Exception ex)
            {
                msglog = State + " ex Rollback " + ex.Message.ToString();
                olog.logging("runwave", msglog);
                var result = new Result();
                result.resultIsUse = false;
                result.resultMsg = ex.Message;
                return result;
            }
        }


        public Result updateCheckBOMAfterGI(GoodsIssueViewModel model)
        {
            String State = "Start";
            String msglog = "";
            var olog = new logtxt();
            try
            {

                var result = new Result();
                // var GI = db.IM_GoodsIssue.Find(Guid.Parse(model.goodsIssue_Index));
                var GoodsIssue = db.IM_GoodsIssueItemLocation.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.Document_Status == 0).ToList();

                var GroupPlanGI = GoodsIssue.GroupBy(c => new { c.GoodsIssue_Index, c.Ref_Document_No, c.Ref_Document_Index })
                                   .Select(group => new
                                   {
                                       GI_Index = group.Key.GoodsIssue_Index,
                                       PLANGI_No = group.Key.Ref_Document_No,
                                       PLANGI_Index = group.Key.Ref_Document_Index,


                                       //ResultItem = group.OrderByDescending(o => o.location_Id).ThenByDescending(o => o.product_Id).ThenByDescending(o => o.qty).ToList()
                                   }).ToList();


                // Group by Plan GI

                olog.logging("updateCheckBOMAfterGI", "GroupPlanGI : " + model.goodsIssue_Index);

                string sqlCMD = "";
                foreach (var itemPlanGI in GroupPlanGI)
                {


                    // Group by Plan GI HIGH_LV_ITEM
                    var ViewCheckBOM = db.View_GoodsIssueCheckBOM.Where(c => c.PlanGoodsIssue_Index == itemPlanGI.PLANGI_Index).ToList();
                    var groupViewCheckBOM = ViewCheckBOM.GroupBy(c => new { c.PlanGoodsIssue_Index, c.PlanGoodsIssue_No, c.HIGH_LV_ITEM })
                                   .Select(group => new
                                   {
                                       LineNum = group.Key.HIGH_LV_ITEM,
                                       PLANGI_No = group.Key.PlanGoodsIssue_No,
                                       PLANGI_Index = group.Key.PlanGoodsIssue_Index,


                                       ResultItem = group.OrderByDescending(o => o.HIGH_LV_ITEM).ToList()
                                   }).ToList();



                    olog.logging("updateCheckBOMAfterGI", "groupViewCheckBOM : " + itemPlanGI.PLANGI_No.ToString());



                    foreach (var iPlgiLine in groupViewCheckBOM)
                    {

                        var sPlanGoodsIssue_Index = new SqlParameter("@PlanGoodsIssue_Index", iPlgiLine.PLANGI_Index);
                        var sHIGH_LV_ITEM = new SqlParameter("@HIGH_LV_ITEM", iPlgiLine.LineNum);

                        var ViewBOM = db.View_GoodsIssueBOM.FromSql(" sp_GetCheckBOMAfterTask @PlanGoodsIssue_Index , @HIGH_LV_ITEM ", sPlanGoodsIssue_Index, sHIGH_LV_ITEM).ToList();


                        olog.logging("updateCheckBOMAfterGI", "sp_GetCheckBOMAfterTask : " + iPlgiLine.PLANGI_Index.ToString() + " , " + iPlgiLine.LineNum);


                        var checkBOMDiff = ViewBOM.Where(c => c.ModBomTotalQty != 0).ToList();



                        if (checkBOMDiff != null)
                        {

                            // Loop Bom Diff QTy
                            foreach (var iBom in ViewBOM)
                            {


                                if (iBom.BomDiffTotalQty != 0)
                                {
                                    var RemainBomDiffTotalQty = iBom.BomDiffTotalQty;
                                    var BomTaskitem = db.IM_TaskItem.Where(c => c.PlanGoodsIssueItem_Index == iBom.PlanGoodsIssueItem_Index).ToList();
                                    // Loop Taskitem for Decease Qty Pick
                                    foreach (var iTask in BomTaskitem)
                                    {
                                        if ((iTask.TotalQty - RemainBomDiffTotalQty) >= 0 && RemainBomDiffTotalQty > 0)
                                        {

                                            olog.logging("updateCheckBOMAfterGI", "iTask.TotalQty - RemainBomDiffTotalQty >= 0 : " + (iTask.TotalQty - RemainBomDiffTotalQty).ToString());


                                            sqlCMD += " " + Environment.NewLine;

                                            sqlCMD += "  UPdate WMSDB_AMZ_Outbound_V3..im_GoodsIssueItemLocation set  ";
                                            sqlCMD += "    Qty =  Qty -  (" + RemainBomDiffTotalQty.ToString() + " / Ratio) ";
                                            sqlCMD += "   ,TotalQty =  TotalQty - " + RemainBomDiffTotalQty.ToString();
                                            sqlCMD += "  where GoodsIssueItemLocation_Index = '" + iTask.Ref_DocumentItem_Index + "' ;";

                                            sqlCMD += " " + Environment.NewLine;


                                            sqlCMD += "  UPdate WMSDB_AMZ_Outbound_V3..im_TaskItem set ";
                                            sqlCMD += "    Qty =   Qty - (" + RemainBomDiffTotalQty.ToString() + " / Ratio) ";
                                            sqlCMD += "    ,TotalQty = TotalQty - " + RemainBomDiffTotalQty.ToString();
                                            sqlCMD += "   where TaskItem_Index = '" + iTask.TaskItem_Index + "' ;";

                                            sqlCMD += " " + Environment.NewLine;


                                            sqlCMD += "  UPdate  WMSDB_AMZ_Binbalance_V3 ..wm_BinBalance   set ";
                                            sqlCMD += "    BinBalance_QtyReserve = BinBalance_QtyReserve - " + RemainBomDiffTotalQty.ToString();
                                            sqlCMD += "   where BinBalance_Index = '" + iTask.BinBalance_Index + "' ;";

                                            sqlCMD += " " + Environment.NewLine;

                                            sqlCMD += "    UPdate  WMSDB_AMZ_Binbalance_V3 ..wm_BinCardReserve set ";
                                            sqlCMD += "   BinCardReserve_QtyBal = BinCardReserve_QtyBal - " + RemainBomDiffTotalQty.ToString();
                                            sqlCMD += "   where BinBalance_Index = '" + iTask.BinBalance_Index + "' ";
                                            sqlCMD += "   and Ref_DocumentItem_Index = '" + iTask.Ref_DocumentItem_Index + "' ;";

                                            sqlCMD += " " + Environment.NewLine;



                                            sqlCMD += "  INSERT INTO [dbo].[im_TaskItemTmp]                             " + Environment.NewLine;
                                            sqlCMD += "             (                                                   " + Environment.NewLine;
                                            sqlCMD += "               [TaskItemTmp_Index]                               " + Environment.NewLine;
                                            sqlCMD += "  		    , [TaskItem_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Task_Index]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Task_No]                                          " + Environment.NewLine;
                                            sqlCMD += "             ,[LineNum]                                          " + Environment.NewLine;
                                            sqlCMD += "             ,[TagItem_Index]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Tag_Index]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Tag_No]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Index]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Id]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Name]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_SecondName]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_ThirdName]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Lot]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[ItemStatus_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[ItemStatus_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[ItemStatus_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Location_Index]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Location_Id]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Location_Name]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Qty]                                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Ratio]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[TotalQty]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversion_Index]                          " + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversion_Id]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversion_Name]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[MFG_Date]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[EXP_Date]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeightRatio]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight_Id]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight_Name]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[WeightRatio]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeightRatio]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeightRatio]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeightRatio]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeightRatio]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidthRatio]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Width]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[Width_Index]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Width_Id]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[Width_Name]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[WidthRatio]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLengthRatio]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Length]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Length_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Length_Id]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Length_Name]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[LengthRatio]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeightRatio]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Height]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Height_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Height_Id]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Height_Name]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[HeightRatio]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitVolume]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Volume]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Price]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[Price_Index]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Price_Id]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[Price_Name]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No1]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No2]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No3]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No4]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No5]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Document_Status]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_1]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_2]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_3]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_4]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_5]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Process_Index]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Document_No]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Document_LineNum]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Document_Index]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_DocumentItem_Index]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[ReasonCode_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[ReasonCode_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[ReasonCode_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Create_By]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Create_Date]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Update_By]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Update_Date]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Cancel_By]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Cancel_Date]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOutPick_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOutPick_No]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Qty]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Ratio]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_TotalQty]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_By]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Date]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Status]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_By]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Date]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Status]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[splitQty]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[PlanGoodsIssue_Index]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[PlanGoodsIssueItem_Index]                         " + Environment.NewLine;
                                            sqlCMD += "             ,[PlanGoodsIssue_No]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Pick_ProductConversion_Index]                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Pick_ProductConversion_Id]                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Pick_ProductConversion_Name]                      " + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversionBarcode]                         " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOut_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOut_No]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[ImageUri]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[BinBalance_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[BinBalance_Index_New]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Invoice_No]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Invoice_No_Out]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Declaration_No]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Declaration_No_Out]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[HS_Code]                                          " + Environment.NewLine;
                                            sqlCMD += "             ,[Conutry_of_Origin]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[ERP_Location]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabel_Qty]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabel_Ratio]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabel_TotalQty]                            " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Status]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Location_Index]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Location_Id]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Location_Name]                            " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Location_Index]                   " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Location_Id]                      " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Location_Name]                    " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Qty]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Ratio]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_TotalQty]                          " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_By]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Date]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Status]                            " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Location_Index]                    " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Location_Id]                       " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Location_Name]                     " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Qty]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Ratio]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_TotalQty]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_By]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Date]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Location_Index]                     " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Location_Id]                        " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Location_Name]                      " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToStg_By]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToStg_Date]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToStg_Status]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Document_StatusTracking])                         " + Environment.NewLine;
                                            sqlCMD += "     Select   NewID() " + Environment.NewLine;
                                            sqlCMD += "             , [TaskItem_Index]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Task_Index]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Task_No]                                          " + Environment.NewLine;
                                            sqlCMD += "             ,[LineNum]                                          " + Environment.NewLine;
                                            sqlCMD += "             ,[TagItem_Index]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Tag_Index]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Tag_No]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Index]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Id]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Name]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_SecondName]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_ThirdName]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Lot]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[ItemStatus_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[ItemStatus_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[ItemStatus_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Location_Index]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Location_Id]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Location_Name]                                    " + Environment.NewLine;
                                            sqlCMD += "             ," + RemainBomDiffTotalQty.ToString() + " / Ratio   " + Environment.NewLine;   // [Qty]    
                                            sqlCMD += "             ,[Ratio]                                            " + Environment.NewLine;
                                            sqlCMD += "             ," + RemainBomDiffTotalQty.ToString() + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversion_Index]                          " + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversion_Id]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversion_Name]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[MFG_Date]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[EXP_Date]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeightRatio]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight_Id]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight_Name]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[WeightRatio]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeightRatio]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeightRatio]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeightRatio]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeightRatio]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidthRatio]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Width]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[Width_Index]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Width_Id]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[Width_Name]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[WidthRatio]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLengthRatio]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Length]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Length_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Length_Id]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Length_Name]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[LengthRatio]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeightRatio]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Height]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Height_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Height_Id]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Height_Name]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[HeightRatio]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitVolume]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Volume]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Price]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[Price_Index]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Price_Id]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[Price_Name]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No1]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No2]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No3]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No4]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No5]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Document_Status]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_1]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_2]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_3]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_4]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_5]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Process_Index]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Document_No]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Document_LineNum]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Document_Index]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_DocumentItem_Index]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[ReasonCode_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[ReasonCode_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[ReasonCode_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Create_By]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,getdate()                                          " + Environment.NewLine;
                                            sqlCMD += "             ,[Update_By]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Update_Date]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Cancel_By]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Cancel_Date]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOutPick_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOutPick_No]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Qty]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Ratio]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_TotalQty]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_By]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Date]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Status]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_By]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Date]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Status]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[splitQty]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[PlanGoodsIssue_Index]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[PlanGoodsIssueItem_Index]                         " + Environment.NewLine;
                                            sqlCMD += "             ,[PlanGoodsIssue_No]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Pick_ProductConversion_Index]                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Pick_ProductConversion_Id]                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Pick_ProductConversion_Name]                      " + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversionBarcode]                         " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOut_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOut_No]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[ImageUri]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[BinBalance_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[BinBalance_Index_New]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Invoice_No]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Invoice_No_Out]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Declaration_No]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Declaration_No_Out]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[HS_Code]                                          " + Environment.NewLine;
                                            sqlCMD += "             ,[Conutry_of_Origin]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[ERP_Location]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabel_Qty]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabel_Ratio]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabel_TotalQty]                            " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Status]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Location_Index]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Location_Id]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Location_Name]                            " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Location_Index]                   " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Location_Id]                      " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Location_Name]                    " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Qty]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Ratio]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_TotalQty]                          " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_By]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Date]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Status]                            " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Location_Index]                    " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Location_Id]                       " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Location_Name]                     " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Qty]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Ratio]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_TotalQty]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_By]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Date]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Location_Index]                     " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Location_Id]                        " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Location_Name]                      " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToStg_By]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToStg_Date]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToStg_Status]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Document_StatusTracking]                          " + Environment.NewLine;
                                            sqlCMD += "   from im_TaskItem                                              " + Environment.NewLine;
                                            sqlCMD += "   where TaskItem_Index  =  '" + iTask.TaskItem_Index + "' ;" + Environment.NewLine;

                                            sqlCMD += " " + Environment.NewLine;



                                            RemainBomDiffTotalQty = 0;

                                            olog.logging("updateCheckBOMAfterGI", "iTask.TotalQty - RemainBomDiffTotalQty >= 0 : " + sqlCMD);



                                        }
                                        else if ((iTask.TotalQty - RemainBomDiffTotalQty) < 0 && RemainBomDiffTotalQty > 0)
                                        {

                                            olog.logging("updateCheckBOMAfterGI", "iTask.TotalQty - RemainBomDiffTotalQty < 0 : " + (iTask.TotalQty - RemainBomDiffTotalQty).ToString());



                                            sqlCMD += "    UPdate WMSDB_AMZ_Outbound_V3..im_GoodsIssueItemLocation set  ";

                                            sqlCMD += "   Qty =  Qty -   (" + iTask.TotalQty.ToString() + " / Ratio) ";
                                            sqlCMD += "   ,TotalQty =  TotalQty - " + iTask.TotalQty.ToString();
                                            sqlCMD += "   where GoodsIssueItemLocation_Index = '" + iTask.Ref_DocumentItem_Index + "' ;";


                                            sqlCMD += " " + Environment.NewLine;

                                            sqlCMD += "    UPdate WMSDB_AMZ_Outbound_V3..im_TaskItem set ";
                                            sqlCMD += "   Qty =   Qty -    (" + iTask.TotalQty.ToString() + " / Ratio) ";
                                            sqlCMD += "   ,TotalQty = TotalQty - " + iTask.TotalQty.ToString();
                                            sqlCMD += "   where TaskItem_Index = '" + iTask.TaskItem_Index + "' ;";

                                            sqlCMD += " " + Environment.NewLine;


                                            sqlCMD += "    UPdate  WMSDB_AMZ_Binbalance_V3 ..wm_BinBalance   set ";
                                            sqlCMD += "   BinBalance_QtyReserve = BinBalance_QtyReserve - " + iTask.TotalQty.ToString();
                                            sqlCMD += "   where BinBalance_Index = '" + iTask.BinBalance_Index + "' ; ";

                                            sqlCMD += " " + Environment.NewLine;

                                            sqlCMD += "    UPdate  WMSDB_AMZ_Binbalance_V3 ..wm_BinCardReserve set ";
                                            sqlCMD += "    BinCardReserve_QtyBal = BinCardReserve_QtyBal - " + iTask.TotalQty.ToString();
                                            sqlCMD += "   where BinBalance_Index = '" + iTask.BinBalance_Index + "' ";
                                            sqlCMD += "   and Ref_DocumentItem_Index = '" + iTask.Ref_DocumentItem_Index + "' ;";

                                            sqlCMD += " " + Environment.NewLine;




                                            sqlCMD += "  INSERT INTO [dbo].[im_TaskItemTmp]                             " + Environment.NewLine;
                                            sqlCMD += "          (                                                      " + Environment.NewLine;
                                            sqlCMD += "              [TaskItemTmp_Index]                                " + Environment.NewLine;
                                            sqlCMD += "  		   , [TaskItem_Index]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Task_Index]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Task_No]                                          " + Environment.NewLine;
                                            sqlCMD += "             ,[LineNum]                                          " + Environment.NewLine;
                                            sqlCMD += "             ,[TagItem_Index]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Tag_Index]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Tag_No]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Index]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Id]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Name]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_SecondName]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_ThirdName]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Lot]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[ItemStatus_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[ItemStatus_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[ItemStatus_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Location_Index]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Location_Id]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Location_Name]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Qty]                                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Ratio]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[TotalQty]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversion_Index]                          " + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversion_Id]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversion_Name]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[MFG_Date]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[EXP_Date]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeightRatio]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight_Id]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight_Name]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[WeightRatio]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeightRatio]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeightRatio]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeightRatio]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeightRatio]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidthRatio]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Width]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[Width_Index]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Width_Id]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[Width_Name]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[WidthRatio]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLengthRatio]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Length]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Length_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Length_Id]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Length_Name]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[LengthRatio]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeightRatio]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Height]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Height_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Height_Id]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Height_Name]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[HeightRatio]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitVolume]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Volume]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Price]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[Price_Index]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Price_Id]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[Price_Name]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No1]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No2]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No3]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No4]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No5]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Document_Status]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_1]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_2]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_3]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_4]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_5]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Process_Index]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Document_No]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Document_LineNum]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Document_Index]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_DocumentItem_Index]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[ReasonCode_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[ReasonCode_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[ReasonCode_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Create_By]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Create_Date]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Update_By]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Update_Date]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Cancel_By]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Cancel_Date]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOutPick_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOutPick_No]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Qty]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Ratio]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_TotalQty]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_By]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Date]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Status]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_By]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Date]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Status]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[splitQty]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[PlanGoodsIssue_Index]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[PlanGoodsIssueItem_Index]                         " + Environment.NewLine;
                                            sqlCMD += "             ,[PlanGoodsIssue_No]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Pick_ProductConversion_Index]                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Pick_ProductConversion_Id]                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Pick_ProductConversion_Name]                      " + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversionBarcode]                         " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOut_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOut_No]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[ImageUri]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[BinBalance_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[BinBalance_Index_New]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Invoice_No]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Invoice_No_Out]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Declaration_No]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Declaration_No_Out]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[HS_Code]                                          " + Environment.NewLine;
                                            sqlCMD += "             ,[Conutry_of_Origin]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[ERP_Location]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabel_Qty]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabel_Ratio]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabel_TotalQty]                            " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Status]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Location_Index]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Location_Id]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Location_Name]                            " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Location_Index]                   " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Location_Id]                      " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Location_Name]                    " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Qty]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Ratio]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_TotalQty]                          " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_By]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Date]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Status]                            " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Location_Index]                    " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Location_Id]                       " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Location_Name]                     " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Qty]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Ratio]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_TotalQty]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_By]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Date]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Location_Index]                     " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Location_Id]                        " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Location_Name]                      " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToStg_By]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToStg_Date]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToStg_Status]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Document_StatusTracking])                         " + Environment.NewLine;
                                            sqlCMD += "     Select   NewID()                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[TaskItem_Index]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Task_Index]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Task_No]                                          " + Environment.NewLine;
                                            sqlCMD += "             ,[LineNum]                                          " + Environment.NewLine;
                                            sqlCMD += "             ,[TagItem_Index]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Tag_Index]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Tag_No]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Index]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Id]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Name]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_SecondName]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_ThirdName]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Lot]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[ItemStatus_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[ItemStatus_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[ItemStatus_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Location_Index]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Location_Id]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Location_Name]                                    " + Environment.NewLine;
                                            sqlCMD += "             , " + iTask.TotalQty.ToString() + " / Ratio        " + Environment.NewLine;   // [Qty]    
                                            sqlCMD += "             ,[Ratio]                                            " + Environment.NewLine;
                                            sqlCMD += "             ," + iTask.TotalQty.ToString() + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversion_Index]                          " + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversion_Id]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversion_Name]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[MFG_Date]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[EXP_Date]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeightRatio]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight_Id]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight_Name]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[WeightRatio]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeightRatio]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeightRatio]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeightRatio]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeightRatio]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidthRatio]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Width]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[Width_Index]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Width_Id]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[Width_Name]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[WidthRatio]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLengthRatio]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Length]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Length_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Length_Id]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Length_Name]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[LengthRatio]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeightRatio]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Height]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Height_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Height_Id]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Height_Name]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[HeightRatio]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitVolume]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Volume]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Price]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[Price_Index]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Price_Id]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[Price_Name]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No1]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No2]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No3]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No4]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No5]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Document_Status]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_1]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_2]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_3]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_4]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_5]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Process_Index]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Document_No]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Document_LineNum]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Document_Index]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_DocumentItem_Index]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[ReasonCode_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[ReasonCode_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[ReasonCode_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Create_By]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,getdate()                                          " + Environment.NewLine;
                                            sqlCMD += "             ,[Update_By]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Update_Date]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Cancel_By]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Cancel_Date]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOutPick_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOutPick_No]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Qty]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Ratio]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_TotalQty]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_By]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Date]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Status]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_By]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Date]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Status]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[splitQty]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[PlanGoodsIssue_Index]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[PlanGoodsIssueItem_Index]                         " + Environment.NewLine;
                                            sqlCMD += "             ,[PlanGoodsIssue_No]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Pick_ProductConversion_Index]                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Pick_ProductConversion_Id]                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Pick_ProductConversion_Name]                      " + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversionBarcode]                         " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOut_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOut_No]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[ImageUri]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[BinBalance_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[BinBalance_Index_New]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Invoice_No]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Invoice_No_Out]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Declaration_No]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Declaration_No_Out]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[HS_Code]                                          " + Environment.NewLine;
                                            sqlCMD += "             ,[Conutry_of_Origin]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[ERP_Location]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabel_Qty]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabel_Ratio]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabel_TotalQty]                            " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Status]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Location_Index]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Location_Id]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Location_Name]                            " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Location_Index]                   " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Location_Id]                      " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Location_Name]                    " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Qty]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Ratio]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_TotalQty]                          " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_By]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Date]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Status]                            " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Location_Index]                    " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Location_Id]                       " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Location_Name]                     " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Qty]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Ratio]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_TotalQty]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_By]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Date]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Location_Index]                     " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Location_Id]                        " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Location_Name]                      " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToStg_By]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToStg_Date]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToStg_Status]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Document_StatusTracking]                          " + Environment.NewLine;
                                            sqlCMD += "   from im_TaskItem                                              " + Environment.NewLine;
                                            sqlCMD += "   where TaskItem_Index  =  '" + iTask.TaskItem_Index + "' ; " + Environment.NewLine;

                                            sqlCMD += " " + Environment.NewLine;

                                            RemainBomDiffTotalQty = RemainBomDiffTotalQty - (decimal)iTask.TotalQty;


                                            olog.logging("updateCheckBOMAfterGI", "iTask.TotalQty - RemainBomDiffTotalQty < 0 : " + sqlCMD);

                                        }
                                        else
                                        {
                                            olog.logging("updateCheckBOMAfterGI", "continue");

                                            continue;

                                        }





                                    }



                                }  // END if  iBom.BomDiffTotalQty  != 0



                            }



                        }


                    }






                }

                var transaction = db.Database.BeginTransaction();
                try
                {
                    var GIRes = db.Database.ExecuteSqlCommand(sqlCMD);
                    //   var GILRes = db.Database.ExecuteSqlCommand(cmdGIL);
                    transaction.Commit();
                    // End Trasaction get Running






                }
                catch (Exception exTrans)
                {
                    transaction.Rollback();

                    olog.logging("updateCheckBOMAfterGI", exTrans.Message.ToString());

                    throw exTrans;
                }



                sqlCMD = "";

                foreach (var itemPlanGI2 in GroupPlanGI)
                {

                    var Taskitemtmp = db.im_TaskItemTmp.Where(c => c.Ref_Document_Index == Guid.Parse(model.goodsIssue_Index) && c.PlanGoodsIssue_Index == itemPlanGI2.PLANGI_Index).ToList();

                    // Loop Bom Diff QTy
                    foreach (var iTask in Taskitemtmp)
                    {

                        var ViewCheckNotBOM = db.View_GoodsIssueCheckNotBOM.Where(c => c.PlanGoodsIssue_Index == itemPlanGI2.PLANGI_Index && c.Product_Index == iTask.Product_Index).ToList();

                        // Loop Bom Diff QTy
                        foreach (var iBom in ViewCheckNotBOM)
                        {

                            var Task_Index = Guid.NewGuid();
                            if (iBom.DiffGI_TotalQty >= iTask.TotalQty)
                            {


                                //sqlCMD += "    INSERT INTO [dbo].[im_Task]																 ";
                                //sqlCMD += "               ([Task_Index]																	 ";
                                //sqlCMD += "               ,[Task_No]																	 ";
                                //sqlCMD += "               ,[Process_Index]																 ";
                                //sqlCMD += "               ,[TaskGroup_Index]															 ";
                                //sqlCMD += "               ,[TaskGroup_Id]																 ";
                                //sqlCMD += "               ,[TaskGroup_Name]																 ";
                                //sqlCMD += "               ,[DocumentPriority_Status]													 ";
                                //sqlCMD += "               ,[DocumentRef_No1]															 ";
                                //sqlCMD += "               ,[DocumentRef_No2]															 ";
                                //sqlCMD += "               ,[DocumentRef_No3]															 ";
                                //sqlCMD += "               ,[DocumentRef_No4]															 ";
                                //sqlCMD += "               ,[DocumentRef_No5]															 ";
                                //sqlCMD += "               ,[Document_Status]															 ";
                                //sqlCMD += "               ,[UDF_1]																		 ";
                                //sqlCMD += "               ,[UDF_2]																		 ";
                                //sqlCMD += "               ,[UDF_3]																		 ";
                                //sqlCMD += "               ,[UDF_4]																		 ";
                                //sqlCMD += "               ,[UDF_5]																		 ";
                                //sqlCMD += "               ,[Create_By]																	 ";
                                //sqlCMD += "               ,[Create_Date]																 ";
                                //sqlCMD += "               ,[Update_By]																	 ";
                                //sqlCMD += "               ,[Update_Date]																 ";
                                //sqlCMD += "               ,[Cancel_By]																	 ";
                                //sqlCMD += "               ,[Cancel_Date]																 ";
                                //sqlCMD += "               ,[DoTask_By]																	 ";
                                //sqlCMD += "               ,[DoTask_Date]																 ";
                                //sqlCMD += "               ,[UserAssign]																	 ";
                                //sqlCMD += "               ,[Assign_By]																	 ";
                                //sqlCMD += "               ,[Document_StatusScanPick]													 ";
                                //sqlCMD += "               ,[Document_StatusLabeling]													 ";
                                //sqlCMD += "               ,[Document_StatusPickQty]														 ";
                                //sqlCMD += "               ,[Document_StatusDocktoStg]													 ";
                                //sqlCMD += "               ,[Document_StatusMovetoStgOG]													 ";
                                //sqlCMD += "               ,[Document_StatusTracking])													 ";
                                //sqlCMD += "    Select		'" + Task_Index  + "'                                                          ";
                                //sqlCMD += "               ,[Task_No] + '-2'    													 ";
                                //sqlCMD += "               ,[Process_Index]																 ";
                                //sqlCMD += "               ,[TaskGroup_Index]															 ";
                                //sqlCMD += "               ,[TaskGroup_Id]																 ";
                                //sqlCMD += "               ,[TaskGroup_Name]																 ";
                                //sqlCMD += "               ,[DocumentPriority_Status]													 ";
                                //sqlCMD += "               ,[DocumentRef_No1]															 ";
                                //sqlCMD += "               ,[DocumentRef_No2]															 ";
                                //sqlCMD += "               ,[DocumentRef_No3]															 ";
                                //sqlCMD += "               ,[DocumentRef_No4]															 ";
                                //sqlCMD += "               ,[DocumentRef_No5]															 ";
                                //sqlCMD += "               ,[Document_Status]															 ";
                                //sqlCMD += "               ,[UDF_1]																		 ";
                                //sqlCMD += "               ,[UDF_2]																		 ";
                                //sqlCMD += "               ,[UDF_3]																		 ";
                                //sqlCMD += "               ,[UDF_4]																		 ";
                                //sqlCMD += "               ,[UDF_5]																		 ";
                                //sqlCMD += "               ,[Create_By]																	 ";
                                //sqlCMD += "               ,[Create_Date]																 ";
                                //sqlCMD += "               ,[Update_By]																	 ";
                                //sqlCMD += "               ,[Update_Date]																 ";
                                //sqlCMD += "               ,[Cancel_By]																	 ";
                                //sqlCMD += "               ,[Cancel_Date]																 ";
                                //sqlCMD += "               ,[DoTask_By]																	 ";
                                //sqlCMD += "               ,[DoTask_Date]																 ";
                                //sqlCMD += "               ,[UserAssign]																	 ";
                                //sqlCMD += "               ,[Assign_By]																	 ";
                                //sqlCMD += "               ,[Document_StatusScanPick]													 ";
                                //sqlCMD += "               ,[Document_StatusLabeling]													 ";
                                //sqlCMD += "               ,[Document_StatusPickQty]														 ";
                                //sqlCMD += "               ,[Document_StatusDocktoStg]													 ";
                                //sqlCMD += "               ,[Document_StatusMovetoStgOG]													 ";
                                //sqlCMD += "               ,[Document_StatusTracking]													 ";
                                //sqlCMD += "    From im_Task 																			 ";
                                //sqlCMD += "    where Task_Index in  (select Task_Index from im_TaskItemTmp  where TaskItem_Index = '" + iTask.TaskItem_Index + "'  )       "      ;                                              

                                sqlCMD += "   " + Environment.NewLine;

                                sqlCMD += "   INSERT INTO [dbo].[im_TaskItem]                                   " + Environment.NewLine;
                                sqlCMD += "              ([TaskItem_Index]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Task_Index]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Task_No]                                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[LineNum]                                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[TagItem_Index]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Tag_Index]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Tag_No]                                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Index]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Id]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Name]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Product_SecondName]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Product_ThirdName]                                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Lot]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[ItemStatus_Index]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[ItemStatus_Id]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[ItemStatus_Name]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Location_Index]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Location_Id]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Location_Name]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Qty]                                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Ratio]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[TotalQty]                                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[ProductConversion_Index]                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[ProductConversion_Id]                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[ProductConversion_Name]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[MFG_Date]                                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[EXP_Date]                                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight_Index]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight_Id]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight_Name]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeightRatio]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Weight]                                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Weight_Index]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Weight_Id]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Weight_Name]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[WeightRatio]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight_Index]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight_Id]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight_Name]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeightRatio]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight_Index]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight_Id]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight_Name]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeightRatio]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight_Index]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight_Id]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight_Name]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeightRatio]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight_Index]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight_Id]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight_Name]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeightRatio]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth_Index]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth_Id]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth_Name]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidthRatio]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Width]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Width_Index]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Width_Id]                                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[Width_Name]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[WidthRatio]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength_Index]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength_Id]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength_Name]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLengthRatio]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Length]                                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Length_Index]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Length_Id]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Length_Name]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[LengthRatio]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight_Index]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight_Id]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight_Name]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeightRatio]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Height]                                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Height_Index]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Height_Id]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Height_Name]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[HeightRatio]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[UnitVolume]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Volume]                                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice_Index]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice_Id]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice_Name]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Price]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Price_Index]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Price_Id]                                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[Price_Name]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No1]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No2]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No3]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No4]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No5]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Document_Status]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_1]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_2]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_3]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_4]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_5]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_Process_Index]                                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_Document_No]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_Document_LineNum]                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_Document_Index]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_DocumentItem_Index]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[ReasonCode_Index]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[ReasonCode_Id]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[ReasonCode_Name]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Create_By]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Create_Date]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Update_By]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Update_Date]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Cancel_By]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Cancel_Date]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[TagOutPick_Index]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[TagOutPick_No]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Qty]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Ratio]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_TotalQty]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_By]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Date]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Status]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabeling_By]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabeling_Date]                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabeling_Status]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[splitQty]                                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[PlanGoodsIssue_Index]                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[PlanGoodsIssueItem_Index]                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[PlanGoodsIssue_No]                                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Pick_ProductConversion_Index]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Pick_ProductConversion_Id]                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Pick_ProductConversion_Name]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[ProductConversionBarcode]                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[TagOut_Index]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[TagOut_No]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[ImageUri]                                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[BinBalance_Index]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[BinBalance_Index_New]                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Invoice_No]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Invoice_No_Out]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Declaration_No]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Declaration_No_Out]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[HS_Code]                                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[Conutry_of_Origin]                                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1]                                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1_Currency_Index]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1_Currency_Id]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1_Currency_Name]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2]                                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2_Currency_Index]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2_Currency_Id]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2_Currency_Name]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3]                                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3_Currency_Index]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3_Currency_Id]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3_Currency_Name]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4]                                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4_Currency_Index]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4_Currency_Id]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4_Currency_Name]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5]                                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5_Currency_Index]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5_Currency_Id]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5_Currency_Name]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[ERP_Location]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabel_Qty]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabel_Ratio]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabel_TotalQty]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_Status]                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Location_Index]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Location_Id]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Location_Name]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabeling_Location_Index]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabeling_Location_Id]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabeling_Location_Name]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_Qty]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_Ratio]                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_TotalQty]                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_By]                                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_Date]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_Status]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_Location_Index]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_Location_Id]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_Location_Name]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_Qty]                                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_Ratio]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_TotalQty]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_By]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_Date]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_Location_Index]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_Location_Id]                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_Location_Name]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToStg_By]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToStg_Date]                                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToStg_Status]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Document_StatusTracking])                                                           " + Environment.NewLine;
                                sqlCMD += "   		  Select   Newid()                                                                       " + Environment.NewLine;
                                sqlCMD += "              , Task_Index                                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[Task_No]                                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[LineNum]                                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[TagItem_Index]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Tag_Index]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Tag_No]                                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Index]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Id]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Name]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Product_SecondName]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Product_ThirdName]                                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Lot]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[ItemStatus_Index]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[ItemStatus_Id]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[ItemStatus_Name]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Location_Index]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Location_Id]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Location_Name]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Qty]                                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Ratio]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[TotalQty]                                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[ProductConversion_Index]                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[ProductConversion_Id]                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[ProductConversion_Name]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[MFG_Date]                                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[EXP_Date]                                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight_Index]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight_Id]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight_Name]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeightRatio]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Weight]                                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Weight_Index]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Weight_Id]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Weight_Name]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[WeightRatio]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight_Index]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight_Id]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight_Name]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeightRatio]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight_Index]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight_Id]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight_Name]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeightRatio]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight_Index]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight_Id]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight_Name]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeightRatio]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight_Index]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight_Id]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight_Name]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeightRatio]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth_Index]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth_Id]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth_Name]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidthRatio]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Width]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Width_Index]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Width_Id]                                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[Width_Name]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[WidthRatio]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength_Index]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength_Id]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength_Name]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLengthRatio]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Length]                                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Length_Index]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Length_Id]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Length_Name]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[LengthRatio]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight_Index]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight_Id]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight_Name]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeightRatio]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Height]                                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Height_Index]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Height_Id]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Height_Name]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[HeightRatio]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[UnitVolume]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Volume]                                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice_Index]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice_Id]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice_Name]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Price]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Price_Index]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Price_Id]                                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[Price_Name]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No1]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No2]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No3]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No4]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No5]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Document_Status]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_1]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_2]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_3]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_4]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_5]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_Process_Index]                                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_Document_No]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_Document_LineNum]                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_Document_Index]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_DocumentItem_Index]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[ReasonCode_Index]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[ReasonCode_Id]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[ReasonCode_Name]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Create_By]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Create_Date]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Update_By]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Update_Date]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Cancel_By]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Cancel_Date]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[TagOutPick_Index]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[TagOutPick_No]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Qty]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Ratio]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_TotalQty]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_By]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Date]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Status]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabeling_By]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabeling_Date]                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabeling_Status]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[splitQty]                                                                           " + Environment.NewLine;
                                sqlCMD += "               ,'" + iBom.PlanGoodsIssue_Index + "' as [PlanGoodsIssue_Index]                       " + Environment.NewLine;
                                sqlCMD += "               ,'" + iBom.PlanGoodsIssueItem_Index + "' as [PlanGoodsIssueItem_Index]               " + Environment.NewLine;
                                sqlCMD += "               ,'" + iBom.PlanGoodsIssue_No + "' as [PlanGoodsIssue_No]                             " + Environment.NewLine;
                                sqlCMD += "              ,[Pick_ProductConversion_Index]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Pick_ProductConversion_Id]                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Pick_ProductConversion_Name]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[ProductConversionBarcode]                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[TagOut_Index]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[TagOut_No]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[ImageUri]                                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[BinBalance_Index]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[BinBalance_Index_New]                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Invoice_No]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Invoice_No_Out]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Declaration_No]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Declaration_No_Out]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[HS_Code]                                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[Conutry_of_Origin]                                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1]                                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1_Currency_Index]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1_Currency_Id]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1_Currency_Name]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2]                                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2_Currency_Index]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2_Currency_Id]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2_Currency_Name]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3]                                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3_Currency_Index]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3_Currency_Id]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3_Currency_Name]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4]                                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4_Currency_Index]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4_Currency_Id]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4_Currency_Name]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5]                                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5_Currency_Index]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5_Currency_Id]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5_Currency_Name]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[ERP_Location]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabel_Qty]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabel_Ratio]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabel_TotalQty]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_Status]                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Location_Index]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Location_Id]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Location_Name]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabeling_Location_Index]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabeling_Location_Id]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabeling_Location_Name]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_Qty]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_Ratio]                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_TotalQty]                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_By]                                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_Date]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_Status]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_Location_Index]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_Location_Id]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_Location_Name]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_Qty]                                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_Ratio]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_TotalQty]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_By]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_Date]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_Location_Index]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_Location_Id]                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_Location_Name]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToStg_By]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToStg_Date]                                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToStg_Status]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Document_StatusTracking]                                                            " + Environment.NewLine;
                                sqlCMD += "   	from im_TaskItemtmp                                                                            " + Environment.NewLine;
                                sqlCMD += "   	where TaskItemTmp_Index = '" + iTask.TaskItemTmp_Index + "'                                    " + Environment.NewLine;

                                sqlCMD += "   " + Environment.NewLine;


                                sqlCMD += "   INSERT INTO [dbo].[im_GoodsIssueItemLocation]                                   " + Environment.NewLine;
                                sqlCMD += "              ([GoodsIssueItemLocation_Index]                                      " + Environment.NewLine;
                                sqlCMD += "              ,[GoodsIssue_Index]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[LineNum]                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[TagItem_Index]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Tag_Index]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Tag_No]                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Index]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Id]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Name]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Product_SecondName]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Product_ThirdName]                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Lot]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[ItemStatus_Index]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[ItemStatus_Id]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[ItemStatus_Name]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Location_Index]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Location_Id]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Location_Name]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[QtyPlan]                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[Qty]                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Ratio]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[TotalQty]                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[ProductConversion_Index]                                           " + Environment.NewLine;
                                sqlCMD += "              ,[ProductConversion_Id]                                              " + Environment.NewLine;
                                sqlCMD += "              ,[ProductConversion_Name]                                            " + Environment.NewLine;
                                sqlCMD += "              ,[MFG_Date]                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[EXP_Date]                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight_Index]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight_Id]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight_Name]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeightRatio]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Weight]                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[Weight_Index]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Weight_Id]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Weight_Name]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[WeightRatio]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight_Index]                                               " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight_Id]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight_Name]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeightRatio]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight_Index]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight_Id]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight_Name]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeightRatio]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight_Index]                                               " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight_Id]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight_Name]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeightRatio]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight_Index]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight_Id]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight_Name]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeightRatio]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth_Index]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth_Id]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth_Name]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidthRatio]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Width]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Width_Index]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Width_Id]                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Width_Name]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[WidthRatio]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength_Index]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength_Id]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength_Name]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLengthRatio]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Length]                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[Length_Index]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Length_Id]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Length_Name]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[LengthRatio]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight_Index]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight_Id]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight_Name]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeightRatio]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Height]                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[Height_Index]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Height_Id]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Height_Name]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[HeightRatio]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[UnitVolume]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Volume]                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice_Index]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice_Id]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice_Name]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Price]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Price_Index]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Price_Id]                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Price_Name]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No1]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No2]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No3]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No4]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No5]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Document_Status]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_1]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_2]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_3]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_4]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_5]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_Process_Index]                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_Document_No]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_Document_LineNum]                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_Document_Index]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_DocumentItem_Index]                                            " + Environment.NewLine;
                                sqlCMD += "              ,[GoodsReceiveItem_Index]                                            " + Environment.NewLine;
                                sqlCMD += "              ,[Create_By]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Create_Date]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Update_By]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Update_Date]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Cancel_By]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Cancel_Date]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Status]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_By]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Date]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Ref1]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Ref2]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Qty]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Ratio]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_TotalQty]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_ProductConversion_Index]                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Mashall_Status]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Mashall_Qty]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Cancel_Status]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[GoodsIssue_No]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[BinBalance_Index]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Invoice_No]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Invoice_No_Out]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Declaration_No]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Declaration_No_Out]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[HS_Code]                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[Conutry_of_Origin]                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1_Currency_Index]                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1_Currency_Id]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1_Currency_Name]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2_Currency_Index]                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2_Currency_Id]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2_Currency_Name]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3_Currency_Index]                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3_Currency_Id]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3_Currency_Name]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4_Currency_Index]                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4_Currency_Id]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4_Currency_Name]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5_Currency_Index]                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5_Currency_Id]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5_Currency_Name]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[ERP_Location])                                                     " + Environment.NewLine;
                                sqlCMD += "     Select    NEWID() as [GoodsIssueItemLocation_Index]                           " + Environment.NewLine;
                                sqlCMD += "              , Ref_Document_Index as   [GoodsIssue_Index]                                             " + Environment.NewLine;
                                sqlCMD += "              ,[LineNum]                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[TagItem_Index]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Tag_Index]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Tag_No]                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Index]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Id]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Name]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Product_SecondName]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Product_ThirdName]                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Lot]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[ItemStatus_Index]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[ItemStatus_Id]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[ItemStatus_Name]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Location_Index]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Location_Id]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Location_Name]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,0 as [QtyPlan]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Qty]                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Ratio]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[TotalQty]                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[ProductConversion_Index]                                           " + Environment.NewLine;
                                sqlCMD += "              ,[ProductConversion_Id]                                              " + Environment.NewLine;
                                sqlCMD += "              ,[ProductConversion_Name]                                            " + Environment.NewLine;
                                sqlCMD += "              ,[MFG_Date]                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[EXP_Date]                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight_Index]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight_Id]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight_Name]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeightRatio]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Weight]                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[Weight_Index]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Weight_Id]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Weight_Name]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[WeightRatio]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight_Index]                                               " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight_Id]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight_Name]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeightRatio]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight_Index]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight_Id]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight_Name]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeightRatio]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight_Index]                                               " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight_Id]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight_Name]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeightRatio]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight_Index]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight_Id]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight_Name]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeightRatio]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth_Index]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth_Id]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth_Name]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidthRatio]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Width]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Width_Index]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Width_Id]                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Width_Name]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[WidthRatio]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength_Index]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength_Id]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength_Name]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLengthRatio]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Length]                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[Length_Index]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Length_Id]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Length_Name]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[LengthRatio]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight_Index]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight_Id]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight_Name]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeightRatio]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Height]                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[Height_Index]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Height_Id]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Height_Name]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[HeightRatio]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[UnitVolume]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Volume]                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice_Index]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice_Id]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice_Name]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Price]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Price_Index]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Price_Id]                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Price_Name]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No1]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No2]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No3]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No4]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No5]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Document_Status]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_1]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_2]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_3]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_4]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_5]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_Process_Index]                                                 " + Environment.NewLine;
                                sqlCMD += "              ,'" + iBom.PlanGoodsIssue_No + "'  as [Ref_Document_No]                             " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_Document_LineNum]                                              " + Environment.NewLine;
                                sqlCMD += "              ,'" + iBom.PlanGoodsIssue_Index + "' as [Ref_Document_Index]                        " + Environment.NewLine;
                                sqlCMD += "              ,'" + iBom.PlanGoodsIssueItem_Index + "' as  [Ref_DocumentItem_Index]                " + Environment.NewLine;
                                sqlCMD += "              ,NEWID() as [GoodsReceiveItem_Index]                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Create_By]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Create_Date]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Update_By]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Update_Date]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Cancel_By]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Cancel_Date]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Status]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_By]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Date]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,null as [Picking_Ref1]                                              " + Environment.NewLine;
                                sqlCMD += "              ,null as [Picking_Ref2]                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Qty]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Ratio]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_TotalQty]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,null as [Picking_ProductConversion_Index]                           " + Environment.NewLine;
                                sqlCMD += "              ,null as [Mashall_Status]                                            " + Environment.NewLine;
                                sqlCMD += "              ,null as [Mashall_Qty]                                               " + Environment.NewLine;
                                sqlCMD += "              ,null as [Cancel_Status]                                             " + Environment.NewLine;
                                sqlCMD += "              ,Ref_Document_No as [GoodsIssue_No]                                  " + Environment.NewLine;
                                sqlCMD += "              ,[BinBalance_Index]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Invoice_No]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Invoice_No_Out]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Declaration_No]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Declaration_No_Out]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[HS_Code]                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[Conutry_of_Origin]                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1_Currency_Index]                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1_Currency_Id]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1_Currency_Name]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2_Currency_Index]                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2_Currency_Id]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2_Currency_Name]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3_Currency_Index]                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3_Currency_Id]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3_Currency_Name]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4_Currency_Index]                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4_Currency_Id]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4_Currency_Name]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5_Currency_Index]                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5_Currency_Id]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5_Currency_Name]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[ERP_Location]                                                      " + Environment.NewLine;
                                sqlCMD += "     	from im_TaskItemtmp                                                        " + Environment.NewLine;
                                sqlCMD += "   	where TaskItemTmp_Index = '" + iTask.TaskItemTmp_Index + "' " + Environment.NewLine;



                                sqlCMD += "   " + Environment.NewLine;




                            }
                            else
                            {


                                sqlCMD += "   " + Environment.NewLine;

                                sqlCMD += "   INSERT INTO [dbo].[im_TaskItem]                                   " + Environment.NewLine;
                                sqlCMD += "              ([TaskItem_Index]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Task_Index]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Task_No]                                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[LineNum]                                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[TagItem_Index]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Tag_Index]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Tag_No]                                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Index]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Id]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Name]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Product_SecondName]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Product_ThirdName]                                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Lot]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[ItemStatus_Index]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[ItemStatus_Id]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[ItemStatus_Name]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Location_Index]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Location_Id]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Location_Name]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Qty]                                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Ratio]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[TotalQty]                                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[ProductConversion_Index]                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[ProductConversion_Id]                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[ProductConversion_Name]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[MFG_Date]                                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[EXP_Date]                                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight_Index]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight_Id]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight_Name]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeightRatio]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Weight]                                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Weight_Index]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Weight_Id]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Weight_Name]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[WeightRatio]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight_Index]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight_Id]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight_Name]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeightRatio]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight_Index]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight_Id]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight_Name]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeightRatio]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight_Index]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight_Id]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight_Name]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeightRatio]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight_Index]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight_Id]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight_Name]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeightRatio]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth_Index]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth_Id]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth_Name]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidthRatio]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Width]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Width_Index]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Width_Id]                                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[Width_Name]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[WidthRatio]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength_Index]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength_Id]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength_Name]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLengthRatio]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Length]                                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Length_Index]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Length_Id]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Length_Name]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[LengthRatio]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight_Index]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight_Id]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight_Name]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeightRatio]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Height]                                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Height_Index]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Height_Id]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Height_Name]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[HeightRatio]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[UnitVolume]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Volume]                                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice_Index]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice_Id]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice_Name]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Price]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Price_Index]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Price_Id]                                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[Price_Name]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No1]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No2]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No3]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No4]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No5]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Document_Status]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_1]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_2]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_3]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_4]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_5]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_Process_Index]                                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_Document_No]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_Document_LineNum]                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_Document_Index]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_DocumentItem_Index]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[ReasonCode_Index]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[ReasonCode_Id]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[ReasonCode_Name]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Create_By]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Create_Date]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Update_By]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Update_Date]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Cancel_By]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Cancel_Date]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[TagOutPick_Index]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[TagOutPick_No]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Qty]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Ratio]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_TotalQty]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_By]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Date]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Status]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabeling_By]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabeling_Date]                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabeling_Status]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[splitQty]                                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[PlanGoodsIssue_Index]                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[PlanGoodsIssueItem_Index]                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[PlanGoodsIssue_No]                                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Pick_ProductConversion_Index]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Pick_ProductConversion_Id]                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Pick_ProductConversion_Name]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[ProductConversionBarcode]                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[TagOut_Index]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[TagOut_No]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[ImageUri]                                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[BinBalance_Index]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[BinBalance_Index_New]                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Invoice_No]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Invoice_No_Out]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Declaration_No]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Declaration_No_Out]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[HS_Code]                                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[Conutry_of_Origin]                                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1]                                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1_Currency_Index]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1_Currency_Id]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1_Currency_Name]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2]                                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2_Currency_Index]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2_Currency_Id]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2_Currency_Name]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3]                                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3_Currency_Index]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3_Currency_Id]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3_Currency_Name]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4]                                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4_Currency_Index]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4_Currency_Id]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4_Currency_Name]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5]                                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5_Currency_Index]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5_Currency_Id]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5_Currency_Name]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[ERP_Location]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabel_Qty]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabel_Ratio]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabel_TotalQty]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_Status]                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Location_Index]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Location_Id]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Location_Name]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabeling_Location_Index]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabeling_Location_Id]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabeling_Location_Name]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_Qty]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_Ratio]                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_TotalQty]                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_By]                                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_Date]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_Status]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_Location_Index]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_Location_Id]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_Location_Name]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_Qty]                                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_Ratio]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_TotalQty]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_By]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_Date]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_Location_Index]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_Location_Id]                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_Location_Name]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToStg_By]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToStg_Date]                                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToStg_Status]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Document_StatusTracking])                                                           " + Environment.NewLine;
                                sqlCMD += "   		  Select Newid()                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,Task_Index                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Task_No]                                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[LineNum]                                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[TagItem_Index]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Tag_Index]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Tag_No]                                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Index]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Id]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Name]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Product_SecondName]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Product_ThirdName]                                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Lot]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[ItemStatus_Index]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[ItemStatus_Id]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[ItemStatus_Name]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Location_Index]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Location_Id]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Location_Name]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ," + iBom.DiffGI_TotalQty.ToString() + "  /  Ratio as [Qty]                           " + Environment.NewLine;
                                sqlCMD += "              ,[Ratio]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ," + iBom.DiffGI_TotalQty.ToString() + " as [TotalQty]                                " + Environment.NewLine;
                                sqlCMD += "              ,[ProductConversion_Index]                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[ProductConversion_Id]                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[ProductConversion_Name]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[MFG_Date]                                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[EXP_Date]                                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight_Index]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight_Id]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight_Name]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeightRatio]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Weight]                                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Weight_Index]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Weight_Id]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Weight_Name]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[WeightRatio]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight_Index]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight_Id]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight_Name]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeightRatio]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight_Index]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight_Id]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight_Name]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeightRatio]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight_Index]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight_Id]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight_Name]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeightRatio]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight_Index]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight_Id]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight_Name]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeightRatio]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth_Index]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth_Id]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth_Name]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidthRatio]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Width]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Width_Index]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Width_Id]                                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[Width_Name]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[WidthRatio]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength_Index]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength_Id]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength_Name]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLengthRatio]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Length]                                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Length_Index]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Length_Id]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Length_Name]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[LengthRatio]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight_Index]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight_Id]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight_Name]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeightRatio]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Height]                                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Height_Index]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Height_Id]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Height_Name]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[HeightRatio]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[UnitVolume]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Volume]                                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice_Index]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice_Id]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice_Name]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Price]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Price_Index]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Price_Id]                                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[Price_Name]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No1]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No2]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No3]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No4]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No5]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Document_Status]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_1]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_2]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_3]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_4]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_5]                                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_Process_Index]                                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_Document_No]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_Document_LineNum]                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_Document_Index]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_DocumentItem_Index]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[ReasonCode_Index]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[ReasonCode_Id]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[ReasonCode_Name]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Create_By]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Create_Date]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Update_By]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Update_Date]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Cancel_By]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Cancel_Date]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[TagOutPick_Index]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[TagOutPick_No]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Qty]                                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Ratio]                                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_TotalQty]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_By]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Date]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Status]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabeling_By]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabeling_Date]                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabeling_Status]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[splitQty]                                                                           " + Environment.NewLine;
                                sqlCMD += "               ,'" + iBom.PlanGoodsIssue_Index + "' as [PlanGoodsIssue_Index]                       " + Environment.NewLine;
                                sqlCMD += "               ,'" + iBom.PlanGoodsIssueItem_Index + "' as [PlanGoodsIssueItem_Index]               " + Environment.NewLine;
                                sqlCMD += "               ,'" + iBom.PlanGoodsIssue_No + "' as [PlanGoodsIssue_No]                             " + Environment.NewLine;
                                sqlCMD += "              ,[Pick_ProductConversion_Index]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Pick_ProductConversion_Id]                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Pick_ProductConversion_Name]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[ProductConversionBarcode]                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[TagOut_Index]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[TagOut_No]                                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[ImageUri]                                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[BinBalance_Index]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[BinBalance_Index_New]                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Invoice_No]                                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Invoice_No_Out]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Declaration_No]                                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Declaration_No_Out]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[HS_Code]                                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[Conutry_of_Origin]                                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1]                                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1_Currency_Index]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1_Currency_Id]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1_Currency_Name]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2]                                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2_Currency_Index]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2_Currency_Id]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2_Currency_Name]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3]                                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3_Currency_Index]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3_Currency_Id]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3_Currency_Name]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4]                                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4_Currency_Index]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4_Currency_Id]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4_Currency_Name]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5]                                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5_Currency_Index]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5_Currency_Id]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5_Currency_Name]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[ERP_Location]                                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabel_Qty]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabel_Ratio]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabel_TotalQty]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_Status]                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Location_Index]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Location_Id]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Location_Name]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabeling_Location_Index]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabeling_Location_Id]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[PickingLabeling_Location_Name]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_Qty]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_Ratio]                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_TotalQty]                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_By]                                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_Date]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_Status]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_Location_Index]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_Location_Id]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[PickingPickQty_Location_Name]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_Qty]                                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_Ratio]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_TotalQty]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_By]                                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_Date]                                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_Location_Index]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_Location_Id]                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToDock_Location_Name]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToStg_By]                                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToStg_Date]                                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[PickingToStg_Status]                                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Document_StatusTracking]                                                            " + Environment.NewLine;
                                sqlCMD += "   	from im_TaskItemtmp                                                                            " + Environment.NewLine;
                                sqlCMD += "   	where TaskItemTmp_Index = '" + iTask.TaskItemTmp_Index + "'                                    " + Environment.NewLine;

                                sqlCMD += "   " + Environment.NewLine;


                                sqlCMD += "   INSERT INTO [dbo].[im_GoodsIssueItemLocation]                                   " + Environment.NewLine;
                                sqlCMD += "              ([GoodsIssueItemLocation_Index]                                      " + Environment.NewLine;
                                sqlCMD += "              ,[GoodsIssue_Index]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[LineNum]                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[TagItem_Index]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Tag_Index]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Tag_No]                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Index]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Id]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Name]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Product_SecondName]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Product_ThirdName]                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Lot]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[ItemStatus_Index]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[ItemStatus_Id]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[ItemStatus_Name]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Location_Index]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Location_Id]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Location_Name]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[QtyPlan]                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[Qty]                                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Ratio]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[TotalQty]                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[ProductConversion_Index]                                           " + Environment.NewLine;
                                sqlCMD += "              ,[ProductConversion_Id]                                              " + Environment.NewLine;
                                sqlCMD += "              ,[ProductConversion_Name]                                            " + Environment.NewLine;
                                sqlCMD += "              ,[MFG_Date]                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[EXP_Date]                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight_Index]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight_Id]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight_Name]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeightRatio]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Weight]                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[Weight_Index]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Weight_Id]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Weight_Name]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[WeightRatio]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight_Index]                                               " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight_Id]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight_Name]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeightRatio]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight_Index]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight_Id]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight_Name]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeightRatio]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight_Index]                                               " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight_Id]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight_Name]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeightRatio]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight_Index]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight_Id]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight_Name]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeightRatio]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth_Index]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth_Id]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth_Name]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidthRatio]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Width]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Width_Index]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Width_Id]                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Width_Name]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[WidthRatio]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength_Index]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength_Id]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength_Name]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLengthRatio]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Length]                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[Length_Index]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Length_Id]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Length_Name]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[LengthRatio]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight_Index]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight_Id]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight_Name]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeightRatio]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Height]                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[Height_Index]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Height_Id]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Height_Name]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[HeightRatio]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[UnitVolume]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Volume]                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice_Index]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice_Id]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice_Name]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Price]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Price_Index]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Price_Id]                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Price_Name]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No1]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No2]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No3]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No4]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No5]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Document_Status]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_1]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_2]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_3]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_4]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_5]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_Process_Index]                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_Document_No]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_Document_LineNum]                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_Document_Index]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_DocumentItem_Index]                                            " + Environment.NewLine;
                                sqlCMD += "              ,[GoodsReceiveItem_Index]                                            " + Environment.NewLine;
                                sqlCMD += "              ,[Create_By]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Create_Date]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Update_By]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Update_Date]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Cancel_By]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Cancel_Date]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Status]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_By]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Date]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Ref1]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Ref2]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Qty]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Ratio]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_TotalQty]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_ProductConversion_Index]                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Mashall_Status]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Mashall_Qty]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Cancel_Status]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[GoodsIssue_No]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[BinBalance_Index]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Invoice_No]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Invoice_No_Out]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Declaration_No]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Declaration_No_Out]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[HS_Code]                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[Conutry_of_Origin]                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1_Currency_Index]                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1_Currency_Id]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1_Currency_Name]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2_Currency_Index]                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2_Currency_Id]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2_Currency_Name]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3_Currency_Index]                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3_Currency_Id]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3_Currency_Name]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4_Currency_Index]                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4_Currency_Id]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4_Currency_Name]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5_Currency_Index]                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5_Currency_Id]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5_Currency_Name]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[ERP_Location])                                                     " + Environment.NewLine;
                                sqlCMD += "     Select    NEWID() as [GoodsIssueItemLocation_Index]                           " + Environment.NewLine;
                                sqlCMD += "              , Ref_Document_Index as   [GoodsIssue_Index]                                             " + Environment.NewLine;
                                sqlCMD += "              ,[LineNum]                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[TagItem_Index]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Tag_Index]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Tag_No]                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Index]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Id]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Name]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Product_SecondName]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Product_ThirdName]                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Product_Lot]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[ItemStatus_Index]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[ItemStatus_Id]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[ItemStatus_Name]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Location_Index]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Location_Id]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Location_Name]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,0 as [QtyPlan]                                                      " + Environment.NewLine;
                                sqlCMD += "              ," + iBom.DiffGI_TotalQty.ToString() + "  /  Ratio as [Qty]          " + Environment.NewLine;
                                sqlCMD += "              ,[Ratio]                                                             " + Environment.NewLine;
                                sqlCMD += "              ," + iBom.DiffGI_TotalQty.ToString() + " as [TotalQty]               " + Environment.NewLine;
                                sqlCMD += "              ,[ProductConversion_Index]                                           " + Environment.NewLine;
                                sqlCMD += "              ,[ProductConversion_Id]                                              " + Environment.NewLine;
                                sqlCMD += "              ,[ProductConversion_Name]                                            " + Environment.NewLine;
                                sqlCMD += "              ,[MFG_Date]                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[EXP_Date]                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight_Index]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight_Id]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeight_Name]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWeightRatio]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Weight]                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[Weight_Index]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Weight_Id]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Weight_Name]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[WeightRatio]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight_Index]                                               " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight_Id]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeight_Name]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[UnitNetWeightRatio]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight_Index]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight_Id]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeight_Name]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[NetWeightRatio]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight_Index]                                               " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight_Id]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeight_Name]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[UnitGrsWeightRatio]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight_Index]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight_Id]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeight_Name]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[GrsWeightRatio]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth_Index]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth_Id]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidth_Name]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[UnitWidthRatio]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Width]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Width_Index]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Width_Id]                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Width_Name]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[WidthRatio]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength_Index]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength_Id]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLength_Name]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitLengthRatio]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Length]                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[Length_Index]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Length_Id]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Length_Name]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[LengthRatio]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight_Index]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight_Id]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeight_Name]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitHeightRatio]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Height]                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[Height_Index]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[Height_Id]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Height_Name]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[HeightRatio]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[UnitVolume]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Volume]                                                            " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice_Index]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice_Id]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,[UnitPrice_Name]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Price]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Price_Index]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Price_Id]                                                          " + Environment.NewLine;
                                sqlCMD += "              ,[Price_Name]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No1]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No2]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No3]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No4]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[DocumentRef_No5]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[Document_Status]                                                   " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_1]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_2]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_3]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_4]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[UDF_5]                                                             " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_Process_Index]                                                 " + Environment.NewLine;
                                sqlCMD += "              ,'" + iBom.PlanGoodsIssue_No + "'  as [Ref_Document_No]                             " + Environment.NewLine;
                                sqlCMD += "              ,[Ref_Document_LineNum]                                              " + Environment.NewLine;
                                sqlCMD += "              ,'" + iBom.PlanGoodsIssue_Index + "' as [Ref_Document_Index]                        " + Environment.NewLine;
                                sqlCMD += "              ,'" + iBom.PlanGoodsIssueItem_Index + "' as  [Ref_DocumentItem_Index]                " + Environment.NewLine;
                                sqlCMD += "              ,NEWID() as [GoodsReceiveItem_Index]                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Create_By]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Create_Date]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Update_By]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Update_Date]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Cancel_By]                                                         " + Environment.NewLine;
                                sqlCMD += "              ,[Cancel_Date]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Status]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_By]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Date]                                                      " + Environment.NewLine;
                                sqlCMD += "              ,null as [Picking_Ref1]                                              " + Environment.NewLine;
                                sqlCMD += "              ,null as [Picking_Ref2]                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Qty]                                                       " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_Ratio]                                                     " + Environment.NewLine;
                                sqlCMD += "              ,[Picking_TotalQty]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,null as [Picking_ProductConversion_Index]                           " + Environment.NewLine;
                                sqlCMD += "              ,null as [Mashall_Status]                                            " + Environment.NewLine;
                                sqlCMD += "              ,null as [Mashall_Qty]                                               " + Environment.NewLine;
                                sqlCMD += "              ,null as [Cancel_Status]                                             " + Environment.NewLine;
                                sqlCMD += "              ,Ref_Document_No as [GoodsIssue_No]                                  " + Environment.NewLine;
                                sqlCMD += "              ,[BinBalance_Index]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Invoice_No]                                                        " + Environment.NewLine;
                                sqlCMD += "              ,[Invoice_No_Out]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Declaration_No]                                                    " + Environment.NewLine;
                                sqlCMD += "              ,[Declaration_No_Out]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[HS_Code]                                                           " + Environment.NewLine;
                                sqlCMD += "              ,[Conutry_of_Origin]                                                 " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1_Currency_Index]                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1_Currency_Id]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Tax1_Currency_Name]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2_Currency_Index]                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2_Currency_Id]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Tax2_Currency_Name]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3_Currency_Index]                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3_Currency_Id]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Tax3_Currency_Name]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4_Currency_Index]                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4_Currency_Id]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Tax4_Currency_Name]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5]                                                              " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5_Currency_Index]                                               " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5_Currency_Id]                                                  " + Environment.NewLine;
                                sqlCMD += "              ,[Tax5_Currency_Name]                                                " + Environment.NewLine;
                                sqlCMD += "              ,[ERP_Location]                                                      " + Environment.NewLine;
                                sqlCMD += "     	from im_TaskItemtmp                                                        " + Environment.NewLine;
                                sqlCMD += "   	where TaskItemTmp_Index = '" + iTask.TaskItemTmp_Index + "' " + Environment.NewLine;



                                sqlCMD += "   " + Environment.NewLine;

                            }
                        }

                    }


                }


                var transactionx = db.Database.BeginTransaction();
                try
                {
                    olog.logging("updateCheckBOMAfterGI", sqlCMD);

                    var GIResx = db.Database.ExecuteSqlCommand(sqlCMD);
                    //   var GILRes = db.Database.ExecuteSqlCommand(cmdGIL);
                    transactionx.Commit();
                    // End Trasaction get Running






                }
                catch (Exception exTransx)
                {
                    transactionx.Rollback();

                    olog.logging("updateCheckBOMAfterGI", exTransx.Message.ToString());

                    throw exTransx;
                }
                //  Find Plan GI not Bom and not wave






                result.resultMsg = "Success";
                return result;
            }
            catch (Exception ex)
            {
                msglog = State + " ex Rollback " + ex.Message.ToString();
                olog.logging("updateCheckBOMAfterGI", msglog);
                var result = new Result();
                result.resultIsUse = false;
                result.resultMsg = ex.Message;
                return result;
            }
        }



        public Result updateCheckBOM(GoodsIssueViewModel model)
        {
            String State = "Start";
            String msglog = "";
            var olog = new logtxt();
            try
            {

                var result = new Result();
                // var GI = db.IM_GoodsIssue.Find(Guid.Parse(model.goodsIssue_Index));
                var GoodsIssue = db.IM_GoodsIssueItemLocation.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.Document_Status == 0).ToList();

                var GroupPlanGI = GoodsIssue.GroupBy(c => new { c.GoodsIssue_Index, c.Ref_Document_No, c.Ref_Document_Index })
                                   .Select(group => new
                                   {
                                       GI_Index = group.Key.GoodsIssue_Index,
                                       PLANGI_No = group.Key.Ref_Document_No,
                                       PLANGI_Index = group.Key.Ref_Document_Index,


                                       //ResultItem = group.OrderByDescending(o => o.location_Id).ThenByDescending(o => o.product_Id).ThenByDescending(o => o.qty).ToList()
                                   }).ToList();


                // Group by Plan GI

                olog.logging("updateCheckBOM", "GroupPlanGI : " + model.goodsIssue_Index);

                string sqlCMD = "";
                foreach (var itemPlanGI in GroupPlanGI)
                {


                    // Group by Plan GI HIGH_LV_ITEM
                    var ViewCheckBOM = db.View_GoodsIssueCheckBOM.Where(c => c.PlanGoodsIssue_Index == itemPlanGI.PLANGI_Index).ToList();
                    var groupViewCheckBOM = ViewCheckBOM.GroupBy(c => new { c.PlanGoodsIssue_Index, c.PlanGoodsIssue_No, c.HIGH_LV_ITEM })
                                   .Select(group => new
                                   {
                                       LineNum = group.Key.HIGH_LV_ITEM,
                                       PLANGI_No = group.Key.PlanGoodsIssue_No,
                                       PLANGI_Index = group.Key.PlanGoodsIssue_Index,


                                       ResultItem = group.OrderByDescending(o => o.HIGH_LV_ITEM).ToList()
                                   }).ToList();



                    olog.logging("updateCheckBOM", "groupViewCheckBOM : " + itemPlanGI.PLANGI_No.ToString());



                    foreach (var iPlgiLine in groupViewCheckBOM)
                    {

                        var sPlanGoodsIssue_Index = new SqlParameter("@PlanGoodsIssue_Index", iPlgiLine.PLANGI_Index);
                        var sHIGH_LV_ITEM = new SqlParameter("@HIGH_LV_ITEM", iPlgiLine.LineNum);

                        olog.logging("updateCheckBOM", "S.sp_GetCheckBOMAfterTask : " + iPlgiLine.PLANGI_Index.ToString() + " , " + iPlgiLine.LineNum);

                        var ViewBOM = db.View_GoodsIssueBOM.FromSql(" sp_GetCheckBOMAfterTask @PlanGoodsIssue_Index , @HIGH_LV_ITEM ", sPlanGoodsIssue_Index, sHIGH_LV_ITEM).ToList();


                        olog.logging("updateCheckBOM", "E.sp_GetCheckBOMAfterTask : " + iPlgiLine.PLANGI_Index.ToString() + " , " + iPlgiLine.LineNum);


                        var checkBOMDiff = ViewBOM.Where(c => c.ModBomTotalQty != 0).ToList();



                        if (checkBOMDiff != null)
                        {

                            // Loop Bom Diff QTy
                            foreach (var iBom in ViewBOM)
                            {


                                if (iBom.BomDiffTotalQty != 0)
                                {
                                    var RemainBomDiffTotalQty = iBom.BomDiffTotalQty;
                                    var BomTaskitem = db.IM_TaskItem.Where(c => c.PlanGoodsIssueItem_Index == iBom.PlanGoodsIssueItem_Index).ToList();
                                    // Loop Taskitem for Decease Qty Pick
                                    foreach (var iTask in BomTaskitem)
                                    {
                                        if ((iTask.TotalQty - RemainBomDiffTotalQty) >= 0 && RemainBomDiffTotalQty > 0)
                                        {

                                            olog.logging("updateCheckBOM", "iTask.TotalQty - RemainBomDiffTotalQty >= 0 : " + (iTask.TotalQty - RemainBomDiffTotalQty).ToString());


                                            sqlCMD += " " + Environment.NewLine;

                                            sqlCMD += "  UPdate WMSDB_AMZ_Outbound_V3..im_GoodsIssueItemLocation set  ";
                                            sqlCMD += "    Qty =  Qty -  (" + RemainBomDiffTotalQty.ToString() + " / Ratio) ";
                                            sqlCMD += "   ,TotalQty =  TotalQty - " + RemainBomDiffTotalQty.ToString();
                                            sqlCMD += "  where GoodsIssueItemLocation_Index = '" + iTask.Ref_DocumentItem_Index + "' ;";

                                            sqlCMD += " " + Environment.NewLine;


                                            sqlCMD += "  UPdate WMSDB_AMZ_Outbound_V3..im_TaskItem set ";
                                            sqlCMD += "    Qty =   Qty - (" + RemainBomDiffTotalQty.ToString() + " / Ratio) ";
                                            sqlCMD += "    ,TotalQty = TotalQty - " + RemainBomDiffTotalQty.ToString();
                                            sqlCMD += "   where TaskItem_Index = '" + iTask.TaskItem_Index + "' ;";

                                            sqlCMD += " " + Environment.NewLine;


                                            sqlCMD += "  UPdate  WMSDB_AMZ_Binbalance_V3 ..wm_BinBalance   set ";
                                            sqlCMD += "    BinBalance_QtyReserve = BinBalance_QtyReserve - " + RemainBomDiffTotalQty.ToString();
                                            sqlCMD += "   where BinBalance_Index = '" + iTask.BinBalance_Index + "' ;";

                                            sqlCMD += " " + Environment.NewLine;

                                            sqlCMD += "    UPdate  WMSDB_AMZ_Binbalance_V3 ..wm_BinCardReserve set ";
                                            sqlCMD += "   BinCardReserve_QtyBal = BinCardReserve_QtyBal - " + RemainBomDiffTotalQty.ToString();
                                            sqlCMD += "   where BinBalance_Index = '" + iTask.BinBalance_Index + "' ";
                                            sqlCMD += "   and Ref_DocumentItem_Index = '" + iTask.Ref_DocumentItem_Index + "' ;";

                                            sqlCMD += " " + Environment.NewLine;



                                            sqlCMD += "  INSERT INTO [dbo].[im_TaskItemTmp]                             " + Environment.NewLine;
                                            sqlCMD += "             (                                                   " + Environment.NewLine;
                                            sqlCMD += "               [TaskItemTmp_Index]                               " + Environment.NewLine;
                                            sqlCMD += "  		    , [TaskItem_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Task_Index]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Task_No]                                          " + Environment.NewLine;
                                            sqlCMD += "             ,[LineNum]                                          " + Environment.NewLine;
                                            sqlCMD += "             ,[TagItem_Index]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Tag_Index]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Tag_No]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Index]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Id]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Name]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_SecondName]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_ThirdName]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Lot]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[ItemStatus_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[ItemStatus_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[ItemStatus_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Location_Index]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Location_Id]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Location_Name]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Qty]                                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Ratio]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[TotalQty]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversion_Index]                          " + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversion_Id]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversion_Name]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[MFG_Date]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[EXP_Date]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeightRatio]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight_Id]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight_Name]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[WeightRatio]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeightRatio]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeightRatio]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeightRatio]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeightRatio]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidthRatio]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Width]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[Width_Index]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Width_Id]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[Width_Name]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[WidthRatio]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLengthRatio]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Length]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Length_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Length_Id]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Length_Name]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[LengthRatio]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeightRatio]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Height]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Height_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Height_Id]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Height_Name]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[HeightRatio]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitVolume]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Volume]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Price]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[Price_Index]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Price_Id]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[Price_Name]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No1]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No2]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No3]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No4]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No5]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Document_Status]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_1]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_2]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_3]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_4]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_5]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Process_Index]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Document_No]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Document_LineNum]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Document_Index]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_DocumentItem_Index]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[ReasonCode_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[ReasonCode_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[ReasonCode_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Create_By]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Create_Date]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Update_By]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Update_Date]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Cancel_By]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Cancel_Date]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOutPick_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOutPick_No]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Qty]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Ratio]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_TotalQty]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_By]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Date]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Status]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_By]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Date]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Status]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[splitQty]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[PlanGoodsIssue_Index]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[PlanGoodsIssueItem_Index]                         " + Environment.NewLine;
                                            sqlCMD += "             ,[PlanGoodsIssue_No]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Pick_ProductConversion_Index]                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Pick_ProductConversion_Id]                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Pick_ProductConversion_Name]                      " + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversionBarcode]                         " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOut_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOut_No]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[ImageUri]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[BinBalance_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[BinBalance_Index_New]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Invoice_No]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Invoice_No_Out]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Declaration_No]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Declaration_No_Out]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[HS_Code]                                          " + Environment.NewLine;
                                            sqlCMD += "             ,[Conutry_of_Origin]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[ERP_Location]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabel_Qty]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabel_Ratio]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabel_TotalQty]                            " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Status]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Location_Index]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Location_Id]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Location_Name]                            " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Location_Index]                   " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Location_Id]                      " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Location_Name]                    " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Qty]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Ratio]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_TotalQty]                          " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_By]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Date]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Status]                            " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Location_Index]                    " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Location_Id]                       " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Location_Name]                     " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Qty]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Ratio]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_TotalQty]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_By]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Date]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Location_Index]                     " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Location_Id]                        " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Location_Name]                      " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToStg_By]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToStg_Date]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToStg_Status]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Document_StatusTracking])                         " + Environment.NewLine;
                                            sqlCMD += "     Select   NewID() " + Environment.NewLine;
                                            sqlCMD += "             , [TaskItem_Index]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Task_Index]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Task_No]                                          " + Environment.NewLine;
                                            sqlCMD += "             ,[LineNum]                                          " + Environment.NewLine;
                                            sqlCMD += "             ,[TagItem_Index]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Tag_Index]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Tag_No]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Index]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Id]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Name]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_SecondName]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_ThirdName]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Lot]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[ItemStatus_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[ItemStatus_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[ItemStatus_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Location_Index]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Location_Id]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Location_Name]                                    " + Environment.NewLine;
                                            sqlCMD += "             ," + RemainBomDiffTotalQty.ToString() + " / Ratio   " + Environment.NewLine;   // [Qty]    
                                            sqlCMD += "             ,[Ratio]                                            " + Environment.NewLine;
                                            sqlCMD += "             ," + RemainBomDiffTotalQty.ToString() + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversion_Index]                          " + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversion_Id]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversion_Name]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[MFG_Date]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[EXP_Date]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeightRatio]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight_Id]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight_Name]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[WeightRatio]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeightRatio]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeightRatio]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeightRatio]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeightRatio]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidthRatio]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Width]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[Width_Index]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Width_Id]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[Width_Name]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[WidthRatio]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLengthRatio]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Length]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Length_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Length_Id]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Length_Name]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[LengthRatio]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeightRatio]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Height]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Height_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Height_Id]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Height_Name]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[HeightRatio]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitVolume]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Volume]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Price]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[Price_Index]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Price_Id]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[Price_Name]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No1]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No2]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No3]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No4]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No5]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Document_Status]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_1]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_2]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_3]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_4]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_5]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Process_Index]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Document_No]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Document_LineNum]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Document_Index]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_DocumentItem_Index]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[ReasonCode_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[ReasonCode_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[ReasonCode_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Create_By]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,getdate()                                          " + Environment.NewLine;
                                            sqlCMD += "             ,[Update_By]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Update_Date]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Cancel_By]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Cancel_Date]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOutPick_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOutPick_No]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Qty]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Ratio]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_TotalQty]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_By]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Date]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Status]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_By]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Date]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Status]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[splitQty]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[PlanGoodsIssue_Index]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[PlanGoodsIssueItem_Index]                         " + Environment.NewLine;
                                            sqlCMD += "             ,[PlanGoodsIssue_No]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Pick_ProductConversion_Index]                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Pick_ProductConversion_Id]                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Pick_ProductConversion_Name]                      " + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversionBarcode]                         " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOut_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOut_No]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[ImageUri]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[BinBalance_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[BinBalance_Index_New]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Invoice_No]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Invoice_No_Out]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Declaration_No]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Declaration_No_Out]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[HS_Code]                                          " + Environment.NewLine;
                                            sqlCMD += "             ,[Conutry_of_Origin]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[ERP_Location]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabel_Qty]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabel_Ratio]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabel_TotalQty]                            " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Status]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Location_Index]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Location_Id]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Location_Name]                            " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Location_Index]                   " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Location_Id]                      " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Location_Name]                    " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Qty]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Ratio]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_TotalQty]                          " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_By]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Date]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Status]                            " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Location_Index]                    " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Location_Id]                       " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Location_Name]                     " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Qty]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Ratio]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_TotalQty]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_By]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Date]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Location_Index]                     " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Location_Id]                        " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Location_Name]                      " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToStg_By]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToStg_Date]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToStg_Status]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Document_StatusTracking]                          " + Environment.NewLine;
                                            sqlCMD += "   from im_TaskItem                                              " + Environment.NewLine;
                                            sqlCMD += "   where TaskItem_Index  =  '" + iTask.TaskItem_Index + "' ;" + Environment.NewLine;

                                            sqlCMD += " " + Environment.NewLine;



                                            RemainBomDiffTotalQty = 0;

                                            olog.logging("updateCheckBOM", "iTask.TotalQty - RemainBomDiffTotalQty >= 0 : " + sqlCMD);



                                        }
                                        else if ((iTask.TotalQty - RemainBomDiffTotalQty) < 0 && RemainBomDiffTotalQty > 0)
                                        {

                                            olog.logging("updateCheckBOM", "iTask.TotalQty - RemainBomDiffTotalQty < 0 : " + (iTask.TotalQty - RemainBomDiffTotalQty).ToString());



                                            sqlCMD += "    UPdate WMSDB_AMZ_Outbound_V3..im_GoodsIssueItemLocation set  ";

                                            sqlCMD += "   Qty =  Qty -   (" + iTask.TotalQty.ToString() + " / Ratio) ";
                                            sqlCMD += "   ,TotalQty =  TotalQty - " + iTask.TotalQty.ToString();
                                            sqlCMD += "   where GoodsIssueItemLocation_Index = '" + iTask.Ref_DocumentItem_Index + "' ;";


                                            sqlCMD += " " + Environment.NewLine;

                                            sqlCMD += "    UPdate WMSDB_AMZ_Outbound_V3..im_TaskItem set ";
                                            sqlCMD += "   Qty =   Qty -    (" + iTask.TotalQty.ToString() + " / Ratio) ";
                                            sqlCMD += "   ,TotalQty = TotalQty - " + iTask.TotalQty.ToString();
                                            sqlCMD += "   where TaskItem_Index = '" + iTask.TaskItem_Index + "' ;";

                                            sqlCMD += " " + Environment.NewLine;


                                            sqlCMD += "    UPdate  WMSDB_AMZ_Binbalance_V3 ..wm_BinBalance   set ";
                                            sqlCMD += "   BinBalance_QtyReserve = BinBalance_QtyReserve - " + iTask.TotalQty.ToString();
                                            sqlCMD += "   where BinBalance_Index = '" + iTask.BinBalance_Index + "' ; ";

                                            sqlCMD += " " + Environment.NewLine;

                                            sqlCMD += "    UPdate  WMSDB_AMZ_Binbalance_V3 ..wm_BinCardReserve set ";
                                            sqlCMD += "    BinCardReserve_QtyBal = BinCardReserve_QtyBal - " + iTask.TotalQty.ToString();
                                            sqlCMD += "   where BinBalance_Index = '" + iTask.BinBalance_Index + "' ";
                                            sqlCMD += "   and Ref_DocumentItem_Index = '" + iTask.Ref_DocumentItem_Index + "' ;";

                                            sqlCMD += " " + Environment.NewLine;




                                            sqlCMD += "  INSERT INTO [dbo].[im_TaskItemTmp]                             " + Environment.NewLine;
                                            sqlCMD += "          (                                                      " + Environment.NewLine;
                                            sqlCMD += "              [TaskItemTmp_Index]                                " + Environment.NewLine;
                                            sqlCMD += "  		   , [TaskItem_Index]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Task_Index]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Task_No]                                          " + Environment.NewLine;
                                            sqlCMD += "             ,[LineNum]                                          " + Environment.NewLine;
                                            sqlCMD += "             ,[TagItem_Index]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Tag_Index]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Tag_No]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Index]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Id]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Name]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_SecondName]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_ThirdName]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Lot]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[ItemStatus_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[ItemStatus_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[ItemStatus_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Location_Index]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Location_Id]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Location_Name]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Qty]                                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Ratio]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[TotalQty]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversion_Index]                          " + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversion_Id]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversion_Name]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[MFG_Date]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[EXP_Date]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeightRatio]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight_Id]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight_Name]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[WeightRatio]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeightRatio]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeightRatio]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeightRatio]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeightRatio]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidthRatio]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Width]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[Width_Index]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Width_Id]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[Width_Name]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[WidthRatio]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLengthRatio]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Length]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Length_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Length_Id]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Length_Name]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[LengthRatio]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeightRatio]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Height]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Height_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Height_Id]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Height_Name]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[HeightRatio]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitVolume]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Volume]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Price]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[Price_Index]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Price_Id]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[Price_Name]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No1]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No2]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No3]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No4]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No5]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Document_Status]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_1]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_2]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_3]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_4]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_5]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Process_Index]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Document_No]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Document_LineNum]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Document_Index]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_DocumentItem_Index]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[ReasonCode_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[ReasonCode_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[ReasonCode_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Create_By]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Create_Date]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Update_By]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Update_Date]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Cancel_By]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Cancel_Date]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOutPick_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOutPick_No]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Qty]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Ratio]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_TotalQty]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_By]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Date]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Status]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_By]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Date]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Status]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[splitQty]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[PlanGoodsIssue_Index]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[PlanGoodsIssueItem_Index]                         " + Environment.NewLine;
                                            sqlCMD += "             ,[PlanGoodsIssue_No]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Pick_ProductConversion_Index]                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Pick_ProductConversion_Id]                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Pick_ProductConversion_Name]                      " + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversionBarcode]                         " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOut_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOut_No]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[ImageUri]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[BinBalance_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[BinBalance_Index_New]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Invoice_No]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Invoice_No_Out]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Declaration_No]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Declaration_No_Out]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[HS_Code]                                          " + Environment.NewLine;
                                            sqlCMD += "             ,[Conutry_of_Origin]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[ERP_Location]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabel_Qty]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabel_Ratio]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabel_TotalQty]                            " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Status]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Location_Index]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Location_Id]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Location_Name]                            " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Location_Index]                   " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Location_Id]                      " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Location_Name]                    " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Qty]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Ratio]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_TotalQty]                          " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_By]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Date]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Status]                            " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Location_Index]                    " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Location_Id]                       " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Location_Name]                     " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Qty]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Ratio]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_TotalQty]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_By]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Date]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Location_Index]                     " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Location_Id]                        " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Location_Name]                      " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToStg_By]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToStg_Date]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToStg_Status]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Document_StatusTracking])                         " + Environment.NewLine;
                                            sqlCMD += "     Select   NewID()                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[TaskItem_Index]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Task_Index]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Task_No]                                          " + Environment.NewLine;
                                            sqlCMD += "             ,[LineNum]                                          " + Environment.NewLine;
                                            sqlCMD += "             ,[TagItem_Index]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Tag_Index]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Tag_No]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Index]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Id]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Name]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_SecondName]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_ThirdName]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Product_Lot]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[ItemStatus_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[ItemStatus_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[ItemStatus_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Location_Index]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Location_Id]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Location_Name]                                    " + Environment.NewLine;
                                            sqlCMD += "             , " + iTask.TotalQty.ToString() + " / Ratio        " + Environment.NewLine;   // [Qty]    
                                            sqlCMD += "             ,[Ratio]                                            " + Environment.NewLine;
                                            sqlCMD += "             ," + iTask.TotalQty.ToString() + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversion_Index]                          " + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversion_Id]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversion_Name]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[MFG_Date]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[EXP_Date]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeight_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWeightRatio]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight_Id]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Weight_Name]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[WeightRatio]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeight_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitNetWeightRatio]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeight_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[NetWeightRatio]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeight_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitGrsWeightRatio]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeight_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[GrsWeightRatio]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidth_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitWidthRatio]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Width]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[Width_Index]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Width_Id]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[Width_Name]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[WidthRatio]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLength_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitLengthRatio]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Length]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Length_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Length_Id]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Length_Name]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[LengthRatio]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeight_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitHeightRatio]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Height]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Height_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Height_Id]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Height_Name]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[HeightRatio]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitVolume]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Volume]                                           " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice_Index]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice_Id]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[UnitPrice_Name]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Price]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[Price_Index]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Price_Id]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[Price_Name]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No1]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No2]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No3]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No4]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[DocumentRef_No5]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Document_Status]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_1]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_2]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_3]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_4]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[UDF_5]                                            " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Process_Index]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Document_No]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Document_LineNum]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_Document_Index]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Ref_DocumentItem_Index]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[ReasonCode_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[ReasonCode_Id]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[ReasonCode_Name]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[Create_By]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,getdate()                                          " + Environment.NewLine;
                                            sqlCMD += "             ,[Update_By]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Update_Date]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Cancel_By]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Cancel_Date]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOutPick_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOutPick_No]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Qty]                                      " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Ratio]                                    " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_TotalQty]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_By]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Date]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Status]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_By]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Date]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Status]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[splitQty]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[PlanGoodsIssue_Index]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[PlanGoodsIssueItem_Index]                         " + Environment.NewLine;
                                            sqlCMD += "             ,[PlanGoodsIssue_No]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Pick_ProductConversion_Index]                     " + Environment.NewLine;
                                            sqlCMD += "             ,[Pick_ProductConversion_Id]                        " + Environment.NewLine;
                                            sqlCMD += "             ,[Pick_ProductConversion_Name]                      " + Environment.NewLine;
                                            sqlCMD += "             ,[ProductConversionBarcode]                         " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOut_Index]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[TagOut_No]                                        " + Environment.NewLine;
                                            sqlCMD += "             ,[ImageUri]                                         " + Environment.NewLine;
                                            sqlCMD += "             ,[BinBalance_Index]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[BinBalance_Index_New]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Invoice_No]                                       " + Environment.NewLine;
                                            sqlCMD += "             ,[Invoice_No_Out]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Declaration_No]                                   " + Environment.NewLine;
                                            sqlCMD += "             ,[Declaration_No_Out]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[HS_Code]                                          " + Environment.NewLine;
                                            sqlCMD += "             ,[Conutry_of_Origin]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax1_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax2_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax3_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax4_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5]                                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5_Currency_Index]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5_Currency_Id]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[Tax5_Currency_Name]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[ERP_Location]                                     " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabel_Qty]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabel_Ratio]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabel_TotalQty]                            " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Status]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Location_Index]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Location_Id]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Picking_Location_Name]                            " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Location_Index]                   " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Location_Id]                      " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingLabeling_Location_Name]                    " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Qty]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Ratio]                             " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_TotalQty]                          " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_By]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Date]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Status]                            " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Location_Index]                    " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Location_Id]                       " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingPickQty_Location_Name]                     " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Qty]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Ratio]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_TotalQty]                           " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_By]                                 " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Date]                               " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Location_Index]                     " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Location_Id]                        " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToDock_Location_Name]                      " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToStg_By]                                  " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToStg_Date]                                " + Environment.NewLine;
                                            sqlCMD += "             ,[PickingToStg_Status]                              " + Environment.NewLine;
                                            sqlCMD += "             ,[Document_StatusTracking]                          " + Environment.NewLine;
                                            sqlCMD += "   from im_TaskItem                                              " + Environment.NewLine;
                                            sqlCMD += "   where TaskItem_Index  =  '" + iTask.TaskItem_Index + "' ; " + Environment.NewLine;

                                            sqlCMD += " " + Environment.NewLine;

                                            RemainBomDiffTotalQty = RemainBomDiffTotalQty - (decimal)iTask.TotalQty;


                                            olog.logging("updateCheckBOM", "iTask.TotalQty - RemainBomDiffTotalQty < 0 : " + sqlCMD);

                                        }
                                        else
                                        {
                                            olog.logging("updateCheckBOM", "continue");

                                            continue;

                                        }





                                    }



                                }  // END if  iBom.BomDiffTotalQty  != 0



                            }



                        }


                    }






                }


                if (sqlCMD  != "")
                {
                    var transaction = db.Database.BeginTransaction();
                    try
                    {

                        olog.logging("updateCheckBOM", "S.ExecuteSqlCommand : " + sqlCMD);

                        var GIRes = db.Database.ExecuteSqlCommand(sqlCMD);
                        //   var GILRes = db.Database.ExecuteSqlCommand(cmdGIL);
                        transaction.Commit();
                        // End Trasaction get Running



                        olog.logging("updateCheckBOM", "E.ExecuteSqlCommand  " );


                    }
                    catch (Exception exTrans)
                    {
                        transaction.Rollback();

                        olog.logging("updateCheckBOM", "Err.ExecuteSqlCommand  " + exTrans.Message.ToString());
                        olog.logging("updateCheckBOM", "Err.ExecuteSqlCommand   inner - " + exTrans.InnerException.Message.ToString());
                        throw exTrans;
                    }
                }
             



                sqlCMD = "";

                //foreach (var itemPlanGI2 in GroupPlanGI)
                //{

                //    var Taskitemtmp = db.im_TaskItemTmp.Where(c => c.Ref_Document_Index == Guid.Parse(model.goodsIssue_Index) && c.PlanGoodsIssue_Index == itemPlanGI2.PLANGI_Index).ToList();

                //    // Loop Bom Diff QTy
                //    foreach (var iTask in Taskitemtmp)
                //    {

                //        var ViewCheckNotBOM = db.View_GoodsIssueCheckNotBOM.Where(c => c.PlanGoodsIssue_Index == itemPlanGI2.PLANGI_Index && c.Product_Index == iTask.Product_Index).ToList();

                //        // Loop Bom Diff QTy
                //        foreach (var iBom in ViewCheckNotBOM)
                //        {

                //            var Task_Index = Guid.NewGuid();
                //            if (iBom.DiffGI_TotalQty >= iTask.TotalQty)
                //            {



                //                sqlCMD += "   " + Environment.NewLine;

                //                sqlCMD += "   INSERT INTO [dbo].[im_TaskItem]                                   " + Environment.NewLine;
                //                sqlCMD += "              ([TaskItem_Index]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Task_Index]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Task_No]                                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[LineNum]                                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[TagItem_Index]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Tag_Index]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Tag_No]                                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Index]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Id]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Name]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_SecondName]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_ThirdName]                                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Lot]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[ItemStatus_Index]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[ItemStatus_Id]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[ItemStatus_Name]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Location_Index]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Location_Id]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Location_Name]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Qty]                                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Ratio]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[TotalQty]                                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[ProductConversion_Index]                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[ProductConversion_Id]                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[ProductConversion_Name]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[MFG_Date]                                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[EXP_Date]                                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight_Index]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight_Id]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight_Name]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeightRatio]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight]                                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight_Index]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight_Id]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight_Name]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[WeightRatio]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight_Index]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight_Id]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight_Name]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeightRatio]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight_Index]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight_Id]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight_Name]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeightRatio]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight_Index]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight_Id]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight_Name]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeightRatio]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight_Index]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight_Id]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight_Name]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeightRatio]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth_Index]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth_Id]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth_Name]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidthRatio]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Width]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Width_Index]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Width_Id]                                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[Width_Name]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[WidthRatio]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength_Index]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength_Id]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength_Name]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLengthRatio]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Length]                                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Length_Index]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Length_Id]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Length_Name]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[LengthRatio]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight_Index]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight_Id]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight_Name]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeightRatio]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Height]                                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Height_Index]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Height_Id]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Height_Name]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[HeightRatio]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitVolume]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Volume]                                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice_Index]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice_Id]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice_Name]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Price]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Price_Index]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Price_Id]                                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[Price_Name]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No1]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No2]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No3]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No4]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No5]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Document_Status]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_1]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_2]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_3]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_4]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_5]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_Process_Index]                                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_Document_No]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_Document_LineNum]                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_Document_Index]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_DocumentItem_Index]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[ReasonCode_Index]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[ReasonCode_Id]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[ReasonCode_Name]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Create_By]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Create_Date]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Update_By]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Update_Date]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Cancel_By]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Cancel_Date]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[TagOutPick_Index]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[TagOutPick_No]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Qty]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Ratio]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_TotalQty]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_By]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Date]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Status]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabeling_By]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabeling_Date]                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabeling_Status]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[splitQty]                                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[PlanGoodsIssue_Index]                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[PlanGoodsIssueItem_Index]                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[PlanGoodsIssue_No]                                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Pick_ProductConversion_Index]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Pick_ProductConversion_Id]                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Pick_ProductConversion_Name]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[ProductConversionBarcode]                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[TagOut_Index]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[TagOut_No]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[ImageUri]                                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[BinBalance_Index]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[BinBalance_Index_New]                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Invoice_No]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Invoice_No_Out]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Declaration_No]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Declaration_No_Out]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[HS_Code]                                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[Conutry_of_Origin]                                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1]                                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1_Currency_Index]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1_Currency_Id]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1_Currency_Name]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2]                                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2_Currency_Index]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2_Currency_Id]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2_Currency_Name]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3]                                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3_Currency_Index]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3_Currency_Id]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3_Currency_Name]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4]                                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4_Currency_Index]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4_Currency_Id]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4_Currency_Name]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5]                                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5_Currency_Index]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5_Currency_Id]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5_Currency_Name]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[ERP_Location]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabel_Qty]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabel_Ratio]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabel_TotalQty]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_Status]                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Location_Index]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Location_Id]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Location_Name]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabeling_Location_Index]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabeling_Location_Id]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabeling_Location_Name]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_Qty]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_Ratio]                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_TotalQty]                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_By]                                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_Date]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_Status]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_Location_Index]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_Location_Id]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_Location_Name]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_Qty]                                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_Ratio]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_TotalQty]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_By]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_Date]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_Location_Index]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_Location_Id]                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_Location_Name]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToStg_By]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToStg_Date]                                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToStg_Status]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Document_StatusTracking])                                                           " + Environment.NewLine;
                //                sqlCMD += "   		  Select   Newid()                                                                       " + Environment.NewLine;
                //                sqlCMD += "              , Task_Index                                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[Task_No]                                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[LineNum]                                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[TagItem_Index]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Tag_Index]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Tag_No]                                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Index]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Id]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Name]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_SecondName]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_ThirdName]                                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Lot]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[ItemStatus_Index]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[ItemStatus_Id]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[ItemStatus_Name]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Location_Index]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Location_Id]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Location_Name]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Qty]                                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Ratio]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[TotalQty]                                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[ProductConversion_Index]                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[ProductConversion_Id]                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[ProductConversion_Name]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[MFG_Date]                                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[EXP_Date]                                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight_Index]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight_Id]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight_Name]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeightRatio]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight]                                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight_Index]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight_Id]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight_Name]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[WeightRatio]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight_Index]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight_Id]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight_Name]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeightRatio]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight_Index]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight_Id]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight_Name]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeightRatio]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight_Index]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight_Id]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight_Name]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeightRatio]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight_Index]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight_Id]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight_Name]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeightRatio]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth_Index]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth_Id]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth_Name]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidthRatio]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Width]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Width_Index]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Width_Id]                                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[Width_Name]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[WidthRatio]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength_Index]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength_Id]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength_Name]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLengthRatio]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Length]                                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Length_Index]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Length_Id]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Length_Name]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[LengthRatio]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight_Index]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight_Id]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight_Name]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeightRatio]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Height]                                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Height_Index]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Height_Id]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Height_Name]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[HeightRatio]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitVolume]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Volume]                                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice_Index]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice_Id]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice_Name]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Price]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Price_Index]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Price_Id]                                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[Price_Name]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No1]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No2]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No3]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No4]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No5]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Document_Status]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_1]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_2]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_3]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_4]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_5]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_Process_Index]                                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_Document_No]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_Document_LineNum]                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_Document_Index]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_DocumentItem_Index]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[ReasonCode_Index]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[ReasonCode_Id]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[ReasonCode_Name]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Create_By]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Create_Date]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Update_By]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Update_Date]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Cancel_By]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Cancel_Date]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[TagOutPick_Index]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[TagOutPick_No]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Qty]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Ratio]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_TotalQty]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_By]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Date]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Status]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabeling_By]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabeling_Date]                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabeling_Status]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[splitQty]                                                                           " + Environment.NewLine;
                //                sqlCMD += "               ,'" + iBom.PlanGoodsIssue_Index + "' as [PlanGoodsIssue_Index]                       " + Environment.NewLine;
                //                sqlCMD += "               ,'" + iBom.PlanGoodsIssueItem_Index + "' as [PlanGoodsIssueItem_Index]               " + Environment.NewLine;
                //                sqlCMD += "               ,'" + iBom.PlanGoodsIssue_No + "' as [PlanGoodsIssue_No]                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Pick_ProductConversion_Index]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Pick_ProductConversion_Id]                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Pick_ProductConversion_Name]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[ProductConversionBarcode]                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[TagOut_Index]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[TagOut_No]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[ImageUri]                                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[BinBalance_Index]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[BinBalance_Index_New]                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Invoice_No]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Invoice_No_Out]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Declaration_No]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Declaration_No_Out]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[HS_Code]                                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[Conutry_of_Origin]                                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1]                                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1_Currency_Index]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1_Currency_Id]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1_Currency_Name]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2]                                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2_Currency_Index]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2_Currency_Id]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2_Currency_Name]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3]                                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3_Currency_Index]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3_Currency_Id]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3_Currency_Name]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4]                                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4_Currency_Index]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4_Currency_Id]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4_Currency_Name]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5]                                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5_Currency_Index]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5_Currency_Id]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5_Currency_Name]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[ERP_Location]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabel_Qty]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabel_Ratio]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabel_TotalQty]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_Status]                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Location_Index]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Location_Id]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Location_Name]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabeling_Location_Index]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabeling_Location_Id]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabeling_Location_Name]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_Qty]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_Ratio]                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_TotalQty]                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_By]                                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_Date]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_Status]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_Location_Index]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_Location_Id]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_Location_Name]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_Qty]                                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_Ratio]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_TotalQty]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_By]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_Date]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_Location_Index]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_Location_Id]                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_Location_Name]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToStg_By]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToStg_Date]                                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToStg_Status]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Document_StatusTracking]                                                            " + Environment.NewLine;
                //                sqlCMD += "   	from im_TaskItemtmp                                                                            " + Environment.NewLine;
                //                sqlCMD += "   	where TaskItemTmp_Index = '" + iTask.TaskItemTmp_Index + "'                                    " + Environment.NewLine;

                //                sqlCMD += "   " + Environment.NewLine;


                //                sqlCMD += "   INSERT INTO [dbo].[im_GoodsIssueItemLocation]                                   " + Environment.NewLine;
                //                sqlCMD += "              ([GoodsIssueItemLocation_Index]                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[GoodsIssue_Index]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[LineNum]                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[TagItem_Index]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Tag_Index]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Tag_No]                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Index]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Id]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Name]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_SecondName]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_ThirdName]                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Lot]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[ItemStatus_Index]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[ItemStatus_Id]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[ItemStatus_Name]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Location_Index]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Location_Id]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Location_Name]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[QtyPlan]                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[Qty]                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Ratio]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[TotalQty]                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[ProductConversion_Index]                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[ProductConversion_Id]                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[ProductConversion_Name]                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[MFG_Date]                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[EXP_Date]                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight_Index]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight_Id]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight_Name]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeightRatio]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight]                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight_Index]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight_Id]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight_Name]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[WeightRatio]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight_Index]                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight_Id]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight_Name]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeightRatio]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight_Index]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight_Id]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight_Name]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeightRatio]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight_Index]                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight_Id]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight_Name]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeightRatio]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight_Index]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight_Id]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight_Name]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeightRatio]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth_Index]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth_Id]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth_Name]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidthRatio]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Width]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Width_Index]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Width_Id]                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Width_Name]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[WidthRatio]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength_Index]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength_Id]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength_Name]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLengthRatio]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Length]                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[Length_Index]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Length_Id]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Length_Name]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[LengthRatio]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight_Index]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight_Id]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight_Name]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeightRatio]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Height]                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[Height_Index]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Height_Id]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Height_Name]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[HeightRatio]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitVolume]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Volume]                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice_Index]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice_Id]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice_Name]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Price]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Price_Index]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Price_Id]                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Price_Name]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No1]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No2]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No3]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No4]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No5]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Document_Status]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_1]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_2]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_3]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_4]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_5]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_Process_Index]                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_Document_No]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_Document_LineNum]                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_Document_Index]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_DocumentItem_Index]                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[GoodsReceiveItem_Index]                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[Create_By]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Create_Date]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Update_By]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Update_Date]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Cancel_By]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Cancel_Date]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Status]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_By]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Date]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Ref1]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Ref2]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Qty]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Ratio]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_TotalQty]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_ProductConversion_Index]                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Mashall_Status]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Mashall_Qty]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Cancel_Status]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[GoodsIssue_No]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[BinBalance_Index]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Invoice_No]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Invoice_No_Out]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Declaration_No]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Declaration_No_Out]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[HS_Code]                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[Conutry_of_Origin]                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1_Currency_Index]                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1_Currency_Id]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1_Currency_Name]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2_Currency_Index]                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2_Currency_Id]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2_Currency_Name]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3_Currency_Index]                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3_Currency_Id]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3_Currency_Name]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4_Currency_Index]                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4_Currency_Id]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4_Currency_Name]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5_Currency_Index]                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5_Currency_Id]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5_Currency_Name]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[ERP_Location])                                                     " + Environment.NewLine;
                //                sqlCMD += "     Select    NEWID() as [GoodsIssueItemLocation_Index]                           " + Environment.NewLine;
                //                sqlCMD += "              , Ref_Document_Index as   [GoodsIssue_Index]                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[LineNum]                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[TagItem_Index]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Tag_Index]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Tag_No]                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Index]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Id]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Name]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_SecondName]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_ThirdName]                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Lot]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[ItemStatus_Index]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[ItemStatus_Id]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[ItemStatus_Name]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Location_Index]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Location_Id]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Location_Name]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,0 as [QtyPlan]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Qty]                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Ratio]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[TotalQty]                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[ProductConversion_Index]                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[ProductConversion_Id]                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[ProductConversion_Name]                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[MFG_Date]                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[EXP_Date]                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight_Index]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight_Id]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight_Name]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeightRatio]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight]                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight_Index]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight_Id]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight_Name]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[WeightRatio]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight_Index]                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight_Id]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight_Name]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeightRatio]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight_Index]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight_Id]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight_Name]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeightRatio]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight_Index]                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight_Id]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight_Name]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeightRatio]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight_Index]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight_Id]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight_Name]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeightRatio]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth_Index]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth_Id]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth_Name]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidthRatio]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Width]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Width_Index]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Width_Id]                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Width_Name]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[WidthRatio]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength_Index]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength_Id]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength_Name]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLengthRatio]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Length]                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[Length_Index]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Length_Id]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Length_Name]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[LengthRatio]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight_Index]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight_Id]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight_Name]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeightRatio]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Height]                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[Height_Index]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Height_Id]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Height_Name]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[HeightRatio]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitVolume]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Volume]                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice_Index]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice_Id]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice_Name]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Price]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Price_Index]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Price_Id]                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Price_Name]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No1]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No2]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No3]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No4]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No5]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Document_Status]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_1]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_2]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_3]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_4]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_5]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_Process_Index]                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,'" + iBom.PlanGoodsIssue_No + "'  as [Ref_Document_No]                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_Document_LineNum]                                              " + Environment.NewLine;
                //                sqlCMD += "              ,'" + iBom.PlanGoodsIssue_Index + "' as [Ref_Document_Index]                        " + Environment.NewLine;
                //                sqlCMD += "              ,'" + iBom.PlanGoodsIssueItem_Index + "' as  [Ref_DocumentItem_Index]                " + Environment.NewLine;
                //                sqlCMD += "              ,NEWID() as [GoodsReceiveItem_Index]                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Create_By]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Create_Date]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Update_By]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Update_Date]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Cancel_By]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Cancel_Date]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Status]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_By]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Date]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,null as [Picking_Ref1]                                              " + Environment.NewLine;
                //                sqlCMD += "              ,null as [Picking_Ref2]                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Qty]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Ratio]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_TotalQty]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,null as [Picking_ProductConversion_Index]                           " + Environment.NewLine;
                //                sqlCMD += "              ,null as [Mashall_Status]                                            " + Environment.NewLine;
                //                sqlCMD += "              ,null as [Mashall_Qty]                                               " + Environment.NewLine;
                //                sqlCMD += "              ,null as [Cancel_Status]                                             " + Environment.NewLine;
                //                sqlCMD += "              ,Ref_Document_No as [GoodsIssue_No]                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[BinBalance_Index]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Invoice_No]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Invoice_No_Out]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Declaration_No]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Declaration_No_Out]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[HS_Code]                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[Conutry_of_Origin]                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1_Currency_Index]                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1_Currency_Id]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1_Currency_Name]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2_Currency_Index]                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2_Currency_Id]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2_Currency_Name]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3_Currency_Index]                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3_Currency_Id]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3_Currency_Name]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4_Currency_Index]                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4_Currency_Id]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4_Currency_Name]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5_Currency_Index]                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5_Currency_Id]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5_Currency_Name]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[ERP_Location]                                                      " + Environment.NewLine;
                //                sqlCMD += "     	from im_TaskItemtmp                                                        " + Environment.NewLine;
                //                sqlCMD += "   	where TaskItemTmp_Index = '" + iTask.TaskItemTmp_Index + "' " + Environment.NewLine;



                //                sqlCMD += "   " + Environment.NewLine;




                //            }
                //            else
                //            {


                //                sqlCMD += "   " + Environment.NewLine;

                //                sqlCMD += "   INSERT INTO [dbo].[im_TaskItem]                                   " + Environment.NewLine;
                //                sqlCMD += "              ([TaskItem_Index]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Task_Index]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Task_No]                                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[LineNum]                                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[TagItem_Index]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Tag_Index]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Tag_No]                                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Index]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Id]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Name]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_SecondName]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_ThirdName]                                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Lot]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[ItemStatus_Index]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[ItemStatus_Id]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[ItemStatus_Name]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Location_Index]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Location_Id]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Location_Name]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Qty]                                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Ratio]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[TotalQty]                                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[ProductConversion_Index]                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[ProductConversion_Id]                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[ProductConversion_Name]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[MFG_Date]                                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[EXP_Date]                                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight_Index]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight_Id]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight_Name]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeightRatio]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight]                                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight_Index]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight_Id]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight_Name]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[WeightRatio]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight_Index]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight_Id]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight_Name]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeightRatio]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight_Index]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight_Id]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight_Name]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeightRatio]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight_Index]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight_Id]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight_Name]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeightRatio]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight_Index]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight_Id]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight_Name]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeightRatio]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth_Index]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth_Id]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth_Name]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidthRatio]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Width]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Width_Index]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Width_Id]                                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[Width_Name]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[WidthRatio]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength_Index]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength_Id]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength_Name]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLengthRatio]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Length]                                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Length_Index]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Length_Id]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Length_Name]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[LengthRatio]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight_Index]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight_Id]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight_Name]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeightRatio]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Height]                                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Height_Index]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Height_Id]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Height_Name]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[HeightRatio]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitVolume]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Volume]                                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice_Index]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice_Id]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice_Name]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Price]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Price_Index]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Price_Id]                                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[Price_Name]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No1]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No2]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No3]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No4]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No5]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Document_Status]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_1]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_2]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_3]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_4]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_5]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_Process_Index]                                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_Document_No]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_Document_LineNum]                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_Document_Index]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_DocumentItem_Index]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[ReasonCode_Index]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[ReasonCode_Id]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[ReasonCode_Name]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Create_By]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Create_Date]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Update_By]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Update_Date]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Cancel_By]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Cancel_Date]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[TagOutPick_Index]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[TagOutPick_No]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Qty]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Ratio]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_TotalQty]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_By]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Date]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Status]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabeling_By]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabeling_Date]                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabeling_Status]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[splitQty]                                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[PlanGoodsIssue_Index]                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[PlanGoodsIssueItem_Index]                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[PlanGoodsIssue_No]                                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Pick_ProductConversion_Index]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Pick_ProductConversion_Id]                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Pick_ProductConversion_Name]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[ProductConversionBarcode]                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[TagOut_Index]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[TagOut_No]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[ImageUri]                                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[BinBalance_Index]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[BinBalance_Index_New]                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Invoice_No]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Invoice_No_Out]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Declaration_No]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Declaration_No_Out]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[HS_Code]                                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[Conutry_of_Origin]                                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1]                                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1_Currency_Index]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1_Currency_Id]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1_Currency_Name]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2]                                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2_Currency_Index]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2_Currency_Id]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2_Currency_Name]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3]                                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3_Currency_Index]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3_Currency_Id]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3_Currency_Name]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4]                                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4_Currency_Index]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4_Currency_Id]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4_Currency_Name]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5]                                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5_Currency_Index]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5_Currency_Id]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5_Currency_Name]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[ERP_Location]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabel_Qty]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabel_Ratio]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabel_TotalQty]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_Status]                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Location_Index]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Location_Id]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Location_Name]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabeling_Location_Index]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabeling_Location_Id]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabeling_Location_Name]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_Qty]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_Ratio]                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_TotalQty]                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_By]                                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_Date]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_Status]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_Location_Index]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_Location_Id]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_Location_Name]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_Qty]                                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_Ratio]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_TotalQty]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_By]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_Date]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_Location_Index]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_Location_Id]                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_Location_Name]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToStg_By]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToStg_Date]                                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToStg_Status]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Document_StatusTracking])                                                           " + Environment.NewLine;
                //                sqlCMD += "   		  Select Newid()                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,Task_Index                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Task_No]                                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[LineNum]                                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[TagItem_Index]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Tag_Index]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Tag_No]                                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Index]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Id]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Name]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_SecondName]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_ThirdName]                                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Lot]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[ItemStatus_Index]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[ItemStatus_Id]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[ItemStatus_Name]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Location_Index]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Location_Id]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Location_Name]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ," + iBom.DiffGI_TotalQty.ToString() + "  /  Ratio as [Qty]                           " + Environment.NewLine;
                //                sqlCMD += "              ,[Ratio]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ," + iBom.DiffGI_TotalQty.ToString() + " as [TotalQty]                                " + Environment.NewLine;
                //                sqlCMD += "              ,[ProductConversion_Index]                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[ProductConversion_Id]                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[ProductConversion_Name]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[MFG_Date]                                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[EXP_Date]                                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight_Index]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight_Id]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight_Name]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeightRatio]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight]                                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight_Index]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight_Id]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight_Name]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[WeightRatio]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight_Index]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight_Id]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight_Name]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeightRatio]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight_Index]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight_Id]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight_Name]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeightRatio]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight_Index]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight_Id]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight_Name]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeightRatio]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight_Index]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight_Id]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight_Name]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeightRatio]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth_Index]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth_Id]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth_Name]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidthRatio]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Width]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Width_Index]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Width_Id]                                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[Width_Name]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[WidthRatio]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength_Index]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength_Id]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength_Name]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLengthRatio]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Length]                                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Length_Index]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Length_Id]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Length_Name]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[LengthRatio]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight_Index]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight_Id]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight_Name]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeightRatio]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Height]                                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Height_Index]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Height_Id]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Height_Name]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[HeightRatio]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitVolume]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Volume]                                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice_Index]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice_Id]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice_Name]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Price]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Price_Index]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Price_Id]                                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[Price_Name]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No1]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No2]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No3]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No4]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No5]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Document_Status]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_1]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_2]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_3]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_4]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_5]                                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_Process_Index]                                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_Document_No]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_Document_LineNum]                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_Document_Index]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_DocumentItem_Index]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[ReasonCode_Index]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[ReasonCode_Id]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[ReasonCode_Name]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Create_By]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Create_Date]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Update_By]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Update_Date]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Cancel_By]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Cancel_Date]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[TagOutPick_Index]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[TagOutPick_No]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Qty]                                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Ratio]                                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_TotalQty]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_By]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Date]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Status]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabeling_By]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabeling_Date]                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabeling_Status]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[splitQty]                                                                           " + Environment.NewLine;
                //                sqlCMD += "               ,'" + iBom.PlanGoodsIssue_Index + "' as [PlanGoodsIssue_Index]                       " + Environment.NewLine;
                //                sqlCMD += "               ,'" + iBom.PlanGoodsIssueItem_Index + "' as [PlanGoodsIssueItem_Index]               " + Environment.NewLine;
                //                sqlCMD += "               ,'" + iBom.PlanGoodsIssue_No + "' as [PlanGoodsIssue_No]                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Pick_ProductConversion_Index]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Pick_ProductConversion_Id]                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Pick_ProductConversion_Name]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[ProductConversionBarcode]                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[TagOut_Index]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[TagOut_No]                                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[ImageUri]                                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[BinBalance_Index]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[BinBalance_Index_New]                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Invoice_No]                                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Invoice_No_Out]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Declaration_No]                                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Declaration_No_Out]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[HS_Code]                                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[Conutry_of_Origin]                                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1]                                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1_Currency_Index]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1_Currency_Id]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1_Currency_Name]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2]                                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2_Currency_Index]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2_Currency_Id]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2_Currency_Name]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3]                                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3_Currency_Index]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3_Currency_Id]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3_Currency_Name]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4]                                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4_Currency_Index]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4_Currency_Id]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4_Currency_Name]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5]                                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5_Currency_Index]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5_Currency_Id]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5_Currency_Name]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[ERP_Location]                                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabel_Qty]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabel_Ratio]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabel_TotalQty]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_Status]                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Location_Index]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Location_Id]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Location_Name]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabeling_Location_Index]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabeling_Location_Id]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingLabeling_Location_Name]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_Qty]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_Ratio]                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_TotalQty]                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_By]                                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_Date]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_Status]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_Location_Index]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_Location_Id]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingPickQty_Location_Name]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_Qty]                                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_Ratio]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_TotalQty]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_By]                                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_Date]                                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_Location_Index]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_Location_Id]                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToDock_Location_Name]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToStg_By]                                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToStg_Date]                                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[PickingToStg_Status]                                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Document_StatusTracking]                                                            " + Environment.NewLine;
                //                sqlCMD += "   	from im_TaskItemtmp                                                                            " + Environment.NewLine;
                //                sqlCMD += "   	where TaskItemTmp_Index = '" + iTask.TaskItemTmp_Index + "'                                    " + Environment.NewLine;

                //                sqlCMD += "   " + Environment.NewLine;


                //                sqlCMD += "   INSERT INTO [dbo].[im_GoodsIssueItemLocation]                                   " + Environment.NewLine;
                //                sqlCMD += "              ([GoodsIssueItemLocation_Index]                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[GoodsIssue_Index]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[LineNum]                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[TagItem_Index]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Tag_Index]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Tag_No]                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Index]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Id]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Name]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_SecondName]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_ThirdName]                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Lot]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[ItemStatus_Index]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[ItemStatus_Id]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[ItemStatus_Name]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Location_Index]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Location_Id]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Location_Name]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[QtyPlan]                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[Qty]                                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Ratio]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[TotalQty]                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[ProductConversion_Index]                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[ProductConversion_Id]                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[ProductConversion_Name]                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[MFG_Date]                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[EXP_Date]                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight_Index]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight_Id]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight_Name]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeightRatio]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight]                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight_Index]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight_Id]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight_Name]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[WeightRatio]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight_Index]                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight_Id]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight_Name]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeightRatio]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight_Index]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight_Id]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight_Name]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeightRatio]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight_Index]                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight_Id]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight_Name]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeightRatio]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight_Index]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight_Id]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight_Name]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeightRatio]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth_Index]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth_Id]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth_Name]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidthRatio]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Width]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Width_Index]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Width_Id]                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Width_Name]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[WidthRatio]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength_Index]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength_Id]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength_Name]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLengthRatio]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Length]                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[Length_Index]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Length_Id]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Length_Name]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[LengthRatio]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight_Index]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight_Id]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight_Name]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeightRatio]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Height]                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[Height_Index]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Height_Id]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Height_Name]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[HeightRatio]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitVolume]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Volume]                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice_Index]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice_Id]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice_Name]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Price]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Price_Index]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Price_Id]                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Price_Name]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No1]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No2]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No3]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No4]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No5]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Document_Status]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_1]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_2]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_3]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_4]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_5]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_Process_Index]                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_Document_No]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_Document_LineNum]                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_Document_Index]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_DocumentItem_Index]                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[GoodsReceiveItem_Index]                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[Create_By]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Create_Date]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Update_By]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Update_Date]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Cancel_By]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Cancel_Date]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Status]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_By]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Date]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Ref1]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Ref2]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Qty]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Ratio]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_TotalQty]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_ProductConversion_Index]                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Mashall_Status]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Mashall_Qty]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Cancel_Status]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[GoodsIssue_No]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[BinBalance_Index]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Invoice_No]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Invoice_No_Out]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Declaration_No]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Declaration_No_Out]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[HS_Code]                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[Conutry_of_Origin]                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1_Currency_Index]                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1_Currency_Id]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1_Currency_Name]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2_Currency_Index]                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2_Currency_Id]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2_Currency_Name]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3_Currency_Index]                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3_Currency_Id]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3_Currency_Name]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4_Currency_Index]                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4_Currency_Id]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4_Currency_Name]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5_Currency_Index]                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5_Currency_Id]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5_Currency_Name]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[ERP_Location])                                                     " + Environment.NewLine;
                //                sqlCMD += "     Select    NEWID() as [GoodsIssueItemLocation_Index]                           " + Environment.NewLine;
                //                sqlCMD += "              , Ref_Document_Index as   [GoodsIssue_Index]                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[LineNum]                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[TagItem_Index]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Tag_Index]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Tag_No]                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Index]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Id]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Name]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_SecondName]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_ThirdName]                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Product_Lot]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[ItemStatus_Index]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[ItemStatus_Id]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[ItemStatus_Name]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Location_Index]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Location_Id]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Location_Name]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,0 as [QtyPlan]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ," + iBom.DiffGI_TotalQty.ToString() + "  /  Ratio as [Qty]          " + Environment.NewLine;
                //                sqlCMD += "              ,[Ratio]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ," + iBom.DiffGI_TotalQty.ToString() + " as [TotalQty]               " + Environment.NewLine;
                //                sqlCMD += "              ,[ProductConversion_Index]                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[ProductConversion_Id]                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[ProductConversion_Name]                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[MFG_Date]                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[EXP_Date]                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight_Index]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight_Id]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeight_Name]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWeightRatio]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight]                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight_Index]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight_Id]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Weight_Name]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[WeightRatio]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight_Index]                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight_Id]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeight_Name]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitNetWeightRatio]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight_Index]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight_Id]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeight_Name]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[NetWeightRatio]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight_Index]                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight_Id]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeight_Name]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitGrsWeightRatio]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight_Index]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight_Id]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeight_Name]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[GrsWeightRatio]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth_Index]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth_Id]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidth_Name]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitWidthRatio]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Width]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Width_Index]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Width_Id]                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Width_Name]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[WidthRatio]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength_Index]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength_Id]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLength_Name]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitLengthRatio]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Length]                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[Length_Index]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Length_Id]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Length_Name]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[LengthRatio]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight_Index]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight_Id]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeight_Name]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitHeightRatio]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Height]                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[Height_Index]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[Height_Id]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Height_Name]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[HeightRatio]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitVolume]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Volume]                                                            " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice_Index]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice_Id]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,[UnitPrice_Name]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Price]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Price_Index]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Price_Id]                                                          " + Environment.NewLine;
                //                sqlCMD += "              ,[Price_Name]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No1]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No2]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No3]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No4]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[DocumentRef_No5]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[Document_Status]                                                   " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_1]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_2]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_3]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_4]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[UDF_5]                                                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_Process_Index]                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,'" + iBom.PlanGoodsIssue_No + "'  as [Ref_Document_No]                             " + Environment.NewLine;
                //                sqlCMD += "              ,[Ref_Document_LineNum]                                              " + Environment.NewLine;
                //                sqlCMD += "              ,'" + iBom.PlanGoodsIssue_Index + "' as [Ref_Document_Index]                        " + Environment.NewLine;
                //                sqlCMD += "              ,'" + iBom.PlanGoodsIssueItem_Index + "' as  [Ref_DocumentItem_Index]                " + Environment.NewLine;
                //                sqlCMD += "              ,NEWID() as [GoodsReceiveItem_Index]                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Create_By]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Create_Date]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Update_By]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Update_Date]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Cancel_By]                                                         " + Environment.NewLine;
                //                sqlCMD += "              ,[Cancel_Date]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Status]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_By]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Date]                                                      " + Environment.NewLine;
                //                sqlCMD += "              ,null as [Picking_Ref1]                                              " + Environment.NewLine;
                //                sqlCMD += "              ,null as [Picking_Ref2]                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Qty]                                                       " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_Ratio]                                                     " + Environment.NewLine;
                //                sqlCMD += "              ,[Picking_TotalQty]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,null as [Picking_ProductConversion_Index]                           " + Environment.NewLine;
                //                sqlCMD += "              ,null as [Mashall_Status]                                            " + Environment.NewLine;
                //                sqlCMD += "              ,null as [Mashall_Qty]                                               " + Environment.NewLine;
                //                sqlCMD += "              ,null as [Cancel_Status]                                             " + Environment.NewLine;
                //                sqlCMD += "              ,Ref_Document_No as [GoodsIssue_No]                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[BinBalance_Index]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Invoice_No]                                                        " + Environment.NewLine;
                //                sqlCMD += "              ,[Invoice_No_Out]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Declaration_No]                                                    " + Environment.NewLine;
                //                sqlCMD += "              ,[Declaration_No_Out]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[HS_Code]                                                           " + Environment.NewLine;
                //                sqlCMD += "              ,[Conutry_of_Origin]                                                 " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1_Currency_Index]                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1_Currency_Id]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax1_Currency_Name]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2_Currency_Index]                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2_Currency_Id]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax2_Currency_Name]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3_Currency_Index]                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3_Currency_Id]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax3_Currency_Name]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4_Currency_Index]                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4_Currency_Id]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax4_Currency_Name]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5]                                                              " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5_Currency_Index]                                               " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5_Currency_Id]                                                  " + Environment.NewLine;
                //                sqlCMD += "              ,[Tax5_Currency_Name]                                                " + Environment.NewLine;
                //                sqlCMD += "              ,[ERP_Location]                                                      " + Environment.NewLine;
                //                sqlCMD += "     	from im_TaskItemtmp                                                        " + Environment.NewLine;
                //                sqlCMD += "   	where TaskItemTmp_Index = '" + iTask.TaskItemTmp_Index + "' " + Environment.NewLine;



                //                sqlCMD += "   " + Environment.NewLine;

                //            }
                //        }

                //    }


                //}
                //if (sqlCMD != "")
                //{

                //    var transactionx = db.Database.BeginTransaction();
                //    try
                //    {
                //        olog.logging("updateCheckBOM", sqlCMD);

                //        var GIResx = db.Database.ExecuteSqlCommand(sqlCMD);
                //        //   var GILRes = db.Database.ExecuteSqlCommand(cmdGIL);
                //        transactionx.Commit();
                //        // End Trasaction get Running






                //    }
                //    catch (Exception exTransx)
                //    {
                //        transactionx.Rollback();

                //        olog.logging("updateCheckBOM", exTransx.Message.ToString());

                //        throw exTransx;
                //    }
                //    //  Find Plan GI not Bom and not wave

                //}




                result.resultMsg = "Success";
                return result;
            }
            catch (Exception ex)
            {
                msglog = State + " ex Rollback " + ex.Message.ToString();
                olog.logging("updateCheckBOM", msglog);
                var result = new Result();
                result.resultIsUse = false;
                result.resultMsg = ex.Message;
                return result;
            }
        }



        #region CheckPickGI
        public List<goodsIssueItemLocationViewModel> CheckPickGI(goodsIssueItemLocationViewModel data)
        {
            try
            {
                var GIL = new List<goodsIssueItemLocationViewModel>();

                var resultItem = new goodsIssueItemLocationViewModel();

                var query = db.IM_GoodsIssueItemLocation.AsQueryable();

                if (data.ref_Document_Index != new Guid("00000000-0000-0000-0000-000000000000".ToString()))
                {
                    query = query.Where(c => c.Ref_Document_Index == data.ref_Document_Index && c.Document_Status != 2 && c.Document_Status != -1 && c.Document_Status != -2);
                }

                var result = query.ToList();

                if (result.Count > 0)
                {
                    resultItem.message = "fail";

                    GIL.Add(resultItem);
                }

                if (result.Count <= 0)
                {
                    resultItem.message = "true";

                    GIL.Add(resultItem);
                }

                return GIL;
            }

            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region PopupGoodsIssuefilter
        public List<SearchDetailModel> popupGoodsIssuefilter(SearchDetailModel data)
        {
            try
            {

                var items = new List<SearchDetailModel>();



                var query = db.View_GoodsIssue.AsQueryable();

                query = query.Where(c => c.Document_Status == 1);


                if (!string.IsNullOrEmpty(data.goodsIssue_No))
                {
                    query = query.Where(c => c.GoodsIssue_No == data.goodsIssue_No);
                }


                var result = query.Take(100).OrderByDescending(o => o.Create_Date).ToList();

                var ProcessStatus = new List<ProcessStatusViewModel>();

                var filterModel = new ProcessStatusViewModel();

                filterModel.process_Index = new Guid("2E026669-99BD-4DE0-8818-534F29F7B89D");

                //GetConfig
                ProcessStatus = utils.SendDataApi<List<ProcessStatusViewModel>>(new AppSettingConfig().GetUrl("processStatus"), filterModel.sJson());


                foreach (var item in result)
                {
                    var resultItem = new SearchDetailModel();

                    String Statue = "";
                    Statue = item.Document_Status.ToString();
                    var ProcessStatusName = ProcessStatus.Where(c => c.processStatus_Id == Statue).FirstOrDefault();


                    resultItem.goodsIssue_Index = item.GoodsIssue_Index;
                    resultItem.goodsIssue_No = item.GoodsIssue_No;
                    resultItem.planGoodsIssue_No = item.PlanGoodsIssue_No;
                    resultItem.goodsIssue_Date = item.GoodsIssue_Date.toString();
                    resultItem.owner_Index = item.Owner_Index;
                    resultItem.owner_Id = item.Owner_Id;
                    resultItem.owner_Name = item.Owner_Name;
                    resultItem.document_Remark = item.Document_Remark;
                    resultItem.qty = db.IM_GoodsIssueItemLocation.Where(c => c.GoodsIssue_Index == item.GoodsIssue_Index).Sum(s => s.Qty);
                    resultItem.processStatus_Name = ProcessStatusName?.processStatus_Name;

                    items.Add(resultItem);
                }


                return items;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

        public Result ConfirmStatus(GoodsIssueViewModel model)
        {
            String State = "Start";
            String msglog = "";
            var olog = new logtxt();
            try
            {
                var result = new Result();
                var GI = db.IM_GoodsIssue.Find(Guid.Parse(model.goodsIssue_Index));
                //foreach (var item in model.listGoodsIssueItemViewModel)
                //{
                //    var GIL = db.IM_GoodsIssueItemLocation.Find(Guid.Parse(item.goodsIssueItemLocation_Index));
                //    GIL.Document_Status = 1;
                //    GIL.Update_Date = DateTime.Now;
                //    GIL.Update_By = model.create_by;
                //}
                GI.Document_Status = 1;
                GI.Update_Date = DateTime.Now;
                GI.Update_By = model.create_by;
                var transaction = db.Database.BeginTransaction();
                try
                {
                    db.SaveChanges();
                    transaction.Commit();
                    result.resultIsUse = true;
                }

                catch (Exception exy)
                {
                    result.resultIsUse = false;
                    msglog = State + " ex Rollback " + exy.Message.ToString();
                    olog.logging("confirmStatus", msglog);
                    transaction.Rollback();
                    throw exy;
                }
                result.resultMsg = "Success";
                return result;
            }
            catch (Exception ex)
            {
                msglog = State + " ex Rollback " + ex.Message.ToString();
                olog.logging("confirmStatus", msglog);
                var result = new Result();
                result.resultIsUse = false;
                result.resultMsg = ex.Message;
                return result;
            }
        }

        #region DeleteDocument
        public string DeleteDocument(GoodsIssueViewModel model)
        {
            String State = "Start";
            String msglog = "";
            var olog = new logtxt();
            bool ischkPGI = false;
            try
            {
                db.Database.SetCommandTimeout(360);
                var GoodsIssue = db.IM_GoodsIssue.Find(new Guid(model.goodsIssue_Index));

                if (GoodsIssue != null)
                {
                    if (GoodsIssue.Document_Status != 0 && GoodsIssue.Document_Status != 1 && GoodsIssue.Document_Status != -2)
                    {
                        if (GoodsIssue.Document_Status == 2)
                        {
                            return "ไม่สามารถยกเลิกใบ PO ที่มีสถานนะมอบหมายงานแล้วได้";
                        }
                        else if (GoodsIssue.Document_Status == 2)
                        {
                            return "ไม่สามารถยกเลิกใบ PO ที่มีสถานนะเสร็จสินแล้วได้";
                        }
                        else if (GoodsIssue.Document_Status == -1)
                        {
                            return "ใบ PO ถูกยกเลิกไปแล้ว";
                        }
                        else
                        {
                            return "ไม่สามารถยกเลิกใบ PO ได้";
                        }
                    }

                    GoodsIssue.Document_Status = GoodsIssue.Document_Status == -2 ? -3 : -1;
                    GoodsIssue.Cancel_Date = DateTime.Now;
                    GoodsIssue.Cancel_By = model.create_by;


                    var GIL = db.IM_GoodsIssueItemLocation.Where(c => c.GoodsIssue_Index == new Guid(model.goodsIssue_Index) && (c.Document_Status == 0 || c.Document_Status == -2)).ToList();
                    foreach (var G in GIL)
                    {


                        if (!string.IsNullOrEmpty(G?.Ref_DocumentItem_Index?.ToString()) && !string.IsNullOrEmpty(G?.Ref_Document_Index?.ToString()))
                        {
                            if ((GoodsIssue.DocumentType_Index ?? Guid.Empty) == new Guid("D7C596E9-BDFF-4759-91DB-FCEC709E16B8"))
                            {
                                ischkPGI = true;
                                var modelPGI = new { BOMItem_Index = G?.Ref_DocumentItem_Index, BOM_Index = G?.Ref_Document_Index };
                                var updatePGIIStatus = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("updateStatusBomRunWave"), modelPGI.sJson());
                            }
                            else
                            {
                                ischkPGI = true;
                                var modelPGI = new { planGoodsIssueItem_Index = G?.Ref_DocumentItem_Index, planGoodsIssue_Index = G?.Ref_Document_Index };
                                var updatePGIIStatus = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("updateStatusPlanGIRunWave"), modelPGI.sJson());
                            }
                        }

                        var m = new { ref_DocumentItem_Index = G.GoodsIssueItemLocation_Index, ref_Document_Index = G.GoodsIssue_Index };
                        var updateBinCardReserveStatus = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("updateBinCardReserve"), m.sJson());
                        if (updateBinCardReserveStatus)
                        {
                            G.Document_Status = -1;
                            G.Cancel_Date = DateTime.Now;
                            G.Cancel_By = model.create_by;
                        }


                    }

                    var transaction = db.Database.BeginTransaction();
                    try
                    {
                        db.SaveChanges();
                        transaction.Commit();
                    }

                    catch (Exception exy)
                    {
                        msglog = State + " ex Rollback " + exy.Message.ToString();
                        olog.logging("DeleteGI", msglog);
                        transaction.Rollback();
                        throw exy;
                    }
                }

                return ischkPGI ? "SUCCESShavePGI" : "ยกเลิกข้อมูลสำเร็จ";
            }

            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

        #region CutSlots
        public bool ConfirmCutSlots(CutSlotsViewModel model)
        {
            String State = "Start";
            String msglog = "";
            var olog = new logtxt();
            try
            {


                var ListGIL = db.IM_GoodsIssueItemLocation.Where(c => c.GoodsIssue_Index == new Guid(model.goodsIssue_Index) && c.Document_Status == 0).ToList();

                var GI = db.IM_GoodsIssue.FirstOrDefault(c => c.GoodsIssue_Index == new Guid(model.goodsIssue_Index));

                //#region SentToSap
                //var itemstatus = utils.SendDataApi<List<ItemStatusDocViewModel>>(new AppSettingConfig().GetUrl("dropdownItemStatus"), new { }.sJson());
                //State = "Select GIIL";
                //var GII = db.IM_GoodsIssueItemLocation.Where(c => c.GoodsIssue_Index == GI.GoodsIssue_Index).ToList();
                //State = "Select PGI";
                //var PGI = db.IM_PlanGoodsIssue.FirstOrDefault(c => c.PlanGoodsIssue_Index == GII.FirstOrDefault().Ref_Document_Index);

                //var Request = new GIRequestViewModel();
                //Request.PstngDate = DateTime.Now.toString().Substring(0, 8);
                //Request.DocDate = string.IsNullOrEmpty(PGI?.PlanGoodsIssue_Date.toString()) ? "" : PGI.PlanGoodsIssue_Date.toString().Substring(0, 8);
                //Request.RefDocNo = GI.DocumentType_Id;
                //Request.GiNo = GI.GoodsIssue_No;
                //Request.HeaderTxt = !string.IsNullOrEmpty(GI.Document_Remark) ? GI.Document_Remark.Trim() : "";
                //Request.GmCode = "03";

                //if (string.IsNullOrEmpty(PGI?.Costcenter_Id))
                //{
                //    foreach (var i in GII)
                //    {
                //        State = "Select PGII";
                //        var PGII = db.IM_PlanGoodsIssueItem.FirstOrDefault(c => c.PlanGoodsIssue_Index == i.Ref_Document_Index && c.PlanGoodsIssueItem_Index == i.Ref_DocumentItem_Index);

                //        var RequestDetail = new GIRequestDetail();
                //        RequestDetail.Material = i.Product_Id;
                //        RequestDetail.Plant = PGI?.SoldTo_Id;
                //        RequestDetail.StgeLoc = PGI?.Sloc_Id;
                //        RequestDetail.Batch = i.Product_Lot;
                //        RequestDetail.MoveType = PGI?.MovementType_Id;
                //        RequestDetail.EntryQnt = Math.Round(i.Qty.sParse<decimal>(), 3);
                //        RequestDetail.EntryUom = i.ProductConversion_Name;
                //        RequestDetail.ItemText = !string.IsNullOrEmpty(PGII?.DocumentItem_Remark) ? PGII?.DocumentItem_Remark.Trim() : "";
                //        RequestDetail.GrRcpt = !string.IsNullOrEmpty(PGI?.DocumentRef_No4) ? PGI?.DocumentRef_No4.Trim() : "";
                //        RequestDetail.Costcenter = "";
                //        RequestDetail.StckType = itemstatus.FirstOrDefault(c => c.itemStatus_Id == i.ItemStatus_Id).stck_Type;
                //        RequestDetail.Orderid = !string.IsNullOrEmpty(PGII?.DocumentRef_No3) ? PGII?.DocumentRef_No3.Trim() : "";
                //        RequestDetail.OrderItno = !string.IsNullOrEmpty(PGII?.DocumentRef_No4) ? PGII?.DocumentRef_No4.Trim() : "";
                //        RequestDetail.AssetNo = !string.IsNullOrEmpty(PGI?.DocumentRef_No1) ? PGI?.DocumentRef_No1.Trim() : "";
                //        RequestDetail.SubNumber = !string.IsNullOrEmpty(PGI?.DocumentRef_No2) ? PGI?.DocumentRef_No2.Trim() : "";
                //        RequestDetail.WbsElem = !string.IsNullOrEmpty(PGI?.DocumentRef_No3) ? PGI?.DocumentRef_No3.Trim() : "";
                //        RequestDetail.GlAccount = "";
                //        RequestDetail.ReservNo = PGI?.PlanGoodsIssue_No;
                //        RequestDetail.ResItem = PGII?.LineNum;
                //        RequestDetail.MoveMat = "";
                //        RequestDetail.MovePlant = "3000";
                //        RequestDetail.MoveStloc = "3010";
                //        RequestDetail.MoveBatch = "";
                //        Request.Detail.Add(RequestDetail);
                //    }
                //}
                //else
                //{
                //    foreach (var i in GII)
                //    {
                //        State = "Select PGII";
                //        var PGII = db.IM_PlanGoodsIssueItem.FirstOrDefault(c => c.PlanGoodsIssue_Index == i.Ref_Document_Index && c.PlanGoodsIssueItem_Index == i.Ref_DocumentItem_Index);

                //        var RequestDetail = new GIRequestDetail();
                //        RequestDetail.Material = i.Product_Id;
                //        RequestDetail.Plant = "3000";
                //        RequestDetail.StgeLoc = "3010";
                //        RequestDetail.Batch = i.Product_Lot;
                //        RequestDetail.MoveType = PGI.MovementType_Id;
                //        RequestDetail.EntryQnt = Math.Round(i.Qty.sParse<decimal>(), 3);
                //        RequestDetail.EntryUom = i.ProductConversion_Name;
                //        RequestDetail.ItemText = !string.IsNullOrEmpty(PGII.DocumentItem_Remark) ? PGII.DocumentItem_Remark.Trim() : "";
                //        RequestDetail.GrRcpt = !string.IsNullOrEmpty(PGI.DocumentRef_No4) ? PGI.DocumentRef_No4.Trim() : "";
                //        RequestDetail.Costcenter = PGI.Costcenter_Id;
                //        RequestDetail.StckType = itemstatus.FirstOrDefault(c => c.itemStatus_Id == i.ItemStatus_Id).stck_Type;
                //        RequestDetail.Orderid = !string.IsNullOrEmpty(PGII.DocumentRef_No3) ? PGII.DocumentRef_No3.Trim() : "";
                //        RequestDetail.OrderItno = !string.IsNullOrEmpty(PGII.DocumentRef_No4) ? PGII.DocumentRef_No4.Trim() : "";
                //        RequestDetail.AssetNo = !string.IsNullOrEmpty(PGI.DocumentRef_No1) ? PGI.DocumentRef_No1.Trim() : "";
                //        RequestDetail.SubNumber = !string.IsNullOrEmpty(PGI.DocumentRef_No2) ? PGI.DocumentRef_No2.Trim() : "";
                //        RequestDetail.WbsElem = !string.IsNullOrEmpty(PGI.DocumentRef_No3) ? PGI.DocumentRef_No3.Trim() : "";
                //        RequestDetail.GlAccount = "";
                //        RequestDetail.ReservNo = "";
                //        RequestDetail.ResItem = "";
                //        RequestDetail.MoveMat = "";
                //        RequestDetail.MovePlant = "";
                //        RequestDetail.MoveStloc = "";
                //        RequestDetail.MoveBatch = "";
                //        Request.Detail.Add(RequestDetail);
                //    }
                //}

                //State = "Sent To Sap";
                ////var resultSentToSap = utils.SendDataApi<GIResponseViewModel>(new AppSettingConfig().GetUrl("SentToSap"), Request.sJson());
                //var resultSentToSap = new GIResponseViewModel { status = "SUCCESS", message = new GIMessage { eMaterailDocField = GI.GoodsIssue_No.Substring(2, 8), eFiDocumentField = GI.GoodsIssue_No.Substring(2, 8) } };

                //if (resultSentToSap.status == "SUCCESS")
                //{
                //    State = "response SUCCESS";
                //    GI.DocumentRef_No5 = resultSentToSap.message.eMaterailDocField;
                //    GI.DocumentRef_No3 = resultSentToSap.message.eFiDocumentField;
                //    GI.Update_By = model.create_By;
                //    GI.Update_Date = DateTime.Now;
                //}
                //else if (resultSentToSap.status == "ERROR")
                //    return false;
                //else
                //    return false;

                //#endregion

                foreach (var GIL in ListGIL)
                {

                    #region Update Status GIL = 1
                    //Update Status GIL = 1
                    var transaction = db.Database.BeginTransaction();
                    try
                    {
                        GIL.Document_Status = 1;
                        db.SaveChanges();
                        transaction.Commit();
                    }

                    catch (Exception exy)
                    {
                        msglog = State + " ex Rollback " + exy.Message.ToString();
                        olog.logging("ConfirmCutSlots", msglog);
                        transaction.Rollback();
                        throw exy;
                    }
                    #endregion

                    //var objectLocation = new { locationType_Index = new Guid("2E9338D3-0931-4E36-B240-782BF9508641") };
                    var location = utils.SendDataApi<List<locationViewModel>>(new AppSettingConfig().GetUrl("GetLocation"), new { }.sJson());


                    var taskitem = db.IM_TaskItem.Where(c => c.Ref_Document_Index == GIL.GoodsIssue_Index && c.Ref_DocumentItem_Index == GIL.GoodsIssueItemLocation_Index && c.Picking_Status == 2).ToList();
                    var result = false;
                    foreach (var ti in taskitem)
                    {
                        var l = location.FirstOrDefault(c => c.location_Name == ti.UDF_5);

                        var datacutslots = new
                        {
                            goodsIssueItemLocation_Index = GIL.GoodsIssueItemLocation_Index,
                            goodsIssue_Index = GIL.GoodsIssue_Index,
                            lineNum = ti.LineNum,
                            tagItem_Index = ti.TagItem_Index,
                            tag_Index = ti.Tag_Index,
                            tag_No = ti.UDF_5,
                            product_Index = ti.Product_Index,
                            product_Id = ti.Product_Id,
                            product_Name = ti.Product_Name,
                            product_SecondName = ti.Product_SecondName,
                            product_ThirdName = ti.Product_ThirdName,
                            product_Lot = ti.Product_Lot,
                            itemStatus_Index = ti.ItemStatus_Index,
                            itemStatus_Id = ti.ItemStatus_Id,
                            itemStatus_Name = ti.ItemStatus_Name,
                            location_Index = l.location_Index,
                            location_Id = l.location_Id,
                            location_Name = l.location_Name,
                            qtyPlan = GIL.QtyPlan,
                            qty = ti.Qty,
                            ratio = ti.Ratio,
                            totalQty = ti.TotalQty,
                            productConversion_Index = ti.ProductConversion_Index,
                            productConversion_Id = ti.ProductConversion_Id,
                            productConversion_Name = ti.ProductConversion_Name,
                            mfg_Date = ti.MFG_Date,
                            exp_Date = ti.EXP_Date,
                            unitWeight = ti.UnitWeight,
                            weight = ti.Weight,
                            unitWidth = ti.UnitWidth,
                            unitLength = ti.UnitLength,
                            unitHeight = ti.UnitHeight,
                            unitVolume = ti.UnitVolume,
                            volume = ti.Volume,
                            unitPrice = ti.UnitPrice,
                            price = ti.Price,
                            documentRef_No1 = ti.DocumentRef_No1,
                            documentRef_No2 = ti.DocumentRef_No2,
                            documentRef_No3 = ti.DocumentRef_No3,
                            documentRef_No4 = ti.DocumentRef_No4,
                            documentRef_No5 = ti.DocumentRef_No5,
                            document_Status = ti.Document_Status,
                            udf_1 = ti.UDF_1,
                            udf_2 = ti.UDF_2,
                            udf_3 = ti.UDF_3,
                            udf_4 = ti.UDF_4,
                            udf_5 = ti.UDF_5,
                            ref_Process_Index = ti.Ref_Process_Index,
                            //ref_Document_No = ti.Ref_Document_No,
                            //ref_Document_LineNum = ti.Ref_Document_LineNum,
                            //ref_Document_Index = ti.Ref_Document_Index,
                            //ref_DocumentItem_Index = ti.Ref_DocumentItem_Index,
                            ref_Document_No = GIL.GoodsIssue_No,
                            ref_Document_LineNum = ti.LineNum,
                            ref_Document_Index = GIL.GoodsIssue_Index,
                            ref_DocumentItem_Index = GIL.GoodsIssueItemLocation_Index,
                            goodsReceiveItem_Index = GIL.GoodsReceiveItem_Index,
                            picking_Status = ti.Picking_Status,
                            picking_By = ti.Picking_By,
                            picking_Date = ti.Picking_Date,
                            picking_Ref1 = GIL.Picking_Ref1,
                            picking_Ref2 = GIL.Picking_Ref2,
                            picking_Qty = ti.Picking_Qty,
                            picking_Ratio = ti.Picking_Ratio,
                            picking_TotalQty = ti.Picking_TotalQty,
                            picking_ProductConversion_Index = ti.Pick_ProductConversion_Index,
                            mashall_Status = GIL.Mashall_Status,
                            mashall_Qty = GIL.Mashall_Qty,
                            cancel_Status = GIL.Cancel_Status,
                            goodsIssue_No = GIL.GoodsIssue_No,
                            binBalance_Index = ti.BinBalance_Index_New,
                            process_Index = "69CAD84E-1F80-48FD-8749-1A6009F3B89C",
                            create_By = model.create_By,
                            owner_Index = GI.Owner_Index,
                            owner_Id = GI.Owner_Id,
                            owner_Name = GI.Owner_Name,
                            goodsIssue_Date = GI.GoodsIssue_Date,
                            documentType_Index = GI.DocumentType_Index,
                            documentType_Id = GI.DocumentType_Id,
                            documentType_Name = GI.DocumentType_Name

                        };

                        result = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("CutSlotsBinBalance"), datacutslots.sJson());
                    }
                    if (result)
                    {
                        #region Update Status GIL = 2
                        //Update Status GIL = 1
                        var transaction2 = db.Database.BeginTransaction();
                        try
                        {
                            GIL.Document_Status = 2;
                            db.SaveChanges();
                            transaction2.Commit();
                        }

                        catch (Exception exy)
                        {
                            msglog = State + " ex Rollback 2 " + exy.Message.ToString();
                            olog.logging("ConfirmCutSlots", msglog);
                            transaction2.Rollback();
                            throw exy;
                        }
                        #endregion
                    }
                    else
                    {
                        return false;
                    }
                }

                var ListGIL2 = db.IM_GoodsIssueItemLocation.Where(c => c.GoodsIssue_Index == new Guid(model.goodsIssue_Index) && c.Document_Status != 2).Count();

                if (ListGIL2 == 0)
                {
                    #region Update Status GI = 4
                    //Update Status GIL = 1
                    var transaction3 = db.Database.BeginTransaction();
                    try
                    {
                        GI.Document_Status = 4;
                        db.SaveChanges();
                        transaction3.Commit();
                    }

                    catch (Exception exy)
                    {
                        msglog = State + " ex Rollback 2 " + exy.Message.ToString();
                        olog.logging("ConfirmCutSlots", msglog);
                        transaction3.Rollback();
                        throw exy;
                    }
                    #endregion
                }
                else
                {
                    return false;
                }

                return true;
            }
            catch (Exception ex)
            {
                msglog = State + " ex Rollback " + ex.Message.ToString();
                olog.logging("ConfirmCutSlots", msglog);
                throw ex;
            }
        }

        #endregion


        #region PrintGoodsReceivePutaway
        public string PrintGi(GoodsIssueViewModel model, string rootPath = "")
        {
            var culture = new System.Globalization.CultureInfo("en-US");
            String State = "Start";
            String msglog = "";
            var olog = new logtxt();

            Guid? GRItemIndex = new Guid();

            try
            {

                var result = new List<ReportGIViewModel>();

                var log = db.im_Signatory_log.Where(c => c.Ref_Document_Index == new Guid(model.goodsIssue_Index)).ToList();

                if (log.Count <= 0)
                {
                    #region InsertRecipent
                    if (model.isRecipent == true)
                    {
                        im_Signatory_log recipentLogNew = new im_Signatory_log();

                        recipentLogNew.Signatory_Index = Guid.NewGuid();
                        recipentLogNew.SignatoryType_Name = "recipent";
                        recipentLogNew.User_Index = new Guid(model.recipent_user_Index);
                        recipentLogNew.User_Id = model.recipent_user_Id;
                        recipentLogNew.User_Name = model.recipent_user_Name;
                        recipentLogNew.First_Name = model.recipent_first_Name;
                        recipentLogNew.Last_Name = model.recipent_last_Name;
                        recipentLogNew.DocumentType_Index = new Guid(model.documentType_Index);
                        recipentLogNew.DocumentType_Id = model.documentType_Id;
                        recipentLogNew.DocumentType_Name = model.documentType_Name;
                        recipentLogNew.Ref_Document_Index = new Guid(model.goodsIssue_Index);
                        recipentLogNew.Ref_Document_No = model.goodsIssue_No;
                        recipentLogNew.Position_Code = model.recipent_position_Code;
                        recipentLogNew.IsActive = 1;
                        recipentLogNew.IsDelete = 0;
                        recipentLogNew.IsSystem = 0;
                        recipentLogNew.Status_Id = 0;
                        recipentLogNew.Create_By = model.user;
                        recipentLogNew.Create_Date = DateTime.Now;
                        db.im_Signatory_log.Add(recipentLogNew);
                    }

                    #endregion

                    #region InsertRecorder
                    if (model.isRecorder == true)
                    {
                        im_Signatory_log recorderLogNew = new im_Signatory_log();

                        recorderLogNew.Signatory_Index = Guid.NewGuid();
                        recorderLogNew.SignatoryType_Name = "recorder";
                        recorderLogNew.User_Index = new Guid(model.recorder_user_Index);
                        recorderLogNew.User_Id = model.recorder_user_Id;
                        recorderLogNew.User_Name = model.recorder_user_Name;
                        recorderLogNew.First_Name = model.recorder_first_Name;
                        recorderLogNew.Last_Name = model.recorder_last_Name;
                        recorderLogNew.DocumentType_Index = new Guid(model.documentType_Index);
                        recorderLogNew.DocumentType_Id = model.documentType_Id;
                        recorderLogNew.DocumentType_Name = model.documentType_Name;
                        recorderLogNew.Ref_Document_Index = new Guid(model.goodsIssue_Index);
                        recorderLogNew.Ref_Document_No = model.goodsIssue_No;
                        recorderLogNew.Position_Code = model.recorder_position_Code;
                        recorderLogNew.Position_Name = model.recorder_pos_Name;
                        recorderLogNew.IsActive = 1;
                        recorderLogNew.IsDelete = 0;
                        recorderLogNew.IsSystem = 0;
                        recorderLogNew.Status_Id = 0;
                        recorderLogNew.Create_By = model.user;
                        recorderLogNew.Create_Date = DateTime.Now;
                        db.im_Signatory_log.Add(recorderLogNew);

                    }

                    #endregion

                    #region Insertdemand
                    if (model.isDemand_Payment == true)
                    {
                        im_Signatory_log demandLogNew = new im_Signatory_log();

                        demandLogNew.Signatory_Index = Guid.NewGuid();
                        demandLogNew.SignatoryType_Name = "demand_Payment";
                        demandLogNew.User_Index = new Guid(model.demand_user_Index);
                        demandLogNew.User_Id = model.demand_user_Id;
                        demandLogNew.User_Name = model.demand_user_Name;
                        demandLogNew.First_Name = model.demand_first_Name;
                        demandLogNew.Last_Name = model.demand_last_Name;
                        demandLogNew.DocumentType_Index = new Guid(model.documentType_Index);
                        demandLogNew.DocumentType_Id = model.documentType_Id;
                        demandLogNew.DocumentType_Name = model.documentType_Name;
                        demandLogNew.DocumentType_Name = model.documentType_Name;
                        demandLogNew.Ref_Document_Index = new Guid(model.goodsIssue_Index);
                        demandLogNew.Position_Code = model.demand_position_Code;
                        demandLogNew.Position_Name = model.demand_Payment_pos_Name;
                        demandLogNew.IsActive = 1;
                        demandLogNew.IsDelete = 0;
                        demandLogNew.IsSystem = 0;
                        demandLogNew.Status_Id = 0;
                        demandLogNew.Create_By = model.user;
                        demandLogNew.Create_Date = DateTime.Now;
                        db.im_Signatory_log.Add(demandLogNew);

                    }

                    #endregion

                    #region InsertPayment
                    if (model.isPayment == true)
                    {
                        im_Signatory_log paymentLogNew = new im_Signatory_log();

                        paymentLogNew.Signatory_Index = Guid.NewGuid();
                        paymentLogNew.SignatoryType_Name = "payment";
                        paymentLogNew.User_Index = new Guid(model.payment_user_Index);
                        paymentLogNew.User_Id = model.payment_user_Id;
                        paymentLogNew.User_Name = model.payment_user_Name;
                        paymentLogNew.First_Name = model.payment_first_Name;
                        paymentLogNew.Last_Name = model.payment_last_Name;
                        paymentLogNew.DocumentType_Index = new Guid(model.documentType_Index);
                        paymentLogNew.DocumentType_Id = model.documentType_Id;
                        paymentLogNew.DocumentType_Name = model.documentType_Name;
                        paymentLogNew.Ref_Document_Index = new Guid(model.goodsIssue_Index);
                        paymentLogNew.Ref_Document_No = model.goodsIssue_No;
                        paymentLogNew.Position_Code = model.payment_position_Code;
                        paymentLogNew.Position_Name = model.payment_pos_Name;
                        paymentLogNew.IsActive = 1;
                        paymentLogNew.IsDelete = 0;
                        paymentLogNew.IsSystem = 0;
                        paymentLogNew.Status_Id = 0;
                        paymentLogNew.Create_By = model.user;
                        paymentLogNew.Create_Date = DateTime.Now;
                        db.im_Signatory_log.Add(paymentLogNew);

                    }

                    #endregion


                }

                else
                {
                    foreach (var item in log)
                    {
                        var logOld = db.im_Signatory_log.Find(item.Signatory_Index);



                        logOld.Update_Date = DateTime.Now;
                        logOld.Update_By = model.user;

                        #region recipent

                        var findrecipent = db.im_Signatory_log.Where(c => c.Ref_Document_Index == item.Ref_Document_Index && c.SignatoryType_Name == "recipent").FirstOrDefault();

                        if (findrecipent == null)
                        {
                            #region Insertrecipent
                            if (model.isRecipent == true)
                            {
                                im_Signatory_log recipentLogNew = new im_Signatory_log();

                                recipentLogNew.Signatory_Index = Guid.NewGuid();
                                recipentLogNew.SignatoryType_Name = "recipent";
                                recipentLogNew.User_Index = new Guid(model.recipent_user_Index);
                                recipentLogNew.User_Id = model.recipent_user_Id;
                                recipentLogNew.User_Name = model.recipent_user_Name;
                                recipentLogNew.First_Name = model.recipent_first_Name;
                                recipentLogNew.Last_Name = model.recipent_last_Name;
                                recipentLogNew.DocumentType_Index = new Guid(model.documentType_Index);
                                recipentLogNew.DocumentType_Id = model.documentType_Id;
                                recipentLogNew.DocumentType_Name = model.documentType_Name;
                                recipentLogNew.Ref_Document_Index = new Guid(model.goodsIssue_Index);
                                recipentLogNew.Ref_Document_No = model.goodsIssue_No;
                                recipentLogNew.Position_Code = model.recipent_position_Code;
                                recipentLogNew.IsActive = 1;
                                recipentLogNew.IsDelete = 0;
                                recipentLogNew.IsSystem = 0;
                                recipentLogNew.Status_Id = 0;
                                recipentLogNew.Create_By = model.user;
                                recipentLogNew.Create_Date = DateTime.Now;
                                db.im_Signatory_log.Add(recipentLogNew);
                            }

                            #endregion

                        }

                        else
                        {
                            if (model.isRecipent == true && logOld.SignatoryType_Name == "recipent")
                            {
                                logOld.User_Index = new Guid(model.recipent_user_Index);
                                logOld.User_Id = model.recipent_user_Id;
                                logOld.User_Name = model.recipent_user_Name;
                                logOld.First_Name = model.recipent_first_Name;
                                logOld.Last_Name = model.recipent_last_Name;
                                logOld.Position_Code = model.recipent_position_Code;
                                logOld.IsActive = 1;
                                logOld.IsDelete = 0;
                            }
                            if (model.isRecipent == false && logOld.SignatoryType_Name == "recipent")
                            {
                                logOld.IsActive = 0;
                                logOld.IsDelete = 1;
                            }
                        }



                        #endregion

                        #region recorder
                        var findrecorder = db.im_Signatory_log.Where(c => c.Ref_Document_Index == item.Ref_Document_Index && c.SignatoryType_Name == "recorder").FirstOrDefault();

                        if (findrecorder == null)
                        {
                            #region InsertRecorder
                            if (model.isRecorder == true)
                            {
                                im_Signatory_log recorderLogNew = new im_Signatory_log();

                                recorderLogNew.Signatory_Index = Guid.NewGuid();
                                recorderLogNew.SignatoryType_Name = "recorder";
                                recorderLogNew.User_Index = new Guid(model.recorder_user_Index);
                                recorderLogNew.User_Id = model.recorder_user_Id;
                                recorderLogNew.User_Name = model.recorder_user_Name;
                                recorderLogNew.First_Name = model.recorder_first_Name;
                                recorderLogNew.Last_Name = model.recorder_last_Name;
                                recorderLogNew.DocumentType_Index = new Guid(model.documentType_Index);
                                recorderLogNew.DocumentType_Id = model.documentType_Id;
                                recorderLogNew.DocumentType_Name = model.documentType_Name;
                                recorderLogNew.Ref_Document_Index = new Guid(model.goodsIssue_Index);
                                recorderLogNew.Ref_Document_No = model.goodsIssue_No;
                                recorderLogNew.Position_Code = model.recorder_position_Code;
                                recorderLogNew.Position_Name = model.recorder_pos_Name;
                                recorderLogNew.IsActive = 1;
                                recorderLogNew.IsDelete = 0;
                                recorderLogNew.IsSystem = 0;
                                recorderLogNew.Status_Id = 0;
                                recorderLogNew.Create_By = model.user;
                                recorderLogNew.Create_Date = DateTime.Now;
                                db.im_Signatory_log.Add(recorderLogNew);

                            }

                            #endregion

                        }

                        else
                        {
                            if (model.isRecorder == true && logOld.SignatoryType_Name == "recorder")
                            {
                                logOld.User_Index = new Guid(model.recorder_user_Index);
                                logOld.User_Id = model.recorder_user_Id;
                                logOld.User_Name = model.recorder_user_Name;
                                logOld.First_Name = model.recorder_first_Name;
                                logOld.Last_Name = model.recorder_last_Name;
                                logOld.Position_Code = model.recorder_position_Code;
                                logOld.Position_Name = model.recorder_pos_Name;
                                logOld.IsActive = 1;
                                logOld.IsDelete = 0;
                            }
                            if (model.isRecorder == false && logOld.SignatoryType_Name == "recorder")
                            {
                                logOld.IsActive = 0;
                                logOld.IsDelete = 1;
                            }
                        }



                        #endregion

                        #region demand_Payment

                        var finddemand_Payment = db.im_Signatory_log.Where(c => c.Ref_Document_Index == item.Ref_Document_Index && c.SignatoryType_Name == "demand_Payment").FirstOrDefault();

                        if (finddemand_Payment == null)
                        {
                            #region Insertdemand_Payment
                            if (model.isDemand_Payment == true)
                            {
                                im_Signatory_log demand_PaymentLogNew = new im_Signatory_log();

                                demand_PaymentLogNew.Signatory_Index = Guid.NewGuid();
                                demand_PaymentLogNew.SignatoryType_Name = "demand_Payment";
                                demand_PaymentLogNew.User_Index = new Guid(model.demand_user_Index);
                                demand_PaymentLogNew.User_Id = model.demand_user_Id;
                                demand_PaymentLogNew.User_Name = model.demand_user_Name;
                                demand_PaymentLogNew.First_Name = model.demand_first_Name;
                                demand_PaymentLogNew.Last_Name = model.demand_last_Name;
                                demand_PaymentLogNew.DocumentType_Index = new Guid(model.documentType_Index);
                                demand_PaymentLogNew.DocumentType_Id = model.documentType_Id;
                                demand_PaymentLogNew.DocumentType_Name = model.documentType_Name;
                                demand_PaymentLogNew.Ref_Document_Index = new Guid(model.goodsIssue_Index);
                                demand_PaymentLogNew.Ref_Document_No = model.goodsIssue_No;
                                demand_PaymentLogNew.Position_Code = model.demand_position_Code;
                                demand_PaymentLogNew.Position_Name = model.demand_Payment_pos_Name;
                                demand_PaymentLogNew.IsActive = 1;
                                demand_PaymentLogNew.IsDelete = 0;
                                demand_PaymentLogNew.IsSystem = 0;
                                demand_PaymentLogNew.Status_Id = 0;
                                demand_PaymentLogNew.Create_By = model.user;
                                demand_PaymentLogNew.Create_Date = DateTime.Now;
                                db.im_Signatory_log.Add(demand_PaymentLogNew);

                            }

                            #endregion

                        }

                        else
                        {
                            if (model.isDemand_Payment == true && logOld.SignatoryType_Name == "demand_Payment")
                            {
                                logOld.User_Index = new Guid(model.demand_user_Index);
                                logOld.User_Id = model.demand_user_Id;
                                logOld.User_Name = model.demand_user_Name;
                                logOld.First_Name = model.demand_first_Name;
                                logOld.Last_Name = model.demand_last_Name;
                                logOld.Position_Code = model.demand_position_Code;
                                logOld.Position_Name = model.demand_Payment_pos_Name;
                                logOld.IsActive = 1;
                                logOld.IsDelete = 0;
                            }
                            if (model.isDemand_Payment == false && logOld.SignatoryType_Name == "demand_Payment")
                            {
                                logOld.IsActive = 0;
                                logOld.IsDelete = 1;
                            }
                        }



                        #endregion

                        #region payment

                        var findpayment = db.im_Signatory_log.Where(c => c.Ref_Document_Index == item.Ref_Document_Index && c.SignatoryType_Name == "payment").FirstOrDefault();

                        if (findpayment == null)
                        {
                            #region Insertpayment
                            if (model.isPayment == true)
                            {
                                im_Signatory_log paymentLogNew = new im_Signatory_log();

                                paymentLogNew.Signatory_Index = Guid.NewGuid();
                                paymentLogNew.SignatoryType_Name = "payment";
                                paymentLogNew.User_Index = new Guid(model.payment_user_Index);
                                paymentLogNew.User_Id = model.payment_user_Id;
                                paymentLogNew.User_Name = model.payment_user_Name;
                                paymentLogNew.First_Name = model.payment_first_Name;
                                paymentLogNew.Last_Name = model.payment_last_Name;
                                paymentLogNew.DocumentType_Index = new Guid(model.documentType_Index);
                                paymentLogNew.DocumentType_Id = model.documentType_Id;
                                paymentLogNew.DocumentType_Name = model.documentType_Name;
                                paymentLogNew.Ref_Document_Index = new Guid(model.goodsIssue_Index);
                                paymentLogNew.Ref_Document_No = model.goodsIssue_No;
                                paymentLogNew.Position_Code = model.payment_position_Code;
                                paymentLogNew.Position_Name = model.payment_pos_Name;
                                paymentLogNew.IsActive = 1;
                                paymentLogNew.IsDelete = 0;
                                paymentLogNew.IsSystem = 0;
                                paymentLogNew.Status_Id = 0;
                                paymentLogNew.Create_By = model.user;
                                paymentLogNew.Create_Date = DateTime.Now;
                                db.im_Signatory_log.Add(paymentLogNew);

                            }

                            #endregion
                        }
                        else
                        {
                            if (model.isPayment == true && logOld.SignatoryType_Name == "payment")
                            {
                                logOld.User_Index = new Guid(model.payment_user_Index);
                                logOld.User_Id = model.payment_user_Id;
                                logOld.User_Name = model.payment_user_Name;
                                logOld.First_Name = model.payment_first_Name;
                                logOld.Last_Name = model.payment_last_Name;
                                logOld.Position_Code = model.payment_position_Code;
                                logOld.Position_Name = model.payment_pos_Name;
                                logOld.IsActive = 1;
                                logOld.IsDelete = 0;
                            }
                            if (model.isPayment == false && logOld.SignatoryType_Name == "payment")
                            {
                                logOld.IsActive = 0;
                                logOld.IsDelete = 1;
                            }
                        }


                        #endregion
                    }
                }

                var GI = db.IM_GoodsIssue.Find(Guid.Parse(model.goodsIssue_Index));

                if (GI == null)
                {
                    return "";
                }

                var GIL = db.IM_GoodsIssueItemLocation.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index)).ToList();

                if (GIL.Count() == 0)
                {
                    return "";
                }

                var GroupGIL = GIL.GroupBy(g => g.Ref_Document_Index).ToList();

                var pgi = db.IM_PlanGoodsIssue.Where(c => GroupGIL.Select(s => s.Key).Contains(c.PlanGoodsIssue_Index)).ToList();

                var PlanNo = pgi.Where(c => !(c.PlanGoodsIssue_No == null || c.PlanGoodsIssue_No == string.Empty)).GroupBy(g => g.PlanGoodsIssue_No).ToList();

                var ShipToAddress = pgi.Where(c => !(c.DocumentRef_No4 == null || c.DocumentRef_No4 == string.Empty)).GroupBy(g => g.DocumentRef_No4).ToList();

                var Movementtype = pgi.Where(c => !(c.MovementType_Id == null || c.MovementType_Id == string.Empty)).GroupBy(g => g.MovementType_Id).ToList();

                var WarehouseNameTo = pgi.Where(c => !(c.SoldTo_Id == null || c.SoldTo_Id == string.Empty)).GroupBy(g => g.SoldTo_Id).ToList();

                var SlocNameTo = pgi.Where(c => !(c.Sloc_Id == null || c.Sloc_Id == string.Empty)).GroupBy(g => g.Sloc_Id).ToList();

                //var Sloc_Name_To = pgi.GroupBy(g => g.sloc).ToList();


                foreach (var gil in GIL)
                {
                    var r = new ReportGIViewModel();

                    r.GoodsIssue_No = GI.GoodsIssue_No;
                    r.PlanGoodsIssue_No = string.Join(",", PlanNo.Select(s => s.Key));
                    r.ShipTo_AddressName = string.Join(",", ShipToAddress.Select(s => s.Key));
                    r.GoodsIssue_Date = GI.GoodsIssue_Date.ToString("dd/MM/yyyy");
                    r.Document_Date = GI.Document_Date?.sParse<DateTime>().ToString("dd/MM/yyyy"); ;
                    r.Warehouse_Name = "3000";
                    r.Warehouse_Name_To = string.Join(",", WarehouseNameTo.Select(s => s.Key));
                    r.Sloc_Name = "3100";
                    r.Sloc_Name_To = string.Join(",", SlocNameTo.Select(s => s.Key));
                    r.DocumentRef_No5 = string.Join(",", Movementtype.Select(s => s.Key));
                    r.DocumentRef_No1 = GI.Document_Remark;

                    r.Product_Id = gil.Product_Id;
                    r.Product_Name = gil.Product_Name;
                    r.Qty = gil.Qty;
                    r.ProductConversion_Name = gil.ProductConversion_Name;

                    r.isDemand_Payment = model.isDemand_Payment;
                    r.demand_Payment_Name = model.demand_Payment_Name;
                    r.demand_Payment_pos_Name = model.demand_Payment_pos_Name;

                    r.isPayment = model.isPayment;
                    r.payment_Name = model.payment_Name;
                    r.payment_pos_Name = model.payment_pos_Name;

                    r.isRecipent = model.isRecipent;
                    r.recipent_Name = model.recipent_Name;
                    r.recipent_pos_Name = model.recipent_pos_Name;

                    r.isRecorder = model.isRecorder;
                    r.recorder_Name = model.recorder_Name;
                    r.recorder_pos_Name = model.recorder_pos_Name;

                    result.Add(r);
                }



                rootPath = rootPath.Replace("\\GIAPI", "");
                //var reportPath = rootPath + "\\GIBusiness\\Reports\\ReportGI\\ReportGI.rdlc";
                var reportPath = rootPath + "\\Reports\\ReportGI\\ReportGI.rdlc";
                LocalReport report = new LocalReport(reportPath);
                report.AddDataSource("DataSet1", result);

                System.Text.Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);

                string fileName = "";
                string fullPath = "";
                fileName = "tmpReport" + DateTime.Now.ToString("yyyyMMddHHmmss");

                var renderedBytes = report.Execute(RenderType.Pdf);

                Utils objReport = new Utils();
                fullPath = objReport.saveReport(renderedBytes.MainStream, fileName + ".pdf", rootPath);
                var saveLocation = objReport.PhysicalPath(fileName + ".pdf", rootPath);

                State = "transactionSave";

                var transactionx = db.Database.BeginTransaction(IsolationLevel.Serializable);
                try
                {
                    db.SaveChanges();
                    transactionx.Commit();
                }

                catch (Exception exy)
                {
                    msglog = State + " ex Rollback " + exy.Message.ToString();
                    olog.logging("SaveLogPlanGI", msglog);
                    transactionx.Rollback();

                    throw exy;

                }
                return saveLocation;


            }
            catch (Exception ex)
            {

                throw ex;
            }
        }
        #endregion

        public string SentToSap(ListGoodsIssueViewModel data)
        {
            String State = "Start";
            String msglog = "";
            var olog = new logtxt();
            try
            {
                var resultMsg = "";
                var itemstatus = utils.SendDataApi<List<ItemStatusDocViewModel>>(new AppSettingConfig().GetUrl("dropdownItemStatus"), new { }.sJson());

                if (data.items.Count() == 0)
                {
                    return "Please Select Order,";
                }

                foreach (var item in data.items)
                {
                    State = "Select GI";
                    var GI = db.IM_GoodsIssue.FirstOrDefault(c => c.GoodsIssue_Index == Guid.Parse(item.goodsIssue_Index) && c.Document_Status == 3);

                    if (GI == null)
                    {
                        resultMsg += item.goodsIssue_No + " Order Not Complete,";
                        continue;
                    }
                    if (!string.IsNullOrEmpty(GI.DocumentRef_No5))
                    {
                        resultMsg += GI.GoodsIssue_No + " Data sent,";
                        continue;
                    }
                    State = "Select GIIL";
                    var GII = db.IM_GoodsIssueItemLocation.Where(c => c.GoodsIssue_Index == GI.GoodsIssue_Index).ToList();
                    State = "Select PGI";
                    var PGI = db.IM_PlanGoodsIssue.FirstOrDefault(c => c.PlanGoodsIssue_Index == GII.FirstOrDefault().Ref_Document_Index);


                    var Request = new GIRequestViewModel();
                    Request.PstngDate = DateTime.Now.toString().Substring(0, 8);
                    Request.DocDate = string.IsNullOrEmpty(PGI.PlanGoodsIssue_Date.toString()) ? "" : PGI.PlanGoodsIssue_Date.toString().Substring(0, 8);
                    Request.RefDocNo = GI.DocumentType_Id;
                    Request.GiNo = GI.GoodsIssue_No;
                    Request.HeaderTxt = !string.IsNullOrEmpty(GI.Document_Remark) ? GI.Document_Remark.Trim() : "";
                    Request.GmCode = "03";

                    if (string.IsNullOrEmpty(PGI.Costcenter_Id))
                    {
                        foreach (var i in GII)
                        {
                            State = "Select PGII";
                            var PGII = db.IM_PlanGoodsIssueItem.FirstOrDefault(c => c.PlanGoodsIssue_Index == i.Ref_Document_Index && c.PlanGoodsIssueItem_Index == i.Ref_DocumentItem_Index);

                            var RequestDetail = new GIRequestDetail();
                            RequestDetail.Material = i.Product_Id;
                            RequestDetail.Plant = PGI.SoldTo_Id;
                            RequestDetail.StgeLoc = PGI.Sloc_Id;
                            RequestDetail.Batch = i.Product_Lot;
                            RequestDetail.MoveType = PGI.MovementType_Id;
                            RequestDetail.EntryQnt = Math.Round(i.Qty.sParse<decimal>(), 3);
                            RequestDetail.EntryUom = i.ProductConversion_Name;
                            RequestDetail.ItemText = !string.IsNullOrEmpty(PGII.DocumentItem_Remark) ? PGII.DocumentItem_Remark.Trim() : "";
                            RequestDetail.GrRcpt = !string.IsNullOrEmpty(PGI.DocumentRef_No4) ? PGI.DocumentRef_No4.Trim() : "";
                            RequestDetail.Costcenter = PGI.Costcenter_Id;
                            RequestDetail.StckType = itemstatus.FirstOrDefault(c => c.itemStatus_Id == i.ItemStatus_Id).stck_Type;
                            RequestDetail.Orderid = !string.IsNullOrEmpty(PGII.DocumentRef_No3) ? PGII.DocumentRef_No3.Trim() : "";
                            RequestDetail.OrderItno = !string.IsNullOrEmpty(PGII.DocumentRef_No4) ? PGII.DocumentRef_No4.Trim() : "";
                            RequestDetail.AssetNo = !string.IsNullOrEmpty(PGI.DocumentRef_No1) ? PGI.DocumentRef_No1.Trim() : "";
                            RequestDetail.SubNumber = !string.IsNullOrEmpty(PGI.DocumentRef_No2) ? PGI.DocumentRef_No2.Trim() : "";
                            RequestDetail.WbsElem = !string.IsNullOrEmpty(PGI.DocumentRef_No3) ? PGI.DocumentRef_No3.Trim() : "";
                            RequestDetail.GlAccount = "";
                            RequestDetail.ReservNo = PGI.PlanGoodsIssue_No;
                            RequestDetail.ResItem = PGII.LineNum;
                            RequestDetail.MoveMat = "";
                            RequestDetail.MovePlant = "3000";
                            RequestDetail.MoveStloc = "3010";
                            RequestDetail.MoveBatch = "";
                            Request.Detail.Add(RequestDetail);
                        }
                    }
                    else
                    {
                        foreach (var i in GII)
                        {
                            State = "Select PGII";
                            var PGII = db.IM_PlanGoodsIssueItem.FirstOrDefault(c => c.PlanGoodsIssue_Index == i.Ref_Document_Index && c.PlanGoodsIssueItem_Index == i.Ref_DocumentItem_Index);

                            var RequestDetail = new GIRequestDetail();
                            RequestDetail.Material = i.Product_Id;
                            RequestDetail.Plant = "3000";
                            RequestDetail.StgeLoc = "3010";
                            RequestDetail.Batch = i.Product_Lot;
                            RequestDetail.MoveType = PGI.MovementType_Id;
                            RequestDetail.EntryQnt = Math.Round(i.Qty.sParse<decimal>(), 3);
                            RequestDetail.EntryUom = i.ProductConversion_Name;
                            RequestDetail.ItemText = !string.IsNullOrEmpty(PGII.DocumentItem_Remark) ? PGII.DocumentItem_Remark.Trim() : "";
                            RequestDetail.GrRcpt = !string.IsNullOrEmpty(PGI.DocumentRef_No4) ? PGI.DocumentRef_No4.Trim() : "";
                            RequestDetail.Costcenter = PGI.Costcenter_Id;
                            RequestDetail.StckType = itemstatus.FirstOrDefault(c => c.itemStatus_Id == i.ItemStatus_Id).stck_Type;
                            RequestDetail.Orderid = !string.IsNullOrEmpty(PGII.DocumentRef_No3) ? PGII.DocumentRef_No3.Trim() : "";
                            RequestDetail.OrderItno = !string.IsNullOrEmpty(PGII.DocumentRef_No4) ? PGII.DocumentRef_No4.Trim() : "";
                            RequestDetail.AssetNo = !string.IsNullOrEmpty(PGI.DocumentRef_No1) ? PGI.DocumentRef_No1.Trim() : "";
                            RequestDetail.SubNumber = !string.IsNullOrEmpty(PGI.DocumentRef_No2) ? PGI.DocumentRef_No2.Trim() : "";
                            RequestDetail.WbsElem = !string.IsNullOrEmpty(PGI.DocumentRef_No3) ? PGI.DocumentRef_No3.Trim() : "";
                            RequestDetail.GlAccount = "";
                            RequestDetail.ReservNo = "";
                            RequestDetail.ResItem = "";
                            RequestDetail.MoveMat = "";
                            RequestDetail.MovePlant = "";
                            RequestDetail.MoveStloc = "";
                            RequestDetail.MoveBatch = "";
                            Request.Detail.Add(RequestDetail);
                        }
                    }

                    State = "Sent To Sap";
                    var result = utils.SendDataApi<GIResponseViewModel>(new AppSettingConfig().GetUrl("SentToSap"), Request.sJson());

                    if (result.status == "SUCCESS")
                    {
                        State = "response SUCCESS";
                        GI.DocumentRef_No5 = result.message.eMaterailDocField;
                        GI.DocumentRef_No3 = result.message.eFiDocumentField;
                        GI.Update_By = data.userName;
                        GI.Update_Date = DateTime.Now;
                    }
                    else if (result.status == "ERROR")
                    {
                        State = "response ERROR";
                        resultMsg += GI.GoodsIssue_No + " ERROR " + result.message.eMessageField + ",";
                    }
                    else
                    {
                        State = "response";
                        resultMsg += GI.GoodsIssue_No + " ERROR,";
                    }

                }

                var transactionx = db.Database.BeginTransaction();
                try
                {
                    State = "SaveChanges";

                    db.SaveChanges();
                    transactionx.Commit();
                }

                catch (Exception exy)
                {
                    msglog = State + " exy Rollback " + exy.Message.ToString();
                    olog.logging("SentToSapGi", msglog);
                    transactionx.Rollback();

                    throw exy;

                }

                return resultMsg;
            }

            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string SentToSapGetJson(string data)
        {
            String State = "Start";
            String msglog = "";
            var olog = new logtxt();
            try
            {
                var resultMsg = "";
                var itemstatus = utils.SendDataApi<List<ItemStatusDocViewModel>>(new AppSettingConfig().GetUrl("dropdownItemStatus"), new { }.sJson());

                State = "Select GI";
                var GI = db.IM_GoodsIssue.FirstOrDefault(c => c.GoodsIssue_Index == Guid.Parse(data));

                if (GI == null)
                {
                    return " Order Not Complete,";
                }
                if (!string.IsNullOrEmpty(GI.DocumentRef_No5))
                {
                    resultMsg += " Data sent,";
                }
                State = "Select GIIL";
                var GII = db.IM_GoodsIssueItemLocation.Where(c => c.GoodsIssue_Index == GI.GoodsIssue_Index).ToList();
                State = "Select PGI";
                var PGI = db.IM_PlanGoodsIssue.FirstOrDefault(c => c.PlanGoodsIssue_Index == GII.FirstOrDefault().Ref_Document_Index);


                var Request = new GIRequestViewModel();
                Request.PstngDate = DateTime.Now.toString().Substring(0, 8);
                Request.DocDate = string.IsNullOrEmpty(PGI.PlanGoodsIssue_Date.toString()) ? "" : PGI.PlanGoodsIssue_Date.toString().Substring(0, 8);
                Request.RefDocNo = GI.DocumentType_Id;
                Request.GiNo = GI.GoodsIssue_No;
                Request.HeaderTxt = !string.IsNullOrEmpty(GI.Document_Remark) ? GI.Document_Remark.Trim() : "";
                Request.GmCode = "03";

                if (string.IsNullOrEmpty(PGI.Costcenter_Id))
                {
                    foreach (var i in GII)
                    {
                        State = "Select PGII 1";
                        var PGII = db.IM_PlanGoodsIssueItem.FirstOrDefault(c => c.PlanGoodsIssue_Index == i.Ref_Document_Index && c.PlanGoodsIssueItem_Index == i.Ref_DocumentItem_Index);
                        State = "by values 1";
                        var RequestDetail = new GIRequestDetail();
                        RequestDetail.Material = i.Product_Id;
                        RequestDetail.Plant = PGI.SoldTo_Id;
                        RequestDetail.StgeLoc = PGI.Sloc_Id;
                        RequestDetail.Batch = i.Product_Lot;
                        RequestDetail.MoveType = PGI.MovementType_Id;
                        RequestDetail.EntryQnt = Math.Round(i.Qty.sParse<decimal>(), 3);
                        RequestDetail.EntryUom = i.ProductConversion_Name;
                        RequestDetail.ItemText = !string.IsNullOrEmpty(PGII.DocumentItem_Remark) ? PGII.DocumentItem_Remark.Trim() : "";
                        RequestDetail.GrRcpt = !string.IsNullOrEmpty(PGI.DocumentRef_No4) ? PGI.DocumentRef_No4.Trim() : "";
                        RequestDetail.Costcenter = PGI.Costcenter_Id;
                        RequestDetail.StckType = itemstatus?.FirstOrDefault(c => c.itemStatus_Id == i.ItemStatus_Id).stck_Type;
                        RequestDetail.Orderid = !string.IsNullOrEmpty(PGII.DocumentRef_No3) ? PGII.DocumentRef_No3.Trim() : "";
                        RequestDetail.OrderItno = !string.IsNullOrEmpty(PGII.DocumentRef_No4) ? PGII.DocumentRef_No4.Trim() : "";
                        RequestDetail.AssetNo = !string.IsNullOrEmpty(PGI.DocumentRef_No1) ? PGI.DocumentRef_No1.Trim() : "";
                        RequestDetail.SubNumber = !string.IsNullOrEmpty(PGI.DocumentRef_No2) ? PGI.DocumentRef_No2.Trim() : "";
                        RequestDetail.WbsElem = !string.IsNullOrEmpty(PGI.DocumentRef_No3) ? PGI.DocumentRef_No3.Trim() : "";
                        RequestDetail.GlAccount = "";
                        RequestDetail.ReservNo = PGI.PlanGoodsIssue_No;
                        RequestDetail.ResItem = PGII.LineNum;
                        RequestDetail.MoveMat = "";
                        RequestDetail.MovePlant = "3000";
                        RequestDetail.MoveStloc = "3010";
                        RequestDetail.MoveBatch = "";
                        Request.Detail.Add(RequestDetail);
                    }
                }
                else
                {
                    foreach (var i in GII)
                    {
                        State = "Select PGII 2";
                        var PGII = db.IM_PlanGoodsIssueItem.FirstOrDefault(c => c.PlanGoodsIssue_Index == i.Ref_Document_Index && c.PlanGoodsIssueItem_Index == i.Ref_DocumentItem_Index);
                        State = "by values 2";
                        var RequestDetail = new GIRequestDetail();
                        RequestDetail.Material = i.Product_Id;
                        RequestDetail.Plant = "3000";
                        RequestDetail.StgeLoc = "3010";
                        RequestDetail.Batch = i.Product_Lot;
                        RequestDetail.MoveType = PGI.MovementType_Id;
                        RequestDetail.EntryQnt = Math.Round(i.Qty.sParse<decimal>(), 3);
                        RequestDetail.EntryUom = i.ProductConversion_Name;
                        RequestDetail.ItemText = !string.IsNullOrEmpty(PGII.DocumentItem_Remark) ? PGII.DocumentItem_Remark.Trim() : "";
                        RequestDetail.GrRcpt = !string.IsNullOrEmpty(PGI.DocumentRef_No4) ? PGI.DocumentRef_No4.Trim() : "";
                        RequestDetail.Costcenter = PGI.Costcenter_Id;
                        RequestDetail.StckType = itemstatus?.FirstOrDefault(c => c.itemStatus_Id == i.ItemStatus_Id).stck_Type;
                        RequestDetail.Orderid = !string.IsNullOrEmpty(PGII.DocumentRef_No3) ? PGII.DocumentRef_No3.Trim() : "";
                        RequestDetail.OrderItno = !string.IsNullOrEmpty(PGII.DocumentRef_No4) ? PGII.DocumentRef_No4.Trim() : "";
                        RequestDetail.AssetNo = !string.IsNullOrEmpty(PGI.DocumentRef_No1) ? PGI.DocumentRef_No1.Trim() : "";
                        RequestDetail.SubNumber = !string.IsNullOrEmpty(PGI.DocumentRef_No2) ? PGI.DocumentRef_No2.Trim() : "";
                        RequestDetail.WbsElem = !string.IsNullOrEmpty(PGI.DocumentRef_No3) ? PGI.DocumentRef_No3.Trim() : "";
                        RequestDetail.GlAccount = "";
                        RequestDetail.ReservNo = "";
                        RequestDetail.ResItem = "";
                        RequestDetail.MoveMat = "";
                        RequestDetail.MovePlant = "";
                        RequestDetail.MoveStloc = "";
                        RequestDetail.MoveBatch = "";
                        Request.Detail.Add(RequestDetail);
                    }
                }

                State = "Sent To Sap";
                resultMsg = Request.sJson();

                return resultMsg;
            }

            catch (Exception ex)
            {
                msglog = State + " exy Rollback " + ex.Message.ToString();
                olog.logging("SentToSapGi", msglog);
                throw ex;
            }
        }

        public Result CloseDocument(GoodsIssueViewModel model)
        {
            String State = "Start";
            String msglog = "";
            var olog = new logtxt();
            try
            {
                var result = new Result();
                var GI = db.IM_GoodsIssue.Find(Guid.Parse(model.goodsIssue_Index));
                GI.Document_Status = 4;
                GI.Update_Date = DateTime.Now;
                GI.Update_By = model.create_by;
                var transaction = db.Database.BeginTransaction();
                try
                {
                    db.SaveChanges();
                    transaction.Commit();
                    result.resultIsUse = true;
                }

                catch (Exception exy)
                {
                    result.resultIsUse = false;
                    msglog = State + " ex Rollback " + exy.Message.ToString();
                    olog.logging("confirmStatus", msglog);
                    transaction.Rollback();
                    throw exy;
                }
                result.resultMsg = "Success";
                return result;
            }
            catch (Exception ex)
            {
                msglog = State + " ex Rollback " + ex.Message.ToString();
                olog.logging("confirmStatus", msglog);
                var result = new Result();
                result.resultIsUse = false;
                result.resultMsg = ex.Message;
                return result;
            }
        }

        #region CancelPGI
        public string CancelPGI(GoodsIssueViewModel model)
        {
            var olog = new logtxt();
            try
            {
                var GoodsIssue = db.IM_GoodsIssue.Find(new Guid(model.goodsIssue_Index));

                if (GoodsIssue != null)
                {

                    var refItemPGI = db.IM_GoodsIssueItemLocation.Where(c => c.GoodsIssue_Index == GoodsIssue.GoodsIssue_Index).GroupBy(g => g.Ref_Document_Index).ToList();

                    foreach (var item in refItemPGI)
                    {
                        var modelPGI = new { planGoodsIssue_Index = item.Key, cancel_By = model.create_by };
                        var updatePGIIStatus = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("UpdatePGI"), modelPGI.sJson());
                    }

                }

                return "SUCCESS";
            }

            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion


        public List<im_Signatory_logViewModel> findUser(im_Signatory_logViewModel data)
        {
            try
            {

                var items = new List<im_Signatory_logViewModel>();



                var query = db.im_Signatory_log.AsQueryable();



                if (!string.IsNullOrEmpty(data.goodsIssue_No))
                {
                    query = query.Where(c => c.Ref_Document_No == data.goodsIssue_No);
                }


                var result = query.Take(100).OrderByDescending(o => o.Create_Date).ToList();

                foreach (var item in result)
                {
                    var resultItem = new im_Signatory_logViewModel();

                    resultItem.signatory_Index = item.Signatory_Index;
                    resultItem.signatoryType_Id = item.SignatoryType_Id;
                    resultItem.signatoryType_Name = item.SignatoryType_Name;
                    resultItem.first_Name = item.First_Name;
                    resultItem.last_Name = item.Last_Name;
                    resultItem.position_Name = item.Position_Name;

                    items.Add(resultItem);
                }


                return items;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #region ListCutSlots
        public string ListConfirmCutSlots(ListCutSlotsViewModel data)
        {
            String State = "Start";
            String msglog = "";
            var olog = new logtxt();
            String msg = "";
            try
            {
                foreach (var model in data.items.Where(c => c.selected))
                {
                    var ListGIL = db.IM_GoodsIssueItemLocation.Where(c => c.GoodsIssue_Index == new Guid(model.goodsIssue_Index) && c.Document_Status == 0).ToList();

                    var Checktaskitem = db.IM_TaskItem.Where(c => c.Ref_Document_Index == new Guid(model.goodsIssue_Index) && ListGIL.Select(s => s.Ref_DocumentItem_Index).Contains(c.Ref_DocumentItem_Index) && c.Picking_Status != 2).Count();
                    if (Checktaskitem > 0)
                    {
                        msg = "เลขที่ใบเบิกวัสดุ " + model.goodsIssue_No + " สถานะไม่ถูกต้อง,";
                        continue;
                    }

                    var GI = db.IM_GoodsIssue.FirstOrDefault(c => c.GoodsIssue_Index == new Guid(model.goodsIssue_Index));

                    //#region SentToSap
                    //var itemstatus = utils.SendDataApi<List<ItemStatusDocViewModel>>(new AppSettingConfig().GetUrl("dropdownItemStatus"), new { }.sJson());
                    //State = "Select GIIL";
                    //var GII = db.IM_GoodsIssueItemLocation.Where(c => c.GoodsIssue_Index == GI.GoodsIssue_Index).ToList();
                    //State = "Select PGI";
                    //var PGI = db.IM_PlanGoodsIssue.FirstOrDefault(c => c.PlanGoodsIssue_Index == GII.FirstOrDefault().Ref_Document_Index);

                    //var Request = new GIRequestViewModel();
                    //Request.PstngDate = DateTime.Now.toString().Substring(0, 8);
                    //Request.DocDate = string.IsNullOrEmpty(PGI?.PlanGoodsIssue_Date.toString()) ? "" : PGI.PlanGoodsIssue_Date.toString().Substring(0, 8);
                    //Request.RefDocNo = GI.DocumentType_Id;
                    //Request.GiNo = GI.GoodsIssue_No;
                    //Request.HeaderTxt = !string.IsNullOrEmpty(GI.Document_Remark) ? GI.Document_Remark.Trim() : "";
                    //Request.GmCode = "03";

                    //if (string.IsNullOrEmpty(PGI?.Costcenter_Id))
                    //{
                    //    foreach (var i in GII)
                    //    {
                    //        State = "Select PGII";
                    //        var PGII = db.IM_PlanGoodsIssueItem.FirstOrDefault(c => c.PlanGoodsIssue_Index == i.Ref_Document_Index && c.PlanGoodsIssueItem_Index == i.Ref_DocumentItem_Index);

                    //        var RequestDetail = new GIRequestDetail();
                    //        RequestDetail.Material = i.Product_Id;
                    //        RequestDetail.Plant = PGI?.SoldTo_Id;
                    //        RequestDetail.StgeLoc = PGI?.Sloc_Id;
                    //        RequestDetail.Batch = i.Product_Lot;
                    //        RequestDetail.MoveType = PGI?.MovementType_Id;
                    //        RequestDetail.EntryQnt = Math.Round(i.Qty.sParse<decimal>(), 3);
                    //        RequestDetail.EntryUom = i.ProductConversion_Name;
                    //        RequestDetail.ItemText = !string.IsNullOrEmpty(PGII?.DocumentItem_Remark) ? PGII?.DocumentItem_Remark.Trim() : "";
                    //        RequestDetail.GrRcpt = !string.IsNullOrEmpty(PGI?.DocumentRef_No4) ? PGI?.DocumentRef_No4.Trim() : "";
                    //        RequestDetail.Costcenter = "";
                    //        RequestDetail.StckType = itemstatus.FirstOrDefault(c => c.itemStatus_Id == i.ItemStatus_Id).stck_Type;
                    //        RequestDetail.Orderid = !string.IsNullOrEmpty(PGII?.DocumentRef_No3) ? PGII?.DocumentRef_No3.Trim() : "";
                    //        RequestDetail.OrderItno = !string.IsNullOrEmpty(PGII?.DocumentRef_No4) ? PGII?.DocumentRef_No4.Trim() : "";
                    //        RequestDetail.AssetNo = !string.IsNullOrEmpty(PGI?.DocumentRef_No1) ? PGI?.DocumentRef_No1.Trim() : "";
                    //        RequestDetail.SubNumber = !string.IsNullOrEmpty(PGI?.DocumentRef_No2) ? PGI?.DocumentRef_No2.Trim() : "";
                    //        RequestDetail.WbsElem = !string.IsNullOrEmpty(PGI?.DocumentRef_No3) ? PGI?.DocumentRef_No3.Trim() : "";
                    //        RequestDetail.GlAccount = "";
                    //        RequestDetail.ReservNo = PGI?.PlanGoodsIssue_No;
                    //        RequestDetail.ResItem = PGII?.LineNum;
                    //        RequestDetail.MoveMat = "";
                    //        RequestDetail.MovePlant = "3000";
                    //        RequestDetail.MoveStloc = "3010";
                    //        RequestDetail.MoveBatch = "";
                    //        Request.Detail.Add(RequestDetail);
                    //    }
                    //}
                    //else
                    //{
                    //    foreach (var i in GII)
                    //    {
                    //        State = "Select PGII";
                    //        var PGII = db.IM_PlanGoodsIssueItem.FirstOrDefault(c => c.PlanGoodsIssue_Index == i.Ref_Document_Index && c.PlanGoodsIssueItem_Index == i.Ref_DocumentItem_Index);

                    //        var RequestDetail = new GIRequestDetail();
                    //        RequestDetail.Material = i.Product_Id;
                    //        RequestDetail.Plant = "3000";
                    //        RequestDetail.StgeLoc = "3010";
                    //        RequestDetail.Batch = i.Product_Lot;
                    //        RequestDetail.MoveType = PGI.MovementType_Id;
                    //        RequestDetail.EntryQnt = Math.Round(i.Qty.sParse<decimal>(), 3);
                    //        RequestDetail.EntryUom = i.ProductConversion_Name;
                    //        RequestDetail.ItemText = !string.IsNullOrEmpty(PGII.DocumentItem_Remark) ? PGII.DocumentItem_Remark.Trim() : "";
                    //        RequestDetail.GrRcpt = !string.IsNullOrEmpty(PGI.DocumentRef_No4) ? PGI.DocumentRef_No4.Trim() : "";
                    //        RequestDetail.Costcenter = PGI.Costcenter_Id;
                    //        RequestDetail.StckType = itemstatus.FirstOrDefault(c => c.itemStatus_Id == i.ItemStatus_Id).stck_Type;
                    //        RequestDetail.Orderid = !string.IsNullOrEmpty(PGII.DocumentRef_No3) ? PGII.DocumentRef_No3.Trim() : "";
                    //        RequestDetail.OrderItno = !string.IsNullOrEmpty(PGII.DocumentRef_No4) ? PGII.DocumentRef_No4.Trim() : "";
                    //        RequestDetail.AssetNo = !string.IsNullOrEmpty(PGI.DocumentRef_No1) ? PGI.DocumentRef_No1.Trim() : "";
                    //        RequestDetail.SubNumber = !string.IsNullOrEmpty(PGI.DocumentRef_No2) ? PGI.DocumentRef_No2.Trim() : "";
                    //        RequestDetail.WbsElem = !string.IsNullOrEmpty(PGI.DocumentRef_No3) ? PGI.DocumentRef_No3.Trim() : "";
                    //        RequestDetail.GlAccount = "";
                    //        RequestDetail.ReservNo = "";
                    //        RequestDetail.ResItem = "";
                    //        RequestDetail.MoveMat = "";
                    //        RequestDetail.MovePlant = "";
                    //        RequestDetail.MoveStloc = "";
                    //        RequestDetail.MoveBatch = "";
                    //        Request.Detail.Add(RequestDetail);
                    //    }
                    //}

                    //State = "Sent To Sap";
                    ////var resultSentToSap = utils.SendDataApi<GIResponseViewModel>(new AppSettingConfig().GetUrl("SentToSap"), Request.sJson());
                    //var resultSentToSap = new GIResponseViewModel { status = "SUCCESS", message = new GIMessage { eMaterailDocField = GI.GoodsIssue_No.Substring(2, 8), eFiDocumentField = GI.GoodsIssue_No.Substring(2, 8) } };

                    //if (resultSentToSap.status == "SUCCESS")
                    //{
                    //    State = "response SUCCESS";
                    //    GI.DocumentRef_No5 = resultSentToSap.message.eMaterailDocField;
                    //    GI.DocumentRef_No3 = resultSentToSap.message.eFiDocumentField;
                    //    GI.Update_By = model.create_By;
                    //    GI.Update_Date = DateTime.Now;
                    //}
                    //else if (resultSentToSap.status == "ERROR")
                    //{
                    //    msg = "เลขที่ใบเบิกวัสดุ " + model.goodsIssue_No + " " +resultSentToSap.message.eMessageField + " ,";
                    //    continue;
                    //}
                    //else
                    //{
                    //    msg = "เลขที่ใบเบิกวัสดุ " + model.goodsIssue_No + " " + resultSentToSap.message.eMessageField + " ,";
                    //    continue;
                    //}
                    //#endregion

                    foreach (var GIL in ListGIL)
                    {

                        #region Update Status GIL = 1
                        //Update Status GIL = 1
                        var transaction = db.Database.BeginTransaction();
                        try
                        {
                            GIL.Document_Status = 1;
                            db.SaveChanges();
                            transaction.Commit();
                        }

                        catch (Exception exy)
                        {
                            msglog = State + " ex Rollback " + exy.Message.ToString();
                            olog.logging("ConfirmCutSlots", msglog);
                            transaction.Rollback();
                            throw exy;
                        }
                        #endregion

                        //var objectLocation = new { locationType_Index = new Guid("2E9338D3-0931-4E36-B240-782BF9508641") };
                        var location = utils.SendDataApi<List<locationViewModel>>(new AppSettingConfig().GetUrl("GetLocation"), new { }.sJson());


                        var taskitem = db.IM_TaskItem.Where(c => c.Ref_Document_Index == GIL.GoodsIssue_Index && c.Ref_DocumentItem_Index == GIL.GoodsIssueItemLocation_Index && c.Picking_Status == 2).ToList();
                        var result = false;
                        foreach (var ti in taskitem)
                        {
                            var l = location.FirstOrDefault(c => c.location_Name == ti.UDF_5);

                            var datacutslots = new
                            {
                                goodsIssueItemLocation_Index = GIL.GoodsIssueItemLocation_Index,
                                goodsIssue_Index = GIL.GoodsIssue_Index,
                                lineNum = ti.LineNum,
                                tagItem_Index = ti.TagItem_Index,
                                tag_Index = ti.Tag_Index,
                                tag_No = ti.UDF_5,
                                product_Index = ti.Product_Index,
                                product_Id = ti.Product_Id,
                                product_Name = ti.Product_Name,
                                product_SecondName = ti.Product_SecondName,
                                product_ThirdName = ti.Product_ThirdName,
                                product_Lot = ti.Product_Lot,
                                itemStatus_Index = ti.ItemStatus_Index,
                                itemStatus_Id = ti.ItemStatus_Id,
                                itemStatus_Name = ti.ItemStatus_Name,
                                location_Index = l.location_Index,
                                location_Id = l.location_Id,
                                location_Name = l.location_Name,
                                qtyPlan = GIL.QtyPlan,
                                qty = ti.Qty,
                                ratio = ti.Ratio,
                                totalQty = ti.TotalQty,
                                productConversion_Index = ti.ProductConversion_Index,
                                productConversion_Id = ti.ProductConversion_Id,
                                productConversion_Name = ti.ProductConversion_Name,
                                mfg_Date = ti.MFG_Date,
                                exp_Date = ti.EXP_Date,
                                unitWeight = ti.UnitWeight,
                                weight = ti.Weight,
                                unitWidth = ti.UnitWidth,
                                unitLength = ti.UnitLength,
                                unitHeight = ti.UnitHeight,
                                unitVolume = ti.UnitVolume,
                                volume = ti.Volume,
                                unitPrice = ti.UnitPrice,
                                price = ti.Price,
                                documentRef_No1 = ti.DocumentRef_No1,
                                documentRef_No2 = ti.DocumentRef_No2,
                                documentRef_No3 = ti.DocumentRef_No3,
                                documentRef_No4 = ti.DocumentRef_No4,
                                documentRef_No5 = ti.DocumentRef_No5,
                                document_Status = ti.Document_Status,
                                udf_1 = ti.UDF_1,
                                udf_2 = ti.UDF_2,
                                udf_3 = ti.UDF_3,
                                udf_4 = ti.UDF_4,
                                udf_5 = ti.UDF_5,
                                ref_Process_Index = ti.Ref_Process_Index,
                                //ref_Document_No = ti.Ref_Document_No,
                                //ref_Document_LineNum = ti.Ref_Document_LineNum,
                                //ref_Document_Index = ti.Ref_Document_Index,
                                //ref_DocumentItem_Index = ti.Ref_DocumentItem_Index,
                                ref_Document_No = GIL.GoodsIssue_No,
                                ref_Document_LineNum = ti.LineNum,
                                ref_Document_Index = GIL.GoodsIssue_Index,
                                ref_DocumentItem_Index = GIL.GoodsIssueItemLocation_Index,
                                goodsReceiveItem_Index = GIL.GoodsReceiveItem_Index,
                                picking_Status = ti.Picking_Status,
                                picking_By = ti.Picking_By,
                                picking_Date = ti.Picking_Date,
                                picking_Ref1 = GIL.Picking_Ref1,
                                picking_Ref2 = GIL.Picking_Ref2,
                                picking_Qty = ti.Picking_Qty,
                                picking_Ratio = ti.Picking_Ratio,
                                picking_TotalQty = ti.Picking_TotalQty,
                                picking_ProductConversion_Index = ti.Pick_ProductConversion_Index,
                                mashall_Status = GIL.Mashall_Status,
                                mashall_Qty = GIL.Mashall_Qty,
                                cancel_Status = GIL.Cancel_Status,
                                goodsIssue_No = GIL.GoodsIssue_No,
                                binBalance_Index = ti.BinBalance_Index_New,
                                process_Index = "69CAD84E-1F80-48FD-8749-1A6009F3B89C",
                                create_By = model.create_By,
                                owner_Index = GI.Owner_Index,
                                owner_Id = GI.Owner_Id,
                                owner_Name = GI.Owner_Name,
                                goodsIssue_Date = GI.GoodsIssue_Date,
                                documentType_Index = GI.DocumentType_Index,
                                documentType_Id = GI.DocumentType_Id,
                                documentType_Name = GI.DocumentType_Name

                            };

                            result = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("CutSlotsBinBalance"), datacutslots.sJson());
                        }
                        if (result)
                        {
                            #region Update Status GIL = 2
                            //Update Status GIL = 1
                            var transaction2 = db.Database.BeginTransaction();
                            try
                            {
                                msg = "เลขที่ใบเบิกวัสดุ : " + GI.GoodsIssue_No + " เสร็จสิ้น,";
                                GIL.Document_Status = 2;
                                db.SaveChanges();
                                transaction2.Commit();
                            }

                            catch (Exception exy)
                            {
                                msglog = State + " ex Rollback 2 " + exy.Message.ToString();
                                olog.logging("ConfirmCutSlots", msglog);
                                transaction2.Rollback();
                                throw exy;
                            }
                            #endregion
                        }
                        else
                        {
                            msg = "เลขที่ใบเบิกวัสดุ : " + GI.GoodsIssue_No + " ตัดสต๊อกไม่สำเร็จ,";
                        }
                    }

                    var ListGIL2 = db.IM_GoodsIssueItemLocation.Where(c => c.GoodsIssue_Index == new Guid(model.goodsIssue_Index) && c.Document_Status != 2).Count();

                    if (ListGIL2 == 0)
                    {
                        #region Update Status GI = 4
                        //Update Status GIL = 1
                        var transaction3 = db.Database.BeginTransaction();
                        try
                        {
                            GI.Document_Status = 4;
                            db.SaveChanges();
                            transaction3.Commit();
                        }

                        catch (Exception exy)
                        {
                            msglog = State + " ex Rollback 2 " + exy.Message.ToString();
                            olog.logging("ConfirmCutSlots", msglog);
                            transaction3.Rollback();
                            throw exy;
                        }
                        #endregion
                    }
                    else
                    {
                        msg = "เลขที่ใบเบิกวัสดุ : " + GI.GoodsIssue_No + " ไม่เสร็จสิ้น,";
                    }
                }
                return msg;
            }
            catch (Exception ex)
            {
                msglog = State + " ex Rollback " + ex.Message.ToString();
                olog.logging("ConfirmCutSlots", msglog);
                throw ex;
            }
        }

        #endregion

        #region SendToSap
        public string sendToSap(ListSendToSapViewModel data)
        {
            String State = "Start";
            String msglog = "";
            var olog = new logtxt();
            String msg = "";

            try
            {

                foreach (var model in data.items.Where(c => c.selected))
                {
                    var GI = db.IM_GoodsIssue.FirstOrDefault(c => c.GoodsIssue_Index == new Guid(model.goodsIssue_Index));

                    if (GI == null)
                    {
                        continue;
                    }


                    if (GI.Document_Status != 4)
                    {
                        msg += "เลขที่เอกสสาร" + GI.GoodsIssue_No + " สถานะไม่ถูกต้อง";
                        continue;
                    }

                    var itemstatus = utils.SendDataApi<List<ItemStatusDocViewModel>>(new AppSettingConfig().GetUrl("dropdownItemStatus"), new { }.sJson());
                    State = "Select GIIL";
                    var GII = db.IM_GoodsIssueItemLocation.Where(c => c.GoodsIssue_Index == GI.GoodsIssue_Index).ToList();
                    State = "Select PGI";
                    var PGI = db.IM_PlanGoodsIssue.FirstOrDefault(c => c.PlanGoodsIssue_Index == GII.FirstOrDefault().Ref_Document_Index);

                    var Request = new GIRequestViewModel();
                    Request.PstngDate = DateTime.Now.toString().Substring(0, 8);
                    Request.DocDate = string.IsNullOrEmpty(PGI?.PlanGoodsIssue_Date.toString()) ? "" : PGI.PlanGoodsIssue_Date.toString().Substring(0, 8);
                    Request.RefDocNo = GI.DocumentType_Id;
                    Request.GiNo = GI.GoodsIssue_No;
                    Request.HeaderTxt = !string.IsNullOrEmpty(GI.Document_Remark) ? GI.Document_Remark.Trim() : "";
                    Request.GmCode = "03";

                    if (string.IsNullOrEmpty(PGI?.Costcenter_Id))
                    {
                        foreach (var i in GII)
                        {
                            State = "Select PGII";
                            var PGII = db.IM_PlanGoodsIssueItem.FirstOrDefault(c => c.PlanGoodsIssue_Index == i.Ref_Document_Index && c.PlanGoodsIssueItem_Index == i.Ref_DocumentItem_Index);

                            var RequestDetail = new GIRequestDetail();
                            RequestDetail.Material = i.Product_Id;
                            RequestDetail.Plant = PGI?.SoldTo_Id;
                            RequestDetail.StgeLoc = PGI?.Sloc_Id;
                            RequestDetail.Batch = i.Product_Lot;
                            RequestDetail.MoveType = PGI?.MovementType_Id;
                            RequestDetail.EntryQnt = Math.Round(i.Qty.sParse<decimal>(), 3);
                            RequestDetail.EntryUom = i.ProductConversion_Name;
                            RequestDetail.ItemText = !string.IsNullOrEmpty(PGII?.DocumentItem_Remark) ? PGII?.DocumentItem_Remark.Trim() : "";
                            RequestDetail.GrRcpt = !string.IsNullOrEmpty(PGI?.DocumentRef_No4) ? PGI?.DocumentRef_No4.Trim() : "";
                            RequestDetail.Costcenter = "";
                            RequestDetail.StckType = itemstatus.FirstOrDefault(c => c.itemStatus_Id == i.ItemStatus_Id).stck_Type;
                            RequestDetail.Orderid = !string.IsNullOrEmpty(PGII?.DocumentRef_No3) ? PGII?.DocumentRef_No3.Trim() : "";
                            RequestDetail.OrderItno = !string.IsNullOrEmpty(PGII?.DocumentRef_No4) ? PGII?.DocumentRef_No4.Trim() : "";
                            RequestDetail.AssetNo = !string.IsNullOrEmpty(PGI?.DocumentRef_No1) ? PGI?.DocumentRef_No1.Trim() : "";
                            RequestDetail.SubNumber = !string.IsNullOrEmpty(PGI?.DocumentRef_No2) ? PGI?.DocumentRef_No2.Trim() : "";
                            RequestDetail.WbsElem = !string.IsNullOrEmpty(PGI?.DocumentRef_No3) ? PGI?.DocumentRef_No3.Trim() : "";
                            RequestDetail.GlAccount = "";
                            RequestDetail.ReservNo = PGI?.PlanGoodsIssue_No;
                            RequestDetail.ResItem = PGII?.LineNum;
                            RequestDetail.MoveMat = "";
                            RequestDetail.MovePlant = "3000";
                            RequestDetail.MoveStloc = "3010";
                            RequestDetail.MoveBatch = "";
                            Request.Detail.Add(RequestDetail);
                        }
                    }
                    else
                    {
                        foreach (var i in GII)
                        {
                            State = "Select PGII";
                            var PGII = db.IM_PlanGoodsIssueItem.FirstOrDefault(c => c.PlanGoodsIssue_Index == i.Ref_Document_Index && c.PlanGoodsIssueItem_Index == i.Ref_DocumentItem_Index);

                            var RequestDetail = new GIRequestDetail();
                            RequestDetail.Material = i.Product_Id;
                            RequestDetail.Plant = "3000";
                            RequestDetail.StgeLoc = "3010";
                            RequestDetail.Batch = i.Product_Lot;
                            RequestDetail.MoveType = PGI.MovementType_Id;
                            RequestDetail.EntryQnt = Math.Round(i.Qty.sParse<decimal>(), 3);
                            RequestDetail.EntryUom = i.ProductConversion_Name;
                            RequestDetail.ItemText = !string.IsNullOrEmpty(PGII.DocumentItem_Remark) ? PGII.DocumentItem_Remark.Trim() : "";
                            RequestDetail.GrRcpt = !string.IsNullOrEmpty(PGI.DocumentRef_No4) ? PGI.DocumentRef_No4.Trim() : "";
                            RequestDetail.Costcenter = PGI.Costcenter_Id;
                            RequestDetail.StckType = itemstatus.FirstOrDefault(c => c.itemStatus_Id == i.ItemStatus_Id).stck_Type;
                            RequestDetail.Orderid = !string.IsNullOrEmpty(PGII.DocumentRef_No3) ? PGII.DocumentRef_No3.Trim() : "";
                            RequestDetail.OrderItno = !string.IsNullOrEmpty(PGII.DocumentRef_No4) ? PGII.DocumentRef_No4.Trim() : "";
                            RequestDetail.AssetNo = !string.IsNullOrEmpty(PGI.DocumentRef_No1) ? PGI.DocumentRef_No1.Trim() : "";
                            RequestDetail.SubNumber = !string.IsNullOrEmpty(PGI.DocumentRef_No2) ? PGI.DocumentRef_No2.Trim() : "";
                            RequestDetail.WbsElem = !string.IsNullOrEmpty(PGI.DocumentRef_No3) ? PGI.DocumentRef_No3.Trim() : "";
                            RequestDetail.GlAccount = "";
                            RequestDetail.ReservNo = "";
                            RequestDetail.ResItem = "";
                            RequestDetail.MoveMat = "";
                            RequestDetail.MovePlant = "";
                            RequestDetail.MoveStloc = "";
                            RequestDetail.MoveBatch = "";
                            Request.Detail.Add(RequestDetail);
                        }
                    }

                    State = "Sent To Sap";
                    var resultSentToSap = utils.SendDataApi<GIResponseViewModel>(new AppSettingConfig().GetUrl("SentToSap"), Request.sJson());
                    //var resultSentToSap = new GIResponseViewModel { status = "SUCCESS", message = new GIMessage { eMaterailDocField = GI.GoodsIssue_No.Substring(2, 8), eFiDocumentField = GI.GoodsIssue_No.Substring(2, 8) } };

                    if (resultSentToSap.status == "SUCCESS")
                    {
                        State = "response SUCCESS";
                        GI.DocumentRef_No5 = resultSentToSap.message.eMaterailDocField;
                        GI.DocumentRef_No3 = resultSentToSap.message.eFiDocumentField;
                        GI.Update_By = model.create_By;
                        GI.Update_Date = DateTime.Now;
                    }
                    if (resultSentToSap.status == "ERROR")
                    {
                        msg += "เลขที่ใบเบิกวัสดุ :" + model.goodsIssue_No + " ส่ง Sap ไม่ผ่าน" + resultSentToSap.message.eMessageField + " ,";
                        continue;
                    }
                    else
                    {
                        msg += "เลขที่ใบเบิกวัสดุ :" + model.goodsIssue_No + " ส่ง Sap ผ่าน " + resultSentToSap.message.eMessageField + " ,";
                        continue;
                    }
                }

                return msg;


            }
            catch (Exception ex)
            {

                throw ex;
            }
        }
        #endregion

        bool chkdatawave = false;


        #region runwaveandHeader

        #region OLD
        //public actionResultRunWaveV2ViewModelViewModel runwaveandHeader(RunWaveFilterV2ViewModel model)
        //{
        //    //                        _oo0oo_
        //    //                       o8888888o
        //    //                       88" . "88
        //    //                       (| -_- |)
        //    //                       0\  =  /0
        //    //                     ___/`---'\___
        //    //                   .' \|     |// '.
        //    //                  / \|||  :  |||// \
        //    //                 / _||||| -:- |||||- \
        //    //                |   | \\  -  /// |   |
        //    //                | \_|  ''\---/''  |_/ |
        //    //                \  .-\__  '-'  ___/-. /
        //    //              ___'. .'  /--.--\  `. .'___
        //    //           ."" '<  `.___\_<|>_/___.' >' "".
        //    //          | | :  `- \`.;`\ _ /`;.`/ - ` : | |
        //    //          \  \ `_.   \_ __\ /__ _/   .-` /  /
        //    //      =====`-.____`.___ \_____/___.-`___.-'=====
        //    //                        `=---='


        //    String State = "Start";
        //    String msglog = "";
        //    var olog = new logtxt();
        //    var process = new Guid("2E026669-99BD-4DE0-8818-534F29F7B89D");
        //    var strprocess = "2E026669-99BD-4DE0-8818-534F29F7B89D";
        //    var PlanGiRunWave = new List<Guid>();
        //    var ListPlanGi_Index = new List<Guid>();
        //    var listpgiinotinsert = new List<plangoodsissueitemViewModel>();
        //    bool CheckRunwavePast = false;
        //    long IsPA = 1;
        //    Boolean IsTote = false;
        //    olog.logging("runwave", State);
        //    try
        //    {
        //        var listDataProduct2 = utils.SendDataApi<List<ProductViewModel>>(new AppSettingConfig().GetUrl("getProductMaster"), new { }.sJson());
        //        var listDataLocation2 = utils.SendDataApi<List<locationViewModel>>(new AppSettingConfig().GetUrl("getLocationMaster"), new { }.sJson());


        //        #region create and update header

        //        Guid gi_index = !string.IsNullOrEmpty(model.goodsIssue_Index) ? new Guid(model.goodsIssue_Index) : new Guid("00000000-0000-0000-0000-000000000000");
        //        var gi = db.IM_GoodsIssue.Find(gi_index);
        //        if (gi == null)
        //        {
        //            var filterModel = new GenDocumentTypeViewModel();

        //            filterModel.process_Index = new Guid("2E026669-99BD-4DE0-8818-534F29F7B89D");
        //            filterModel.documentType_Index = new Guid(model.documentType_Index);
        //            //GetConfig
        //            var dropDownDocumentType = utils.SendDataApi<List<GenDocumentTypeViewModel>>(new AppSettingConfig().GetUrl("dropDownDocumentType"), filterModel.sJson());

        //            var genDoc = new AutoNumberService();
        //            DateTime DocumentDate = DateTime.Now;
        //            string DocNum = genDoc.genAutoDocmentNumber(dropDownDocumentType, DocumentDate);

        //            var newGI = new im_GoodsIssue();
        //            newGI.GoodsIssue_Index = Guid.NewGuid();
        //            newGI.Owner_Index = !string.IsNullOrEmpty(model.owner_Index) ? new Guid(model.owner_Index) : Guid.Parse("00000000-0000-0000-0000-000000000000");
        //            newGI.Owner_Id = !string.IsNullOrEmpty(model.owner_Index) ? model.owner_Id : "";
        //            newGI.Owner_Name = !string.IsNullOrEmpty(model.owner_Index) ? model.owner_Name : "";
        //            newGI.DocumentType_Index = new Guid(model.documentType_Index);
        //            newGI.DocumentType_Id = model.documentType_Id;
        //            newGI.DocumentType_Name = model.documentType_Name;
        //            newGI.GoodsIssue_No = DocNum;
        //            newGI.GoodsIssue_Date = model.goodsIssue_Date.toDateDefault();
        //            newGI.GoodsIssue_Time = model.goodsIssue_Time;
        //            newGI.DocumentRef_No1 = model.documentRef_No1;
        //            newGI.DocumentRef_No2 = model.documentRef_No2;
        //            newGI.DocumentRef_No3 = model.documentRef_No3;
        //            newGI.DocumentRef_No4 = model.documentRef_No4;
        //            newGI.DocumentRef_No5 = model.documentRef_No5;
        //            newGI.Document_Remark = model.document_Remark;
        //            newGI.DocumentPriority_Status = model.documentPriority_Status;
        //            newGI.Document_Date = model.document_Date.toDate();
        //            newGI.Warehouse_Index = !string.IsNullOrEmpty(model.warehouse_Index) ? new Guid(model.warehouse_Index) : (Guid?)null;
        //            newGI.Warehouse_Id = !string.IsNullOrEmpty(model.warehouse_Index) ? model.warehouse_Id : null;
        //            newGI.Warehouse_Name = !string.IsNullOrEmpty(model.warehouse_Index) ? model.warehouse_Name : null;
        //            newGI.Document_Status = -2;
        //            newGI.Create_By = model.create_by;
        //            newGI.Create_Date = DateTime.Now;
        //            db.IM_GoodsIssue.Add(newGI);

        //            model.goodsIssue_Index = newGI.GoodsIssue_Index.ToString();
        //            model.goodsIssue_No = newGI.GoodsIssue_No;
        //        }
        //        else
        //        {
        //            if (gi.Document_Status == 0)
        //            {
        //                gi.Owner_Index = !string.IsNullOrEmpty(model.owner_Index) ? new Guid(model.owner_Index) : Guid.Parse("00000000-0000-0000-0000-000000000000");
        //                gi.Owner_Id = !string.IsNullOrEmpty(model.owner_Index) ? model.owner_Id : "";
        //                gi.Owner_Name = !string.IsNullOrEmpty(model.owner_Index) ? model.owner_Name : "";
        //                gi.DocumentType_Index = new Guid(model.documentType_Index);
        //                gi.DocumentType_Id = model.documentType_Id;
        //                gi.DocumentType_Name = model.documentType_Name;
        //                gi.GoodsIssue_Date = model.goodsIssue_Date.toDateDefault();
        //                gi.GoodsIssue_Time = model.goodsIssue_Time;
        //                gi.DocumentRef_No1 = model.documentRef_No1;
        //                gi.Document_Remark = model.document_Remark;
        //                gi.Document_Date = model.document_Date.toDate();
        //                gi.Warehouse_Index = !string.IsNullOrEmpty(model.warehouse_Index) ? new Guid(model.warehouse_Index) : (Guid?)null;
        //                gi.Warehouse_Id = !string.IsNullOrEmpty(model.warehouse_Index) ? model.warehouse_Id : null;
        //                gi.Warehouse_Name = !string.IsNullOrEmpty(model.warehouse_Index) ? model.warehouse_Name : null;
        //                gi.Update_By = model.create_by;
        //                gi.Update_Date = DateTime.Now;


        //            }

        //            model.goodsIssue_Index = gi.GoodsIssue_Index.ToString();
        //            model.goodsIssue_No = gi.GoodsIssue_No;
        //        }

        //        var transactionx = db.Database.BeginTransaction();
        //        try
        //        {
        //            db.SaveChanges();
        //            transactionx.Commit();
        //        }

        //        catch (Exception exy)
        //        {
        //            msglog = State + " ex Rollback " + exy.Message.ToString();
        //            olog.logging("SavePlanGR", msglog);
        //            transactionx.Rollback();

        //            throw exy;

        //        }
        //        #endregion


        //        //int CheckRunwavePast = model.listGoodsIssueItemViewModel.Count();
        //        var result = new actionResultRunWaveV2ViewModelViewModel();

        //        db.Database.SetCommandTimeout(360);


        //        #region runwave status 10
        //        if (model.listGoodsIssueItemViewModel.Count > 0)
        //        {
        //            foreach (var item in model.listGoodsIssueItemViewModel)
        //            {
        //                if (item.planGoodsIssueItem_Index != Guid.Parse("00000000-0000-0000-0000-000000000000"))
        //                {
        //                    PlanGiRunWave.Add(item.planGoodsIssueItem_Index);
        //                    ListPlanGi_Index.Add(item.planGoodsIssue_Index);
        //                }
        //            }
        //        }




        //        //var planGI_Lot = db.View_WaveCheckProductLot.Where(c => ListPlanGi_Index.Contains(c.PlanGoodsIssue_Index)).Select(s => new
        //        //{
        //        //    s.Product_Index
        //        //    ,s.Product_Id
        //        //    ,s.Product_Lot
        //        //});



        //        using (var db2 = new GIDbContext())
        //        {
        //            db2.Database.SetCommandTimeout(120);
        //            var transaction = db2.Database.BeginTransaction(IsolationLevel.Serializable);
        //            try
        //            {
        //                //update status 10
        //                var pgi = db2.IM_PlanGoodsIssueItem.Where(c => PlanGiRunWave.Contains(c.PlanGoodsIssueItem_Index) && c.Document_Status == 0).ToList();
        //                foreach (var p in pgi)
        //                {
        //                    //p.Ref_WavePick_index = new Guid(model.goodsIssue_Index);
        //                    p.Document_Status = 1;
        //                }
        //                var GI = db2.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && (c.RunWave_Status == null || c.RunWave_Status == 0)).ToList();
        //                foreach (var g in GI)
        //                {
        //                    g.Wave_Index = new Guid(model.wave_Index);
        //                    g.RunWave_Status = 10;
        //                }
        //                db2.SaveChanges();
        //                transaction.Commit();
        //            }

        //            catch (Exception exy)
        //            {
        //                msglog = State + " ex Rollback " + exy.Message.ToString();
        //                olog.logging("runwave", msglog);
        //                transaction.Rollback();
        //                throw exy;
        //            }
        //        }
        //        #endregion



        //        var planGIResultx = db.View_PLANWAVEV.Where(c => PlanGiRunWave.Contains(c.PlanGoodsIssueItem_Index))
        //            .GroupBy(g => new
        //            {
        //                g.Product_Index,
        //                g.Product_Id,
        //                g.Product_Name,
        //                g.Product_SecondName,
        //                g.Product_ThirdName,
        //                g.Product_Lot,
        //                g.ItemStatus_Index,
        //                g.ItemStatus_Id,
        //                g.ItemStatus_Name,
        //                g.MFG_Date,
        //                g.EXP_Date,
        //                g.DocumentRef_No1,
        //                g.DocumentRef_No2,
        //                g.DocumentRef_No3,
        //                g.DocumentRef_No4,
        //                g.DocumentRef_No5,
        //                g.UDF_1,
        //                g.UDF_2,
        //                g.UDF_3,
        //                g.UDF_4,
        //                g.UDF_5,
        //                //g.sum(TotalQty) as TotalQty,
        //                //g.isnull(sum(GITotalQty), 0) as GITotalQty,
        //                //g.sum(TotalQty) - isnull(sum(GITotalQty), 0)  AS QtyWave,
        //                //g.ROW_NUMBER() OVER(Order by Product_Id) as RowNum,
        //                g.Owner_Index,
        //                g.PlanGoodsIssue_UDF_1,
        //                g.PlanGoodsIssue_UDF_2,
        //                g.PlanGoodsIssue_UDF_3,
        //                g.PlanGoodsIssue_UDF_4,
        //                g.PlanGoodsIssue_UDF_5
        //            })
        //            .Select(s => new
        //            {
        //                s.Key.Product_Index,
        //                s.Key.Product_Id,
        //                s.Key.Product_Name,
        //                s.Key.Product_SecondName,
        //                s.Key.Product_ThirdName,
        //                s.Key.Product_Lot,
        //                s.Key.ItemStatus_Index,
        //                s.Key.ItemStatus_Id,
        //                s.Key.ItemStatus_Name,
        //                s.Key.MFG_Date,
        //                s.Key.EXP_Date,
        //                s.Key.DocumentRef_No1,
        //                s.Key.DocumentRef_No2,
        //                s.Key.DocumentRef_No3,
        //                s.Key.DocumentRef_No4,
        //                s.Key.DocumentRef_No5,
        //                s.Key.UDF_1,
        //                s.Key.UDF_2,
        //                s.Key.UDF_3,
        //                s.Key.UDF_4,
        //                s.Key.UDF_5,
        //                total = s.Sum(x => x.TotalQty),
        //                GITotalQty = s.Sum(x => x.GITotalQty),
        //                QtyWave = s.Sum(x => x.TotalQty) - s.Sum(x => x.GITotalQty),
        //                //g.ROW_NUMBER() OVER(Order by Product_Id) as RowNum,
        //                s.Key.Owner_Index,
        //                s.Key.PlanGoodsIssue_UDF_1,
        //                s.Key.PlanGoodsIssue_UDF_2,
        //                s.Key.PlanGoodsIssue_UDF_3,
        //                s.Key.PlanGoodsIssue_UDF_4,
        //                s.Key.PlanGoodsIssue_UDF_5
        //            }).ToList();

        //        State = "View_PLANWAVEV";
        //        olog.logging("runwave", State);
        //        if (planGIResultx.Count == 0)
        //        {
        //            throw new Exception("Plan GI not found..");
        //        }


        //        //find wave template
        //        var jsGetWaveRule = new { process_Index = process, wave_Index = model.wave_Index };
        //        var getWaveRule = utils.SendDataApi<List<WaveRuleViewModel>>(new AppSettingConfig().GetUrl("getWaveRule"), jsGetWaveRule.sJson());

        //        if (getWaveRule.Count == 0)
        //        {
        //            throw new Exception("Wave Template not found.");
        //        }

        //        var getViewWaveTemplateEX = utils.SendDataApi<List<WaveTemplateViewModel>>(new AppSettingConfig().GetUrl("getViewWaveTemplate"), new { }.sJson());

        //        State = "getWaveRule";
        //        olog.logging("runwave", State);
        //        bool isUseAttribute = false;

        //        foreach (var waveRule in getWaveRule.OrderBy(o => o.waveRule_Seq))
        //        {
        //            var jsgetViewWaveTemplate = new { process_Index = process, wave_Index = model.wave_Index, rule_Index = waveRule.rule_Index };
        //            //var getViewWaveTemplate = utils.SendDataApi<List<WaveTemplateViewModel>>(new AppSettingConfig().GetUrl("getViewWaveTemplate"), jsgetViewWaveTemplate.sJson());
        //            var getViewWaveTemplate = getViewWaveTemplateEX.Where(c => c.process_Index == process.ToString() && c.wave_Index == model.wave_Index && c.rule_Index == waveRule.rule_Index);
        //            State = "getViewWaveTemplate";
        //            olog.logging("runwave", State);
        //            var planGIWaveResult = db.View_PLANWAVEbyPLANGIV2.AsQueryable();
        //            var check = planGIWaveResult.ToList();
        //            planGIWaveResult = planGIWaveResult.Where(c => PlanGiRunWave.Contains(c.PlanGoodsIssueItem_Index));

        //            #region for RuleSource
        //            var RuleSourceList = getViewWaveTemplate.Where(c => c.isSource == 1 && c.isSearch == 1).ToList();

        //            foreach (var itemRuleSourceList in RuleSourceList)
        //            {
        //                if (itemRuleSourceList.ruleConditionOperation == "IN")
        //                {
        //                    var dataarray = itemRuleSourceList.ruleCondition_Param.Replace("'", "").Split(',');
        //                    if (itemRuleSourceList.ruleConditionField_Name == "DocumentType_Id")
        //                    {
        //                        planGIWaveResult = planGIWaveResult.Where(c => dataarray.Contains(c.DocumentType_Id));
        //                    }
        //                    if (itemRuleSourceList.ruleConditionField_Name == "Owner_Id")
        //                    {
        //                        planGIWaveResult = planGIWaveResult.Where(c => dataarray.Contains(c.Owner_Id));
        //                    }
        //                    //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " IN (" + itemRuleSourceList.ruleCondition_Param + ") ";
        //                    //var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
        //                    //var predicate = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>(
        //                    //    Expression.Call(
        //                    //        Expression.PropertyOrField(param, itemRuleSourceList.ruleConditionField_Name),
        //                    //        "Contains", null, Expression.Constant(itemRuleSourceList.ruleCondition_Param)
        //                    //    ), param);
        //                    //planGIWaveResult = planGIWaveResult.Where(predicate);
        //                }
        //                else if (itemRuleSourceList.ruleConditionOperation == "=")
        //                {
        //                    if (itemRuleSourceList.ruleConditionField_Name == "UseAttribute")
        //                    {
        //                        if (itemRuleSourceList.ruleCondition_Param.ToString().ToUpper() == "TRUE")
        //                        {
        //                            isUseAttribute = true;
        //                        }
        //                        else
        //                        {
        //                            isUseAttribute = false;
        //                        }

        //                    }
        //                    else
        //                    {
        //                        //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " = '" + itemRuleSourceList.ruleCondition_Param + "' ";
        //                        var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
        //                        var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.Equal(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
        //                            , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                        planGIWaveResult = planGIWaveResult.Where(lambda);
        //                    }


        //                }
        //                else if (itemRuleSourceList.ruleConditionOperation == ">")
        //                {
        //                    //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " > '" + itemRuleSourceList.ruleCondition_Param + "' ";
        //                    var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
        //                    var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.GreaterThan(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
        //                        , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                    planGIWaveResult = planGIWaveResult.Where(lambda);

        //                }
        //                else if (itemRuleSourceList.ruleConditionOperation == "<")
        //                {
        //                    //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " < '" + itemRuleSourceList.ruleCondition_Param + "' ";
        //                    var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
        //                    var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.LessThan(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
        //                        , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                    planGIWaveResult = planGIWaveResult.Where(lambda);
        //                }
        //                else if (itemRuleSourceList.ruleConditionOperation == "!=")
        //                {
        //                    //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " != '" + itemRuleSourceList.ruleCondition_Param + "' ";
        //                    var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
        //                    var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.NotEqual(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
        //                        , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                    planGIWaveResult = planGIWaveResult.Where(lambda);
        //                }
        //                else if (itemRuleSourceList.ruleConditionOperation == ">=")
        //                {
        //                    //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " >= '" + itemRuleSourceList.ruleCondition_Param + "' ";
        //                    var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
        //                    var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.GreaterThanOrEqual(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
        //                        , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                    planGIWaveResult = planGIWaveResult.Where(lambda);
        //                }
        //                else if (itemRuleSourceList.ruleConditionOperation == "<=")
        //                {
        //                    //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " <= '" + itemRuleSourceList.ruleCondition_Param + "' ";
        //                    var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
        //                    var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.LessThanOrEqual(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
        //                        , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                    planGIWaveResult = planGIWaveResult.Where(lambda);
        //                }
        //                else if (itemRuleSourceList.ruleConditionOperation == "Like")
        //                {
        //                    //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " Like '" + itemRuleSourceList.ruleCondition_Param + "' ";
        //                    var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
        //                    var predicate = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>(
        //                        Expression.Call(
        //                            Expression.PropertyOrField(param, itemRuleSourceList.ruleConditionField_Name),
        //                            "Contains", null, Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""))
        //                        ), param);
        //                    planGIWaveResult = planGIWaveResult.Where(predicate);
        //                }
        //            }
        //            #endregion

        //            #region for RuleDesSort
        //            var RuleSourceSortList = getViewWaveTemplate.Where(c => c.isSource == 1 && c.isSort == 1).ToList();

        //            string setWhereSourceSort = "";

        //            if (RuleSourceSortList.Count > 0)
        //            {
        //                setWhereSourceSort += " Order by ";
        //            }

        //            int iRowsSourceSort = 0;
        //            foreach (var itemRuleSourceSortList in RuleSourceSortList)
        //            {
        //                if (iRowsSourceSort == 0)
        //                {
        //                    setWhereSourceSort += itemRuleSourceSortList.ruleConditionField_Name + ' ' + itemRuleSourceSortList.ruleCondition_Param;
        //                    var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
        //                    var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, string>>(Expression.Property(param, itemRuleSourceSortList.ruleConditionField_Name), param);
        //                    if (itemRuleSourceSortList.ruleCondition_Param.ToUpper() == "DESC")
        //                    {
        //                        planGIWaveResult = planGIWaveResult.OrderByDescending(lambda);
        //                    }
        //                    else /*if (itemRuleSourceSortList.ruleCondition_Param.ToUpper() == "DESC")*/
        //                    {
        //                        planGIWaveResult = planGIWaveResult.OrderBy(lambda);
        //                    }
        //                }
        //                else
        //                {
        //                    setWhereSourceSort += "," + itemRuleSourceSortList.ruleConditionField_Name + ' ' + itemRuleSourceSortList.ruleCondition_Param;
        //                    var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
        //                    var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, string>>(Expression.Property(param, itemRuleSourceSortList.ruleConditionField_Name), param);
        //                    if (itemRuleSourceSortList.ruleCondition_Param.ToUpper() == "DESC")
        //                    {
        //                        planGIWaveResult = planGIWaveResult.OrderByDescending(lambda);
        //                    }
        //                    else /*if (itemRuleSourceSortList.ruleCondition_Param.ToUpper() == "DESC")*/
        //                    {
        //                        planGIWaveResult = planGIWaveResult.OrderBy(lambda);
        //                    }
        //                }
        //                iRowsSourceSort = iRowsSourceSort + 1;

        //            }
        //            #endregion


        //            String SqlWhere = "";
        //            var planGIWaveResult2 = planGIWaveResult.ToList();
        //            State = "View_PLANWAVEbyPLANGIV2";
        //            olog.logging("runwave", State);

        //            //if (planGIWaveResult2.Count != PlanGiRunWave.Count)
        //            //{
        //            //    var listpgii = PlanGiRunWave.Where(c => !planGIWaveResult2.Select(s => s.PlanGoodsIssueItem_Index).Contains(c)).ToList();

        //            //    if (listpgii.Count != 0)
        //            //    {
        //            //        using (var updatepginotProduct = new GIDbContext())
        //            //        {
        //            //            var transaction = updatepginotProduct.Database.BeginTransaction(IsolationLevel.Serializable);
        //            //            try
        //            //            {
        //            //                var pgii = model.listGoodsIssueItemViewModel.Where(c => listpgii.Contains(c.planGoodsIssueItem_Index)).ToList();
        //            //                foreach (var resultpgii in pgii)
        //            //                {
        //            //                    listpgiinotinsert.Add(resultpgii);
        //            //                }

        //            //                var pgi = updatepginotProduct.IM_PlanGoodsIssueItem.Where(c => listpgii.Contains(c.PlanGoodsIssueItem_Index) && c.Document_Status == 1).ToList();
        //            //                foreach (var p in pgi)
        //            //                {
        //            //                    p.Document_Status = 0;
        //            //                }
        //            //                updatepginotProduct.SaveChanges();
        //            //                transaction.Commit();
        //            //            }

        //            //            catch (Exception exy)
        //            //            {
        //            //                msglog = State + " ex Rollback " + exy.Message.ToString();
        //            //                olog.logging("UpdateUserAssign", msglog);
        //            //                transaction.Rollback();
        //            //                throw exy;
        //            //            }
        //            //        }
        //            //    }
        //            //}

        //            // LOOP Group SUM PLAN GI
        //            foreach (var item in planGIResultx)
        //            {

        //                olog.logging("runwave", "planGIResultx : " + item.Product_Id.ToString());


        //                if (item.Product_Id.ToString() == "C1004685WORD")
        //                {
        //                    var aa = item.DocumentRef_No1;

        //                }
        //                var planGIWaveResult3 = planGIWaveResult2.AsQueryable();
        //                var strwhere = new getViewBinbalanceViewModel();
        //                //GET Condition  From Plan GI
        //                #region query Plag Gi
        //                if (item.Owner_Index.ToString() != "")
        //                {
        //                    //SqlWhere += " And Convert(Nvarchar(200) ,Owner_Index) =  '" + item.Owner_Index.ToString() + "' ";
        //                    //SqlWhere += " And Owner_Index =  '" + item.Owner_Index + "' ";
        //                    strwhere.Owner_Index = item.Owner_Index;
        //                    planGIWaveResult3 = planGIWaveResult3.Where(c => c.Owner_Index == item.Owner_Index);
        //                }
        //                if (item.Product_Index.ToString() != "")
        //                {
        //                    //SqlWhere += " And Convert(Nvarchar(200) , Product_Index ) = '" + item.Product_Index.ToString() + "' ";
        //                    //SqlWhere += " And Product_Index  = '" + item.Product_Index + "' ";
        //                    strwhere.Product_Index = item.Product_Index;
        //                    planGIWaveResult3 = planGIWaveResult3.Where(c => c.Product_Index == item.Product_Index);
        //                }

        //                //if (item.Product_Lot != null)
        //                //{
        //                //    if (item.Product_Lot.ToString() != "")
        //                //    {
        //                //        //SqlWhere += " And Product_Lot = '" + item.Product_Lot.ToString() + "' ";
        //                //        strwhere.Product_Lot = item.Product_Lot;
        //                //        planGIWaveResult3 = planGIWaveResult3.Where(c => c.Product_Lot == item.Product_Lot);
        //                //    }
        //                //}
        //                if (item.ItemStatus_Index.ToString() != "")
        //                {
        //                    //SqlWhere += " And Convert(Nvarchar(200) ,ItemStatus_Index) =  '" + item.ItemStatus_Index.ToString() + "' ";
        //                    //SqlWhere += " And ItemStatus_Index =  '" + item.ItemStatus_Index + "' ";
        //                    strwhere.ItemStatus_Index = item.ItemStatus_Index;
        //                    planGIWaveResult3 = planGIWaveResult3.Where(c => c.ItemStatus_Index == item.ItemStatus_Index);
        //                }
        //                if (item.MFG_Date != null)
        //                {
        //                    if (item.MFG_Date.ToString() != "")
        //                    {
        //                        //strwhere.MFG_Date = item.MFG_Date;
        //                        // SqlWhere += " And MFG_Date = @MFG_Date ";
        //                    }
        //                }
        //                if (item.EXP_Date != null)
        //                {
        //                    if (item.EXP_Date.ToString() != "")
        //                    {
        //                        //strwhere.EXP_Date = item.EXP_Date;
        //                        //SqlWhere += " And EXP_Date = @EXP_Date ";
        //                    }
        //                }

        //                if (item.Product_Lot != null)
        //                {
        //                    if (item.Product_Lot.ToString() != "")
        //                    {
        //                        //strwhere.EXP_Date = item.EXP_Date;
        //                        strwhere.Product_Lot = item.Product_Lot;
        //                        planGIWaveResult3 = planGIWaveResult3.Where(c => c.Product_Lot == item.Product_Lot);
        //                    }
        //                }

        //                if (isUseAttribute == true)
        //                {
        //                    // ADD UDF 1-5 
        //                    strwhere.isUseAttribute = isUseAttribute;
        //                    if (item.UDF_1 != null)
        //                    {
        //                        //SqlWhere += " And Isnull(UDF_1,'') = '" + item.UDF_1.ToString() + "'";
        //                        strwhere.UDF_1 = item.UDF_1;
        //                        planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_1 == item.UDF_1);
        //                    }

        //                    if (item.UDF_2 != null)
        //                    {
        //                        //SqlWhere += " And  Isnull( UDF_2,'') = '" + item.UDF_2.ToString() + "'";
        //                        strwhere.UDF_2 = item.UDF_2;
        //                        planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_2 == item.UDF_2);
        //                    }

        //                    if (item.UDF_3 != null)
        //                    {
        //                        //SqlWhere += " And  Isnull(UDF_3,'') = '" + item.UDF_3.ToString() + "'";
        //                        strwhere.UDF_3 = item.UDF_3;
        //                        planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_3 == item.UDF_3);
        //                    }

        //                    if (item.UDF_4 != null)
        //                    {
        //                        //SqlWhere += " And  Isnull(UDF_4,'') = '" + item.UDF_4.ToString() + "'";
        //                        strwhere.UDF_4 = item.UDF_4;
        //                        planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_4 == item.UDF_4);
        //                    }

        //                    if (item.UDF_5 != null)
        //                    {
        //                        //SqlWhere += " And  Isnull(UDF_5,'') = '" + item.UDF_5.ToString() + "'";
        //                        strwhere.UDF_5 = item.UDF_5;
        //                        planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_5 == item.UDF_5);
        //                    }
        //                }
        //                #endregion

        //                //planGIWaveResult = planGIWaveResult.Where(setWhereSource);

        //                if (planGIWaveResult3.OrderBy(c => c.LineNum).ToList().Count < 1)
        //                {
        //                    continue;
        //                }
        //                #region update isuse and runwave status 20
        //                strwhere.isuse = model.goodsIssue_Index;
        //                var listDataBinbalance = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("updateIsuseViewBinbalance"), strwhere.sJson());
        //                if (listDataBinbalance)
        //                {

        //                    using (var db3 = new GIDbContext())
        //                    {
        //                        db3.Database.SetCommandTimeout(120);
        //                        var transaction = db3.Database.BeginTransaction(IsolationLevel.Serializable);
        //                        try
        //                        {
        //                            var GI = db3.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 10).ToList();
        //                            foreach (var g in GI)
        //                            {
        //                                g.RunWave_Status = 20;
        //                            }
        //                            db3.SaveChanges();
        //                            transaction.Commit();
        //                        }
        //                        catch (Exception exy)
        //                        {
        //                            msglog = State + " ex Rollback " + exy.Message.ToString();
        //                            olog.logging("runwave", msglog);
        //                            transaction.Rollback();
        //                            throw exy;
        //                        }
        //                    }
        //                }
        //                else
        //                {
        //                    throw new Exception("Update IsUse Error");
        //                }
        //                #endregion

        //                // Assign Qty for  wave Loop
        //                State = "planGIWaveResult3";
        //                olog.logging("runwave", State);
        //                strwhere.isuse = model.goodsIssue_Index;
        //                strwhere.isActive = true;
        //                int? WhereQtyBal = null;
        //                decimal? qty_Per_Tag = null;
        //                qty_Per_Tag = listDataProduct2.FirstOrDefault(c => c.product_Id == planGIWaveResult3.FirstOrDefault().Product_Id).qty_Per_Tag;

        //                if (waveRule.rule_Name.ToUpper() == "FULL")
        //                {
        //                    strwhere.qtyPreTag = listDataProduct2.FirstOrDefault(c => c.product_Id == planGIWaveResult3.FirstOrDefault().Product_Id).qty_Per_Tag;
        //                    WhereQtyBal = Convert.ToInt16(Math.Floor((planGIWaveResult3.Sum(s => s.TotalQty) ?? 0) / (qty_Per_Tag ?? 1)));
        //                    var chkFull = CraterGILBy_Binbalance(WhereQtyBal, qty_Per_Tag, strwhere, listDataProduct2, model, getViewWaveTemplate.ToList(), planGIWaveResult3.ToList(), listDataLocation2);
        //                    #region update isuse = '' and runwave 50
        //                    strwhere.isActive = true;
        //                    State = "region update isuse = '' and runwave 50 1";
        //                    var updateIsuseViewBinbalance2 = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("updateIsuseViewBinbalance"), strwhere.sJson());
        //                    if (updateIsuseViewBinbalance2)
        //                    {

        //                        using (var db5 = new GIDbContext())
        //                        {
        //                            db5.Database.SetCommandTimeout(120);
        //                            var transaction = db5.Database.BeginTransaction(IsolationLevel.Serializable);
        //                            try
        //                            {
        //                                var GI = db5.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 40).ToList();
        //                                foreach (var g in GI)
        //                                {
        //                                    g.RunWave_Status = 50;
        //                                }
        //                                db5.SaveChanges();
        //                                transaction.Commit();
        //                            }
        //                            catch (Exception exy)
        //                            {
        //                                msglog = State + " ex Rollback " + exy.Message.ToString();
        //                                olog.logging("runwave", msglog);
        //                                transaction.Rollback();
        //                                throw exy;
        //                            }
        //                        }
        //                    }
        //                    else
        //                    {
        //                        throw new Exception("Update IsUse By Error");
        //                    }
        //                    #endregion
        //                    continue;
        //                    //if (chkFull)
        //                    //{
        //                    //    continue;
        //                    //}
        //                    //else
        //                    //{
        //                    //    var resultFull = new actionResultRunWaveV2ViewModelViewModel();
        //                    //    resultFull.resultIsUse = false;
        //                    //    resultFull.resultMsg = "Error Full";
        //                    //    return result;
        //                    //}
        //                }

        //                decimal? QtyPlanGIRemian = 0;
        //                //     foreach (var itemPlanGI in planGIWaveResult3.OrderBy(c => c.LineNum).ThenBy(d => d.DocumentPriority_Status))
        //                foreach (var itemPlanGI in planGIWaveResult3.OrderBy(c => c.LineNum))
        //                {

        //                    if (itemPlanGI.ModPlanGI == 0)
        //                    {
        //                        IsPA = 0;

        //                    }
        //                    else
        //                    {
        //                        IsPA = 1;
        //                    }



        //                    //listDataProduct2



        //                    State = "listDataProduct2.ToList()";
        //                    olog.logging("runwave", State);
        //                    var listProducttote = listDataProduct2.Where(c => c.product_Index == itemPlanGI.Product_Index).ToList();
        //                    if (listProducttote != null)
        //                    {
        //                        var checkProduct = listProducttote.Where(c => c.product_Index == itemPlanGI.Product_Index).FirstOrDefault();


        //                        if (checkProduct.Ref_No1 == "carton flow rack")
        //                        {
        //                            IsTote = true;

        //                        }
        //                        else
        //                        {
        //                            IsTote = false;

        //                        }

        //                    }
        //                    else
        //                    {
        //                        IsTote = false;
        //                    }


        //                    var ListGoodsIssueItemLocation = new List<im_GoodsIssueItemLocation>();
        //                    if (itemPlanGI.Product_Id == "1004492")
        //                    {
        //                        var lnum = itemPlanGI.LineNum;

        //                    }

        //                    QtyPlanGIRemian = itemPlanGI.TotalQty - itemPlanGI.GITotalQty;
        //                    if (QtyPlanGIRemian <= 0)
        //                    {
        //                        break;
        //                    }
        //                    //chkBinCardReserve = GIL

        //                    //}

        //                    #region view_waveBinbalance2
        //                    //strwhere.isuse = model.goodsIssue_Index;
        //                    //strwhere.isActive = true;
        //                    State = "getViewBinbalanceapi";
        //                    olog.logging("runwave", State);

        //                    var listDataBinbalance2 = utils.SendDataApi<List<BinBalanceViewModel>>(new AppSettingConfig().GetUrl("getViewBinbalance"), strwhere.sJson());

        //                    var checklistDataBinbalance2 = listDataBinbalance2.ToList();


        //                    // get All Product Lot Status not Wave
        //                    //  var listAll_Lot = db.View_WaveCheckProductLot.ToList();

        //                    // get Lot In Plan GI
        //                    //    var listLot_In_PlanGI = listAll_Lot.Where(c => ListPlanGi_Index.Contains(c.PlanGoodsIssue_Index)).ToList();

        //                    // get Lot In Plan GI  and Product
        //                    //var planGI_Lot = db.View_WaveCheckProductLot.Where(c => ListPlanGi_Index.Contains(c.PlanGoodsIssue_Index)).Select(s => new
        //                    //{
        //                    //    s.Product_Index
        //                    //    ,s.Product_Id
        //                    //    ,s.Product_Lot
        //                    //});
        //                    State = "View_WaveCheckProductLot";
        //                    olog.logging("runwave", State);

        //                    var ListLot = new List<String>();
        //                    var ListLotNotWave = new List<String>();
        //                    // get All Product Lot Status not Wave by Product
        //                    var listAll_Lot = db.View_WaveCheckProductLot.Where(c => c.Product_Index == itemPlanGI.Product_Index).ToList();

        //                    // get lot in plan gi amd product
        //                    var listLot_In_Product = listAll_Lot.Where(c => c.PlanGoodsIssue_Index == itemPlanGI.PlanGoodsIssue_Index && c.Product_Index == itemPlanGI.Product_Index).ToList();

        //                    if (listLot_In_Product.Count > 0)
        //                    {
        //                        foreach (var itemlot in listLot_In_Product)
        //                        {
        //                            ListLot.Add(item.Product_Lot);
        //                        }
        //                    }

        //                    var listLot_NotIN_Wave = listAll_Lot.Where(c => !ListLot.Contains(c.Product_Lot)).ToList();


        //                    if (listLot_NotIN_Wave.Count > 0)
        //                    {
        //                        foreach (var itemlot in listLot_NotIN_Wave)
        //                        {
        //                            ListLotNotWave.Add(itemlot.Product_Lot);
        //                        }
        //                    }

        //                    State = "getView_WaveBinBalance2";
        //                    olog.logging("runwave", State);
        //                    var GIDate = model.goodsIssue_Date.toDate();
        //                    var View_WaveBinBalance2 = (from BB in listDataBinbalance2
        //                                                join LC in listDataLocation2 on BB.location_Index equals LC.location_Index into gj
        //                                                from L in gj.DefaultIfEmpty()
        //                                                join Prd in listDataProduct2 on BB.product_Index equals Prd.product_Index
        //                                                where (BB.goodsReceive_EXP_Date != null ? BB.goodsReceive_EXP_Date.sParse<DateTime>().Subtract(DateTime.Now.AddDays(-1)).Days : 1) > (Prd.ProductShelfLife_D ?? 0)
        //                                                && !(L?.locationType_Index == Guid.Parse("14C5F85D-137D-470E-8C70-C1E535005DC3")
        //                                                    || L?.locationType_Index == Guid.Parse("2E9338D3-0931-4E36-B240-782BF9508641")
        //                                                    || L?.locationType_Index == Guid.Parse("65A2D25D-5520-47D3-8776-AE064D909285")
        //                                                    || L?.locationType_Index == Guid.Parse("94D86CEA-3D04-4304-9E97-28E954F03C35")
        //                                                    || L?.locationType_Index == Guid.Parse("64341969-E596-4B8B-8836-395061777490")
        //                                                    || L?.locationType_Index == Guid.Parse("6A1FB140-CC78-4C2B-BEC8-42B2D0AE62E9")
        //                                                    || L?.locationType_Index == Guid.Parse("F9EDDAEC-A893-4F63-A700-526C69CC0774")
        //                                                    || L?.locationType_Index == Guid.Parse("A1F7BFA0-1429-4010-863D-6A0EB01DB61D")
        //                                                    || L?.locationType_Index == Guid.Parse("472E5117-3A7A-4C23-B8C2-7FEA55B3E69C")
        //                                                    || L?.locationType_Index == Guid.Parse("7D30298A-8BA0-47ED-8342-E3F953E11D8C")
        //                                                    || L?.locationType_Index == Guid.Parse("A706D789-F5C9-41A6-BEC7-E57034DFC166")
        //                                                    || L?.locationType_Index == Guid.Parse("E4310B71-D6A7-4FF6-B4A8-EACBDFADAFFC")
        //                                                    || L?.locationType_Index == Guid.Parse("D4DFC92C-C5DC-4397-BF87-FEEEB579C0AF")
        //                                                    || L?.locationType_Index == Guid.Parse("3a7d807a-9f2c-4215-8703-f51846bcc4bd")
        //                                                    || L?.locationType_Index == Guid.Parse("DEA384FD-3EEF-49A2-A88C-04ABA5C114A7")
        //                                                    || L?.locationType_Index == Guid.Parse("8A545442-77A3-43A4-939A-6B9102DFE8C6")  // Replen
        //                                                    || L?.locationType_Index == Guid.Parse("1D2DF268-F004-4820-831F-B823FF9C7564")
        //                                                    || L?.locationType_Index == Guid.Parse("DEA384FD-3EEF-49A2-A88C-04ABA5C114A7")
        //                                                 //   || L?.locationType_Index == Guid.Parse("48F83BB5-7807-4B32-9E3C-74962CEF92E8") //LBL
        //                                                 //

        //                                                 //   || L?.locationType_Index == Guid.Parse("E77778D2-7A8E-448D-BA31-CD35FD938FC3")   // PA
        //                                                 //|| L?.locationType_Index == Guid.Parse("7F3E1BC2-F18B-4B16-80A9-2394EB8BBE63")   // VC
        //                                                 //|| L?.locationType_Index == Guid.Parse("E4F856EA-9685-45A4-995C-C05FF9E499C4")   // Partial

        //                                                 //

        //                                                 )


        //                                                // && (waveRule.rule_Name.ToUpper() == "PATIAL" ? (BB.binBalance_QtyBal - BB.binBalance_QtyReserve) < qty_Per_Tag : BB.binBalance_QtyBal > 0)
        //                                                && !(ListLotNotWave.Contains(BB.product_Lot))
        //                                                //  && waveRule.rule_Name.ToUpper() == "PATIAL"
        //                                                && (BB.binBalance_QtyBal) > 0
        //                                                && (BB.binBalance_QtyReserve) >= 0
        //                                                && (L?.BlockPick ?? 0) != 1
        //                                                //  && (BB?.product_Lot ?? "") == itemPlanGI.Product_Lot
        //                                                && BB.goodsReceive_Date.Date <= GIDate.Value.Date
        //                                                && (string.IsNullOrEmpty(itemPlanGI.ERP_Location) ? (BB.erp_Location ?? "") == "" : BB.erp_Location == itemPlanGI.ERP_Location)
        //                                                select new View_WaveBinBalanceViewModel_Ace
        //                                                {
        //                                                    binBalance_Index = BB.binBalance_Index.ToString(),
        //                                                    owner_Index = BB.owner_Index.ToString(),
        //                                                    owner_Id = BB.owner_Id,
        //                                                    owner_Name = BB.owner_Name,
        //                                                    location_Index = BB.location_Index.ToString(),
        //                                                    location_Id = BB.location_Id,
        //                                                    location_Name = BB.location_Name,
        //                                                    goodsReceive_Index = BB.goodsReceive_Index.ToString(),
        //                                                    goodsReceive_No = BB.goodsReceive_No,
        //                                                    goodsReceive_Date = BB.goodsReceive_Date,
        //                                                    goodsReceiveItem_Index = BB.goodsReceiveItem_Index.ToString(),
        //                                                    goodsReceiveItemLocation_Index = BB.goodsReceiveItemLocation_Index.ToString(),
        //                                                    tagItem_Index = BB.tagItem_Index.ToString(),
        //                                                    tag_Index = BB.tag_Index.ToString(),
        //                                                    tag_No = BB.tag_No,
        //                                                    product_Index = BB.product_Index.ToString(),
        //                                                    product_Id = BB.product_Id,
        //                                                    product_Name = BB.product_Name,
        //                                                    product_SecondName = BB.product_SecondName,
        //                                                    product_ThirdName = BB.product_ThirdName,
        //                                                    product_Lot = BB.product_Lot,
        //                                                    itemStatus_Index = BB.itemStatus_Index.ToString(),
        //                                                    itemStatus_Id = BB.itemStatus_Id,
        //                                                    itemStatus_Name = BB.itemStatus_Name,
        //                                                    goodsReceive_MFG_Date = BB.goodsReceive_MFG_Date.ToString(),
        //                                                    goodsReceive_EXP_Date = BB.goodsReceive_EXP_Date.ToString(),
        //                                                    goodsReceive_ProductConversion_Index = BB.goodsReceive_ProductConversion_Index.ToString(),
        //                                                    goodsReceive_ProductConversion_Id = BB.goodsReceive_ProductConversion_Id.ToString(),
        //                                                    goodsReceive_ProductConversion_Name = BB.goodsReceive_ProductConversion_Name.ToString(),


        //                                                    binBalance_Ratio = BB.binBalance_Ratio,
        //                                                    binBalance_QtyBegin = BB.binBalance_QtyBegin,
        //                                                    binBalance_WeightBegin = BB.binBalance_WeightBegin,
        //                                                    binBalance_WeightBegin_Index = BB.binBalance_WeightBegin_Index,
        //                                                    binBalance_WeightBegin_Id = BB.binBalance_WeightBegin_Id,
        //                                                    binBalance_WeightBegin_Name = BB.binBalance_WeightBegin_Name,
        //                                                    binBalance_WeightBeginRatio = BB.binBalance_WeightBeginRatio,
        //                                                    binBalance_NetWeightBegin = BB.binBalance_NetWeightBegin,
        //                                                    binBalance_NetWeightBegin_Index = BB.binBalance_NetWeightBegin_Index,
        //                                                    binBalance_NetWeightBegin_Id = BB.binBalance_NetWeightBegin_Id,
        //                                                    binBalance_NetWeightBegin_Name = BB.binBalance_NetWeightBegin_Name,
        //                                                    binBalance_NetWeightBeginRatio = BB.binBalance_NetWeightBeginRatio,
        //                                                    binBalance_GrsWeightBegin = BB.binBalance_GrsWeightBegin,
        //                                                    binBalance_GrsWeightBegin_Index = BB.binBalance_GrsWeightBegin_Index,
        //                                                    binBalance_GrsWeightBegin_Id = BB.binBalance_GrsWeightBegin_Id,
        //                                                    binBalance_GrsWeightBegin_Name = BB.binBalance_GrsWeightBegin_Name,
        //                                                    binBalance_GrsWeightBeginRatio = BB.binBalance_GrsWeightBeginRatio,
        //                                                    binBalance_WidthBegin = BB.binBalance_WidthBegin,
        //                                                    binBalance_WidthBegin_Index = BB.binBalance_WidthBegin_Index,
        //                                                    binBalance_WidthBegin_Id = BB.binBalance_WidthBegin_Id,
        //                                                    binBalance_WidthBegin_Name = BB.binBalance_WidthBegin_Name,
        //                                                    binBalance_WidthBeginRatio = BB.binBalance_WidthBeginRatio,
        //                                                    binBalance_LengthBegin = BB.binBalance_LengthBegin,
        //                                                    binBalance_LengthBegin_Index = BB.binBalance_LengthBegin_Index,
        //                                                    binBalance_LengthBegin_Id = BB.binBalance_LengthBegin_Id,
        //                                                    binBalance_LengthBegin_Name = BB.binBalance_LengthBegin_Name,
        //                                                    binBalance_LengthBeginRatio = BB.binBalance_LengthBeginRatio,
        //                                                    binBalance_HeightBegin = BB.binBalance_HeightBegin,
        //                                                    binBalance_HeightBegin_Index = BB.binBalance_HeightBegin_Index,
        //                                                    binBalance_HeightBegin_Id = BB.binBalance_HeightBegin_Id,
        //                                                    binBalance_HeightBegin_Name = BB.binBalance_HeightBegin_Name,
        //                                                    binBalance_HeightBeginRatio = BB.binBalance_HeightBeginRatio,
        //                                                    binBalance_UnitVolumeBegin = BB.binBalance_UnitVolumeBegin,
        //                                                    binBalance_VolumeBegin = BB.binBalance_VolumeBegin,
        //                                                    binBalance_QtyBal = BB.binBalance_QtyBal,
        //                                                    binBalance_UnitWeightBal = BB.binBalance_UnitWeightBal,
        //                                                    binBalance_UnitWeightBal_Index = BB.binBalance_UnitWeightBal_Index,
        //                                                    binBalance_UnitWeightBal_Id = BB.binBalance_UnitWeightBal_Id,
        //                                                    binBalance_UnitWeightBal_Name = BB.binBalance_UnitWeightBal_Name,
        //                                                    binBalance_UnitWeightBalRatio = BB.binBalance_UnitWeightBalRatio,
        //                                                    binBalance_WeightBal = BB.binBalance_WeightBal,
        //                                                    binBalance_WeightBal_Index = BB.binBalance_WeightBal_Index,
        //                                                    binBalance_WeightBal_Id = BB.binBalance_WeightBal_Id,
        //                                                    binBalance_WeightBal_Name = BB.binBalance_WeightBal_Name,
        //                                                    binBalance_WeightBalRatio = BB.binBalance_WeightBalRatio,
        //                                                    binBalance_UnitNetWeightBal = BB.binBalance_UnitNetWeightBal,
        //                                                    binBalance_UnitNetWeightBal_Index = BB.binBalance_UnitNetWeightBal_Index,
        //                                                    binBalance_UnitNetWeightBal_Id = BB.binBalance_UnitNetWeightBal_Id,
        //                                                    binBalance_UnitNetWeightBal_Name = BB.binBalance_UnitNetWeightBal_Name,
        //                                                    binBalance_UnitNetWeightBalRatio = BB.binBalance_UnitNetWeightBalRatio,
        //                                                    binBalance_NetWeightBal = BB.binBalance_NetWeightBal,
        //                                                    binBalance_NetWeightBal_Index = BB.binBalance_NetWeightBal_Index,
        //                                                    binBalance_NetWeightBal_Id = BB.binBalance_NetWeightBal_Id,
        //                                                    binBalance_NetWeightBal_Name = BB.binBalance_NetWeightBal_Name,
        //                                                    binBalance_NetWeightBalRatio = BB.binBalance_NetWeightBalRatio,
        //                                                    binBalance_UnitGrsWeightBal = BB.binBalance_UnitGrsWeightBal,
        //                                                    binBalance_UnitGrsWeightBal_Index = BB.binBalance_UnitGrsWeightBal_Index,
        //                                                    binBalance_UnitGrsWeightBal_Id = BB.binBalance_UnitGrsWeightBal_Id,
        //                                                    binBalance_UnitGrsWeightBal_Name = BB.binBalance_UnitGrsWeightBal_Name,
        //                                                    binBalance_UnitGrsWeightBalRatio = BB.binBalance_UnitGrsWeightBalRatio,
        //                                                    binBalance_GrsWeightBal = BB.binBalance_GrsWeightBal,
        //                                                    binBalance_GrsWeightBal_Index = BB.binBalance_GrsWeightBal_Index,
        //                                                    binBalance_GrsWeightBal_Id = BB.binBalance_GrsWeightBal_Id,
        //                                                    binBalance_GrsWeightBal_Name = BB.binBalance_GrsWeightBal_Name,
        //                                                    binBalance_GrsWeightBalRatio = BB.binBalance_GrsWeightBalRatio,
        //                                                    binBalance_UnitWidthBal = BB.binBalance_UnitWidthBal,
        //                                                    binBalance_UnitWidthBal_Index = BB.binBalance_UnitWidthBal_Index,
        //                                                    binBalance_UnitWidthBal_Id = BB.binBalance_UnitWidthBal_Id,
        //                                                    binBalance_UnitWidthBal_Name = BB.binBalance_UnitWidthBal_Name,
        //                                                    binBalance_UnitWidthBalRatio = BB.binBalance_UnitWidthBalRatio,
        //                                                    binBalance_WidthBal = BB.binBalance_WidthBal,
        //                                                    binBalance_WidthBal_Index = BB.binBalance_WidthBal_Index,
        //                                                    binBalance_WidthBal_Id = BB.binBalance_WidthBal_Id,
        //                                                    binBalance_WidthBal_Name = BB.binBalance_WidthBal_Name,
        //                                                    binBalance_WidthBalRatio = BB.binBalance_WidthBalRatio,
        //                                                    binBalance_UnitLengthBal = BB.binBalance_UnitLengthBal,
        //                                                    binBalance_UnitLengthBal_Index = BB.binBalance_UnitLengthBal_Index,
        //                                                    binBalance_UnitLengthBal_Id = BB.binBalance_UnitLengthBal_Id,
        //                                                    binBalance_UnitLengthBal_Name = BB.binBalance_UnitLengthBal_Name,
        //                                                    binBalance_UnitLengthBalRatio = BB.binBalance_UnitLengthBalRatio,
        //                                                    binBalance_LengthBal = BB.binBalance_LengthBal,
        //                                                    binBalance_LengthBal_Index = BB.binBalance_LengthBal_Index,
        //                                                    binBalance_LengthBal_Id = BB.binBalance_LengthBal_Id,
        //                                                    binBalance_LengthBal_Name = BB.binBalance_LengthBal_Name,
        //                                                    binBalance_LengthBalRatio = BB.binBalance_LengthBalRatio,
        //                                                    binBalance_UnitHeightBal = BB.binBalance_UnitHeightBal,
        //                                                    binBalance_UnitHeightBal_Index = BB.binBalance_UnitHeightBal_Index,
        //                                                    binBalance_UnitHeightBal_Id = BB.binBalance_UnitHeightBal_Id,
        //                                                    binBalance_UnitHeightBal_Name = BB.binBalance_UnitHeightBal_Name,
        //                                                    binBalance_UnitHeightBalRatio = BB.binBalance_UnitHeightBalRatio,
        //                                                    binBalance_HeightBal = BB.binBalance_HeightBal,
        //                                                    binBalance_HeightBal_Index = BB.binBalance_HeightBal_Index,
        //                                                    binBalance_HeightBal_Id = BB.binBalance_HeightBal_Id,
        //                                                    binBalance_HeightBal_Name = BB.binBalance_HeightBal_Name,
        //                                                    binBalance_HeightBalRatio = BB.binBalance_HeightBalRatio,
        //                                                    binBalance_UnitVolumeBal = BB.binBalance_UnitVolumeBal,
        //                                                    binBalance_VolumeBal = BB.binBalance_VolumeBal,
        //                                                    binBalance_QtyReserve = BB.binBalance_QtyReserve,
        //                                                    binBalance_WeightReserve = BB.binBalance_WeightReserve,
        //                                                    binBalance_WeightReserve_Index = BB.binBalance_WeightReserve_Index,
        //                                                    binBalance_WeightReserve_Id = BB.binBalance_WeightReserve_Id,
        //                                                    binBalance_WeightReserve_Name = BB.binBalance_WeightReserve_Name,
        //                                                    binBalance_WeightReserveRatio = BB.binBalance_WeightReserveRatio,
        //                                                    binBalance_NetWeightReserve = BB.binBalance_NetWeightReserve,
        //                                                    binBalance_NetWeightReserve_Index = BB.binBalance_NetWeightReserve_Index,
        //                                                    binBalance_NetWeightReserve_Id = BB.binBalance_NetWeightReserve_Id,
        //                                                    binBalance_NetWeightReserve_Name = BB.binBalance_NetWeightReserve_Name,
        //                                                    binBalance_NetWeightReserveRatio = BB.binBalance_NetWeightReserveRatio,
        //                                                    binBalance_GrsWeightReserve = BB.binBalance_GrsWeightReserve,
        //                                                    binBalance_GrsWeightReserve_Index = BB.binBalance_GrsWeightReserve_Index,
        //                                                    binBalance_GrsWeightReserve_Id = BB.binBalance_GrsWeightReserve_Id,
        //                                                    binBalance_GrsWeightReserve_Name = BB.binBalance_GrsWeightReserve_Name,
        //                                                    binBalance_GrsWeightReserveRatio = BB.binBalance_GrsWeightReserveRatio,
        //                                                    binBalance_WidthReserve = BB.binBalance_WidthReserve,
        //                                                    binBalance_WidthReserve_Index = BB.binBalance_WidthReserve_Index,
        //                                                    binBalance_WidthReserve_Id = BB.binBalance_WidthReserve_Id,
        //                                                    binBalance_WidthReserve_Name = BB.binBalance_WidthReserve_Name,
        //                                                    binBalance_WidthReserveRatio = BB.binBalance_WidthReserveRatio,
        //                                                    binBalance_LengthReserve = BB.binBalance_LengthReserve,
        //                                                    binBalance_LengthReserve_Index = BB.binBalance_LengthReserve_Index,
        //                                                    binBalance_LengthReserve_Id = BB.binBalance_LengthReserve_Id,
        //                                                    binBalance_LengthReserve_Name = BB.binBalance_LengthReserve_Name,
        //                                                    binBalance_LengthReserveRatio = BB.binBalance_LengthReserveRatio,
        //                                                    binBalance_HeightReserve = BB.binBalance_HeightReserve,
        //                                                    binBalance_HeightReserve_Index = BB.binBalance_HeightReserve_Index,
        //                                                    binBalance_HeightReserve_Id = BB.binBalance_HeightReserve_Id,
        //                                                    binBalance_HeightReserve_Name = BB.binBalance_HeightReserve_Name,
        //                                                    binBalance_HeightReserveRatio = BB.binBalance_HeightReserveRatio,
        //                                                    binBalance_UnitVolumeReserve = BB.binBalance_UnitVolumeReserve,
        //                                                    binBalance_VolumeReserve = BB.binBalance_VolumeReserve,


        //                                                    productConversion_Index = BB.productConversion_Index.ToString(),
        //                                                    productConversion_Id = BB.productConversion_Id,
        //                                                    productConversion_Name = BB.productConversion_Name,

        //                                                    unitPrice = BB.unitPrice,
        //                                                    unitPrice_Index = BB.unitPrice_Index,
        //                                                    unitPrice_Id = BB.unitPrice_Id,
        //                                                    unitPrice_Name = BB.unitPrice_Name,
        //                                                    price = BB.price,
        //                                                    price_Index = BB.price_Index,
        //                                                    price_Id = BB.price_Id,
        //                                                    price_Name = BB.price_Name,

        //                                                    udf_1 = BB.uDF_1,
        //                                                    udf_2 = BB.uDF_2,
        //                                                    udf_3 = BB.uDF_3,
        //                                                    udf_4 = BB.uDF_4,
        //                                                    udf_5 = BB.uDF_5,
        //                                                    create_By = BB.create_By,
        //                                                    create_Date = BB.create_Date.ToString(),
        //                                                    update_By = BB.update_By,
        //                                                    update_Date = BB.update_Date.ToString(),
        //                                                    cancel_By = BB.cancel_By,
        //                                                    cancel_Date = BB.cancel_Date.ToString(),
        //                                                    isUse = BB.isUse,
        //                                                    binBalance_Status = BB.binBalance_Status,
        //                                                    picking_Seq = L?.picking_Seq,
        //                                                    ageRemain = BB.ageRemain,

        //                                                    invoice_No = BB.invoice_No,
        //                                                    declaration_No = BB.declaration_No,
        //                                                    hs_Code = BB.hs_Code,
        //                                                    conutry_of_Origin = BB.conutry_of_Origin,
        //                                                    tax1 = BB.tax1,
        //                                                    tax1_Currency_Index = BB.tax1_Currency_Index,
        //                                                    tax1_Currency_Id = BB.tax1_Currency_Id,
        //                                                    tax1_Currency_Name = BB.tax1_Currency_Name,
        //                                                    tax2 = BB.tax2,
        //                                                    tax2_Currency_Index = BB.tax2_Currency_Index,
        //                                                    tax2_Currency_Id = BB.tax2_Currency_Id,
        //                                                    tax2_Currency_Name = BB.tax2_Currency_Name,
        //                                                    tax3 = BB.tax3,
        //                                                    tax3_Currency_Index = BB.tax3_Currency_Index,
        //                                                    tax3_Currency_Id = BB.tax3_Currency_Id,
        //                                                    tax3_Currency_Name = BB.tax3_Currency_Name,
        //                                                    tax4 = BB.tax4,
        //                                                    tax4_Currency_Index = BB.tax4_Currency_Index,
        //                                                    tax4_Currency_Id = BB.tax4_Currency_Id,
        //                                                    tax4_Currency_Name = BB.tax4_Currency_Name,
        //                                                    tax5 = BB.tax5,
        //                                                    tax5_Currency_Index = BB.tax5_Currency_Index,
        //                                                    tax5_Currency_Id = BB.tax5_Currency_Id,
        //                                                    tax5_Currency_Name = BB.tax5_Currency_Name,

        //                                                    erp_Location = BB.erp_Location,
        //                                                    location_Bay = L.location_Bay != null ? L.location_Bay : 1,
        //                                                    productShelfLife_D = Prd.ProductShelfLife_D != null ? Prd.ProductShelfLife_D : 0,
        //                                                }).AsQueryable();


        //                    #endregion

        //                    var CheckBinBalanceResult = View_WaveBinBalance2.ToList();


        //                    #region for RuleDesSort
        //                    //var RuleDesList2 = getViewWaveTemplate.Where(c => c.isDestination == 1 && c.isSearch == 1).ToList();

        //                    ////var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>(e, param);

        //                    //foreach (var itemRuleDesList in RuleDesList2)
        //                    //{
        //                    //    if (itemRuleDesList.ruleConditionOperation == "IN")
        //                    //    {
        //                    //        if (itemRuleDesList.ruleConditionField_Name == "Zone_Id")
        //                    //        {
        //                    //            //setWhereDes += " And  Location_Index   in (  select   Location_Index  from ms_ZoneLocation   where  IsDelete <> -1 and Zone_Index  in (select Zone_Index from ms_Zone where IsDelete <> -1 and " + itemRuleDesList.ruleConditionField_Name + " IN (" + itemRuleDesList.ruleCondition_Param + " )" + ")) ";
        //                    //            var listDataZoneLocation = utils.SendDataApi<List<ZoneLocationViewModel>>(new AppSettingConfig().GetUrl("getZoneLocationMaster"), new { }.sJson());
        //                    //            var listDataZone = utils.SendDataApi<List<ZoneViewModel>>(new AppSettingConfig().GetUrl("getZoneMaster"), new { }.sJson());

        //                    //            //var param = Expression.Parameter(typeof(ZoneViewModel), "x");
        //                    //            //var predicate = Expression.Lambda<Func<ZoneViewModel, bool>>(
        //                    //            //    Expression.Call(
        //                    //            //        Expression.PropertyOrField(param, itemRuleDesList.ruleConditionField_Name),
        //                    //            //        "Contains", null, Expression.Constant(itemRuleDesList.ruleCondition_Param)
        //                    //            //    ), param);
        //                    //            var dataarray = itemRuleDesList.ruleCondition_Param.Replace("'", "").Split(',');
        //                    //            var dataZone = listDataZone.Where(c => dataarray.Contains(c.zone_Id)).ToList();
        //                    //            var zoneArray = new List<Guid?>();
        //                    //            foreach (var z in dataZone)
        //                    //            {
        //                    //                zoneArray.Add(z.zone_Index);
        //                    //            }
        //                    //            var listLocation_index = listDataZoneLocation.Where(c => zoneArray.Contains(c.zone_Index)).Select(s => s.location_Index.ToString()).ToList();
        //                    //            View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => listLocation_index.Contains(c.location_Index));
        //                    //        }
        //                    //        else
        //                    //        {
        //                    //            var dataarray = itemRuleDesList.ruleCondition_Param.Replace("'", "").Split(',');
        //                    //            if (itemRuleDesList.ruleConditionField_Name == "GoodsReceive_Date")
        //                    //            {
        //                    //                View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.goodsReceive_Date));
        //                    //            }
        //                    //            if (itemRuleDesList.ruleConditionField_Name == "GoodsReceive_No")
        //                    //            {
        //                    //                View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.goodsReceive_No));
        //                    //            }
        //                    //            if (itemRuleDesList.ruleConditionField_Name == "ItemStatus_Id")
        //                    //            {
        //                    //                View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.itemStatus_Id));
        //                    //            }
        //                    //            if (itemRuleDesList.ruleConditionField_Name == "Location_Name")
        //                    //            {
        //                    //                View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.location_Name));
        //                    //            }
        //                    //            if (itemRuleDesList.ruleConditionField_Name == "Locationtype_Id")
        //                    //            {
        //                    //                //View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.location));
        //                    //            }
        //                    //            if (itemRuleDesList.ruleConditionField_Name == "Product_Id")
        //                    //            {
        //                    //                View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.product_Id));
        //                    //            }
        //                    //            if (itemRuleDesList.ruleConditionField_Name == "Product_Lot")
        //                    //            {
        //                    //                View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.product_Lot));
        //                    //            }
        //                    //            if (itemRuleDesList.ruleConditionField_Name == "Warehouse")
        //                    //            {
        //                    //                //planGIWaveResult = planGIWaveResult.Where(c => dataarray.Contains(c.Warehouse));
        //                    //            }

        //                    //            //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " IN (" + itemRuleDesList.ruleCondition_Param + ") ";
        //                    //            //var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
        //                    //            //var predicate = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>(
        //                    //            //    Expression.Call(
        //                    //            //        Expression.PropertyOrField(param, itemRuleDesList.ruleConditionField_Name),
        //                    //            //        "Contains", null, Expression.Constant(itemRuleDesList.ruleCondition_Param)
        //                    //            //    ), param);
        //                    //            //View_WaveBinBalance = View_WaveBinBalance.Where(predicate);
        //                    //        }
        //                    //    }
        //                    //    else if (itemRuleDesList.ruleConditionOperation == "=")
        //                    //    {
        //                    //        if (itemRuleDesList.ruleConditionField_Name == "Zone_Id")
        //                    //        {
        //                    //            //setWhereDes += "  And  Location_Index   in (  select   Location_Index  from ms_ZoneLocation   where IsDelete <> -1 and Zone_Index  in (select Zone_Index from ms_Zone where IsDelete <> -1 and " + itemRuleDesList.ruleConditionField_Name + " = '" + itemRuleDesList.ruleCondition_Param + "' " + ")) ";
        //                    //            var listDataZoneLocation = utils.SendDataApi<List<ZoneLocationViewModel>>(new AppSettingConfig().GetUrl("getZoneLocationMaster"), new { }.sJson());
        //                    //            var listDataZone = utils.SendDataApi<List<ZoneViewModel>>(new AppSettingConfig().GetUrl("getZoneMaster"), new { }.sJson());

        //                    //            var param = Expression.Parameter(typeof(ZoneViewModel), "x");
        //                    //            var lambda = Expression.Lambda<Func<ZoneViewModel, bool>>((Expression)Expression.Equal(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
        //                    //                , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                    //            var dataZone = listDataZone.AsQueryable().Where(lambda).ToList();
        //                    //            var zoneArray = new List<Guid?>();
        //                    //            foreach (var z in dataZone)
        //                    //            {
        //                    //                zoneArray.Add(z.zone_Index);
        //                    //            }
        //                    //            var listLocation_index = listDataZoneLocation.Where(c => zoneArray.Contains(c.zone_Index)).Select(s => s.location_Index.ToString()).ToList();
        //                    //            View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => listLocation_index.Contains(c.location_Index));
        //                    //        }
        //                    //        else
        //                    //        {
        //                    //            //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " = '" + itemRuleDesList.ruleCondition_Param + "' ";
        //                    //            var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
        //                    //            var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.Equal(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
        //                    //                , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                    //            View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
        //                    //        }
        //                    //    }
        //                    //    else if (itemRuleDesList.ruleConditionOperation == ">")
        //                    //    {
        //                    //        //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " > '" + itemRuleDesList.ruleCondition_Param + "' ";
        //                    //        var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
        //                    //        var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.GreaterThan(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
        //                    //            , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                    //        View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
        //                    //    }
        //                    //    else if (itemRuleDesList.ruleConditionOperation == "<")
        //                    //    {
        //                    //        //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " < '" + itemRuleDesList.ruleCondition_Param + "' ";
        //                    //        var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
        //                    //        var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.LessThan(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
        //                    //            , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                    //        View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
        //                    //    }
        //                    //    else if (itemRuleDesList.ruleConditionOperation == "!=")
        //                    //    {
        //                    //        //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " != '" + itemRuleDesList.ruleCondition_Param + "' ";
        //                    //        var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
        //                    //        var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.NotEqual(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
        //                    //            , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                    //        View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
        //                    //    }
        //                    //    else if (itemRuleDesList.ruleConditionOperation == ">=")
        //                    //    {
        //                    //        //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " >= '" + itemRuleDesList.ruleCondition_Param + "' ";
        //                    //        var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
        //                    //        var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.GreaterThanOrEqual(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
        //                    //            , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                    //        View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
        //                    //    }
        //                    //    else if (itemRuleDesList.ruleConditionOperation == "<=")
        //                    //    {
        //                    //        //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " <= '" + itemRuleDesList.ruleCondition_Param + "' ";
        //                    //        var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
        //                    //        var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.LessThanOrEqual(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
        //                    //            , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                    //        View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
        //                    //    }
        //                    //    else if (itemRuleDesList.ruleConditionOperation == "Like")
        //                    //    {
        //                    //        //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " Like '" + itemRuleDesList.ruleCondition_Param + "' ";
        //                    //        var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
        //                    //        var predicate = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>(
        //                    //            Expression.Call(
        //                    //                Expression.PropertyOrField(param, itemRuleDesList.ruleConditionField_Name),
        //                    //                "Contains", null, Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""))
        //                    //            ), param);
        //                    //        View_WaveBinBalance2 = View_WaveBinBalance2.Where(predicate);
        //                    //    }
        //                    //    //setWhereDes += "";

        //                    //}
        //                    #endregion

        //                    #region for RuleDesSortList
        //                    //var RuleDesSortList2 = getViewWaveTemplate.Where(c => c.isDestination == 1 && c.isSort == 1).ToList();

        //                    //int iRowsDesSort2 = 0;
        //                    //foreach (var itemRuleDesSortList in RuleDesSortList2)
        //                    //{
        //                    //    if (iRowsDesSort2 == 0)
        //                    //    {
        //                    //        //setWhereDesSort += itemRuleDesSortList.ruleConditionField_Name + ' ' + itemRuleDesSortList.ruleCondition_Param;
        //                    //        var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
        //                    //        var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, string>>(Expression.Property(param, itemRuleDesSortList.ruleConditionField_Name), param);
        //                    //        if (itemRuleDesSortList.ruleCondition_Param.ToUpper() == "DESC")
        //                    //        {
        //                    //            View_WaveBinBalance2 = View_WaveBinBalance2.OrderByDescending(lambda);
        //                    //        }
        //                    //        else /*if (itemRuleDesSortList.ruleCondition_Param.ToUpper() == "DESC")*/
        //                    //        {
        //                    //            View_WaveBinBalance2 = View_WaveBinBalance2.OrderBy(lambda);
        //                    //        }
        //                    //    }
        //                    //    else
        //                    //    {
        //                    //        var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
        //                    //        var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, string>>(Expression.Property(param, itemRuleDesSortList.ruleConditionField_Name), param);
        //                    //        if (itemRuleDesSortList.ruleCondition_Param.ToUpper() == "DESC")
        //                    //        {
        //                    //            View_WaveBinBalance2 = View_WaveBinBalance2.OrderByDescending(lambda);
        //                    //        }
        //                    //        else /*if (itemRuleDesSortList.ruleCondition_Param.ToUpper() == "DESC")*/
        //                    //        {
        //                    //            View_WaveBinBalance2 = View_WaveBinBalance2.OrderBy(lambda);
        //                    //        }
        //                    //    }
        //                    //    iRowsDesSort2 = iRowsDesSort2 + 1;

        //                    //}
        //                    #endregion




        //                    State = "View_WaveBinBalance2";
        //                    olog.logging("runwave", State);
        //                    var BinBalanceResult = View_WaveBinBalance2.ToList();

        //                    //  foreach (var itemBin in BinBalanceResult.OrderBy(c => c.goodsReceive_EXP_Date).ThenBy(d => d.goodsReceive_Date).ThenBy(e => e.picking_Seq).ThenBy(f => f.location_Name))


        //                    var itemBinSort = new List<View_WaveBinBalanceViewModel_Ace>();


        //                    if (IsPA == 1 && IsTote == true)
        //                    {
        //                        //itemBinSort = BinBalanceResult.OrderBy(c => c.picking_Seq).ThenBy(f => f.location_Name).ThenBy(d => d.ageRemain).ThenBy(e => e.goodsReceive_Date).ToList();
        //                        itemBinSort = BinBalanceResult.OrderBy(c => c.picking_Seq).ThenBy(f => f.location_Bay).ThenBy(d => d.ageRemain).ThenBy(e => e.goodsReceive_Date).ThenBy(f => f.location_Name).ToList();

        //                    }
        //                    else if (IsPA == 0 && IsTote == true)
        //                    {
        //                        if (itemPlanGI.Product_Id == "1003531")
        //                        {
        //                            var A = "";
        //                        }
        //                        //itemBinSort = BinBalanceResult.OrderBy(c => c.picking_Seq).ThenByDescending(f => f.location_Name).ThenBy(d => d.ageRemain).ThenBy(e => e.goodsReceive_Date).ToList();
        //                        itemBinSort = BinBalanceResult.OrderBy(c => c.picking_Seq).ThenByDescending(f => f.location_Bay).ThenBy(d => d.ageRemain).ThenBy(e => e.goodsReceive_Date).ThenBy(f => f.location_Name).ToList();
        //                    }
        //                    else
        //                    {
        //                        itemBinSort = BinBalanceResult.OrderBy(c => c.picking_Seq).ThenBy(d => d.ageRemain).ThenBy(e => e.goodsReceive_Date).ThenBy(f => f.location_Name).ToList();

        //                    }



        //                    //  foreach (var itemBin in BinBalanceResult.OrderBy(c => c.picking_Seq).ThenBy(d => d.ageRemain).ThenBy(e => e.goodsReceive_Date).ThenBy(f => f.location_Name))
        //                    int icountloop = 0;
        //                    foreach (var itemBin in itemBinSort)
        //                    {
        //                        icountloop = icountloop + 1;

        //                        olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [" + icountloop.ToString() + "]  Product_Id " + itemBin.product_Id + " Bin_Index " + itemBin.binBalance_Index);

        //                        decimal? QtyBal = itemBin.binBalance_QtyBal - itemBin.binBalance_QtyReserve;


        //                        olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " :  QtyBal " + QtyBal.ToString() + " =  binBalance_QtyBal : " + itemBin.binBalance_QtyBal.ToString() + "  -  binBalance_QtyReserve  : " + itemBin.binBalance_QtyReserve.ToString());


        //                        if (QtyPlanGIRemian <= 0)
        //                        {
        //                            olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [QtyPlanGIRemian <= 0 ]  " + QtyPlanGIRemian.ToString());

        //                            break;
        //                        }
        //                        if (QtyBal <= 0)
        //                        {
        //                            olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [QtyBal <= 0 ]  " + QtyBal.ToString());
        //                            continue;
        //                        }


        //                        if (QtyPlanGIRemian >= QtyBal && QtyBal > 0)
        //                        {
        //                            State = "QtyPlanGIRemian >= QtyBal && QtyBal > 0";
        //                            olog.logging("runwave", State + " TAG_NO " + itemBin.tag_No + " Product_Id " + itemBin.product_Id + " Bin_Index " + itemBin.binBalance_Index);


        //                            olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [QtyPlanGIRemian >= QtyBal && QtyBal > 0]   QtyPlanGIRemian " + QtyPlanGIRemian.ToString() + "    QtyBal : " + QtyBal.ToString());



        //                            // Add GI ITEMLOCATION 
        //                            var GoodsIssueItemLocation = new im_GoodsIssueItemLocation();
        //                            GoodsIssueItemLocation.GoodsIssueItemLocation_Index = Guid.NewGuid();
        //                            GoodsIssueItemLocation.GoodsIssue_Index = new Guid(model.goodsIssue_Index);
        //                            GoodsIssueItemLocation.TagItem_Index = new Guid(itemBin.tagItem_Index);
        //                            GoodsIssueItemLocation.Tag_Index = new Guid(itemBin.tag_Index);
        //                            GoodsIssueItemLocation.Tag_No = itemBin.tag_No;
        //                            GoodsIssueItemLocation.Product_Index = new Guid(itemBin.product_Index);
        //                            GoodsIssueItemLocation.Product_Id = itemBin.product_Id;
        //                            GoodsIssueItemLocation.Product_Name = itemBin.product_Name;
        //                            GoodsIssueItemLocation.Product_SecondName = itemBin.product_SecondName;
        //                            GoodsIssueItemLocation.Product_ThirdName = itemBin.product_ThirdName;
        //                            GoodsIssueItemLocation.Product_Lot = itemBin.product_Lot;
        //                            GoodsIssueItemLocation.ItemStatus_Index = new Guid(itemBin.itemStatus_Index);
        //                            GoodsIssueItemLocation.ItemStatus_Id = itemBin.itemStatus_Id;
        //                            GoodsIssueItemLocation.ItemStatus_Name = itemBin.itemStatus_Name;
        //                            GoodsIssueItemLocation.Location_Index = new Guid(itemBin.location_Index);
        //                            GoodsIssueItemLocation.Location_Id = itemBin.location_Id;
        //                            GoodsIssueItemLocation.Location_Name = itemBin.location_Name;
        //                            GoodsIssueItemLocation.QtyPlan = (Decimal)itemPlanGI.TotalQtyRemian;
        //                            GoodsIssueItemLocation.Qty = (Decimal)QtyBal / (Decimal)itemPlanGI.Ratio;
        //                            GoodsIssueItemLocation.Ratio = (Decimal)itemPlanGI.Ratio;
        //                            GoodsIssueItemLocation.TotalQty = (Decimal)QtyBal;
        //                            //GoodsIssueItemLocation.ProductConversion_Index = new Guid(itemBin.productConversion_Index);
        //                            //GoodsIssueItemLocation.ProductConversion_Id = itemBin.productConversion_Id;
        //                            //GoodsIssueItemLocation.ProductConversion_Name = itemBin.productConversion_Name;
        //                            GoodsIssueItemLocation.ProductConversion_Index = (Guid)itemPlanGI.ProductConversion_Index;
        //                            GoodsIssueItemLocation.ProductConversion_Id = itemPlanGI.ProductConversion_Id;
        //                            GoodsIssueItemLocation.ProductConversion_Name = itemPlanGI.ProductConversion_Name;
        //                            GoodsIssueItemLocation.MFG_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_MFG_Date) ? itemBin.goodsReceive_MFG_Date.toDate() : null;
        //                            GoodsIssueItemLocation.EXP_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_EXP_Date) ? itemBin.goodsReceive_EXP_Date.toDate() : null;

        //                            GoodsIssueItemLocation.UnitWeight = itemBin.binBalance_UnitWeightBal;
        //                            GoodsIssueItemLocation.UnitWeight_Index = itemBin.binBalance_UnitWeightBal_Index;
        //                            GoodsIssueItemLocation.UnitWeight_Id = itemBin.binBalance_UnitWeightBal_Id;
        //                            GoodsIssueItemLocation.UnitWeight_Name = itemBin.binBalance_UnitWeightBal_Name;
        //                            GoodsIssueItemLocation.UnitWeightRatio = itemBin.binBalance_UnitWeightBalRatio;

        //                            GoodsIssueItemLocation.Weight = (itemBin.binBalance_WeightBal ?? 0) - (itemBin.binBalance_WeightReserve ?? 0);
        //                            GoodsIssueItemLocation.Weight_Index = itemBin.binBalance_WeightBal_Index;
        //                            GoodsIssueItemLocation.Weight_Id = itemBin.binBalance_WeightBal_Id;
        //                            GoodsIssueItemLocation.Weight_Name = itemBin.binBalance_WeightBal_Name;
        //                            GoodsIssueItemLocation.WeightRatio = itemBin.binBalance_WeightBalRatio;

        //                            GoodsIssueItemLocation.UnitNetWeight = itemBin.binBalance_UnitNetWeightBal;
        //                            GoodsIssueItemLocation.UnitNetWeight_Index = itemBin.binBalance_UnitNetWeightBal_Index;
        //                            GoodsIssueItemLocation.UnitNetWeight_Id = itemBin.binBalance_UnitNetWeightBal_Id;
        //                            GoodsIssueItemLocation.UnitNetWeight_Name = itemBin.binBalance_UnitNetWeightBal_Name;
        //                            GoodsIssueItemLocation.UnitNetWeightRatio = itemBin.binBalance_UnitNetWeightBalRatio;

        //                            GoodsIssueItemLocation.NetWeight = (itemBin.binBalance_NetWeightBal ?? 0) - (itemBin.binBalance_NetWeightReserve ?? 0);
        //                            GoodsIssueItemLocation.NetWeight_Index = itemBin.binBalance_NetWeightBal_Index;
        //                            GoodsIssueItemLocation.NetWeight_Id = itemBin.binBalance_NetWeightBal_Id;
        //                            GoodsIssueItemLocation.NetWeight_Name = itemBin.binBalance_NetWeightBal_Name;
        //                            GoodsIssueItemLocation.NetWeightRatio = itemBin.binBalance_NetWeightBalRatio;

        //                            GoodsIssueItemLocation.UnitGrsWeight = itemBin.binBalance_UnitGrsWeightBal;
        //                            GoodsIssueItemLocation.UnitGrsWeight_Index = itemBin.binBalance_UnitGrsWeightBal_Index;
        //                            GoodsIssueItemLocation.UnitGrsWeight_Id = itemBin.binBalance_UnitGrsWeightBal_Id;
        //                            GoodsIssueItemLocation.UnitGrsWeight_Name = itemBin.binBalance_UnitGrsWeightBal_Name;
        //                            GoodsIssueItemLocation.UnitGrsWeightRatio = itemBin.binBalance_UnitGrsWeightBalRatio;

        //                            GoodsIssueItemLocation.GrsWeight = (itemBin.binBalance_GrsWeightBal ?? 0) - (itemBin.binBalance_GrsWeightReserve ?? 0);
        //                            GoodsIssueItemLocation.GrsWeight_Index = itemBin.binBalance_GrsWeightBal_Index;
        //                            GoodsIssueItemLocation.GrsWeight_Id = itemBin.binBalance_GrsWeightBal_Id;
        //                            GoodsIssueItemLocation.GrsWeight_Name = itemBin.binBalance_GrsWeightBal_Name;
        //                            GoodsIssueItemLocation.GrsWeightRatio = itemBin.binBalance_GrsWeightBalRatio;

        //                            GoodsIssueItemLocation.UnitWidth = (itemBin.binBalance_UnitWidthBal ?? 0);
        //                            GoodsIssueItemLocation.UnitWidth_Index = itemBin.binBalance_UnitWidthBal_Index;
        //                            GoodsIssueItemLocation.UnitWidth_Id = itemBin.binBalance_UnitWidthBal_Id;
        //                            GoodsIssueItemLocation.UnitWidth_Name = itemBin.binBalance_UnitWidthBal_Name;
        //                            GoodsIssueItemLocation.UnitWidthRatio = itemBin.binBalance_UnitWidthBalRatio;

        //                            GoodsIssueItemLocation.Width = (itemBin.binBalance_WidthBal ?? 0) - (itemBin.binBalance_WidthReserve ?? 0);
        //                            GoodsIssueItemLocation.Width_Index = itemBin.binBalance_WidthBal_Index;
        //                            GoodsIssueItemLocation.Width_Id = itemBin.binBalance_WidthBal_Id;
        //                            GoodsIssueItemLocation.Width_Name = itemBin.binBalance_WidthBal_Name;
        //                            GoodsIssueItemLocation.WidthRatio = itemBin.binBalance_WidthBalRatio;

        //                            GoodsIssueItemLocation.UnitLength = (itemBin.binBalance_UnitLengthBal ?? 0);
        //                            GoodsIssueItemLocation.UnitLength_Index = itemBin.binBalance_UnitLengthBal_Index;
        //                            GoodsIssueItemLocation.UnitLength_Id = itemBin.binBalance_UnitLengthBal_Id;
        //                            GoodsIssueItemLocation.UnitLength_Name = itemBin.binBalance_UnitLengthBal_Name;
        //                            GoodsIssueItemLocation.UnitLengthRatio = itemBin.binBalance_UnitLengthBalRatio;

        //                            GoodsIssueItemLocation.Length = (itemBin.binBalance_LengthBal ?? 0) - (itemBin.binBalance_LengthReserve ?? 0);
        //                            GoodsIssueItemLocation.Length_Index = itemBin.binBalance_LengthBal_Index;
        //                            GoodsIssueItemLocation.Length_Id = itemBin.binBalance_LengthBal_Id;
        //                            GoodsIssueItemLocation.Length_Name = itemBin.binBalance_LengthBal_Name;
        //                            GoodsIssueItemLocation.LengthRatio = itemBin.binBalance_LengthBalRatio;

        //                            GoodsIssueItemLocation.UnitHeight = (itemBin.binBalance_UnitHeightBal ?? 0);
        //                            GoodsIssueItemLocation.UnitHeight_Index = itemBin.binBalance_UnitHeightBal_Index;
        //                            GoodsIssueItemLocation.UnitHeight_Id = itemBin.binBalance_UnitHeightBal_Id;
        //                            GoodsIssueItemLocation.UnitHeight_Name = itemBin.binBalance_UnitHeightBal_Name;
        //                            GoodsIssueItemLocation.UnitHeightRatio = itemBin.binBalance_UnitHeightBalRatio;

        //                            GoodsIssueItemLocation.Height = (itemBin.binBalance_HeightBal ?? 0) - (itemBin.binBalance_HeightReserve ?? 0);
        //                            GoodsIssueItemLocation.Height_Index = itemBin.binBalance_HeightBal_Index;
        //                            GoodsIssueItemLocation.Height_Id = itemBin.binBalance_HeightBal_Id;
        //                            GoodsIssueItemLocation.Height_Name = itemBin.binBalance_HeightBal_Name;
        //                            GoodsIssueItemLocation.HeightRatio = itemBin.binBalance_HeightBalRatio;

        //                            GoodsIssueItemLocation.UnitVolume = (itemBin.binBalance_UnitVolumeBal ?? 0);
        //                            GoodsIssueItemLocation.Volume = (itemBin.binBalance_VolumeBal ?? 0) - (itemBin.binBalance_VolumeReserve ?? 0);

        //                            GoodsIssueItemLocation.UnitPrice = (itemBin.unitPrice ?? 0);
        //                            GoodsIssueItemLocation.UnitPrice_Index = itemBin.unitPrice_Index;
        //                            GoodsIssueItemLocation.UnitPrice_Id = itemBin.unitPrice_Id;
        //                            GoodsIssueItemLocation.UnitPrice_Name = itemBin.unitPrice_Name;
        //                            GoodsIssueItemLocation.Price = (itemBin.price ?? 0);
        //                            GoodsIssueItemLocation.Price_Index = itemBin.price_Index;
        //                            GoodsIssueItemLocation.Price_Id = itemBin.price_Id;
        //                            GoodsIssueItemLocation.Price_Name = itemBin.price_Name;


        //                            GoodsIssueItemLocation.DocumentRef_No1 = itemPlanGI.DocumentRef_No1;
        //                            GoodsIssueItemLocation.DocumentRef_No2 = itemPlanGI.DocumentRef_No2;
        //                            GoodsIssueItemLocation.DocumentRef_No3 = itemPlanGI.DocumentRef_No3;
        //                            GoodsIssueItemLocation.DocumentRef_No4 = itemPlanGI.DocumentRef_No4;
        //                            GoodsIssueItemLocation.DocumentRef_No5 = itemPlanGI.DocumentRef_No5;
        //                            GoodsIssueItemLocation.Document_Status = -2;
        //                            GoodsIssueItemLocation.UDF_1 = itemPlanGI.UDF_1;
        //                            GoodsIssueItemLocation.UDF_2 = itemPlanGI.UDF_2;
        //                            GoodsIssueItemLocation.UDF_3 = itemPlanGI.UDF_3;
        //                            GoodsIssueItemLocation.UDF_4 = itemPlanGI.UDF_4;
        //                            GoodsIssueItemLocation.UDF_5 = itemPlanGI.UDF_5;
        //                            GoodsIssueItemLocation.Ref_Process_Index = new Guid("22744590-55D8-4448-88EF-5997C252111F");  // PLAN GI Process
        //                            GoodsIssueItemLocation.Ref_Document_No = itemPlanGI.PlanGoodsIssue_No;
        //                            GoodsIssueItemLocation.Ref_Document_Index = (Guid)itemPlanGI.PlanGoodsIssue_Index;
        //                            GoodsIssueItemLocation.Ref_DocumentItem_Index = itemPlanGI.PlanGoodsIssueItem_Index;
        //                            GoodsIssueItemLocation.GoodsReceiveItem_Index = new Guid(itemBin.goodsReceiveItem_Index);
        //                            GoodsIssueItemLocation.Create_By = model.create_by;
        //                            GoodsIssueItemLocation.Create_Date = DateTime.Now;
        //                            GoodsIssueItemLocation.GoodsIssue_No = model.goodsIssue_No;
        //                            GoodsIssueItemLocation.BinBalance_Index = new Guid(itemBin.binBalance_Index);


        //                            GoodsIssueItemLocation.Invoice_No = itemBin.invoice_No;
        //                            GoodsIssueItemLocation.Declaration_No = itemBin.declaration_No;
        //                            GoodsIssueItemLocation.HS_Code = itemBin.hs_Code;
        //                            GoodsIssueItemLocation.Conutry_of_Origin = itemBin.conutry_of_Origin;
        //                            GoodsIssueItemLocation.Tax1 = itemBin.tax1;
        //                            GoodsIssueItemLocation.Tax1_Currency_Index = itemBin.tax1_Currency_Index;
        //                            GoodsIssueItemLocation.Tax1_Currency_Id = itemBin.tax1_Currency_Id;
        //                            GoodsIssueItemLocation.Tax1_Currency_Name = itemBin.tax1_Currency_Name;
        //                            GoodsIssueItemLocation.Tax2 = itemBin.tax2;
        //                            GoodsIssueItemLocation.Tax2_Currency_Index = itemBin.tax2_Currency_Index;
        //                            GoodsIssueItemLocation.Tax2_Currency_Id = itemBin.tax2_Currency_Id;
        //                            GoodsIssueItemLocation.Tax2_Currency_Name = itemBin.tax2_Currency_Name;
        //                            GoodsIssueItemLocation.Tax3 = itemBin.tax3;
        //                            GoodsIssueItemLocation.Tax3_Currency_Index = itemBin.tax3_Currency_Index;
        //                            GoodsIssueItemLocation.Tax3_Currency_Id = itemBin.tax3_Currency_Id;
        //                            GoodsIssueItemLocation.Tax3_Currency_Name = itemBin.tax3_Currency_Name;
        //                            GoodsIssueItemLocation.Tax4 = itemBin.tax4;
        //                            GoodsIssueItemLocation.Tax4_Currency_Index = itemBin.tax4_Currency_Index;
        //                            GoodsIssueItemLocation.Tax4_Currency_Id = itemBin.tax4_Currency_Id;
        //                            GoodsIssueItemLocation.Tax4_Currency_Name = itemBin.tax4_Currency_Name;
        //                            GoodsIssueItemLocation.Tax5 = itemBin.tax5;
        //                            GoodsIssueItemLocation.Tax5_Currency_Index = itemBin.tax5_Currency_Index;
        //                            GoodsIssueItemLocation.Tax5_Currency_Id = itemBin.tax5_Currency_Id;
        //                            GoodsIssueItemLocation.Tax5_Currency_Name = itemBin.tax5_Currency_Name;
        //                            GoodsIssueItemLocation.ERP_Location = itemBin.erp_Location;



        //                            chkdatawave = true;
        //                            ListGoodsIssueItemLocation.Add(GoodsIssueItemLocation);

        //                            olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [GIL]   GoodsIssueItemLocation.TotalQty " + GoodsIssueItemLocation.TotalQty.ToString() + "    Ref_Document_No : " + GoodsIssueItemLocation.Ref_Document_No.ToString());




        //                            itemPlanGI.GITotalQty = itemPlanGI.GITotalQty + QtyBal;

        //                            olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [QtyPlanGIRemian - QtyBal ]  " + QtyPlanGIRemian.ToString() + "  - " + QtyBal.ToString());

        //                            QtyPlanGIRemian = QtyPlanGIRemian - QtyBal;

        //                            olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [END line QtyPlanGIRemian ]  " + QtyPlanGIRemian.ToString());


        //                        }
        //                        else if (QtyPlanGIRemian < QtyBal && QtyPlanGIRemian > 0 && QtyBal > 0)
        //                        {


        //                            State = "QtyPlanGIRemian < QtyBal && QtyPlanGIRemian > 0 && QtyBal > 0";
        //                            olog.logging("runwave", State + " TAG_NO " + itemBin.tag_No + " Product_Id " + itemBin.product_Id + " Bin_Index " + itemBin.binBalance_Index);


        //                            olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [QtyPlanGIRemian < QtyBal && QtyPlanGIRemian > 0 && QtyBal > 0]   QtyPlanGIRemian " + QtyPlanGIRemian.ToString() + "    QtyBal : " + QtyBal.ToString());




        //                            var QtyPick = QtyPlanGIRemian;


        //                            olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [QtyPick]   QtyPick " + QtyPick.ToString());



        //                            // Add GI ITEMLOCATION 
        //                            var GoodsIssueItemLocation = new im_GoodsIssueItemLocation();
        //                            GoodsIssueItemLocation.GoodsIssueItemLocation_Index = Guid.NewGuid();
        //                            GoodsIssueItemLocation.GoodsIssue_Index = new Guid(model.goodsIssue_Index);
        //                            GoodsIssueItemLocation.TagItem_Index = new Guid(itemBin.tagItem_Index);
        //                            GoodsIssueItemLocation.Tag_Index = new Guid(itemBin.tag_Index);
        //                            GoodsIssueItemLocation.Tag_No = itemBin.tag_No;
        //                            GoodsIssueItemLocation.Product_Index = new Guid(itemBin.product_Index);
        //                            GoodsIssueItemLocation.Product_Id = itemBin.product_Id;
        //                            GoodsIssueItemLocation.Product_Name = itemBin.product_Name;
        //                            GoodsIssueItemLocation.Product_SecondName = itemBin.product_SecondName;
        //                            GoodsIssueItemLocation.Product_ThirdName = itemBin.product_ThirdName;
        //                            GoodsIssueItemLocation.Product_Lot = itemBin.product_Lot;
        //                            GoodsIssueItemLocation.ItemStatus_Index = new Guid(itemBin.itemStatus_Index);
        //                            GoodsIssueItemLocation.ItemStatus_Id = itemBin.itemStatus_Id;
        //                            GoodsIssueItemLocation.ItemStatus_Name = itemBin.itemStatus_Name;
        //                            GoodsIssueItemLocation.Location_Index = new Guid(itemBin.location_Index);
        //                            GoodsIssueItemLocation.Location_Id = itemBin.location_Id;
        //                            GoodsIssueItemLocation.Location_Name = itemBin.location_Name;
        //                            GoodsIssueItemLocation.QtyPlan = (Decimal)itemPlanGI.TotalQtyRemian;
        //                            GoodsIssueItemLocation.Qty = (Decimal)QtyPick / (Decimal)itemPlanGI.Ratio;
        //                            GoodsIssueItemLocation.Ratio = (Decimal)itemPlanGI.Ratio;
        //                            GoodsIssueItemLocation.TotalQty = (Decimal)QtyPick;
        //                            //GoodsIssueItemLocation.ProductConversion_Index = new Guid(itemBin.productConversion_Index);
        //                            //GoodsIssueItemLocation.ProductConversion_Id = itemBin.productConversion_Id;
        //                            //GoodsIssueItemLocation.ProductConversion_Name = itemBin.productConversion_Name;
        //                            GoodsIssueItemLocation.ProductConversion_Index = (Guid)itemPlanGI.ProductConversion_Index;
        //                            GoodsIssueItemLocation.ProductConversion_Id = itemPlanGI.ProductConversion_Id;
        //                            GoodsIssueItemLocation.ProductConversion_Name = itemPlanGI.ProductConversion_Name;
        //                            GoodsIssueItemLocation.MFG_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_MFG_Date) ? itemBin.goodsReceive_MFG_Date.toDate() : null;
        //                            GoodsIssueItemLocation.EXP_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_EXP_Date) ? itemBin.goodsReceive_EXP_Date.toDate() : null;

        //                            if (itemBin.binBalance_WeightBegin == 0)
        //                            {
        //                                GoodsIssueItemLocation.Weight = 0;
        //                            }
        //                            else
        //                            {
        //                                GoodsIssueItemLocation.UnitWeight = itemBin.binBalance_UnitWeightBal;
        //                                GoodsIssueItemLocation.UnitWeight_Index = itemBin.binBalance_UnitWeightBal_Index;
        //                                GoodsIssueItemLocation.UnitWeight_Id = itemBin.binBalance_UnitWeightBal_Id;
        //                                GoodsIssueItemLocation.UnitWeight_Name = itemBin.binBalance_UnitWeightBal_Name;
        //                                GoodsIssueItemLocation.UnitWeightRatio = itemBin.binBalance_UnitWeightBalRatio;

        //                                GoodsIssueItemLocation.Weight = (Decimal)(QtyPick * (itemBin.binBalance_UnitWeightBal ?? 0));
        //                                GoodsIssueItemLocation.Weight_Index = itemBin.binBalance_UnitWeightBal_Index;
        //                                GoodsIssueItemLocation.Weight_Id = itemBin.binBalance_UnitWeightBal_Id;
        //                                GoodsIssueItemLocation.Weight_Name = itemBin.binBalance_UnitWeightBal_Name;
        //                                GoodsIssueItemLocation.WeightRatio = itemBin.binBalance_UnitWeightBalRatio;
        //                            }

        //                            if (itemBin.binBalance_NetWeightBegin == 0)
        //                            {
        //                                GoodsIssueItemLocation.NetWeight = 0;
        //                            }
        //                            else
        //                            {
        //                                GoodsIssueItemLocation.UnitNetWeight = itemBin.binBalance_UnitNetWeightBal;
        //                                GoodsIssueItemLocation.UnitNetWeight_Index = itemBin.binBalance_UnitNetWeightBal_Index;
        //                                GoodsIssueItemLocation.UnitNetWeight_Id = itemBin.binBalance_UnitNetWeightBal_Id;
        //                                GoodsIssueItemLocation.UnitNetWeight_Name = itemBin.binBalance_UnitNetWeightBal_Name;
        //                                GoodsIssueItemLocation.UnitNetWeightRatio = itemBin.binBalance_UnitNetWeightBalRatio;

        //                                GoodsIssueItemLocation.NetWeight = (Decimal)(QtyPick * (itemBin.binBalance_UnitNetWeightBal ?? 0));
        //                                GoodsIssueItemLocation.NetWeight_Index = itemBin.binBalance_UnitNetWeightBal_Index;
        //                                GoodsIssueItemLocation.NetWeight_Id = itemBin.binBalance_UnitNetWeightBal_Id;
        //                                GoodsIssueItemLocation.NetWeight_Name = itemBin.binBalance_UnitNetWeightBal_Name;
        //                                GoodsIssueItemLocation.NetWeightRatio = itemBin.binBalance_UnitNetWeightBalRatio;
        //                            }

        //                            if (itemBin.binBalance_GrsWeightBegin == 0)
        //                            {
        //                                GoodsIssueItemLocation.GrsWeight = 0;
        //                            }
        //                            else
        //                            {
        //                                GoodsIssueItemLocation.UnitGrsWeight = itemBin.binBalance_UnitGrsWeightBal;
        //                                GoodsIssueItemLocation.UnitGrsWeight_Index = itemBin.binBalance_UnitGrsWeightBal_Index;
        //                                GoodsIssueItemLocation.UnitGrsWeight_Id = itemBin.binBalance_UnitGrsWeightBal_Id;
        //                                GoodsIssueItemLocation.UnitGrsWeight_Name = itemBin.binBalance_UnitGrsWeightBal_Name;
        //                                GoodsIssueItemLocation.UnitGrsWeightRatio = itemBin.binBalance_UnitGrsWeightBalRatio;

        //                                GoodsIssueItemLocation.GrsWeight = (Decimal)(QtyPick * (itemBin.binBalance_UnitGrsWeightBal ?? 0));
        //                                GoodsIssueItemLocation.GrsWeight_Index = itemBin.binBalance_UnitGrsWeightBal_Index;
        //                                GoodsIssueItemLocation.GrsWeight_Id = itemBin.binBalance_UnitGrsWeightBal_Id;
        //                                GoodsIssueItemLocation.GrsWeight_Name = itemBin.binBalance_UnitGrsWeightBal_Name;
        //                                GoodsIssueItemLocation.GrsWeightRatio = itemBin.binBalance_UnitGrsWeightBalRatio;
        //                            }

        //                            if (itemBin.binBalance_WidthBegin == 0)
        //                            {
        //                                GoodsIssueItemLocation.Width = 0;
        //                            }
        //                            else
        //                            {
        //                                GoodsIssueItemLocation.UnitWidth = (itemBin.binBalance_UnitWidthBal ?? 0);
        //                                GoodsIssueItemLocation.UnitWidth_Index = itemBin.binBalance_UnitWidthBal_Index;
        //                                GoodsIssueItemLocation.UnitWidth_Id = itemBin.binBalance_UnitWidthBal_Id;
        //                                GoodsIssueItemLocation.UnitWidth_Name = itemBin.binBalance_UnitWidthBal_Name;
        //                                GoodsIssueItemLocation.UnitWidthRatio = itemBin.binBalance_UnitWidthBalRatio;

        //                                GoodsIssueItemLocation.Width = (Decimal)(QtyPick * (itemBin.binBalance_UnitWidthBal ?? 0));
        //                                GoodsIssueItemLocation.Width_Index = itemBin.binBalance_UnitWidthBal_Index;
        //                                GoodsIssueItemLocation.Width_Id = itemBin.binBalance_UnitWidthBal_Id;
        //                                GoodsIssueItemLocation.Width_Name = itemBin.binBalance_UnitWidthBal_Name;
        //                                GoodsIssueItemLocation.WidthRatio = itemBin.binBalance_UnitWidthBalRatio;
        //                            }

        //                            if (itemBin.binBalance_LengthBegin == 0)
        //                            {
        //                                GoodsIssueItemLocation.Length = 0;
        //                            }
        //                            else
        //                            {
        //                                GoodsIssueItemLocation.UnitLength = (itemBin.binBalance_UnitLengthBal ?? 0);
        //                                GoodsIssueItemLocation.UnitLength_Index = itemBin.binBalance_UnitLengthBal_Index;
        //                                GoodsIssueItemLocation.UnitLength_Id = itemBin.binBalance_UnitLengthBal_Id;
        //                                GoodsIssueItemLocation.UnitLength_Name = itemBin.binBalance_UnitLengthBal_Name;
        //                                GoodsIssueItemLocation.UnitLengthRatio = itemBin.binBalance_UnitLengthBalRatio;

        //                                GoodsIssueItemLocation.Length = (Decimal)(QtyPick * (itemBin.binBalance_UnitWidthBal ?? 0));
        //                                GoodsIssueItemLocation.Length_Index = itemBin.binBalance_UnitLengthBal_Index;
        //                                GoodsIssueItemLocation.Length_Id = itemBin.binBalance_UnitLengthBal_Id;
        //                                GoodsIssueItemLocation.Length_Name = itemBin.binBalance_UnitLengthBal_Name;
        //                                GoodsIssueItemLocation.LengthRatio = itemBin.binBalance_UnitLengthBalRatio;
        //                            }

        //                            if (itemBin.binBalance_HeightBegin == 0)
        //                            {
        //                                GoodsIssueItemLocation.Height = 0;
        //                            }
        //                            else
        //                            {
        //                                GoodsIssueItemLocation.UnitHeight = (itemBin.binBalance_UnitHeightBal ?? 0);
        //                                GoodsIssueItemLocation.UnitHeight_Index = itemBin.binBalance_UnitHeightBal_Index;
        //                                GoodsIssueItemLocation.UnitHeight_Id = itemBin.binBalance_UnitHeightBal_Id;
        //                                GoodsIssueItemLocation.UnitHeight_Name = itemBin.binBalance_UnitHeightBal_Name;
        //                                GoodsIssueItemLocation.UnitHeightRatio = itemBin.binBalance_UnitHeightBalRatio;

        //                                GoodsIssueItemLocation.Height = (Decimal)(QtyPick * (itemBin.binBalance_UnitHeightBal ?? 0));
        //                                GoodsIssueItemLocation.Height_Index = itemBin.binBalance_UnitHeightBal_Index;
        //                                GoodsIssueItemLocation.Height_Id = itemBin.binBalance_UnitHeightBal_Id;
        //                                GoodsIssueItemLocation.Height_Name = itemBin.binBalance_UnitHeightBal_Name;
        //                                GoodsIssueItemLocation.HeightRatio = itemBin.binBalance_UnitHeightBalRatio;
        //                            }

        //                            if (itemBin.binBalance_UnitVolumeBal == 0)
        //                            {
        //                                GoodsIssueItemLocation.UnitVolume = 0;
        //                            }
        //                            else
        //                            {
        //                                GoodsIssueItemLocation.UnitVolume = (itemBin.binBalance_UnitVolumeBal ?? 0);
        //                                GoodsIssueItemLocation.Volume = (Decimal)(QtyPick * (itemBin.binBalance_UnitVolumeBal ?? 0));
        //                            }

        //                            GoodsIssueItemLocation.UnitPrice = (itemBin.unitPrice ?? 0);
        //                            GoodsIssueItemLocation.UnitPrice_Index = itemBin.unitPrice_Index;
        //                            GoodsIssueItemLocation.UnitPrice_Id = itemBin.unitPrice_Id;
        //                            GoodsIssueItemLocation.UnitPrice_Name = itemBin.unitPrice_Name;
        //                            GoodsIssueItemLocation.Price = (Decimal)(QtyPick * (itemBin.unitPrice ?? 0));
        //                            GoodsIssueItemLocation.Price_Index = itemBin.unitPrice_Index;
        //                            GoodsIssueItemLocation.Price_Id = itemBin.unitPrice_Id;
        //                            GoodsIssueItemLocation.Price_Name = itemBin.unitPrice_Name;



        //                            GoodsIssueItemLocation.DocumentRef_No1 = itemPlanGI.DocumentRef_No1;
        //                            GoodsIssueItemLocation.DocumentRef_No2 = itemPlanGI.DocumentRef_No2;
        //                            GoodsIssueItemLocation.DocumentRef_No3 = itemPlanGI.DocumentRef_No3;
        //                            GoodsIssueItemLocation.DocumentRef_No4 = itemPlanGI.DocumentRef_No4;
        //                            GoodsIssueItemLocation.DocumentRef_No5 = itemPlanGI.DocumentRef_No5;
        //                            GoodsIssueItemLocation.Document_Status = -2;
        //                            GoodsIssueItemLocation.UDF_1 = itemPlanGI.UDF_1;
        //                            GoodsIssueItemLocation.UDF_2 = itemPlanGI.UDF_2;
        //                            GoodsIssueItemLocation.UDF_3 = itemPlanGI.UDF_3;
        //                            GoodsIssueItemLocation.UDF_4 = itemPlanGI.UDF_4;
        //                            GoodsIssueItemLocation.UDF_5 = itemPlanGI.UDF_5;
        //                            GoodsIssueItemLocation.Ref_Process_Index = new Guid("22744590-55D8-4448-88EF-5997C252111F");  // PLAN GI Process
        //                            GoodsIssueItemLocation.Ref_Document_No = itemPlanGI.PlanGoodsIssue_No;
        //                            GoodsIssueItemLocation.Ref_Document_Index = (Guid)itemPlanGI.PlanGoodsIssue_Index;
        //                            GoodsIssueItemLocation.Ref_DocumentItem_Index = itemPlanGI.PlanGoodsIssueItem_Index;
        //                            GoodsIssueItemLocation.GoodsReceiveItem_Index = new Guid(itemBin.goodsReceiveItem_Index);
        //                            GoodsIssueItemLocation.Create_By = model.create_by;
        //                            GoodsIssueItemLocation.Create_Date = DateTime.Now;
        //                            GoodsIssueItemLocation.GoodsIssue_No = model.goodsIssue_No;
        //                            GoodsIssueItemLocation.BinBalance_Index = new Guid(itemBin.binBalance_Index);

        //                            GoodsIssueItemLocation.Invoice_No = itemBin.invoice_No;
        //                            GoodsIssueItemLocation.Declaration_No = itemBin.declaration_No;
        //                            GoodsIssueItemLocation.HS_Code = itemBin.hs_Code;
        //                            GoodsIssueItemLocation.Conutry_of_Origin = itemBin.conutry_of_Origin;
        //                            GoodsIssueItemLocation.Tax1 = itemBin.tax1;
        //                            GoodsIssueItemLocation.Tax1_Currency_Index = itemBin.tax1_Currency_Index;
        //                            GoodsIssueItemLocation.Tax1_Currency_Id = itemBin.tax1_Currency_Id;
        //                            GoodsIssueItemLocation.Tax1_Currency_Name = itemBin.tax1_Currency_Name;
        //                            GoodsIssueItemLocation.Tax2 = itemBin.tax2;
        //                            GoodsIssueItemLocation.Tax2_Currency_Index = itemBin.tax2_Currency_Index;
        //                            GoodsIssueItemLocation.Tax2_Currency_Id = itemBin.tax2_Currency_Id;
        //                            GoodsIssueItemLocation.Tax2_Currency_Name = itemBin.tax2_Currency_Name;
        //                            GoodsIssueItemLocation.Tax3 = itemBin.tax3;
        //                            GoodsIssueItemLocation.Tax3_Currency_Index = itemBin.tax3_Currency_Index;
        //                            GoodsIssueItemLocation.Tax3_Currency_Id = itemBin.tax3_Currency_Id;
        //                            GoodsIssueItemLocation.Tax3_Currency_Name = itemBin.tax3_Currency_Name;
        //                            GoodsIssueItemLocation.Tax4 = itemBin.tax4;
        //                            GoodsIssueItemLocation.Tax4_Currency_Index = itemBin.tax4_Currency_Index;
        //                            GoodsIssueItemLocation.Tax4_Currency_Id = itemBin.tax4_Currency_Id;
        //                            GoodsIssueItemLocation.Tax4_Currency_Name = itemBin.tax4_Currency_Name;
        //                            GoodsIssueItemLocation.Tax5 = itemBin.tax5;
        //                            GoodsIssueItemLocation.Tax5_Currency_Index = itemBin.tax5_Currency_Index;
        //                            GoodsIssueItemLocation.Tax5_Currency_Id = itemBin.tax5_Currency_Id;
        //                            GoodsIssueItemLocation.Tax5_Currency_Name = itemBin.tax5_Currency_Name;
        //                            GoodsIssueItemLocation.ERP_Location = itemBin.erp_Location;

        //                            chkdatawave = true;
        //                            ListGoodsIssueItemLocation.Add(GoodsIssueItemLocation);


        //                            olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [GIL]   GoodsIssueItemLocation.TotalQty " + GoodsIssueItemLocation.TotalQty.ToString() + "    Ref_Document_No : " + GoodsIssueItemLocation.Ref_Document_No.ToString());



        //                            itemPlanGI.GITotalQty = itemPlanGI.GITotalQty + QtyPick;


        //                            olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [ QtyPlanGIRemian - QtyPick ]  " + QtyPlanGIRemian.ToString() + "  - " + QtyPick.ToString());



        //                            QtyPlanGIRemian = QtyPlanGIRemian - QtyPick;

        //                            olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [END line QtyPlanGIRemian ]  " + QtyPlanGIRemian.ToString());



        //                        }
        //                    }

        //                    olog.logging("GIStock", " -------------- ");


        //                    #region inset GIL and runwave status 30
        //                    using (var db4 = new GIDbContext())
        //                    {
        //                        db4.Database.SetCommandTimeout(120);
        //                        var transaction = db4.Database.BeginTransaction(IsolationLevel.Serializable);
        //                        try
        //                        {
        //                            var GI = db4.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 20).ToList();
        //                            foreach (var g in GI)
        //                            {
        //                                g.RunWave_Status = 30;
        //                            }

        //                            db4.IM_GoodsIssueItemLocation.AddRange(ListGoodsIssueItemLocation);
        //                            db4.SaveChanges();
        //                            transaction.Commit();
        //                        }
        //                        catch (Exception exy)
        //                        {
        //                            msglog = State + " ex Rollback " + exy.Message.ToString();
        //                            olog.logging("runwave", msglog);
        //                            transaction.Rollback();
        //                            throw exy;
        //                        }
        //                    }
        //                    #endregion
        //                    State = "inset GIL and runwave status 30";
        //                    olog.logging("runwave", State);

        //                    #region insert bincardreserve and runwave status 40

        //                    using (var Contact = new GIDbContext())
        //                    {


        //                        Contact.Database.SetCommandTimeout(360);

        //                        State = "Contact.IM_GoodsIssueItemLocation";
        //                        olog.logging("runwave", State);

        //                        var GIL = Contact.IM_GoodsIssueItemLocation.Where(c => c.Ref_Document_Index == itemPlanGI.PlanGoodsIssue_Index && c.Ref_DocumentItem_Index == itemPlanGI.PlanGoodsIssueItem_Index && c.Document_Status != -1).ToList();
        //                        foreach (var g in GIL)
        //                        {
        //                            State = "insertBinCardReserve";

        //                            olog.logging("runwave", State + " GIIL_Index" + g.GoodsIssueItemLocation_Index.ToString());

        //                            var insertBinCardReserve = new PickbinbalanceViewModel();

        //                            insertBinCardReserve.ref_Document_Index = g.GoodsIssue_Index.ToString();
        //                            insertBinCardReserve.ref_DocumentItem_Index = g.GoodsIssueItemLocation_Index.ToString();
        //                            insertBinCardReserve.goodsIssue_No = model.goodsIssue_No;
        //                            insertBinCardReserve.Process_Index = "22744590-55D8-4448-88EF-5997C252111F";
        //                            //model.GIIL = GoodsIssueItemLocation;
        //                            insertBinCardReserve.create_By = model.create_by;
        //                            insertBinCardReserve.pick = g.TotalQty;
        //                            insertBinCardReserve.binbalance_Index = g.BinBalance_Index.ToString();
        //                            insertBinCardReserve.wave_Index = Contact.IM_GoodsIssue.FirstOrDefault(f => f.GoodsIssue_Index == g.GoodsIssue_Index)?.Wave_Index.ToString();

        //                            State = "insetBinRe";
        //                            olog.logging("runwave", State);

        //                            var insetBinRe = utils.SendDataApi<actionResultPickbinbalanceViewModel>(new AppSettingConfig().GetUrl("insertBinCardReserve"), insertBinCardReserve.sJson());
        //                            if (insetBinRe.resultIsUse)
        //                            {
        //                                State = "resultIsUse";
        //                                olog.logging("runwave", State);

        //                                var transaction = Contact.Database.BeginTransaction(IsolationLevel.Serializable);
        //                                try
        //                                {
        //                                    var GI = Contact.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 30).ToList();
        //                                    foreach (var gg in GI)
        //                                    {
        //                                        gg.RunWave_Status = 40;
        //                                    }
        //                                    Contact.SaveChanges();
        //                                    transaction.Commit();
        //                                }
        //                                catch (Exception exy)
        //                                {
        //                                    msglog = State + " ex Rollback " + exy.Message.ToString();
        //                                    olog.logging("runwave", msglog);
        //                                    transaction.Rollback();
        //                                    throw exy;
        //                                }
        //                            }
        //                            else
        //                            {
        //                                State = "resultIsUse else";
        //                                olog.logging("runwave", State);


        //                                var transaction = Contact.Database.BeginTransaction(IsolationLevel.Serializable);
        //                                try
        //                                {
        //                                    var GI = Contact.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && (c.RunWave_Status == 30 || c.RunWave_Status == 40)).ToList();
        //                                    foreach (var gg in GI)
        //                                    {
        //                                        gg.RunWave_Status = 30;
        //                                    }
        //                                    Contact.SaveChanges();
        //                                    transaction.Commit();
        //                                }
        //                                catch (Exception exy)
        //                                {
        //                                    msglog = State + " ex Rollback " + exy.Message.ToString();
        //                                    olog.logging("runwave", msglog);
        //                                    transaction.Rollback();
        //                                    throw exy;
        //                                }
        //                                msglog = State + " ex Rollback " + "Insert BinCardReserve Error";
        //                                olog.logging("runwave", msglog);
        //                                result.resultMsg = "Insert BinCardReserve Error";
        //                                result.resultIsUse = false;
        //                                //return result;

        //                            }
        //                        }
        //                    }
        //                    #endregion
        //                    State = "insert bincardreserve and runwave status 40";
        //                    olog.logging("runwave", State);
        //                }

        //                #region update isuse = '' and runwave 50
        //                strwhere.isActive = true;
        //                State = "updateIsuseViewBinbalance ";
        //                var updateIsuseViewBinbalance = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("updateIsuseViewBinbalance"), strwhere.sJson());
        //                if (updateIsuseViewBinbalance)
        //                {
        //                    using (var db5 = new GIDbContext())
        //                    {
        //                        db5.Database.SetCommandTimeout(120);
        //                        var transaction = db5.Database.BeginTransaction(IsolationLevel.Serializable);
        //                        try
        //                        {
        //                            var GI = db5.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 40).ToList();
        //                            foreach (var g in GI)
        //                            {
        //                                g.RunWave_Status = 50;
        //                                g.GI_status = 1;
        //                                g.TaskGI_status = 0;
        //                                g.TagOut_status = 0;
        //                                g.WCS_status = 0;
        //                            }
        //                            db5.SaveChanges();
        //                            transaction.Commit();
        //                        }
        //                        catch (Exception exy)
        //                        {
        //                            msglog = State + " ex Rollback " + exy.Message.ToString();
        //                            olog.logging("runwave", msglog);
        //                            transaction.Rollback();

        //                            throw exy;
        //                        }
        //                    }
        //                }
        //                else
        //                {
        //                    throw new Exception("Update IsUse By Error");
        //                }
        //                #endregion
        //                State = "region update isuse = '' and runwave 50";
        //                olog.logging("runwave", State);
        //            }
        //        }






        //        result.goodsIssue_Index = model.goodsIssue_Index;
        //        result.goodsIssue_No = model.goodsIssue_No;

        //        result.resultIsUse = true;


        //        //------------------------------------------------

        //        State = "Update GI Status = 2 : " + model.goodsIssue_No.ToString();
        //        olog.logging("runwave", State);

        //        string cmd = "";

        //        cmd = "  Update  im_GoodsIssue set   " +
        //                 "  GI_status = 2      " +
        //                 "  where GoodsIssue_Index = '" + result.goodsIssue_Index + "'  " +
        //                 "   and GI_status = 1 " +
        //                 "   and Document_Status = -2 ";

        //        try
        //        {

        //            olog.logging("runwave", State + " " + cmd.ToString());
        //            var GIRes = db.Database.ExecuteSqlCommand(cmd);

        //        }
        //        catch (Exception exTrans)
        //        {


        //            msglog = State + " exTrans   GI_status = 2   " + exTrans.Message.ToString();
        //            olog.logging("runwave", msglog);
        //            olog.logging("runwave", "exTrans inner - " + exTrans.InnerException.Message.ToString());



        //            throw exTrans;
        //        }


        //        //-----------------------------------------------

        //        State = "end for";
        //        olog.logging("runwave", State);
        //        #region Check retrun status PGII 
        //        foreach (var itemPGII in model.listGoodsIssueItemViewModel)
        //        {
        //            var chkGIL2 = db.IM_GoodsIssueItemLocation.Where(c => c.Ref_Document_Index == itemPGII.planGoodsIssue_Index && c.Ref_DocumentItem_Index == itemPGII.planGoodsIssueItem_Index && c.Document_Status != -1).ToList();
        //            var sumqty = chkGIL2.Sum(s => s.TotalQty);
        //            if (chkGIL2.Count == 0 || sumqty != itemPGII.totalQty)
        //            {

        //                var pgii = model.listGoodsIssueItemViewModel.Where(c => c.planGoodsIssueItem_Index == itemPGII.planGoodsIssueItem_Index).ToList();
        //                foreach (var resultpgii in pgii)
        //                {
        //                    resultpgii.qtyPlan = (resultpgii.totalQty - sumqty);
        //                    resultpgii.totalQty = (resultpgii.totalQty - sumqty);
        //                    listpgiinotinsert.Add(resultpgii);
        //                    CheckRunwavePast = true;
        //                    using (var updatepginotProduct = new GIDbContext())
        //                    {
        //                        var transactionresultpgii = updatepginotProduct.Database.BeginTransaction(IsolationLevel.Serializable);
        //                        try
        //                        {

        //                            var updateresultpgii = updatepginotProduct.IM_PlanGoodsIssueItem.Where(c => c.PlanGoodsIssueItem_Index == resultpgii.planGoodsIssueItem_Index && c.Document_Status == 1).ToList();
        //                            foreach (var p in updateresultpgii)
        //                            {
        //                                p.Document_Status = 0;
        //                            }
        //                            updatepginotProduct.SaveChanges();
        //                            transactionresultpgii.Commit();
        //                        }

        //                        catch (Exception exy)
        //                        {
        //                            msglog = State + " ex Rollback " + exy.Message.ToString();
        //                            olog.logging("UpdateUserAssign", msglog);
        //                            transactionresultpgii.Rollback();
        //                            throw exy;
        //                        }
        //                    }
        //                }
        //            }
        //        }
        //        #endregion

        //        State = "Check retrun status PGII";
        //        olog.logging("runwave", State);
        //        #region update PI status 3 and runwave status 60
        //        using (var db5 = new GIDbContext())
        //        {
        //            db5.Database.SetCommandTimeout(120);
        //            var listPGI = new List<Guid>();
        //            if (model.listGoodsIssueItemViewModel.Count > 0)
        //            {
        //                foreach (var item in model.listGoodsIssueItemViewModel)
        //                {
        //                    if (item.planGoodsIssue_Index != Guid.Parse("00000000-0000-0000-0000-000000000000"))
        //                    {
        //                        listPGI.Add(item.planGoodsIssue_Index);
        //                    }
        //                }
        //            }
        //            foreach (var item in listPGI)
        //            {
        //                var pgii = db5.IM_PlanGoodsIssueItem.Where(c => c.PlanGoodsIssue_Index == item && c.Document_Status == 0).Count();
        //                if (pgii == 0)
        //                {
        //                    var transaction = db5.Database.BeginTransaction(IsolationLevel.Serializable);
        //                    try
        //                    {
        //                        var pgi = db5.IM_PlanGoodsIssue.Where(c => c.PlanGoodsIssue_Index == item).ToList();
        //                        foreach (var p in pgi)
        //                        {
        //                            p.Document_Status = 3;
        //                        }
        //                        //var GI = db5.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 50).ToList();
        //                        //foreach (var g in GI)
        //                        //{
        //                        //    g.Wave_Index = new Guid(model.wave_Index);
        //                        //    g.RunWave_Status = 60;
        //                        //}
        //                        db5.SaveChanges();
        //                        transaction.Commit();
        //                    }

        //                    catch (Exception exy)
        //                    {
        //                        msglog = State + " ex Rollback " + exy.Message.ToString();
        //                        olog.logging("runwave", msglog);
        //                        transaction.Rollback();
        //                        throw exy;
        //                    }
        //                }
        //            }
        //        }
        //        #endregion

        //        State = "update PI status 3 and runwave status 60";
        //        olog.logging("runwave", State);

        //        result.resultMsg = CheckRunwavePast ? chkdatawave ? "หยิบสินค้าได้บางส่วน" : "สินค้าไม่เพียงพอ" : "หยิบสินค้าสำเร็จ";
        //        result.pgii = listpgiinotinsert;
        //        return result;

        //    }
        //    catch (Exception ex)
        //    {
        //        #region update isuse = '' and runwave 50
        //        var strwhere = new getViewBinbalanceViewModel();
        //        strwhere.isuse = model.goodsIssue_Index;
        //        strwhere.isActive = true;
        //        var updateIsuseViewBinbalance = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("updateIsuseViewBinbalance"), strwhere.sJson());

        //        #endregion

        //        msglog = State + " ex Rollback " + ex.Message.ToString();
        //        olog.logging("runwave", msglog);
        //        olog.logging("runwave", "ex inner - " + ex.InnerException.Message.ToString());

        //        var result = new actionResultRunWaveV2ViewModelViewModel();
        //        result.resultIsUse = false;
        //        result.resultMsg = ex.Message;
        //        return result;
        //    }
        //}

        #endregion

        #region New
        //public actionResultRunWaveV2ViewModelViewModel runwaveandHeader(RunWaveFilterV2ViewModel model)
        //{
        //    String State = "Start";
        //    String msglog = "";
        //    var olog = new logtxt();
        //    var process = new Guid("2E026669-99BD-4DE0-8818-534F29F7B89D");
        //    var strprocess = "2E026669-99BD-4DE0-8818-534F29F7B89D";
        //    var PlanGiRunWave = new List<Guid>();
        //    var ListPlanGi_Index = new List<Guid>();
        //    var listpgiinotinsert = new List<plangoodsissueitemViewModel>();
        //    bool CheckRunwavePast = false;
        //    long IsPA = 1;
        //    Boolean IsTote = false;
        //    olog.logging("runwave", State);
        //    try
        //    {
        //        db.Database.SetCommandTimeout(360);
        //        var result = new actionResultRunWaveV2ViewModelViewModel();

        //        #region Get data Product and Location

        //        var listDataProduct2 = utils.SendDataApi<List<ProductViewModel>>(new AppSettingConfig().GetUrl("getProductMaster"), new { }.sJson());
        //        var listDataLocation2 = utils.SendDataApi<List<locationViewModel>>(new AppSettingConfig().GetUrl("getLocationMaster"), new { }.sJson());

        //        #endregion

        //        #region create and update header

        //        try
        //        {
        //            Guid gi_index = !string.IsNullOrEmpty(model.goodsIssue_Index) ? new Guid(model.goodsIssue_Index) : new Guid("00000000-0000-0000-0000-000000000000");
        //            var gi = db.IM_GoodsIssue.Find(gi_index);
        //            if (gi == null)
        //            {
        //                var filterModel = new GenDocumentTypeViewModel();

        //                filterModel.process_Index = new Guid("2E026669-99BD-4DE0-8818-534F29F7B89D");
        //                filterModel.documentType_Index = new Guid(model.documentType_Index);
        //                //GetConfig
        //                var dropDownDocumentType = utils.SendDataApi<List<GenDocumentTypeViewModel>>(new AppSettingConfig().GetUrl("dropDownDocumentType"), filterModel.sJson());

        //                var genDoc = new AutoNumberService();
        //                DateTime DocumentDate = DateTime.Now;
        //                string DocNum = genDoc.genAutoDocmentNumber(dropDownDocumentType, DocumentDate);

        //                var newGI = new im_GoodsIssue();
        //                newGI.GoodsIssue_Index = Guid.NewGuid();
        //                newGI.Owner_Index = !string.IsNullOrEmpty(model.owner_Index) ? new Guid(model.owner_Index) : Guid.Parse("00000000-0000-0000-0000-000000000000");
        //                newGI.Owner_Id = !string.IsNullOrEmpty(model.owner_Index) ? model.owner_Id : "";
        //                newGI.Owner_Name = !string.IsNullOrEmpty(model.owner_Index) ? model.owner_Name : "";
        //                newGI.DocumentType_Index = new Guid(model.documentType_Index);
        //                newGI.DocumentType_Id = model.documentType_Id;
        //                newGI.DocumentType_Name = model.documentType_Name;
        //                newGI.GoodsIssue_No = DocNum;
        //                newGI.GoodsIssue_Date = model.goodsIssue_Date.toDateDefault();
        //                newGI.GoodsIssue_Time = model.goodsIssue_Time;
        //                newGI.DocumentRef_No1 = model.documentRef_No1;
        //                newGI.DocumentRef_No2 = model.documentRef_No2;
        //                newGI.DocumentRef_No3 = model.documentRef_No3;
        //                newGI.DocumentRef_No4 = model.documentRef_No4;
        //                newGI.DocumentRef_No5 = model.documentRef_No5;
        //                newGI.Document_Remark = model.document_Remark;
        //                newGI.DocumentPriority_Status = model.documentPriority_Status;
        //                newGI.Document_Date = model.document_Date.toDate();
        //                newGI.Warehouse_Index = !string.IsNullOrEmpty(model.warehouse_Index) ? new Guid(model.warehouse_Index) : (Guid?)null;
        //                newGI.Warehouse_Id = !string.IsNullOrEmpty(model.warehouse_Index) ? model.warehouse_Id : null;
        //                newGI.Warehouse_Name = !string.IsNullOrEmpty(model.warehouse_Index) ? model.warehouse_Name : null;
        //                newGI.Document_Status = -2;
        //                newGI.Create_By = model.create_by;
        //                newGI.Create_Date = DateTime.Now;
        //                db.IM_GoodsIssue.Add(newGI);

        //                model.goodsIssue_Index = newGI.GoodsIssue_Index.ToString();
        //                model.goodsIssue_No = newGI.GoodsIssue_No;

        //                var Gi_index = new SqlParameter("@GoodsIssue_Index", model.goodsIssue_Index);
        //                var Gi_no = new SqlParameter("@GoodsIssue_No", model.goodsIssue_No);
        //                var Step = new SqlParameter("@step", "create and update header");
        //                var json = new SqlParameter("@json", "Create");
        //                var User = new SqlParameter("@User", model.create_by);
        //                var resultx = db.Database.ExecuteSqlCommand("EXEC sp_Insert_Process_wave @GoodsIssue_Index ,@GoodsIssue_No ,@step ,@json ,@User", Gi_index, Gi_no, Step, json, User);
        //            }
        //            else
        //            {
        //                if (gi.Document_Status == 0)
        //                {
        //                    gi.Owner_Index = !string.IsNullOrEmpty(model.owner_Index) ? new Guid(model.owner_Index) : Guid.Parse("00000000-0000-0000-0000-000000000000");
        //                    gi.Owner_Id = !string.IsNullOrEmpty(model.owner_Index) ? model.owner_Id : "";
        //                    gi.Owner_Name = !string.IsNullOrEmpty(model.owner_Index) ? model.owner_Name : "";
        //                    gi.DocumentType_Index = new Guid(model.documentType_Index);
        //                    gi.DocumentType_Id = model.documentType_Id;
        //                    gi.DocumentType_Name = model.documentType_Name;
        //                    gi.GoodsIssue_Date = model.goodsIssue_Date.toDateDefault();
        //                    gi.GoodsIssue_Time = model.goodsIssue_Time;
        //                    gi.DocumentRef_No1 = model.documentRef_No1;
        //                    gi.Document_Remark = model.document_Remark;
        //                    gi.Document_Date = model.document_Date.toDate();
        //                    gi.Warehouse_Index = !string.IsNullOrEmpty(model.warehouse_Index) ? new Guid(model.warehouse_Index) : (Guid?)null;
        //                    gi.Warehouse_Id = !string.IsNullOrEmpty(model.warehouse_Index) ? model.warehouse_Id : null;
        //                    gi.Warehouse_Name = !string.IsNullOrEmpty(model.warehouse_Index) ? model.warehouse_Name : null;
        //                    gi.Update_By = model.create_by;
        //                    gi.Update_Date = DateTime.Now;


        //                }

        //                model.goodsIssue_Index = gi.GoodsIssue_Index.ToString();
        //                model.goodsIssue_No = gi.GoodsIssue_No;

        //                var Gi_index = new SqlParameter("@GoodsIssue_Index", model.goodsIssue_Index);
        //                var Gi_no = new SqlParameter("@GoodsIssue_No", model.goodsIssue_No);
        //                var Step = new SqlParameter("@step", "create and update header");
        //                var json = new SqlParameter("@json", "Update");
        //                var User = new SqlParameter("@User", model.create_by);
        //                var resultx = db.Database.ExecuteSqlCommand("EXEC sp_Insert_Process_wave @GoodsIssue_Index ,@GoodsIssue_No ,@step ,@json ,@User", Gi_index, Gi_no, Step, json, User);
        //            }

        //            var transactionx = db.Database.BeginTransaction();
        //            try
        //            {
        //                var Gi_index = new SqlParameter("@GoodsIssue_Index", model.goodsIssue_Index);
        //                var Gi_no = new SqlParameter("@GoodsIssue_No", model.goodsIssue_No);
        //                var Step = new SqlParameter("@step", "create and update header");
        //                var json = new SqlParameter("@json", "Save");
        //                var User = new SqlParameter("@User", model.create_by);
        //                var resultx = db.Database.ExecuteSqlCommand("EXEC sp_Insert_Process_wave @GoodsIssue_Index ,@GoodsIssue_No ,@step ,@json ,@User", Gi_index, Gi_no, Step, json, User);

        //                db.SaveChanges();
        //                transactionx.Commit();
        //            }

        //            catch (Exception exy)
        //            {
        //                var Gi_index = new SqlParameter("@GoodsIssue_Index", model.goodsIssue_Index);
        //                var Gi_no = new SqlParameter("@GoodsIssue_No", model.goodsIssue_No);
        //                var Step = new SqlParameter("@step", "create and update header");
        //                var json = new SqlParameter("@json", "Error Save: " + exy.sJson());
        //                var User = new SqlParameter("@User", model.create_by);
        //                var resultx = db.Database.ExecuteSqlCommand("EXEC sp_Insert_Process_wave @GoodsIssue_Index ,@GoodsIssue_No ,@step ,@json ,@User", Gi_index, Gi_no, Step, json, User);

        //                transactionx.Rollback();

        //                throw exy;



        //            }
        //        }
        //        catch (Exception exyz)
        //        {
        //            var Gi_index = new SqlParameter("@GoodsIssue_Index", model.goodsIssue_Index);
        //            var Gi_no = new SqlParameter("@GoodsIssue_No", model.goodsIssue_No);
        //            var Step = new SqlParameter("@step", "create and update header");
        //            var json = new SqlParameter("@json", "Error : " + exyz.sJson());
        //            var User = new SqlParameter("@User", model.create_by);
        //            var resultx = db.Database.ExecuteSqlCommand("EXEC sp_Insert_Process_wave @GoodsIssue_Index ,@GoodsIssue_No ,@step ,@json ,@User", Gi_index, Gi_no, Step, json, User);

        //            throw exyz;
        //        }

        //        #endregion

        //        #region runwave status 10

        //        var Gi_indexs = new SqlParameter("@GoodsIssue_Index", model.goodsIssue_Index);
        //        var Gi_nos = new SqlParameter("@GoodsIssue_No", model.goodsIssue_No);
        //        var Steps = new SqlParameter("@step", "runwave status 10");
        //        var jsons = new SqlParameter("@json", "start");
        //        var Users = new SqlParameter("@User", model.create_by);
        //        var results = db.Database.ExecuteSqlCommand("EXEC sp_Insert_Process_wave @GoodsIssue_Index ,@GoodsIssue_No ,@step ,@json ,@User", Gi_indexs, Gi_nos, Steps, jsons, Users);

        //        if (model.listGoodsIssueItemViewModel.Count > 0)
        //        {
        //            foreach (var item in model.listGoodsIssueItemViewModel)
        //            {
        //                if (item.planGoodsIssueItem_Index != Guid.Parse("00000000-0000-0000-0000-000000000000"))
        //                {
        //                    PlanGiRunWave.Add(item.planGoodsIssueItem_Index);
        //                    ListPlanGi_Index.Add(item.planGoodsIssue_Index);
        //                }
        //            }
        //        }

        //        using (var db2 = new GIDbContext())
        //        {
        //            db2.Database.SetCommandTimeout(120);
        //            var transaction = db2.Database.BeginTransaction(IsolationLevel.Serializable);
        //            try
        //            {
        //                var Gi_index = new SqlParameter("@GoodsIssue_Index", model.goodsIssue_Index);
        //                var Gi_no = new SqlParameter("@GoodsIssue_No", model.goodsIssue_No);
        //                var Step = new SqlParameter("@step", "runwave status 10");
        //                var json = new SqlParameter("@json", "Update");
        //                var User = new SqlParameter("@User", model.create_by);
        //                var resultx = db.Database.ExecuteSqlCommand("EXEC sp_Insert_Process_wave @GoodsIssue_Index ,@GoodsIssue_No ,@step ,@json ,@User", Gi_index, Gi_no, Step, json, User);

        //                var pgi = db2.IM_PlanGoodsIssueItem.Where(c => PlanGiRunWave.Contains(c.PlanGoodsIssueItem_Index) && c.Document_Status == 0).ToList();
        //                foreach (var p in pgi)
        //                {
        //                    p.Document_Status = 1;
        //                }
        //                var GI = db2.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && (c.RunWave_Status == null || c.RunWave_Status == 0)).ToList();
        //                foreach (var g in GI)
        //                {
        //                    g.Wave_Index = new Guid(model.wave_Index);
        //                    g.RunWave_Status = 10;
        //                }
        //                db2.SaveChanges();
        //                transaction.Commit();
        //            }

        //            catch (Exception exy)
        //            {
        //                var Gi_index = new SqlParameter("@GoodsIssue_Index", model.goodsIssue_Index);
        //                var Gi_no = new SqlParameter("@GoodsIssue_No", model.goodsIssue_No);
        //                var Step = new SqlParameter("@step", "runwave status 10");
        //                var json = new SqlParameter("@json", "Error : "+ exy.sJson());
        //                var User = new SqlParameter("@User", model.create_by);
        //                var resultx = db.Database.ExecuteSqlCommand("EXEC sp_Insert_Process_wave @GoodsIssue_Index ,@GoodsIssue_No ,@step ,@json ,@User", Gi_index, Gi_no, Step, json, User);
        //                transaction.Rollback();
        //                throw exy;
        //            }
        //        }

        //        #endregion

        //        #region planGIResultx

        //        var planGIResultx = db.View_PLANWAVEV.Where(c => PlanGiRunWave.Contains(c.PlanGoodsIssueItem_Index))
        //            .GroupBy(g => new
        //            {
        //                g.Product_Index,
        //                g.Product_Id,
        //                g.Product_Name,
        //                g.Product_SecondName,
        //                g.Product_ThirdName,
        //                g.Product_Lot,
        //                g.ItemStatus_Index,
        //                g.ItemStatus_Id,
        //                g.ItemStatus_Name,
        //                g.MFG_Date,
        //                g.EXP_Date,
        //                g.DocumentRef_No1,
        //                g.DocumentRef_No2,
        //                g.DocumentRef_No3,
        //                g.DocumentRef_No4,
        //                g.DocumentRef_No5,
        //                g.UDF_1,
        //                g.UDF_2,
        //                g.UDF_3,
        //                g.UDF_4,
        //                g.UDF_5,
        //                g.Owner_Index,
        //                g.PlanGoodsIssue_UDF_1,
        //                g.PlanGoodsIssue_UDF_2,
        //                g.PlanGoodsIssue_UDF_3,
        //                g.PlanGoodsIssue_UDF_4,
        //                g.PlanGoodsIssue_UDF_5
        //            })
        //            .Select(s => new
        //            {
        //                s.Key.Product_Index,
        //                s.Key.Product_Id,
        //                s.Key.Product_Name,
        //                s.Key.Product_SecondName,
        //                s.Key.Product_ThirdName,
        //                s.Key.Product_Lot,
        //                s.Key.ItemStatus_Index,
        //                s.Key.ItemStatus_Id,
        //                s.Key.ItemStatus_Name,
        //                s.Key.MFG_Date,
        //                s.Key.EXP_Date,
        //                s.Key.DocumentRef_No1,
        //                s.Key.DocumentRef_No2,
        //                s.Key.DocumentRef_No3,
        //                s.Key.DocumentRef_No4,
        //                s.Key.DocumentRef_No5,
        //                s.Key.UDF_1,
        //                s.Key.UDF_2,
        //                s.Key.UDF_3,
        //                s.Key.UDF_4,
        //                s.Key.UDF_5,
        //                total = s.Sum(x => x.TotalQty),
        //                GITotalQty = s.Sum(x => x.GITotalQty),
        //                QtyWave = s.Sum(x => x.TotalQty) - s.Sum(x => x.GITotalQty),
        //                s.Key.Owner_Index,
        //                s.Key.PlanGoodsIssue_UDF_1,
        //                s.Key.PlanGoodsIssue_UDF_2,
        //                s.Key.PlanGoodsIssue_UDF_3,
        //                s.Key.PlanGoodsIssue_UDF_4,
        //                s.Key.PlanGoodsIssue_UDF_5
        //            }).ToList();

        //        #endregion

        //        #region Check  View_PLANWAVEV

        //        State = "View_PLANWAVEV";
        //        olog.logging("runwave", State);
        //        if (planGIResultx.Count == 0)
        //        {
        //            throw new Exception("Plan GI not found..");
        //        }

        //        #endregion

        //        #region Get WaveRule and ViewWaveTemplate

        //        var jsGetWaveRule = new { process_Index = process, wave_Index = model.wave_Index };
        //        var getWaveRule = utils.SendDataApi<List<WaveRuleViewModel>>(new AppSettingConfig().GetUrl("getWaveRule"), jsGetWaveRule.sJson());

        //        if (getWaveRule.Count == 0)
        //        {
        //            throw new Exception("Wave Template not found.");
        //        }

        //        var getViewWaveTemplateEX = utils.SendDataApi<List<WaveTemplateViewModel>>(new AppSettingConfig().GetUrl("getViewWaveTemplate"), new { }.sJson());

        //        #endregion

        //        State = "getWaveRule";
        //        olog.logging("runwave", State);
        //        bool isUseAttribute = false;
        //        int A_LOOP = 0;
        //        int B_LOOP = 0;
        //        int C_LOOP = 0;
        //        int D_LOOP = 0;
        //        int E_LOOP = 0;
        //        int F_LOOP = 0;
        //        int G_LOOP = 0;
        //        int H_LOOP = 0;
        //        int I_LOOP = 0;
        //        int J_LOOP = 0;
        //        int K_LOOP = 0;

        //        #region for getWaveRule >>>>  A_LOOP

        //        foreach (var waveRule in getWaveRule.OrderBy(o => o.waveRule_Seq))
        //        {
        //            A_LOOP++;
        //            var Gi_indexA = new SqlParameter("@GoodsIssue_Index", model.goodsIssue_Index);
        //            var Gi_noA = new SqlParameter("@GoodsIssue_No", model.goodsIssue_No);
        //            var StepA = new SqlParameter("@step", "waveRule A_LOOP");
        //            var jsonA = new SqlParameter("@json", "A : " + A_LOOP);
        //            var UserA = new SqlParameter("@User", model.create_by);
        //            var resultA = db.Database.ExecuteSqlCommand("EXEC sp_Insert_Process_wave @GoodsIssue_Index ,@GoodsIssue_No ,@step ,@json ,@User", Gi_indexA, Gi_noA, StepA, jsonA, UserA);

        //            var jsgetViewWaveTemplate = new { process_Index = process, wave_Index = model.wave_Index, rule_Index = waveRule.rule_Index };
        //            var getViewWaveTemplate = getViewWaveTemplateEX.Where(c => c.process_Index == process.ToString() && c.wave_Index == model.wave_Index && c.rule_Index == waveRule.rule_Index);
        //            State = "getViewWaveTemplate";
        //            olog.logging("runwave", State);
        //            var planGIWaveResult = db.View_PLANWAVEbyPLANGIV2.AsQueryable();
        //            var check = planGIWaveResult.ToList();
        //            planGIWaveResult = planGIWaveResult.Where(c => PlanGiRunWave.Contains(c.PlanGoodsIssueItem_Index));

        //            #region for RuleSource >>>> B_LOOP
        //            var RuleSourceList = getViewWaveTemplate.Where(c => c.isSource == 1 && c.isSearch == 1).ToList();

        //            foreach (var itemRuleSourceList in RuleSourceList)
        //            {
        //                B_LOOP++;
        //                var Gi_indexB = new SqlParameter("@GoodsIssue_Index", model.goodsIssue_Index);
        //                var Gi_noB = new SqlParameter("@GoodsIssue_No", model.goodsIssue_No);
        //                var StepB = new SqlParameter("@step", "RuleSourceList B_LOOP");
        //                var jsonB = new SqlParameter("@json", "A : "+A_LOOP+" __ B: "+ B_LOOP);
        //                var UserB = new SqlParameter("@User", model.create_by);
        //                var resultB = db.Database.ExecuteSqlCommand("EXEC sp_Insert_Process_wave @GoodsIssue_Index ,@GoodsIssue_No ,@step ,@json ,@User", Gi_indexB, Gi_noB, StepB, jsonB, UserB);

        //                if (itemRuleSourceList.ruleConditionOperation == "IN")
        //                {
        //                    var dataarray = itemRuleSourceList.ruleCondition_Param.Replace("'", "").Split(',');
        //                    if (itemRuleSourceList.ruleConditionField_Name == "DocumentType_Id")
        //                    {
        //                        planGIWaveResult = planGIWaveResult.Where(c => dataarray.Contains(c.DocumentType_Id));
        //                    }
        //                    if (itemRuleSourceList.ruleConditionField_Name == "Owner_Id")
        //                    {
        //                        planGIWaveResult = planGIWaveResult.Where(c => dataarray.Contains(c.Owner_Id));
        //                    }
        //                }
        //                else if (itemRuleSourceList.ruleConditionOperation == "=")
        //                {
        //                    if (itemRuleSourceList.ruleConditionField_Name == "UseAttribute")
        //                    {
        //                        if (itemRuleSourceList.ruleCondition_Param.ToString().ToUpper() == "TRUE")
        //                        {
        //                            isUseAttribute = true;
        //                        }
        //                        else
        //                        {
        //                            isUseAttribute = false;
        //                        }

        //                    }
        //                    else
        //                    {
        //                        var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
        //                        var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.Equal(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
        //                            , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                        planGIWaveResult = planGIWaveResult.Where(lambda);
        //                    }

        //                }
        //                else if (itemRuleSourceList.ruleConditionOperation == ">")
        //                {
        //                    var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
        //                    var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.GreaterThan(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
        //                        , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                    planGIWaveResult = planGIWaveResult.Where(lambda);

        //                }
        //                else if (itemRuleSourceList.ruleConditionOperation == "<")
        //                {
        //                    var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
        //                    var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.LessThan(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
        //                        , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                    planGIWaveResult = planGIWaveResult.Where(lambda);
        //                }
        //                else if (itemRuleSourceList.ruleConditionOperation == "!=")
        //                {
        //                    var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
        //                    var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.NotEqual(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
        //                        , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                    planGIWaveResult = planGIWaveResult.Where(lambda);
        //                }
        //                else if (itemRuleSourceList.ruleConditionOperation == ">=")
        //                {
        //                    var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
        //                    var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.GreaterThanOrEqual(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
        //                        , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                    planGIWaveResult = planGIWaveResult.Where(lambda);
        //                }
        //                else if (itemRuleSourceList.ruleConditionOperation == "<=")
        //                {
        //                    var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
        //                    var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.LessThanOrEqual(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
        //                        , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                    planGIWaveResult = planGIWaveResult.Where(lambda);
        //                }
        //                else if (itemRuleSourceList.ruleConditionOperation == "Like")
        //                {
        //                    var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
        //                    var predicate = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>(
        //                        Expression.Call(
        //                            Expression.PropertyOrField(param, itemRuleSourceList.ruleConditionField_Name),
        //                            "Contains", null, Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""))
        //                        ), param);
        //                    planGIWaveResult = planGIWaveResult.Where(predicate);
        //                }
        //            }
        //            #endregion

        //            #region for RuleDesSort >>>> C_LOOP
        //            var RuleSourceSortList = getViewWaveTemplate.Where(c => c.isSource == 1 && c.isSort == 1).ToList();

        //            string setWhereSourceSort = "";

        //            if (RuleSourceSortList.Count > 0)
        //            {
        //                setWhereSourceSort += " Order by ";
        //            }

        //            int iRowsSourceSort = 0;
        //            foreach (var itemRuleSourceSortList in RuleSourceSortList)
        //            {
        //                C_LOOP++;
        //                var Gi_indexC = new SqlParameter("@GoodsIssue_Index", model.goodsIssue_Index);
        //                var Gi_noC = new SqlParameter("@GoodsIssue_No", model.goodsIssue_No);
        //                var StepC = new SqlParameter("@step", "RuleSourceSortList C_LOOP");
        //                var jsonC = new SqlParameter("@json", "A : " + A_LOOP + " __ C: " + C_LOOP);
        //                var UserC = new SqlParameter("@User", model.create_by);
        //                var resultC = db.Database.ExecuteSqlCommand("EXEC sp_Insert_Process_wave @GoodsIssue_Index ,@GoodsIssue_No ,@step ,@json ,@User", Gi_indexC, Gi_noC, StepC, jsonC, UserC);
        //                if (iRowsSourceSort == 0)
        //                {
        //                    setWhereSourceSort += itemRuleSourceSortList.ruleConditionField_Name + ' ' + itemRuleSourceSortList.ruleCondition_Param;
        //                    var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
        //                    var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, string>>(Expression.Property(param, itemRuleSourceSortList.ruleConditionField_Name), param);
        //                    if (itemRuleSourceSortList.ruleCondition_Param.ToUpper() == "DESC")
        //                    {
        //                        planGIWaveResult = planGIWaveResult.OrderByDescending(lambda);
        //                    }
        //                    else 
        //                    {
        //                        planGIWaveResult = planGIWaveResult.OrderBy(lambda);
        //                    }
        //                }
        //                else
        //                {
        //                    setWhereSourceSort += "," + itemRuleSourceSortList.ruleConditionField_Name + ' ' + itemRuleSourceSortList.ruleCondition_Param;
        //                    var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
        //                    var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, string>>(Expression.Property(param, itemRuleSourceSortList.ruleConditionField_Name), param);
        //                    if (itemRuleSourceSortList.ruleCondition_Param.ToUpper() == "DESC")
        //                    {
        //                        planGIWaveResult = planGIWaveResult.OrderByDescending(lambda);
        //                    }
        //                    else 
        //                    {
        //                        planGIWaveResult = planGIWaveResult.OrderBy(lambda);
        //                    }
        //                }
        //                iRowsSourceSort = iRowsSourceSort + 1;

        //            }
        //            #endregion

        //            var planGIWaveResult2 = planGIWaveResult.ToList();
        //            State = "View_PLANWAVEbyPLANGIV2";
        //            olog.logging("runwave", State);

        //            #region for planGIResultx >>>> D_LOOP
        //            foreach (var item in planGIResultx)
        //            {
        //                D_LOOP++;
        //                var Gi_indexD = new SqlParameter("@GoodsIssue_Index", model.goodsIssue_Index);
        //                var Gi_noD = new SqlParameter("@GoodsIssue_No", model.goodsIssue_No);
        //                var StepD = new SqlParameter("@step", "planGIResultx D_LOOP");
        //                var jsonD = new SqlParameter("@json", "A : " + A_LOOP + " __ D: " + D_LOOP);
        //                var UserD = new SqlParameter("@User", model.create_by);
        //                var resultD = db.Database.ExecuteSqlCommand("EXEC sp_Insert_Process_wave @GoodsIssue_Index ,@GoodsIssue_No ,@step ,@json ,@User", Gi_indexD, Gi_noD, StepD, jsonD, UserD);

        //                olog.logging("runwave", "planGIResultx : " + item.Product_Id.ToString());

        //                var planGIWaveResult3 = planGIWaveResult2.AsQueryable();
        //                var strwhere = new getViewBinbalanceViewModel();

        //                #region query Plag Gi
        //                if (item.Owner_Index.ToString() != "")
        //                {
        //                    strwhere.Owner_Index = item.Owner_Index;
        //                    planGIWaveResult3 = planGIWaveResult3.Where(c => c.Owner_Index == item.Owner_Index);
        //                }
        //                if (item.Product_Index.ToString() != "")
        //                {
        //                    strwhere.Product_Index = item.Product_Index;
        //                    planGIWaveResult3 = planGIWaveResult3.Where(c => c.Product_Index == item.Product_Index);
        //                }

        //                if (item.ItemStatus_Index.ToString() != "")
        //                {
        //                    strwhere.ItemStatus_Index = item.ItemStatus_Index;
        //                    planGIWaveResult3 = planGIWaveResult3.Where(c => c.ItemStatus_Index == item.ItemStatus_Index);
        //                }

        //                if (item.Product_Lot != null)
        //                {
        //                    if (item.Product_Lot.ToString() != "")
        //                    {
        //                        strwhere.Product_Lot = item.Product_Lot;
        //                        planGIWaveResult3 = planGIWaveResult3.Where(c => c.Product_Lot == item.Product_Lot);
        //                    }
        //                }

        //                if (isUseAttribute == true)
        //                {
        //                    // ADD UDF 1-5 
        //                    strwhere.isUseAttribute = isUseAttribute;
        //                    if (item.UDF_1 != null)
        //                    {
        //                        strwhere.UDF_1 = item.UDF_1;
        //                        planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_1 == item.UDF_1);
        //                    }

        //                    if (item.UDF_2 != null)
        //                    {
        //                        strwhere.UDF_2 = item.UDF_2;
        //                        planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_2 == item.UDF_2);
        //                    }

        //                    if (item.UDF_3 != null)
        //                    {
        //                        strwhere.UDF_3 = item.UDF_3;
        //                        planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_3 == item.UDF_3);
        //                    }

        //                    if (item.UDF_4 != null)
        //                    {
        //                        strwhere.UDF_4 = item.UDF_4;
        //                        planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_4 == item.UDF_4);
        //                    }

        //                    if (item.UDF_5 != null)
        //                    {
        //                        strwhere.UDF_5 = item.UDF_5;
        //                        planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_5 == item.UDF_5);
        //                    }
        //                }
        //                #endregion

        //                if (planGIWaveResult3.OrderBy(c => c.LineNum).ToList().Count < 1)
        //                {
        //                    continue;
        //                }

        //                #region Isuse
        //                strwhere.isuse = model.goodsIssue_Index;
        //                var Isuse = new SqlParameter("@Isuse", strwhere.isuse);
        //                var product_index = new SqlParameter("@product_index", strwhere.Product_Index);
        //                var itemstatus_index = new SqlParameter("@itemstatus_index", strwhere.ItemStatus_Index);
        //                var owner_index = new SqlParameter("@owner_index", strwhere.Owner_Index);
        //                var resultx = db.Database.ExecuteSqlCommand("EXEC sp_Update_isuse @Isuse ,@product_index ,@itemstatus_index ,@owner_index ", Isuse, product_index, itemstatus_index, owner_index);
        //                #endregion

        //                State = "planGIWaveResult3";
        //                olog.logging("runwave", State);
        //                strwhere.isuse = model.goodsIssue_Index;
        //                strwhere.isActive = true;

        //                decimal? QtyPlanGIRemian = 0;

        //                #region for planGIWaveResult3 >>>> E_LOOP

        //                foreach (var itemPlanGI in planGIWaveResult3.OrderBy(c => c.LineNum))
        //                {
        //                    E_LOOP++;
        //                    var Gi_indexE = new SqlParameter("@GoodsIssue_Index", model.goodsIssue_Index);
        //                    var Gi_noE = new SqlParameter("@GoodsIssue_No", model.goodsIssue_No);
        //                    var StepE = new SqlParameter("@step", "planGIWaveResult3 E_LOOP");
        //                    var jsonE = new SqlParameter("@json", "A : " + A_LOOP + " __ D: " + D_LOOP+" __ E: "+ E_LOOP);
        //                    var UserE = new SqlParameter("@User", model.create_by);
        //                    var resultE = db.Database.ExecuteSqlCommand("EXEC sp_Insert_Process_wave @GoodsIssue_Index ,@GoodsIssue_No ,@step ,@json ,@User", Gi_indexE, Gi_noE, StepE, jsonE, UserE);

        //                    if (itemPlanGI.ModPlanGI == 0)
        //                    {
        //                        IsPA = 0;

        //                    }
        //                    else
        //                    {
        //                        IsPA = 1;
        //                    }

        //                    State = "listDataProduct2.ToList()";
        //                    olog.logging("runwave", State);
        //                    var listProducttote = listDataProduct2.Where(c => c.product_Index == itemPlanGI.Product_Index).ToList();
        //                    if (listProducttote != null)
        //                    {
        //                        var checkProduct = listProducttote.Where(c => c.product_Index == itemPlanGI.Product_Index).FirstOrDefault();


        //                        if (checkProduct.Ref_No1 == "carton flow rack")
        //                        {
        //                            IsTote = true;

        //                        }
        //                        else
        //                        {
        //                            IsTote = false;

        //                        }

        //                    }
        //                    else
        //                    {
        //                        IsTote = false;
        //                    }


        //                    var ListGoodsIssueItemLocation = new List<im_GoodsIssueItemLocation>();
        //                    if (itemPlanGI.Product_Id == "1004492")
        //                    {
        //                        var lnum = itemPlanGI.LineNum;

        //                    }

        //                    QtyPlanGIRemian = itemPlanGI.TotalQty - itemPlanGI.GITotalQty;
        //                    if (QtyPlanGIRemian <= 0)
        //                    {
        //                        break;
        //                    }

        //                    #region view_waveBinbalance2
        //                    State = "getViewBinbalanceapi";
        //                    olog.logging("runwave", State);

        //                    var listDataBinbalance2 = utils.SendDataApi<List<BinBalanceViewModel>>(new AppSettingConfig().GetUrl("getViewBinbalance"), strwhere.sJson());

        //                    var checklistDataBinbalance2 = listDataBinbalance2.ToList();

        //                    State = "View_WaveCheckProductLot";
        //                    olog.logging("runwave", State);

        //                    var ListLot = new List<String>();
        //                    var ListLotNotWave = new List<String>();
        //                    var listAll_Lot = db.View_WaveCheckProductLot.Where(c => c.Product_Index == itemPlanGI.Product_Index).ToList();

        //                    var listLot_In_Product = listAll_Lot.Where(c => c.PlanGoodsIssue_Index == itemPlanGI.PlanGoodsIssue_Index && c.Product_Index == itemPlanGI.Product_Index).ToList();

        //                    if (listLot_In_Product.Count > 0)
        //                    {
        //                        foreach (var itemlot in listLot_In_Product)
        //                        {
        //                            ListLot.Add(item.Product_Lot);
        //                        }
        //                    }

        //                    var listLot_NotIN_Wave = listAll_Lot.Where(c => !ListLot.Contains(c.Product_Lot)).ToList();


        //                    if (listLot_NotIN_Wave.Count > 0)
        //                    {
        //                        foreach (var itemlot in listLot_NotIN_Wave)
        //                        {
        //                            ListLotNotWave.Add(itemlot.Product_Lot);
        //                        }
        //                    }

        //                    State = "getView_WaveBinBalance2";
        //                    olog.logging("runwave", State);
        //                    var GIDate = model.goodsIssue_Date.toDate();

        //                    var GoodsIssue_Index = new SqlParameter("@GoodsIssue_Index", strwhere.isuse);
        //                    var Owner_Index = new SqlParameter("@Owner_Index", strwhere.Owner_Index.ToString());
        //                    var Product_Index = new SqlParameter("@Product_Index", strwhere.Product_Index.ToString());
        //                    var Product_Lot = new SqlParameter("@Product_Lot", strwhere.Product_Lot == null ? "" : strwhere.Product_Lot);
        //                    var ItemStatus_Index = new SqlParameter("@ItemStatus_Index", strwhere.ItemStatus_Index.ToString());
        //                    var View_WaveBinBalance2 = db.View_WaveBinBalanceViewModel_Ace.FromSql("EXEC sp_WaveBinBalance @GoodsIssue_Index ,@Owner_Index ,@Product_Index ,@Product_Lot ,@ItemStatus_Index", GoodsIssue_Index, Owner_Index, Product_Index, Product_Lot, ItemStatus_Index);

        //                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(c=>  
        //                        (c.goodsReceive_EXP_Date != null ? c.goodsReceive_EXP_Date.sParse<DateTime>().Subtract(DateTime.Now.AddDays(-1)).Days : 1) > (c.productShelfLife_D ?? 0) &&
        //                        !(ListLotNotWave.Contains(c.product_Lot)) &&
        //                        Convert.ToDateTime(c.goodsReceive_Date).Date <= GIDate.Value.Date &&
        //                        (string.IsNullOrEmpty(itemPlanGI.ERP_Location) ? (c.erp_Location ?? "") == "" : c.erp_Location == itemPlanGI.ERP_Location)
        //                    );




        //                    #endregion

        //                    var CheckBinBalanceResult = View_WaveBinBalance2.ToList();


        //                    #region for RuleDesSort >>>> F_LOOP
        //                    var RuleDesList2 = getViewWaveTemplate.Where(c => c.isDestination == 1 && c.isSearch == 1).ToList();


        //                    foreach (var itemRuleDesList in RuleDesList2)
        //                    {
        //                        F_LOOP++;
        //                        var Gi_indexF = new SqlParameter("@GoodsIssue_Index", model.goodsIssue_Index);
        //                        var Gi_noF = new SqlParameter("@GoodsIssue_No", model.goodsIssue_No);
        //                        var StepF = new SqlParameter("@step", "RuleDesList2 F_LOOP");
        //                        var jsonF = new SqlParameter("@json", "A : " + A_LOOP + " __ D: " + D_LOOP + " __ E: " + E_LOOP + " __ F: " + F_LOOP);
        //                        var UserF = new SqlParameter("@User", model.create_by);
        //                        var resultF = db.Database.ExecuteSqlCommand("EXEC sp_Insert_Process_wave @GoodsIssue_Index ,@GoodsIssue_No ,@step ,@json ,@User", Gi_indexF, Gi_noF, StepF, jsonF, UserF);

        //                        if (itemRuleDesList.ruleConditionOperation == "IN")
        //                        {
        //                            if (itemRuleDesList.ruleConditionField_Name == "Zone_Id")
        //                            {
        //                                var listDataZoneLocation = utils.SendDataApi<List<ZoneLocationViewModel>>(new AppSettingConfig().GetUrl("getZoneLocationMaster"), new { }.sJson());
        //                                var listDataZone = utils.SendDataApi<List<ZoneViewModel>>(new AppSettingConfig().GetUrl("getZoneMaster"), new { }.sJson());

        //                                var dataarray = itemRuleDesList.ruleCondition_Param.Replace("'", "").Split(',');
        //                                var dataZone = listDataZone.Where(c => dataarray.Contains(c.zone_Id)).ToList();
        //                                var zoneArray = new List<Guid?>();
        //                                foreach (var z in dataZone)
        //                                {
        //                                    zoneArray.Add(z.zone_Index);
        //                                }
        //                                var listLocation_index = listDataZoneLocation.Where(c => zoneArray.Contains(c.zone_Index)).Select(s => s.location_Index.ToString()).ToList();
        //                                View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => listLocation_index.Contains(c.location_Index));
        //                            }
        //                            else
        //                            {
        //                                var dataarray = itemRuleDesList.ruleCondition_Param.Replace("'", "").Split(',');
        //                                if (itemRuleDesList.ruleConditionField_Name == "GoodsReceive_Date")
        //                                {
        //                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.goodsReceive_Date));
        //                                }
        //                                if (itemRuleDesList.ruleConditionField_Name == "GoodsReceive_No")
        //                                {
        //                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.goodsReceive_No));
        //                                }
        //                                if (itemRuleDesList.ruleConditionField_Name == "ItemStatus_Id")
        //                                {
        //                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.itemStatus_Id));
        //                                }
        //                                if (itemRuleDesList.ruleConditionField_Name == "Location_Name")
        //                                {
        //                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.location_Name));
        //                                }

        //                                if (itemRuleDesList.ruleConditionField_Name == "Product_Id")
        //                                {
        //                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.product_Id));
        //                                }
        //                                if (itemRuleDesList.ruleConditionField_Name == "Product_Lot")
        //                                {
        //                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.product_Lot));
        //                                }

        //                            }
        //                        }
        //                        else if (itemRuleDesList.ruleConditionOperation == "=")
        //                        {
        //                            if (itemRuleDesList.ruleConditionField_Name == "Zone_Id")
        //                            {
        //                                var listDataZoneLocation = utils.SendDataApi<List<ZoneLocationViewModel>>(new AppSettingConfig().GetUrl("getZoneLocationMaster"), new { }.sJson());
        //                                var listDataZone = utils.SendDataApi<List<ZoneViewModel>>(new AppSettingConfig().GetUrl("getZoneMaster"), new { }.sJson());

        //                                var param = Expression.Parameter(typeof(ZoneViewModel), "x");
        //                                var lambda = Expression.Lambda<Func<ZoneViewModel, bool>>((Expression)Expression.Equal(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
        //                                    , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                                var dataZone = listDataZone.AsQueryable().Where(lambda).ToList();
        //                                var zoneArray = new List<Guid?>();
        //                                foreach (var z in dataZone)
        //                                {
        //                                    zoneArray.Add(z.zone_Index);
        //                                }
        //                                var listLocation_index = listDataZoneLocation.Where(c => zoneArray.Contains(c.zone_Index)).Select(s => s.location_Index.ToString()).ToList();
        //                                View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => listLocation_index.Contains(c.location_Index));
        //                            }
        //                            else
        //                            {
        //                                var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel_Ace), "x");
        //                                var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel_Ace, bool>>((Expression)Expression.Equal(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
        //                                    , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                                View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
        //                            }
        //                        }
        //                        else if (itemRuleDesList.ruleConditionOperation == ">")
        //                        {
        //                            var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel_Ace), "x");
        //                            var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel_Ace, bool>>((Expression)Expression.GreaterThan(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
        //                                , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
        //                        }
        //                        else if (itemRuleDesList.ruleConditionOperation == "<")
        //                        {
        //                            var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel_Ace), "x");
        //                            var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel_Ace, bool>>((Expression)Expression.LessThan(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
        //                                , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
        //                        }
        //                        else if (itemRuleDesList.ruleConditionOperation == "!=")
        //                        {
        //                            var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel_Ace), "x");
        //                            var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel_Ace, bool>>((Expression)Expression.NotEqual(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
        //                                , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
        //                        }
        //                        else if (itemRuleDesList.ruleConditionOperation == ">=")
        //                        {
        //                            var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel_Ace), "x");
        //                            var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel_Ace, bool>>((Expression)Expression.GreaterThanOrEqual(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
        //                                , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
        //                        }
        //                        else if (itemRuleDesList.ruleConditionOperation == "<=")
        //                        {
        //                            var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel_Ace), "x");
        //                            var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel_Ace, bool>>((Expression)Expression.LessThanOrEqual(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
        //                                , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
        //                        }
        //                        else if (itemRuleDesList.ruleConditionOperation == "Like")
        //                        {
        //                            var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel_Ace), "x");
        //                            var predicate = Expression.Lambda<Func<View_WaveBinBalanceViewModel_Ace, bool>>(
        //                                Expression.Call(
        //                                    Expression.PropertyOrField(param, itemRuleDesList.ruleConditionField_Name),
        //                                    "Contains", null, Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""))
        //                                ), param);
        //                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(predicate);
        //                        }

        //                    }
        //                    #endregion

        //                    #region for RuleDesSortList >>>> G_LOOP
        //                    var RuleDesSortList2 = getViewWaveTemplate.Where(c => c.isDestination == 1 && c.isSort == 1).ToList();

        //                    int iRowsDesSort2 = 0;
        //                    foreach (var itemRuleDesSortList in RuleDesSortList2)
        //                    {
        //                        G_LOOP++;
        //                        var Gi_indexG = new SqlParameter("@GoodsIssue_Index", model.goodsIssue_Index);
        //                        var Gi_noG = new SqlParameter("@GoodsIssue_No", model.goodsIssue_No);
        //                        var StepG = new SqlParameter("@step", "RuleDesSortList2 G_LOOP");
        //                        var jsonG = new SqlParameter("@json", "A : " + A_LOOP + " __ D: " + D_LOOP + " __ E: " + E_LOOP + " __ G: " + G_LOOP);
        //                        var UserG = new SqlParameter("@User", model.create_by);
        //                        var resultG = db.Database.ExecuteSqlCommand("EXEC sp_Insert_Process_wave @GoodsIssue_Index ,@GoodsIssue_No ,@step ,@json ,@User", Gi_indexG, Gi_noG, StepG, jsonG, UserG);

        //                        if (iRowsDesSort2 == 0)
        //                        {
        //                            var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel_Ace), "x");
        //                            var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel_Ace, string>>(Expression.Property(param, itemRuleDesSortList.ruleConditionField_Name), param);
        //                            if (itemRuleDesSortList.ruleCondition_Param.ToUpper() == "DESC")
        //                            {
        //                                View_WaveBinBalance2 = View_WaveBinBalance2.OrderByDescending(lambda);
        //                            }
        //                            else 
        //                            {
        //                                View_WaveBinBalance2 = View_WaveBinBalance2.OrderBy(lambda);
        //                            }
        //                        }
        //                        else
        //                        {
        //                            var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel_Ace), "x");
        //                            var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel_Ace, string>>(Expression.Property(param, itemRuleDesSortList.ruleConditionField_Name), param);
        //                            if (itemRuleDesSortList.ruleCondition_Param.ToUpper() == "DESC")
        //                            {
        //                                View_WaveBinBalance2 = View_WaveBinBalance2.OrderByDescending(lambda);
        //                            }
        //                            else 
        //                            {
        //                                View_WaveBinBalance2 = View_WaveBinBalance2.OrderBy(lambda);
        //                            }
        //                        }
        //                        iRowsDesSort2 = iRowsDesSort2 + 1;

        //                    }
        //                    #endregion

        //                    State = "View_WaveBinBalance2";
        //                    olog.logging("runwave", State);
        //                    var BinBalanceResult = View_WaveBinBalance2.ToList();

        //                    var itemBinSort = new List<View_WaveBinBalanceViewModel_Ace>();


        //                    if (IsPA == 1 && IsTote == true)
        //                    {
        //                        itemBinSort = BinBalanceResult.OrderBy(c => c.picking_Seq).ThenBy(f => f.location_Bay).ThenBy(d => d.ageRemain).ThenBy(e => e.goodsReceive_Date).ThenBy(f => f.location_Name).ToList();

        //                    }
        //                    else if (IsPA == 0 && IsTote == true)
        //                    {
        //                        itemBinSort = BinBalanceResult.OrderBy(c => c.picking_Seq).ThenByDescending(f => f.location_Bay).ThenBy(d => d.ageRemain).ThenBy(e => e.goodsReceive_Date).ThenBy(f => f.location_Name).ToList();
        //                    }
        //                    else
        //                    {
        //                        itemBinSort = BinBalanceResult.OrderBy(c => c.picking_Seq).ThenBy(d => d.ageRemain).ThenBy(e => e.goodsReceive_Date).ThenBy(f => f.location_Name).ToList();

        //                    }

        //                    int icountloop = 0;

        //                    #region for itemBinSort >>>> H_LOOP

        //                    foreach (var itemBin in itemBinSort)
        //                    {
        //                        H_LOOP++;
        //                        var Gi_indexH = new SqlParameter("@GoodsIssue_Index", model.goodsIssue_Index);
        //                        var Gi_noH = new SqlParameter("@GoodsIssue_No", model.goodsIssue_No);
        //                        var StepH = new SqlParameter("@step", "itemBinSort H_LOOP");
        //                        var jsonH = new SqlParameter("@json", "A : " + A_LOOP + " __ D: " + D_LOOP + " __ E: " + E_LOOP + " __ H: " + H_LOOP);
        //                        var UserH = new SqlParameter("@User", model.create_by);
        //                        var resultH = db.Database.ExecuteSqlCommand("EXEC sp_Insert_Process_wave @GoodsIssue_Index ,@GoodsIssue_No ,@step ,@json ,@User", Gi_indexH, Gi_noH, StepH, jsonH, UserH);

        //                        icountloop = icountloop + 1;

        //                        olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [" + icountloop.ToString() + "]  Product_Id " + itemBin.product_Id + " Bin_Index " + itemBin.binBalance_Index);

        //                        decimal? QtyBal = itemBin.binBalance_QtyBal - itemBin.binBalance_QtyReserve;


        //                        olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " :  QtyBal " + QtyBal.ToString() + " =  binBalance_QtyBal : " + itemBin.binBalance_QtyBal.ToString() + "  -  binBalance_QtyReserve  : " + itemBin.binBalance_QtyReserve.ToString());


        //                        if (QtyPlanGIRemian <= 0)
        //                        {
        //                            olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [QtyPlanGIRemian <= 0 ]  " + QtyPlanGIRemian.ToString());

        //                            break;
        //                        }
        //                        if (QtyBal <= 0)
        //                        {
        //                            olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [QtyBal <= 0 ]  " + QtyBal.ToString());
        //                            continue;
        //                        }

        //                        if (QtyPlanGIRemian >= QtyBal && QtyBal > 0)
        //                        {
        //                            State = "QtyPlanGIRemian >= QtyBal && QtyBal > 0";
        //                            olog.logging("runwave", State + " TAG_NO " + itemBin.tag_No + " Product_Id " + itemBin.product_Id + " Bin_Index " + itemBin.binBalance_Index);

        //                            olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [QtyPlanGIRemian >= QtyBal && QtyBal > 0]   QtyPlanGIRemian " + QtyPlanGIRemian.ToString() + "    QtyBal : " + QtyBal.ToString());

        //                            var GoodsIssueItemLocation = new im_GoodsIssueItemLocation();
        //                            GoodsIssueItemLocation.GoodsIssueItemLocation_Index = Guid.NewGuid();
        //                            GoodsIssueItemLocation.GoodsIssue_Index = new Guid(model.goodsIssue_Index);
        //                            GoodsIssueItemLocation.TagItem_Index = new Guid(itemBin.tagItem_Index);
        //                            GoodsIssueItemLocation.Tag_Index = new Guid(itemBin.tag_Index);
        //                            GoodsIssueItemLocation.Tag_No = itemBin.tag_No;
        //                            GoodsIssueItemLocation.Product_Index = new Guid(itemBin.product_Index);
        //                            GoodsIssueItemLocation.Product_Id = itemBin.product_Id;
        //                            GoodsIssueItemLocation.Product_Name = itemBin.product_Name;
        //                            GoodsIssueItemLocation.Product_SecondName = itemBin.product_SecondName;
        //                            GoodsIssueItemLocation.Product_ThirdName = itemBin.product_ThirdName;
        //                            GoodsIssueItemLocation.Product_Lot = itemBin.product_Lot;
        //                            GoodsIssueItemLocation.ItemStatus_Index = new Guid(itemBin.itemStatus_Index);
        //                            GoodsIssueItemLocation.ItemStatus_Id = itemBin.itemStatus_Id;
        //                            GoodsIssueItemLocation.ItemStatus_Name = itemBin.itemStatus_Name;
        //                            GoodsIssueItemLocation.Location_Index = new Guid(itemBin.location_Index);
        //                            GoodsIssueItemLocation.Location_Id = itemBin.location_Id;
        //                            GoodsIssueItemLocation.Location_Name = itemBin.location_Name;
        //                            GoodsIssueItemLocation.QtyPlan = (Decimal)itemPlanGI.TotalQtyRemian;
        //                            GoodsIssueItemLocation.Qty = (Decimal)QtyBal / (Decimal)itemPlanGI.Ratio;
        //                            GoodsIssueItemLocation.Ratio = (Decimal)itemPlanGI.Ratio;
        //                            GoodsIssueItemLocation.TotalQty = (Decimal)QtyBal;
        //                            GoodsIssueItemLocation.ProductConversion_Index = (Guid)itemPlanGI.ProductConversion_Index;
        //                            GoodsIssueItemLocation.ProductConversion_Id = itemPlanGI.ProductConversion_Id;
        //                            GoodsIssueItemLocation.ProductConversion_Name = itemPlanGI.ProductConversion_Name;
        //                            GoodsIssueItemLocation.MFG_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_MFG_Date) ? itemBin.goodsReceive_MFG_Date.toDate() : null;
        //                            GoodsIssueItemLocation.EXP_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_EXP_Date) ? itemBin.goodsReceive_EXP_Date.toDate() : null;

        //                            GoodsIssueItemLocation.UnitWeight = itemBin.binBalance_UnitWeightBal;
        //                            GoodsIssueItemLocation.UnitWeight_Index = itemBin.binBalance_UnitWeightBal_Index;
        //                            GoodsIssueItemLocation.UnitWeight_Id = itemBin.binBalance_UnitWeightBal_Id;
        //                            GoodsIssueItemLocation.UnitWeight_Name = itemBin.binBalance_UnitWeightBal_Name;
        //                            GoodsIssueItemLocation.UnitWeightRatio = itemBin.binBalance_UnitWeightBalRatio;

        //                            GoodsIssueItemLocation.Weight = (itemBin.binBalance_WeightBal ?? 0) - (itemBin.binBalance_WeightReserve ?? 0);
        //                            GoodsIssueItemLocation.Weight_Index = itemBin.binBalance_WeightBal_Index;
        //                            GoodsIssueItemLocation.Weight_Id = itemBin.binBalance_WeightBal_Id;
        //                            GoodsIssueItemLocation.Weight_Name = itemBin.binBalance_WeightBal_Name;
        //                            GoodsIssueItemLocation.WeightRatio = itemBin.binBalance_WeightBalRatio;

        //                            GoodsIssueItemLocation.UnitNetWeight = itemBin.binBalance_UnitNetWeightBal;
        //                            GoodsIssueItemLocation.UnitNetWeight_Index = itemBin.binBalance_UnitNetWeightBal_Index;
        //                            GoodsIssueItemLocation.UnitNetWeight_Id = itemBin.binBalance_UnitNetWeightBal_Id;
        //                            GoodsIssueItemLocation.UnitNetWeight_Name = itemBin.binBalance_UnitNetWeightBal_Name;
        //                            GoodsIssueItemLocation.UnitNetWeightRatio = itemBin.binBalance_UnitNetWeightBalRatio;

        //                            GoodsIssueItemLocation.NetWeight = (itemBin.binBalance_NetWeightBal ?? 0) - (itemBin.binBalance_NetWeightReserve ?? 0);
        //                            GoodsIssueItemLocation.NetWeight_Index = itemBin.binBalance_NetWeightBal_Index;
        //                            GoodsIssueItemLocation.NetWeight_Id = itemBin.binBalance_NetWeightBal_Id;
        //                            GoodsIssueItemLocation.NetWeight_Name = itemBin.binBalance_NetWeightBal_Name;
        //                            GoodsIssueItemLocation.NetWeightRatio = itemBin.binBalance_NetWeightBalRatio;

        //                            GoodsIssueItemLocation.UnitGrsWeight = itemBin.binBalance_UnitGrsWeightBal;
        //                            GoodsIssueItemLocation.UnitGrsWeight_Index = itemBin.binBalance_UnitGrsWeightBal_Index;
        //                            GoodsIssueItemLocation.UnitGrsWeight_Id = itemBin.binBalance_UnitGrsWeightBal_Id;
        //                            GoodsIssueItemLocation.UnitGrsWeight_Name = itemBin.binBalance_UnitGrsWeightBal_Name;
        //                            GoodsIssueItemLocation.UnitGrsWeightRatio = itemBin.binBalance_UnitGrsWeightBalRatio;

        //                            GoodsIssueItemLocation.GrsWeight = (itemBin.binBalance_GrsWeightBal ?? 0) - (itemBin.binBalance_GrsWeightReserve ?? 0);
        //                            GoodsIssueItemLocation.GrsWeight_Index = itemBin.binBalance_GrsWeightBal_Index;
        //                            GoodsIssueItemLocation.GrsWeight_Id = itemBin.binBalance_GrsWeightBal_Id;
        //                            GoodsIssueItemLocation.GrsWeight_Name = itemBin.binBalance_GrsWeightBal_Name;
        //                            GoodsIssueItemLocation.GrsWeightRatio = itemBin.binBalance_GrsWeightBalRatio;

        //                            GoodsIssueItemLocation.UnitWidth = (itemBin.binBalance_UnitWidthBal ?? 0);
        //                            GoodsIssueItemLocation.UnitWidth_Index = itemBin.binBalance_UnitWidthBal_Index;
        //                            GoodsIssueItemLocation.UnitWidth_Id = itemBin.binBalance_UnitWidthBal_Id;
        //                            GoodsIssueItemLocation.UnitWidth_Name = itemBin.binBalance_UnitWidthBal_Name;
        //                            GoodsIssueItemLocation.UnitWidthRatio = itemBin.binBalance_UnitWidthBalRatio;

        //                            GoodsIssueItemLocation.Width = (itemBin.binBalance_WidthBal ?? 0) - (itemBin.binBalance_WidthReserve ?? 0);
        //                            GoodsIssueItemLocation.Width_Index = itemBin.binBalance_WidthBal_Index;
        //                            GoodsIssueItemLocation.Width_Id = itemBin.binBalance_WidthBal_Id;
        //                            GoodsIssueItemLocation.Width_Name = itemBin.binBalance_WidthBal_Name;
        //                            GoodsIssueItemLocation.WidthRatio = itemBin.binBalance_WidthBalRatio;

        //                            GoodsIssueItemLocation.UnitLength = (itemBin.binBalance_UnitLengthBal ?? 0);
        //                            GoodsIssueItemLocation.UnitLength_Index = itemBin.binBalance_UnitLengthBal_Index;
        //                            GoodsIssueItemLocation.UnitLength_Id = itemBin.binBalance_UnitLengthBal_Id;
        //                            GoodsIssueItemLocation.UnitLength_Name = itemBin.binBalance_UnitLengthBal_Name;
        //                            GoodsIssueItemLocation.UnitLengthRatio = itemBin.binBalance_UnitLengthBalRatio;

        //                            GoodsIssueItemLocation.Length = (itemBin.binBalance_LengthBal ?? 0) - (itemBin.binBalance_LengthReserve ?? 0);
        //                            GoodsIssueItemLocation.Length_Index = itemBin.binBalance_LengthBal_Index;
        //                            GoodsIssueItemLocation.Length_Id = itemBin.binBalance_LengthBal_Id;
        //                            GoodsIssueItemLocation.Length_Name = itemBin.binBalance_LengthBal_Name;
        //                            GoodsIssueItemLocation.LengthRatio = itemBin.binBalance_LengthBalRatio;

        //                            GoodsIssueItemLocation.UnitHeight = (itemBin.binBalance_UnitHeightBal ?? 0);
        //                            GoodsIssueItemLocation.UnitHeight_Index = itemBin.binBalance_UnitHeightBal_Index;
        //                            GoodsIssueItemLocation.UnitHeight_Id = itemBin.binBalance_UnitHeightBal_Id;
        //                            GoodsIssueItemLocation.UnitHeight_Name = itemBin.binBalance_UnitHeightBal_Name;
        //                            GoodsIssueItemLocation.UnitHeightRatio = itemBin.binBalance_UnitHeightBalRatio;

        //                            GoodsIssueItemLocation.Height = (itemBin.binBalance_HeightBal ?? 0) - (itemBin.binBalance_HeightReserve ?? 0);
        //                            GoodsIssueItemLocation.Height_Index = itemBin.binBalance_HeightBal_Index;
        //                            GoodsIssueItemLocation.Height_Id = itemBin.binBalance_HeightBal_Id;
        //                            GoodsIssueItemLocation.Height_Name = itemBin.binBalance_HeightBal_Name;
        //                            GoodsIssueItemLocation.HeightRatio = itemBin.binBalance_HeightBalRatio;

        //                            GoodsIssueItemLocation.UnitVolume = (itemBin.binBalance_UnitVolumeBal ?? 0);
        //                            GoodsIssueItemLocation.Volume = (itemBin.binBalance_VolumeBal ?? 0) - (itemBin.binBalance_VolumeReserve ?? 0);

        //                            GoodsIssueItemLocation.UnitPrice = (itemBin.unitPrice ?? 0);
        //                            GoodsIssueItemLocation.UnitPrice_Index = itemBin.unitPrice_Index;
        //                            GoodsIssueItemLocation.UnitPrice_Id = itemBin.unitPrice_Id;
        //                            GoodsIssueItemLocation.UnitPrice_Name = itemBin.unitPrice_Name;
        //                            GoodsIssueItemLocation.Price = (itemBin.price ?? 0);
        //                            GoodsIssueItemLocation.Price_Index = itemBin.price_Index;
        //                            GoodsIssueItemLocation.Price_Id = itemBin.price_Id;
        //                            GoodsIssueItemLocation.Price_Name = itemBin.price_Name;


        //                            GoodsIssueItemLocation.DocumentRef_No1 = itemPlanGI.DocumentRef_No1;
        //                            GoodsIssueItemLocation.DocumentRef_No2 = itemPlanGI.DocumentRef_No2;
        //                            GoodsIssueItemLocation.DocumentRef_No3 = itemPlanGI.DocumentRef_No3;
        //                            GoodsIssueItemLocation.DocumentRef_No4 = itemPlanGI.DocumentRef_No4;
        //                            GoodsIssueItemLocation.DocumentRef_No5 = itemPlanGI.DocumentRef_No5;
        //                            GoodsIssueItemLocation.Document_Status = -2;
        //                            GoodsIssueItemLocation.UDF_1 = itemPlanGI.UDF_1;
        //                            GoodsIssueItemLocation.UDF_2 = itemPlanGI.UDF_2;
        //                            GoodsIssueItemLocation.UDF_3 = itemPlanGI.UDF_3;
        //                            GoodsIssueItemLocation.UDF_4 = itemPlanGI.UDF_4;
        //                            GoodsIssueItemLocation.UDF_5 = itemPlanGI.UDF_5;
        //                            GoodsIssueItemLocation.Ref_Process_Index = new Guid("22744590-55D8-4448-88EF-5997C252111F");  // PLAN GI Process
        //                            GoodsIssueItemLocation.Ref_Document_No = itemPlanGI.PlanGoodsIssue_No;
        //                            GoodsIssueItemLocation.Ref_Document_Index = (Guid)itemPlanGI.PlanGoodsIssue_Index;
        //                            GoodsIssueItemLocation.Ref_DocumentItem_Index = itemPlanGI.PlanGoodsIssueItem_Index;
        //                            GoodsIssueItemLocation.GoodsReceiveItem_Index = new Guid(itemBin.goodsReceiveItem_Index);
        //                            GoodsIssueItemLocation.Create_By = model.create_by;
        //                            GoodsIssueItemLocation.Create_Date = DateTime.Now;
        //                            GoodsIssueItemLocation.GoodsIssue_No = model.goodsIssue_No;
        //                            GoodsIssueItemLocation.BinBalance_Index = new Guid(itemBin.binBalance_Index);


        //                            GoodsIssueItemLocation.Invoice_No = itemBin.invoice_No;
        //                            GoodsIssueItemLocation.Declaration_No = itemBin.declaration_No;
        //                            GoodsIssueItemLocation.HS_Code = itemBin.hs_Code;
        //                            GoodsIssueItemLocation.Conutry_of_Origin = itemBin.conutry_of_Origin;
        //                            GoodsIssueItemLocation.Tax1 = itemBin.tax1;
        //                            GoodsIssueItemLocation.Tax1_Currency_Index = itemBin.tax1_Currency_Index;
        //                            GoodsIssueItemLocation.Tax1_Currency_Id = itemBin.tax1_Currency_Id;
        //                            GoodsIssueItemLocation.Tax1_Currency_Name = itemBin.tax1_Currency_Name;
        //                            GoodsIssueItemLocation.Tax2 = itemBin.tax2;
        //                            GoodsIssueItemLocation.Tax2_Currency_Index = itemBin.tax2_Currency_Index;
        //                            GoodsIssueItemLocation.Tax2_Currency_Id = itemBin.tax2_Currency_Id;
        //                            GoodsIssueItemLocation.Tax2_Currency_Name = itemBin.tax2_Currency_Name;
        //                            GoodsIssueItemLocation.Tax3 = itemBin.tax3;
        //                            GoodsIssueItemLocation.Tax3_Currency_Index = itemBin.tax3_Currency_Index;
        //                            GoodsIssueItemLocation.Tax3_Currency_Id = itemBin.tax3_Currency_Id;
        //                            GoodsIssueItemLocation.Tax3_Currency_Name = itemBin.tax3_Currency_Name;
        //                            GoodsIssueItemLocation.Tax4 = itemBin.tax4;
        //                            GoodsIssueItemLocation.Tax4_Currency_Index = itemBin.tax4_Currency_Index;
        //                            GoodsIssueItemLocation.Tax4_Currency_Id = itemBin.tax4_Currency_Id;
        //                            GoodsIssueItemLocation.Tax4_Currency_Name = itemBin.tax4_Currency_Name;
        //                            GoodsIssueItemLocation.Tax5 = itemBin.tax5;
        //                            GoodsIssueItemLocation.Tax5_Currency_Index = itemBin.tax5_Currency_Index;
        //                            GoodsIssueItemLocation.Tax5_Currency_Id = itemBin.tax5_Currency_Id;
        //                            GoodsIssueItemLocation.Tax5_Currency_Name = itemBin.tax5_Currency_Name;
        //                            GoodsIssueItemLocation.ERP_Location = itemBin.erp_Location;



        //                            chkdatawave = true;
        //                            ListGoodsIssueItemLocation.Add(GoodsIssueItemLocation);

        //                            olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [GIL]   GoodsIssueItemLocation.TotalQty " + GoodsIssueItemLocation.TotalQty.ToString() + "    Ref_Document_No : " + GoodsIssueItemLocation.Ref_Document_No.ToString());




        //                            itemPlanGI.GITotalQty = itemPlanGI.GITotalQty + QtyBal;

        //                            olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [QtyPlanGIRemian - QtyBal ]  " + QtyPlanGIRemian.ToString() + "  - " + QtyBal.ToString());

        //                            QtyPlanGIRemian = QtyPlanGIRemian - QtyBal;

        //                            olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [END line QtyPlanGIRemian ]  " + QtyPlanGIRemian.ToString());


        //                        }
        //                        else if (QtyPlanGIRemian < QtyBal && QtyPlanGIRemian > 0 && QtyBal > 0)
        //                        {


        //                            State = "QtyPlanGIRemian < QtyBal && QtyPlanGIRemian > 0 && QtyBal > 0";
        //                            olog.logging("runwave", State + " TAG_NO " + itemBin.tag_No + " Product_Id " + itemBin.product_Id + " Bin_Index " + itemBin.binBalance_Index);


        //                            olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [QtyPlanGIRemian < QtyBal && QtyPlanGIRemian > 0 && QtyBal > 0]   QtyPlanGIRemian " + QtyPlanGIRemian.ToString() + "    QtyBal : " + QtyBal.ToString());




        //                            var QtyPick = QtyPlanGIRemian;


        //                            olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [QtyPick]   QtyPick " + QtyPick.ToString());



        //                            // Add GI ITEMLOCATION 
        //                            var GoodsIssueItemLocation = new im_GoodsIssueItemLocation();
        //                            GoodsIssueItemLocation.GoodsIssueItemLocation_Index = Guid.NewGuid();
        //                            GoodsIssueItemLocation.GoodsIssue_Index = new Guid(model.goodsIssue_Index);
        //                            GoodsIssueItemLocation.TagItem_Index = new Guid(itemBin.tagItem_Index);
        //                            GoodsIssueItemLocation.Tag_Index = new Guid(itemBin.tag_Index);
        //                            GoodsIssueItemLocation.Tag_No = itemBin.tag_No;
        //                            GoodsIssueItemLocation.Product_Index = new Guid(itemBin.product_Index);
        //                            GoodsIssueItemLocation.Product_Id = itemBin.product_Id;
        //                            GoodsIssueItemLocation.Product_Name = itemBin.product_Name;
        //                            GoodsIssueItemLocation.Product_SecondName = itemBin.product_SecondName;
        //                            GoodsIssueItemLocation.Product_ThirdName = itemBin.product_ThirdName;
        //                            GoodsIssueItemLocation.Product_Lot = itemBin.product_Lot;
        //                            GoodsIssueItemLocation.ItemStatus_Index = new Guid(itemBin.itemStatus_Index);
        //                            GoodsIssueItemLocation.ItemStatus_Id = itemBin.itemStatus_Id;
        //                            GoodsIssueItemLocation.ItemStatus_Name = itemBin.itemStatus_Name;
        //                            GoodsIssueItemLocation.Location_Index = new Guid(itemBin.location_Index);
        //                            GoodsIssueItemLocation.Location_Id = itemBin.location_Id;
        //                            GoodsIssueItemLocation.Location_Name = itemBin.location_Name;
        //                            GoodsIssueItemLocation.QtyPlan = (Decimal)itemPlanGI.TotalQtyRemian;
        //                            GoodsIssueItemLocation.Qty = (Decimal)QtyPick / (Decimal)itemPlanGI.Ratio;
        //                            GoodsIssueItemLocation.Ratio = (Decimal)itemPlanGI.Ratio;
        //                            GoodsIssueItemLocation.TotalQty = (Decimal)QtyPick;
        //                            GoodsIssueItemLocation.ProductConversion_Index = (Guid)itemPlanGI.ProductConversion_Index;
        //                            GoodsIssueItemLocation.ProductConversion_Id = itemPlanGI.ProductConversion_Id;
        //                            GoodsIssueItemLocation.ProductConversion_Name = itemPlanGI.ProductConversion_Name;
        //                            GoodsIssueItemLocation.MFG_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_MFG_Date) ? itemBin.goodsReceive_MFG_Date.toDate() : null;
        //                            GoodsIssueItemLocation.EXP_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_EXP_Date) ? itemBin.goodsReceive_EXP_Date.toDate() : null;

        //                            if (itemBin.binBalance_WeightBegin == 0)
        //                            {
        //                                GoodsIssueItemLocation.Weight = 0;
        //                            }
        //                            else
        //                            {
        //                                GoodsIssueItemLocation.UnitWeight = itemBin.binBalance_UnitWeightBal;
        //                                GoodsIssueItemLocation.UnitWeight_Index = itemBin.binBalance_UnitWeightBal_Index;
        //                                GoodsIssueItemLocation.UnitWeight_Id = itemBin.binBalance_UnitWeightBal_Id;
        //                                GoodsIssueItemLocation.UnitWeight_Name = itemBin.binBalance_UnitWeightBal_Name;
        //                                GoodsIssueItemLocation.UnitWeightRatio = itemBin.binBalance_UnitWeightBalRatio;

        //                                GoodsIssueItemLocation.Weight = (Decimal)(QtyPick * (itemBin.binBalance_UnitWeightBal ?? 0));
        //                                GoodsIssueItemLocation.Weight_Index = itemBin.binBalance_UnitWeightBal_Index;
        //                                GoodsIssueItemLocation.Weight_Id = itemBin.binBalance_UnitWeightBal_Id;
        //                                GoodsIssueItemLocation.Weight_Name = itemBin.binBalance_UnitWeightBal_Name;
        //                                GoodsIssueItemLocation.WeightRatio = itemBin.binBalance_UnitWeightBalRatio;
        //                            }

        //                            if (itemBin.binBalance_NetWeightBegin == 0)
        //                            {
        //                                GoodsIssueItemLocation.NetWeight = 0;
        //                            }
        //                            else
        //                            {
        //                                GoodsIssueItemLocation.UnitNetWeight = itemBin.binBalance_UnitNetWeightBal;
        //                                GoodsIssueItemLocation.UnitNetWeight_Index = itemBin.binBalance_UnitNetWeightBal_Index;
        //                                GoodsIssueItemLocation.UnitNetWeight_Id = itemBin.binBalance_UnitNetWeightBal_Id;
        //                                GoodsIssueItemLocation.UnitNetWeight_Name = itemBin.binBalance_UnitNetWeightBal_Name;
        //                                GoodsIssueItemLocation.UnitNetWeightRatio = itemBin.binBalance_UnitNetWeightBalRatio;

        //                                GoodsIssueItemLocation.NetWeight = (Decimal)(QtyPick * (itemBin.binBalance_UnitNetWeightBal ?? 0));
        //                                GoodsIssueItemLocation.NetWeight_Index = itemBin.binBalance_UnitNetWeightBal_Index;
        //                                GoodsIssueItemLocation.NetWeight_Id = itemBin.binBalance_UnitNetWeightBal_Id;
        //                                GoodsIssueItemLocation.NetWeight_Name = itemBin.binBalance_UnitNetWeightBal_Name;
        //                                GoodsIssueItemLocation.NetWeightRatio = itemBin.binBalance_UnitNetWeightBalRatio;
        //                            }

        //                            if (itemBin.binBalance_GrsWeightBegin == 0)
        //                            {
        //                                GoodsIssueItemLocation.GrsWeight = 0;
        //                            }
        //                            else
        //                            {
        //                                GoodsIssueItemLocation.UnitGrsWeight = itemBin.binBalance_UnitGrsWeightBal;
        //                                GoodsIssueItemLocation.UnitGrsWeight_Index = itemBin.binBalance_UnitGrsWeightBal_Index;
        //                                GoodsIssueItemLocation.UnitGrsWeight_Id = itemBin.binBalance_UnitGrsWeightBal_Id;
        //                                GoodsIssueItemLocation.UnitGrsWeight_Name = itemBin.binBalance_UnitGrsWeightBal_Name;
        //                                GoodsIssueItemLocation.UnitGrsWeightRatio = itemBin.binBalance_UnitGrsWeightBalRatio;

        //                                GoodsIssueItemLocation.GrsWeight = (Decimal)(QtyPick * (itemBin.binBalance_UnitGrsWeightBal ?? 0));
        //                                GoodsIssueItemLocation.GrsWeight_Index = itemBin.binBalance_UnitGrsWeightBal_Index;
        //                                GoodsIssueItemLocation.GrsWeight_Id = itemBin.binBalance_UnitGrsWeightBal_Id;
        //                                GoodsIssueItemLocation.GrsWeight_Name = itemBin.binBalance_UnitGrsWeightBal_Name;
        //                                GoodsIssueItemLocation.GrsWeightRatio = itemBin.binBalance_UnitGrsWeightBalRatio;
        //                            }

        //                            if (itemBin.binBalance_WidthBegin == 0)
        //                            {
        //                                GoodsIssueItemLocation.Width = 0;
        //                            }
        //                            else
        //                            {
        //                                GoodsIssueItemLocation.UnitWidth = (itemBin.binBalance_UnitWidthBal ?? 0);
        //                                GoodsIssueItemLocation.UnitWidth_Index = itemBin.binBalance_UnitWidthBal_Index;
        //                                GoodsIssueItemLocation.UnitWidth_Id = itemBin.binBalance_UnitWidthBal_Id;
        //                                GoodsIssueItemLocation.UnitWidth_Name = itemBin.binBalance_UnitWidthBal_Name;
        //                                GoodsIssueItemLocation.UnitWidthRatio = itemBin.binBalance_UnitWidthBalRatio;

        //                                GoodsIssueItemLocation.Width = (Decimal)(QtyPick * (itemBin.binBalance_UnitWidthBal ?? 0));
        //                                GoodsIssueItemLocation.Width_Index = itemBin.binBalance_UnitWidthBal_Index;
        //                                GoodsIssueItemLocation.Width_Id = itemBin.binBalance_UnitWidthBal_Id;
        //                                GoodsIssueItemLocation.Width_Name = itemBin.binBalance_UnitWidthBal_Name;
        //                                GoodsIssueItemLocation.WidthRatio = itemBin.binBalance_UnitWidthBalRatio;
        //                            }

        //                            if (itemBin.binBalance_LengthBegin == 0)
        //                            {
        //                                GoodsIssueItemLocation.Length = 0;
        //                            }
        //                            else
        //                            {
        //                                GoodsIssueItemLocation.UnitLength = (itemBin.binBalance_UnitLengthBal ?? 0);
        //                                GoodsIssueItemLocation.UnitLength_Index = itemBin.binBalance_UnitLengthBal_Index;
        //                                GoodsIssueItemLocation.UnitLength_Id = itemBin.binBalance_UnitLengthBal_Id;
        //                                GoodsIssueItemLocation.UnitLength_Name = itemBin.binBalance_UnitLengthBal_Name;
        //                                GoodsIssueItemLocation.UnitLengthRatio = itemBin.binBalance_UnitLengthBalRatio;

        //                                GoodsIssueItemLocation.Length = (Decimal)(QtyPick * (itemBin.binBalance_UnitWidthBal ?? 0));
        //                                GoodsIssueItemLocation.Length_Index = itemBin.binBalance_UnitLengthBal_Index;
        //                                GoodsIssueItemLocation.Length_Id = itemBin.binBalance_UnitLengthBal_Id;
        //                                GoodsIssueItemLocation.Length_Name = itemBin.binBalance_UnitLengthBal_Name;
        //                                GoodsIssueItemLocation.LengthRatio = itemBin.binBalance_UnitLengthBalRatio;
        //                            }

        //                            if (itemBin.binBalance_HeightBegin == 0)
        //                            {
        //                                GoodsIssueItemLocation.Height = 0;
        //                            }
        //                            else
        //                            {
        //                                GoodsIssueItemLocation.UnitHeight = (itemBin.binBalance_UnitHeightBal ?? 0);
        //                                GoodsIssueItemLocation.UnitHeight_Index = itemBin.binBalance_UnitHeightBal_Index;
        //                                GoodsIssueItemLocation.UnitHeight_Id = itemBin.binBalance_UnitHeightBal_Id;
        //                                GoodsIssueItemLocation.UnitHeight_Name = itemBin.binBalance_UnitHeightBal_Name;
        //                                GoodsIssueItemLocation.UnitHeightRatio = itemBin.binBalance_UnitHeightBalRatio;

        //                                GoodsIssueItemLocation.Height = (Decimal)(QtyPick * (itemBin.binBalance_UnitHeightBal ?? 0));
        //                                GoodsIssueItemLocation.Height_Index = itemBin.binBalance_UnitHeightBal_Index;
        //                                GoodsIssueItemLocation.Height_Id = itemBin.binBalance_UnitHeightBal_Id;
        //                                GoodsIssueItemLocation.Height_Name = itemBin.binBalance_UnitHeightBal_Name;
        //                                GoodsIssueItemLocation.HeightRatio = itemBin.binBalance_UnitHeightBalRatio;
        //                            }

        //                            if (itemBin.binBalance_UnitVolumeBal == 0)
        //                            {
        //                                GoodsIssueItemLocation.UnitVolume = 0;
        //                            }
        //                            else
        //                            {
        //                                GoodsIssueItemLocation.UnitVolume = (itemBin.binBalance_UnitVolumeBal ?? 0);
        //                                GoodsIssueItemLocation.Volume = (Decimal)(QtyPick * (itemBin.binBalance_UnitVolumeBal ?? 0));
        //                            }

        //                            GoodsIssueItemLocation.UnitPrice = (itemBin.unitPrice ?? 0);
        //                            GoodsIssueItemLocation.UnitPrice_Index = itemBin.unitPrice_Index;
        //                            GoodsIssueItemLocation.UnitPrice_Id = itemBin.unitPrice_Id;
        //                            GoodsIssueItemLocation.UnitPrice_Name = itemBin.unitPrice_Name;
        //                            GoodsIssueItemLocation.Price = (Decimal)(QtyPick * (itemBin.unitPrice ?? 0));
        //                            GoodsIssueItemLocation.Price_Index = itemBin.unitPrice_Index;
        //                            GoodsIssueItemLocation.Price_Id = itemBin.unitPrice_Id;
        //                            GoodsIssueItemLocation.Price_Name = itemBin.unitPrice_Name;



        //                            GoodsIssueItemLocation.DocumentRef_No1 = itemPlanGI.DocumentRef_No1;
        //                            GoodsIssueItemLocation.DocumentRef_No2 = itemPlanGI.DocumentRef_No2;
        //                            GoodsIssueItemLocation.DocumentRef_No3 = itemPlanGI.DocumentRef_No3;
        //                            GoodsIssueItemLocation.DocumentRef_No4 = itemPlanGI.DocumentRef_No4;
        //                            GoodsIssueItemLocation.DocumentRef_No5 = itemPlanGI.DocumentRef_No5;
        //                            GoodsIssueItemLocation.Document_Status = -2;
        //                            GoodsIssueItemLocation.UDF_1 = itemPlanGI.UDF_1;
        //                            GoodsIssueItemLocation.UDF_2 = itemPlanGI.UDF_2;
        //                            GoodsIssueItemLocation.UDF_3 = itemPlanGI.UDF_3;
        //                            GoodsIssueItemLocation.UDF_4 = itemPlanGI.UDF_4;
        //                            GoodsIssueItemLocation.UDF_5 = itemPlanGI.UDF_5;
        //                            GoodsIssueItemLocation.Ref_Process_Index = new Guid("22744590-55D8-4448-88EF-5997C252111F");  // PLAN GI Process
        //                            GoodsIssueItemLocation.Ref_Document_No = itemPlanGI.PlanGoodsIssue_No;
        //                            GoodsIssueItemLocation.Ref_Document_Index = (Guid)itemPlanGI.PlanGoodsIssue_Index;
        //                            GoodsIssueItemLocation.Ref_DocumentItem_Index = itemPlanGI.PlanGoodsIssueItem_Index;
        //                            GoodsIssueItemLocation.GoodsReceiveItem_Index = new Guid(itemBin.goodsReceiveItem_Index);
        //                            GoodsIssueItemLocation.Create_By = model.create_by;
        //                            GoodsIssueItemLocation.Create_Date = DateTime.Now;
        //                            GoodsIssueItemLocation.GoodsIssue_No = model.goodsIssue_No;
        //                            GoodsIssueItemLocation.BinBalance_Index = new Guid(itemBin.binBalance_Index);

        //                            GoodsIssueItemLocation.Invoice_No = itemBin.invoice_No;
        //                            GoodsIssueItemLocation.Declaration_No = itemBin.declaration_No;
        //                            GoodsIssueItemLocation.HS_Code = itemBin.hs_Code;
        //                            GoodsIssueItemLocation.Conutry_of_Origin = itemBin.conutry_of_Origin;
        //                            GoodsIssueItemLocation.Tax1 = itemBin.tax1;
        //                            GoodsIssueItemLocation.Tax1_Currency_Index = itemBin.tax1_Currency_Index;
        //                            GoodsIssueItemLocation.Tax1_Currency_Id = itemBin.tax1_Currency_Id;
        //                            GoodsIssueItemLocation.Tax1_Currency_Name = itemBin.tax1_Currency_Name;
        //                            GoodsIssueItemLocation.Tax2 = itemBin.tax2;
        //                            GoodsIssueItemLocation.Tax2_Currency_Index = itemBin.tax2_Currency_Index;
        //                            GoodsIssueItemLocation.Tax2_Currency_Id = itemBin.tax2_Currency_Id;
        //                            GoodsIssueItemLocation.Tax2_Currency_Name = itemBin.tax2_Currency_Name;
        //                            GoodsIssueItemLocation.Tax3 = itemBin.tax3;
        //                            GoodsIssueItemLocation.Tax3_Currency_Index = itemBin.tax3_Currency_Index;
        //                            GoodsIssueItemLocation.Tax3_Currency_Id = itemBin.tax3_Currency_Id;
        //                            GoodsIssueItemLocation.Tax3_Currency_Name = itemBin.tax3_Currency_Name;
        //                            GoodsIssueItemLocation.Tax4 = itemBin.tax4;
        //                            GoodsIssueItemLocation.Tax4_Currency_Index = itemBin.tax4_Currency_Index;
        //                            GoodsIssueItemLocation.Tax4_Currency_Id = itemBin.tax4_Currency_Id;
        //                            GoodsIssueItemLocation.Tax4_Currency_Name = itemBin.tax4_Currency_Name;
        //                            GoodsIssueItemLocation.Tax5 = itemBin.tax5;
        //                            GoodsIssueItemLocation.Tax5_Currency_Index = itemBin.tax5_Currency_Index;
        //                            GoodsIssueItemLocation.Tax5_Currency_Id = itemBin.tax5_Currency_Id;
        //                            GoodsIssueItemLocation.Tax5_Currency_Name = itemBin.tax5_Currency_Name;
        //                            GoodsIssueItemLocation.ERP_Location = itemBin.erp_Location;

        //                            chkdatawave = true;
        //                            ListGoodsIssueItemLocation.Add(GoodsIssueItemLocation);


        //                            olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [GIL]   GoodsIssueItemLocation.TotalQty " + GoodsIssueItemLocation.TotalQty.ToString() + "    Ref_Document_No : " + GoodsIssueItemLocation.Ref_Document_No.ToString());



        //                            itemPlanGI.GITotalQty = itemPlanGI.GITotalQty + QtyPick;


        //                            olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [ QtyPlanGIRemian - QtyPick ]  " + QtyPlanGIRemian.ToString() + "  - " + QtyPick.ToString());



        //                            QtyPlanGIRemian = QtyPlanGIRemian - QtyPick;

        //                            olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [END line QtyPlanGIRemian ]  " + QtyPlanGIRemian.ToString());



        //                        }
        //                    }

        //                    #endregion

        //                    olog.logging("GIStock", " -------------- ");

        //                    #region inset GIL and runwave status 30

        //                    using (var db4 = new GIDbContext())
        //                    {
        //                        db4.Database.SetCommandTimeout(120);
        //                        var transaction = db4.Database.BeginTransaction(IsolationLevel.Serializable);
        //                        try
        //                        {
        //                            var GI = db4.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 20).ToList();
        //                            foreach (var g in GI)
        //                            {
        //                                g.RunWave_Status = 30;
        //                            }

        //                            db4.IM_GoodsIssueItemLocation.AddRange(ListGoodsIssueItemLocation);
        //                            db4.SaveChanges();
        //                            transaction.Commit();
        //                        }
        //                        catch (Exception exy)
        //                        {
        //                            msglog = State + " ex Rollback " + exy.Message.ToString();
        //                            olog.logging("runwave", msglog);
        //                            transaction.Rollback();
        //                            throw exy;
        //                        }
        //                    }

        //                    #endregion

        //                    State = "inset GIL and runwave status 30";
        //                    olog.logging("runwave", State);

        //                    #region insert bincardreserve and runwave status 40

        //                    using (var Contact = new GIDbContext())
        //                    {


        //                        Contact.Database.SetCommandTimeout(360);

        //                        State = "Contact.IM_GoodsIssueItemLocation";
        //                        olog.logging("runwave", State);

        //                        var GIL = Contact.IM_GoodsIssueItemLocation.Where(c => c.Ref_Document_Index == itemPlanGI.PlanGoodsIssue_Index && c.Ref_DocumentItem_Index == itemPlanGI.PlanGoodsIssueItem_Index && c.Document_Status != -1).ToList();

        //                        #region for GIL >>>>  I_LOOP

        //                        foreach (var g in GIL)
        //                        {
        //                            I_LOOP++;
        //                            var Gi_indexI = new SqlParameter("@GoodsIssue_Index", model.goodsIssue_Index);
        //                            var Gi_noI = new SqlParameter("@GoodsIssue_No", model.goodsIssue_No);
        //                            var StepI = new SqlParameter("@step", "GIL I_LOOP");
        //                            var jsonI = new SqlParameter("@json", "A : " + A_LOOP + " __ D: " + D_LOOP + " __ E: " + E_LOOP + " __ I: " + I_LOOP);
        //                            var UserI = new SqlParameter("@User", model.create_by);
        //                            var resultI = db.Database.ExecuteSqlCommand("EXEC sp_Insert_Process_wave @GoodsIssue_Index ,@GoodsIssue_No ,@step ,@json ,@User", Gi_indexI, Gi_noI, StepI, jsonI, UserI);

        //                            State = "insertBinCardReserve";

        //                            olog.logging("runwave", State + " GIIL_Index" + g.GoodsIssueItemLocation_Index.ToString());

        //                            var insertBinCardReserve = new PickbinbalanceViewModel();

        //                            insertBinCardReserve.ref_Document_Index = g.GoodsIssue_Index.ToString();
        //                            insertBinCardReserve.ref_DocumentItem_Index = g.GoodsIssueItemLocation_Index.ToString();
        //                            insertBinCardReserve.goodsIssue_No = model.goodsIssue_No;
        //                            insertBinCardReserve.Process_Index = "22744590-55D8-4448-88EF-5997C252111F";
        //                            insertBinCardReserve.create_By = model.create_by;
        //                            insertBinCardReserve.pick = g.TotalQty;
        //                            insertBinCardReserve.binbalance_Index = g.BinBalance_Index.ToString();
        //                            insertBinCardReserve.wave_Index = Contact.IM_GoodsIssue.FirstOrDefault(f => f.GoodsIssue_Index == g.GoodsIssue_Index)?.Wave_Index.ToString();

        //                            State = "insetBinRe";
        //                            olog.logging("runwave", State);

        //                            var insetBinRe = utils.SendDataApi<actionResultPickbinbalanceViewModel>(new AppSettingConfig().GetUrl("insertBinCardReserve"), insertBinCardReserve.sJson());
        //                            if (insetBinRe.resultIsUse)
        //                            {
        //                                State = "resultIsUse";
        //                                olog.logging("runwave", State);

        //                                var transaction = Contact.Database.BeginTransaction(IsolationLevel.Serializable);
        //                                try
        //                                {
        //                                    var GI = Contact.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 30).ToList();
        //                                    foreach (var gg in GI)
        //                                    {
        //                                        gg.RunWave_Status = 40;
        //                                    }
        //                                    Contact.SaveChanges();
        //                                    transaction.Commit();
        //                                }
        //                                catch (Exception exy)
        //                                {
        //                                    msglog = State + " ex Rollback " + exy.Message.ToString();
        //                                    olog.logging("runwave", msglog);
        //                                    transaction.Rollback();
        //                                    throw exy;
        //                                }
        //                            }
        //                            else
        //                            {
        //                                State = "resultIsUse else";
        //                                olog.logging("runwave", State);


        //                                var transaction = Contact.Database.BeginTransaction(IsolationLevel.Serializable);
        //                                try
        //                                {
        //                                    var GI = Contact.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && (c.RunWave_Status == 30 || c.RunWave_Status == 40)).ToList();
        //                                    foreach (var gg in GI)
        //                                    {
        //                                        gg.RunWave_Status = 30;
        //                                    }
        //                                    Contact.SaveChanges();
        //                                    transaction.Commit();
        //                                }
        //                                catch (Exception exy)
        //                                {
        //                                    msglog = State + " ex Rollback " + exy.Message.ToString();
        //                                    olog.logging("runwave", msglog);
        //                                    transaction.Rollback();
        //                                    throw exy;
        //                                }
        //                                msglog = State + " ex Rollback " + "Insert BinCardReserve Error";
        //                                olog.logging("runwave", msglog);
        //                                result.resultMsg = "Insert BinCardReserve Error";
        //                                result.resultIsUse = false;
        //                                //return result;

        //                            }
        //                        }

        //                        #endregion

        //                    }
        //                    #endregion
        //                    State = "insert bincardreserve and runwave status 40";
        //                    olog.logging("runwave", State);
        //                }

        //                #endregion

        //                #region update isuse = '' and runwave 50

        //                strwhere.isActive = true;

        //                var Gi_index = new SqlParameter("@GoodsIssue_Index", model.goodsIssue_Index);
        //                var Gi_no = new SqlParameter("@GoodsIssue_No", model.goodsIssue_No);
        //                var Step = new SqlParameter("@step", "update isuse = '' and runwave 50");
        //                var json = new SqlParameter("@json", "Update");
        //                var User = new SqlParameter("@User", model.create_by);
        //                var resultDelete_isuse = db.Database.ExecuteSqlCommand("EXEC sp_Insert_Process_wave @GoodsIssue_Index ,@GoodsIssue_No ,@step ,@json ,@User", Gi_index, Gi_no, Step, json, User);

        //                var resultXX = db.Database.ExecuteSqlCommand("EXEC sp_Delete_isuse @Isuse ,@product_index ,@itemstatus_index ,@owner_index ", Isuse, product_index, itemstatus_index, owner_index);

        //                #endregion

        //                State = "region update isuse = '' and runwave 50";
        //                olog.logging("runwave", State);
        //            }

        //            #endregion

        //        }

        //        #endregion

        //        result.goodsIssue_Index = model.goodsIssue_Index;
        //        result.goodsIssue_No = model.goodsIssue_No;

        //        result.resultIsUse = true;

        //        #region ------------------------------------------------

        //        //------------------------------------------------

        //        State = "Update GI Status = 2 : " + model.goodsIssue_No.ToString();
        //        olog.logging("runwave", State);

        //        string cmd = "";

        //        cmd = "  Update  im_GoodsIssue set   " +
        //                 "  GI_status = 2      " +
        //                 "  where GoodsIssue_Index = '" + result.goodsIssue_Index + "'  " +
        //                 "   and GI_status = 1 " +
        //                 "   and Document_Status = -2 ";

        //        try
        //        {
        //            olog.logging("runwave", State + " " + cmd.ToString());
        //            var GIRes = db.Database.ExecuteSqlCommand(cmd);

        //        }
        //        catch (Exception exTrans)
        //        {
        //            msglog = State + " exTrans   GI_status = 2   " + exTrans.Message.ToString();
        //            olog.logging("runwave", msglog);
        //            olog.logging("runwave", "exTrans inner - " + exTrans.InnerException.Message.ToString());

        //            throw exTrans;
        //        }


        //        //-----------------------------------------------

        //        #endregion

        //        State = "end for";
        //        olog.logging("runwave", State);

        //        #region Check retrun status PGII >>>> J_LOOP

        //        foreach (var itemPGII in model.listGoodsIssueItemViewModel)
        //        {
        //            J_LOOP++;
        //            var Gi_indexJ = new SqlParameter("@GoodsIssue_Index", model.goodsIssue_Index);
        //            var Gi_noJ = new SqlParameter("@GoodsIssue_No", model.goodsIssue_No);
        //            var StepJ = new SqlParameter("@step", "listGoodsIssueItemViewModel J_LOOP");
        //            var jsonJ = new SqlParameter("@json", "J : " + J_LOOP);
        //            var UserJ = new SqlParameter("@User", model.create_by);
        //            var resultJ = db.Database.ExecuteSqlCommand("EXEC sp_Insert_Process_wave @GoodsIssue_Index ,@GoodsIssue_No ,@step ,@json ,@User", Gi_indexJ, Gi_noJ, StepJ, UserJ, UserJ);


        //            var chkGIL2 = db.IM_GoodsIssueItemLocation.Where(c => c.Ref_Document_Index == itemPGII.planGoodsIssue_Index && c.Ref_DocumentItem_Index == itemPGII.planGoodsIssueItem_Index && c.Document_Status != -1).ToList();
        //            var sumqty = chkGIL2.Sum(s => s.TotalQty);
        //            if (chkGIL2.Count == 0 || sumqty != itemPGII.totalQty)
        //            {

        //                var pgii = model.listGoodsIssueItemViewModel.Where(c => c.planGoodsIssueItem_Index == itemPGII.planGoodsIssueItem_Index).ToList();

        //                #region for pgii >>>> K_LOOP

        //                foreach (var resultpgii in pgii)
        //                {
        //                    K_LOOP++;
        //                    var Gi_indexK = new SqlParameter("@GoodsIssue_Index", model.goodsIssue_Index);
        //                    var Gi_noK = new SqlParameter("@GoodsIssue_No", model.goodsIssue_No);
        //                    var StepK = new SqlParameter("@step", "RuleSourceList K_LOOP");
        //                    var jsonK = new SqlParameter("@json", "J : " + J_LOOP + " __ K: " + K_LOOP);
        //                    var UserK = new SqlParameter("@User", model.create_by);
        //                    var resultK = db.Database.ExecuteSqlCommand("EXEC sp_Insert_Process_wave @GoodsIssue_Index ,@GoodsIssue_No ,@step ,@json ,@User", Gi_indexK, Gi_noK, StepK, jsonK, UserK);

        //                    resultpgii.qtyPlan = (resultpgii.totalQty - sumqty);
        //                    resultpgii.totalQty = (resultpgii.totalQty - sumqty);
        //                    listpgiinotinsert.Add(resultpgii);
        //                    CheckRunwavePast = true;
        //                    using (var updatepginotProduct = new GIDbContext())
        //                    {
        //                        var transactionresultpgii = updatepginotProduct.Database.BeginTransaction(IsolationLevel.Serializable);
        //                        try
        //                        {

        //                            var updateresultpgii = updatepginotProduct.IM_PlanGoodsIssueItem.Where(c => c.PlanGoodsIssueItem_Index == resultpgii.planGoodsIssueItem_Index && c.Document_Status == 1).ToList();
        //                            foreach (var p in updateresultpgii)
        //                            {
        //                                p.Document_Status = 0;
        //                            }
        //                            updatepginotProduct.SaveChanges();
        //                            transactionresultpgii.Commit();
        //                        }

        //                        catch (Exception exy)
        //                        {
        //                            msglog = State + " ex Rollback " + exy.Message.ToString();
        //                            olog.logging("UpdateUserAssign", msglog);
        //                            transactionresultpgii.Rollback();
        //                            throw exy;
        //                        }
        //                    }
        //                }

        //                #endregion

        //            }
        //        }
        //        #endregion

        //        State = "Check retrun status PGII";
        //        olog.logging("runwave", State);

        //        #region update PI status 3 and runwave status 60
        //        using (var db5 = new GIDbContext())
        //        {
        //            db5.Database.SetCommandTimeout(120);
        //            var listPGI = new List<Guid>();
        //            if (model.listGoodsIssueItemViewModel.Count > 0)
        //            {
        //                foreach (var item in model.listGoodsIssueItemViewModel)
        //                {
        //                    if (item.planGoodsIssue_Index != Guid.Parse("00000000-0000-0000-0000-000000000000"))
        //                    {
        //                        listPGI.Add(item.planGoodsIssue_Index);
        //                    }
        //                }
        //            }
        //            foreach (var item in listPGI)
        //            {
        //                var pgii = db5.IM_PlanGoodsIssueItem.Where(c => c.PlanGoodsIssue_Index == item && c.Document_Status == 0).Count();
        //                if (pgii == 0)
        //                {
        //                    var transaction = db5.Database.BeginTransaction(IsolationLevel.Serializable);
        //                    try
        //                    {
        //                        var pgi = db5.IM_PlanGoodsIssue.Where(c => c.PlanGoodsIssue_Index == item).ToList();
        //                        foreach (var p in pgi)
        //                        {
        //                            p.Document_Status = 3;
        //                        }
        //                        db5.SaveChanges();
        //                        transaction.Commit();
        //                    }

        //                    catch (Exception exy)
        //                    {
        //                        msglog = State + " ex Rollback " + exy.Message.ToString();
        //                        olog.logging("runwave", msglog);
        //                        transaction.Rollback();
        //                        throw exy;
        //                    }
        //                }
        //            }
        //        }
        //        #endregion

        //        State = "update PI status 3 and runwave status 60";
        //        olog.logging("runwave", State);

        //        result.resultMsg = CheckRunwavePast ? chkdatawave ? "หยิบสินค้าได้บางส่วน" : "สินค้าไม่เพียงพอ" : "หยิบสินค้าสำเร็จ";
        //        result.pgii = listpgiinotinsert;
        //        return result;

        //    }
        //    catch (Exception ex)
        //    {
        //        #region update isuse = '' and runwave 50
        //        var strwhere = new getViewBinbalanceViewModel();
        //        strwhere.isuse = model.goodsIssue_Index;
        //        strwhere.isActive = true;
        //        var updateIsuseViewBinbalance = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("updateIsuseViewBinbalance"), strwhere.sJson());

        //        #endregion

        //        msglog = State + " ex Rollback " + ex.Message.ToString();
        //        olog.logging("runwave", msglog);
        //        olog.logging("runwave", "ex inner - " + ex.InnerException.Message.ToString());

        //        var result = new actionResultRunWaveV2ViewModelViewModel();
        //        result.resultIsUse = false;
        //        result.resultMsg = ex.Message;
        //        return result;
        //    }
        //}
        #endregion

        #region New log
        public actionResultRunWaveV2ViewModelViewModel runwaveandHeader(RunWaveFilterV2ViewModel model)
        {
            String State = "Start";
            String msglog = "";
            var olog = new logtxt();
            var process = new Guid("2E026669-99BD-4DE0-8818-534F29F7B89D");
            var PlanGiRunWave = new List<Guid>();
            var ListPlanGi_Index = new List<Guid>();
            var listpgiinotinsert = new List<plangoodsissueitemViewModel>();
            bool CheckRunwavePast = false;
            long IsPA = 1;
            Boolean IsTote = false;
            List<log_Waveprocress> log = new List<log_Waveprocress>();
            olog.logging("runwave", State);
            try
            {
                db.Database.SetCommandTimeout(360);
                var result = new actionResultRunWaveV2ViewModelViewModel();

                #region Get data Product and Location

                var listDataProduct2 = utils.SendDataApi<List<ProductViewModel>>(new AppSettingConfig().GetUrl("getProductMaster"), new { }.sJson());
                var listDataLocation2 = utils.SendDataApi<List<locationViewModel>>(new AppSettingConfig().GetUrl("getLocationMaster"), new { }.sJson());

                #endregion

                #region create and update header

                try
                {
                    Guid gi_index = !string.IsNullOrEmpty(model.goodsIssue_Index) ? new Guid(model.goodsIssue_Index) : new Guid("00000000-0000-0000-0000-000000000000");
                    var gi = db.IM_GoodsIssue.Find(gi_index);
                    if (gi == null)
                    {
                        var filterModel = new GenDocumentTypeViewModel();

                        filterModel.process_Index = new Guid("2E026669-99BD-4DE0-8818-534F29F7B89D");
                        filterModel.documentType_Index = new Guid(model.documentType_Index);
                        //GetConfig
                        var dropDownDocumentType = utils.SendDataApi<List<GenDocumentTypeViewModel>>(new AppSettingConfig().GetUrl("dropDownDocumentType"), filterModel.sJson());

                        var genDoc = new AutoNumberService();
                        DateTime DocumentDate = DateTime.Now;
                        string DocNum = genDoc.genAutoDocmentNumber(dropDownDocumentType, DocumentDate);

                        var newGI = new im_GoodsIssue();
                        newGI.GoodsIssue_Index = Guid.NewGuid();
                        newGI.Owner_Index = !string.IsNullOrEmpty(model.owner_Index) ? new Guid(model.owner_Index) : Guid.Parse("00000000-0000-0000-0000-000000000000");
                        newGI.Owner_Id = !string.IsNullOrEmpty(model.owner_Index) ? model.owner_Id : "";
                        newGI.Owner_Name = !string.IsNullOrEmpty(model.owner_Index) ? model.owner_Name : "";
                        newGI.DocumentType_Index = new Guid(model.documentType_Index);
                        newGI.DocumentType_Id = model.documentType_Id;
                        newGI.DocumentType_Name = model.documentType_Name;
                        newGI.GoodsIssue_No = DocNum;
                        newGI.GoodsIssue_Date = model.goodsIssue_Date.toDateDefault();
                        newGI.GoodsIssue_Time = model.goodsIssue_Time;
                        newGI.DocumentRef_No1 = model.documentRef_No1;
                        newGI.DocumentRef_No2 = model.documentRef_No2;
                        newGI.DocumentRef_No3 = model.documentRef_No3;
                        newGI.DocumentRef_No4 = model.documentRef_No4;
                        newGI.DocumentRef_No5 = model.documentRef_No5;
                        newGI.Document_Remark = model.document_Remark;
                        newGI.DocumentPriority_Status = model.documentPriority_Status;
                        newGI.Document_Date = model.document_Date.toDate();
                        newGI.Warehouse_Index = !string.IsNullOrEmpty(model.warehouse_Index) ? new Guid(model.warehouse_Index) : (Guid?)null;
                        newGI.Warehouse_Id = !string.IsNullOrEmpty(model.warehouse_Index) ? model.warehouse_Id : null;
                        newGI.Warehouse_Name = !string.IsNullOrEmpty(model.warehouse_Index) ? model.warehouse_Name : null;
                        newGI.Document_Status = -2;
                        newGI.Create_By = model.create_by;
                        newGI.Create_Date = DateTime.Now;
                        db.IM_GoodsIssue.Add(newGI);



                        model.goodsIssue_Index = newGI.GoodsIssue_Index.ToString();
                        model.goodsIssue_No = newGI.GoodsIssue_No;

                        var Gi_index = new SqlParameter("@GoodsIssue_Index", model.goodsIssue_Index);
                        var Gi_no = new SqlParameter("@GoodsIssue_No", model.goodsIssue_No);
                        var Step = new SqlParameter("@step", "create and update header");
                        var json = new SqlParameter("@json", "Create");
                        var User = new SqlParameter("@User", model.create_by);
                        var resultx = db.Database.ExecuteSqlCommand("EXEC sp_Insert_Process_wave @GoodsIssue_Index ,@GoodsIssue_No ,@step ,@json ,@User", Gi_index, Gi_no, Step, json, User);
                        
                    }
                    else
                    {
                        if (gi.Document_Status == 0)
                        {
                            gi.Owner_Index = !string.IsNullOrEmpty(model.owner_Index) ? new Guid(model.owner_Index) : Guid.Parse("00000000-0000-0000-0000-000000000000");
                            gi.Owner_Id = !string.IsNullOrEmpty(model.owner_Index) ? model.owner_Id : "";
                            gi.Owner_Name = !string.IsNullOrEmpty(model.owner_Index) ? model.owner_Name : "";
                            gi.DocumentType_Index = new Guid(model.documentType_Index);
                            gi.DocumentType_Id = model.documentType_Id;
                            gi.DocumentType_Name = model.documentType_Name;
                            gi.GoodsIssue_Date = model.goodsIssue_Date.toDateDefault();
                            gi.GoodsIssue_Time = model.goodsIssue_Time;
                            gi.DocumentRef_No1 = model.documentRef_No1;
                            gi.Document_Remark = model.document_Remark;
                            gi.Document_Date = model.document_Date.toDate();
                            gi.Warehouse_Index = !string.IsNullOrEmpty(model.warehouse_Index) ? new Guid(model.warehouse_Index) : (Guid?)null;
                            gi.Warehouse_Id = !string.IsNullOrEmpty(model.warehouse_Index) ? model.warehouse_Id : null;
                            gi.Warehouse_Name = !string.IsNullOrEmpty(model.warehouse_Index) ? model.warehouse_Name : null;
                            gi.Update_By = model.create_by;
                            gi.Update_Date = DateTime.Now;


                        }

                        model.goodsIssue_Index = gi.GoodsIssue_Index.ToString();
                        model.goodsIssue_No = gi.GoodsIssue_No;

                        var Gi_index = new SqlParameter("@GoodsIssue_Index", model.goodsIssue_Index);
                        var Gi_no = new SqlParameter("@GoodsIssue_No", model.goodsIssue_No);
                        var Step = new SqlParameter("@step", "create and update header");
                        var json = new SqlParameter("@json", "Update");
                        var User = new SqlParameter("@User", model.create_by);
                        var resultx = db.Database.ExecuteSqlCommand("EXEC sp_Insert_Process_wave @GoodsIssue_Index ,@GoodsIssue_No ,@step ,@json ,@User", Gi_index, Gi_no, Step, json, User);
                        
                    }

                    var transactionx = db.Database.BeginTransaction();
                    try
                    {

                        db.SaveChanges();
                        transactionx.Commit();


                    }

                    catch (Exception exy)
                    {

                      
                        transactionx.Rollback();

                        var Gi_index = new SqlParameter("@GoodsIssue_Index", model.goodsIssue_Index);
                        var Gi_no = new SqlParameter("@GoodsIssue_No", model.goodsIssue_No);
                        var Step = new SqlParameter("@step", "Error : create and update header EXY");
                        var json = new SqlParameter("@json", exy.Message);
                        var User = new SqlParameter("@User", model.create_by);
                        var resultx = db.Database.ExecuteSqlCommand("EXEC sp_Insert_Process_wave @GoodsIssue_Index ,@GoodsIssue_No ,@step ,@json ,@User", Gi_index, Gi_no, Step, json, User);

                        throw exy;



                    }
                }
                catch (Exception exyz)
                {
                    var Gi_index = new SqlParameter("@GoodsIssue_Index", model.goodsIssue_Index);
                    var Gi_no = new SqlParameter("@GoodsIssue_No", model.goodsIssue_No);
                    var Step = new SqlParameter("@step", "Error : create and update header EXYZ");
                    var json = new SqlParameter("@json", exyz.Message);
                    var User = new SqlParameter("@User", model.create_by);
                    var resultx = db.Database.ExecuteSqlCommand("EXEC sp_Insert_Process_wave @GoodsIssue_Index ,@GoodsIssue_No ,@step ,@json ,@User", Gi_index, Gi_no, Step, json, User);

                    throw exyz;
                }

                #endregion

                #region runwave status 10
                

                if (model.listGoodsIssueItemViewModel.Count > 0)
                {
                    foreach (var item in model.listGoodsIssueItemViewModel)
                    {
                        if (item.planGoodsIssueItem_Index != Guid.Parse("00000000-0000-0000-0000-000000000000"))
                        {
                            PlanGiRunWave.Add(item.planGoodsIssueItem_Index);
                            ListPlanGi_Index.Add(item.planGoodsIssue_Index);
                        }
                    }
                }

                using (var db2 = new GIDbContext())
                {
                    db2.Database.SetCommandTimeout(120);
                    var transaction = db2.Database.BeginTransaction(IsolationLevel.Serializable);
                    try
                    {


                        var pgi = db2.IM_PlanGoodsIssueItem.Where(c => PlanGiRunWave.Contains(c.PlanGoodsIssueItem_Index) && c.Document_Status == 0).ToList();
                        foreach (var p in pgi)
                        {
                            p.Document_Status = 1;
                        }
                        var GI = db2.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && (c.RunWave_Status == null || c.RunWave_Status == 0)).ToList();
                        foreach (var g in GI)
                        {
                            g.Wave_Index = new Guid(model.wave_Index);
                            g.RunWave_Status = 10;
                        }
                        db2.SaveChanges();
                        transaction.Commit();
                    }

                    catch (Exception exy)
                    {

                      

                        transaction.Rollback();
                        throw exy;
                    }
                }

                #endregion

                #region planGIResultx

                var planGIResultx = db.View_PLANWAVEV.Where(c => PlanGiRunWave.Contains(c.PlanGoodsIssueItem_Index))
                    .GroupBy(g => new
                    {
                        g.Product_Index,
                        g.Product_Id,
                        g.Product_Name,
                        g.Product_SecondName,
                        g.Product_ThirdName,
                        g.Product_Lot,
                        g.ItemStatus_Index,
                        g.ItemStatus_Id,
                        g.ItemStatus_Name,
                        g.MFG_Date,
                        g.EXP_Date,
                        g.DocumentRef_No1,
                        g.DocumentRef_No2,
                        g.DocumentRef_No3,
                        g.DocumentRef_No4,
                        g.DocumentRef_No5,
                        g.UDF_1,
                        g.UDF_2,
                        g.UDF_3,
                        g.UDF_4,
                        g.UDF_5,
                        g.Owner_Index,
                        g.PlanGoodsIssue_UDF_1,
                        g.PlanGoodsIssue_UDF_2,
                        g.PlanGoodsIssue_UDF_3,
                        g.PlanGoodsIssue_UDF_4,
                        g.PlanGoodsIssue_UDF_5
                    })
                    .Select(s => new
                    {
                        s.Key.Product_Index,
                        s.Key.Product_Id,
                        s.Key.Product_Name,
                        s.Key.Product_SecondName,
                        s.Key.Product_ThirdName,
                        s.Key.Product_Lot,
                        s.Key.ItemStatus_Index,
                        s.Key.ItemStatus_Id,
                        s.Key.ItemStatus_Name,
                        s.Key.MFG_Date,
                        s.Key.EXP_Date,
                        s.Key.DocumentRef_No1,
                        s.Key.DocumentRef_No2,
                        s.Key.DocumentRef_No3,
                        s.Key.DocumentRef_No4,
                        s.Key.DocumentRef_No5,
                        s.Key.UDF_1,
                        s.Key.UDF_2,
                        s.Key.UDF_3,
                        s.Key.UDF_4,
                        s.Key.UDF_5,
                        total = s.Sum(x => x.TotalQty),
                        GITotalQty = s.Sum(x => x.GITotalQty),
                        QtyWave = s.Sum(x => x.TotalQty) - s.Sum(x => x.GITotalQty),
                        s.Key.Owner_Index,
                        s.Key.PlanGoodsIssue_UDF_1,
                        s.Key.PlanGoodsIssue_UDF_2,
                        s.Key.PlanGoodsIssue_UDF_3,
                        s.Key.PlanGoodsIssue_UDF_4,
                        s.Key.PlanGoodsIssue_UDF_5
                    }).ToList();

                #endregion

                #region Check  View_PLANWAVEV

                State = "View_PLANWAVEV";
                olog.logging("runwave", State);
                if (planGIResultx.Count == 0)
                {
                    throw new Exception("Plan GI not found..");
                }

                #endregion

                #region Get WaveRule and ViewWaveTemplate

                var jsGetWaveRule = new { process_Index = process, wave_Index = model.wave_Index };
                var getWaveRule = utils.SendDataApi<List<WaveRuleViewModel>>(new AppSettingConfig().GetUrl("getWaveRule"), jsGetWaveRule.sJson());

                if (getWaveRule.Count == 0)
                {
                    throw new Exception("Wave Template not found.");
                }

                var getViewWaveTemplateEX = utils.SendDataApi<List<WaveTemplateViewModel>>(new AppSettingConfig().GetUrl("getViewWaveTemplate"), new { }.sJson());

                #endregion

                State = "getWaveRule";
                olog.logging("runwave", State);
                bool isUseAttribute = false;
                //int A_LOOP = 0;
                //int B_LOOP = 0;
                //int C_LOOP = 0;
                //int D_LOOP = 0;
                //int E_LOOP = 0;
                //int F_LOOP = 0;
                //int G_LOOP = 0;
                //int H_LOOP = 0;
                //int I_LOOP = 0;
                //int J_LOOP = 0;
                //int K_LOOP = 0;

                #region for getWaveRule >>>>  A_LOOP

                foreach (var waveRule in getWaveRule.OrderBy(o => o.waveRule_Seq))
                {
                    //A_LOOP++;
                    //log_Waveprocress logsaveI = new log_Waveprocress();
                    //logsaveI.Waveprocress_Index = Guid.NewGuid();
                    //logsaveI.GoodsIssue_Index = Guid.Parse(model.goodsIssue_Index);
                    //logsaveI.GoodsIssue_No = model.goodsIssue_No;
                    //logsaveI.DocumentRef_No1 = "waveRule A_LOOP";
                    //logsaveI.DocumentRef_No2 = "A : " + A_LOOP;
                    //logsaveI.Json = "";
                    //logsaveI.Create_By = model.create_by;
                    //logsaveI.Create_Date = DateTime.Now;
                    //dblog.log_Waveprocress.Add(logsaveI);


                    var jsgetViewWaveTemplate = new { process_Index = process, wave_Index = model.wave_Index, rule_Index = waveRule.rule_Index };
                    var getViewWaveTemplate = getViewWaveTemplateEX.Where(c => c.process_Index == process.ToString() && c.wave_Index == model.wave_Index && c.rule_Index == waveRule.rule_Index);
                    State = "getViewWaveTemplate";
                    olog.logging("runwave", State);
                    var planGIWaveResult = db.View_PLANWAVEbyPLANGIV2.AsQueryable();
                    var check = planGIWaveResult.ToList();
                    planGIWaveResult = planGIWaveResult.Where(c => PlanGiRunWave.Contains(c.PlanGoodsIssueItem_Index));

                    #region for RuleSource >>>> B_LOOP
                    var RuleSourceList = getViewWaveTemplate.Where(c => c.isSource == 1 && c.isSearch == 1).ToList();

                    foreach (var itemRuleSourceList in RuleSourceList)
                    {
                        //B_LOOP++;
                        //log_Waveprocress logsaveJ = new log_Waveprocress();
                        //logsaveJ.Waveprocress_Index = Guid.NewGuid();
                        //logsaveJ.GoodsIssue_Index = Guid.Parse(model.goodsIssue_Index);
                        //logsaveJ.GoodsIssue_No = model.goodsIssue_No;
                        //logsaveJ.DocumentRef_No1 = "RuleSourceList B_LOOP";
                        //logsaveJ.DocumentRef_No2 = "A : " + A_LOOP + " __ B: " + B_LOOP;
                        //logsaveJ.Json = "";
                        //logsaveJ.Create_By = model.create_by;
                        //logsaveJ.Create_Date = DateTime.Now;
                        //dblog.log_Waveprocress.Add(logsaveJ);


                        if (itemRuleSourceList.ruleConditionOperation == "IN")
                        {
                            var dataarray = itemRuleSourceList.ruleCondition_Param.Replace("'", "").Split(',');
                            if (itemRuleSourceList.ruleConditionField_Name == "DocumentType_Id")
                            {
                                planGIWaveResult = planGIWaveResult.Where(c => dataarray.Contains(c.DocumentType_Id));
                            }
                            if (itemRuleSourceList.ruleConditionField_Name == "Owner_Id")
                            {
                                planGIWaveResult = planGIWaveResult.Where(c => dataarray.Contains(c.Owner_Id));
                            }
                        }
                        else if (itemRuleSourceList.ruleConditionOperation == "=")
                        {
                            if (itemRuleSourceList.ruleConditionField_Name == "UseAttribute")
                            {
                                if (itemRuleSourceList.ruleCondition_Param.ToString().ToUpper() == "TRUE")
                                {
                                    isUseAttribute = true;
                                }
                                else
                                {
                                    isUseAttribute = false;
                                }

                            }
                            else
                            {
                                var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                                var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.Equal(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
                                    , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                                planGIWaveResult = planGIWaveResult.Where(lambda);
                            }

                        }
                        else if (itemRuleSourceList.ruleConditionOperation == ">")
                        {
                            var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.GreaterThan(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
                                , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            planGIWaveResult = planGIWaveResult.Where(lambda);

                        }
                        else if (itemRuleSourceList.ruleConditionOperation == "<")
                        {
                            var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.LessThan(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
                                , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            planGIWaveResult = planGIWaveResult.Where(lambda);
                        }
                        else if (itemRuleSourceList.ruleConditionOperation == "!=")
                        {
                            var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.NotEqual(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
                                , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            planGIWaveResult = planGIWaveResult.Where(lambda);
                        }
                        else if (itemRuleSourceList.ruleConditionOperation == ">=")
                        {
                            var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.GreaterThanOrEqual(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
                                , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            planGIWaveResult = planGIWaveResult.Where(lambda);
                        }
                        else if (itemRuleSourceList.ruleConditionOperation == "<=")
                        {
                            var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.LessThanOrEqual(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
                                , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            planGIWaveResult = planGIWaveResult.Where(lambda);
                        }
                        else if (itemRuleSourceList.ruleConditionOperation == "Like")
                        {
                            var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            var predicate = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>(
                                Expression.Call(
                                    Expression.PropertyOrField(param, itemRuleSourceList.ruleConditionField_Name),
                                    "Contains", null, Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""))
                                ), param);
                            planGIWaveResult = planGIWaveResult.Where(predicate);
                        }
                    }
                    #endregion

                    #region for RuleDesSort >>>> C_LOOP
                    var RuleSourceSortList = getViewWaveTemplate.Where(c => c.isSource == 1 && c.isSort == 1).ToList();

                    string setWhereSourceSort = "";

                    if (RuleSourceSortList.Count > 0)
                    {
                        setWhereSourceSort += " Order by ";
                    }

                    int iRowsSourceSort = 0;
                    foreach (var itemRuleSourceSortList in RuleSourceSortList)
                    {
                        //C_LOOP++;
                        //log_Waveprocress logsaveK = new log_Waveprocress();
                        //logsaveK.Waveprocress_Index = Guid.NewGuid();
                        //logsaveK.GoodsIssue_Index = Guid.Parse(model.goodsIssue_Index);
                        //logsaveK.GoodsIssue_No = model.goodsIssue_No;
                        //logsaveK.DocumentRef_No1 = "RuleSourceSortList C_LOOP";
                        //logsaveK.DocumentRef_No2 = "A : " + A_LOOP + " __ C: " + C_LOOP;
                        //logsaveK.Json = "";
                        //logsaveK.Create_By = model.create_by;
                        //logsaveK.Create_Date = DateTime.Now;
                        //dblog.log_Waveprocress.Add(logsaveK);

                        if (iRowsSourceSort == 0)
                        {
                            setWhereSourceSort += itemRuleSourceSortList.ruleConditionField_Name + ' ' + itemRuleSourceSortList.ruleCondition_Param;
                            var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, string>>(Expression.Property(param, itemRuleSourceSortList.ruleConditionField_Name), param);
                            if (itemRuleSourceSortList.ruleCondition_Param.ToUpper() == "DESC")
                            {
                                planGIWaveResult = planGIWaveResult.OrderByDescending(lambda);
                            }
                            else
                            {
                                planGIWaveResult = planGIWaveResult.OrderBy(lambda);
                            }
                        }
                        else
                        {
                            setWhereSourceSort += "," + itemRuleSourceSortList.ruleConditionField_Name + ' ' + itemRuleSourceSortList.ruleCondition_Param;
                            var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, string>>(Expression.Property(param, itemRuleSourceSortList.ruleConditionField_Name), param);
                            if (itemRuleSourceSortList.ruleCondition_Param.ToUpper() == "DESC")
                            {
                                planGIWaveResult = planGIWaveResult.OrderByDescending(lambda);
                            }
                            else
                            {
                                planGIWaveResult = planGIWaveResult.OrderBy(lambda);
                            }
                        }
                        iRowsSourceSort = iRowsSourceSort + 1;

                    }
                    #endregion

                    var planGIWaveResult2 = planGIWaveResult.ToList();
                    State = "View_PLANWAVEbyPLANGIV2";
                    olog.logging("runwave", State);

                    #region for planGIResultx >>>> D_LOOP
                    foreach (var item in planGIResultx)
                    {
                        //D_LOOP++;
                        //log_Waveprocress logsaveL = new log_Waveprocress();
                        //logsaveL.Waveprocress_Index = Guid.NewGuid();
                        //logsaveL.GoodsIssue_Index = Guid.Parse(model.goodsIssue_Index);
                        //logsaveL.GoodsIssue_No = model.goodsIssue_No;
                        //logsaveL.DocumentRef_No1 = "planGIResultx D_LOOP";
                        //logsaveL.DocumentRef_No2 = "A : " + A_LOOP + " __ D: " + D_LOOP;
                        //logsaveL.Json = "";
                        //logsaveL.Create_By = model.create_by;
                        //logsaveL.Create_Date = DateTime.Now;
                        //dblog.log_Waveprocress.Add(logsaveL);

                        olog.logging("runwave", "planGIResultx : " + item.Product_Id.ToString());

                        var planGIWaveResult3 = planGIWaveResult2.AsQueryable();
                        var strwhere = new getViewBinbalanceViewModel();

                        #region query Plag Gi
                        if (item.Owner_Index.ToString() != "")
                        {
                            strwhere.Owner_Index = item.Owner_Index;
                            planGIWaveResult3 = planGIWaveResult3.Where(c => c.Owner_Index == item.Owner_Index);
                        }
                        if (item.Product_Index.ToString() != "")
                        {
                            strwhere.Product_Index = item.Product_Index;
                            planGIWaveResult3 = planGIWaveResult3.Where(c => c.Product_Index == item.Product_Index);
                        }

                        if (item.ItemStatus_Index.ToString() != "")
                        {
                            strwhere.ItemStatus_Index = item.ItemStatus_Index;
                            planGIWaveResult3 = planGIWaveResult3.Where(c => c.ItemStatus_Index == item.ItemStatus_Index);
                        }

                        if (item.Product_Lot != null)
                        {
                            if (item.Product_Lot.ToString() != "")
                            {
                                strwhere.Product_Lot = item.Product_Lot;
                                planGIWaveResult3 = planGIWaveResult3.Where(c => c.Product_Lot == item.Product_Lot);
                            }
                        }

                        if (isUseAttribute == true)
                        {
                            // ADD UDF 1-5 
                            strwhere.isUseAttribute = isUseAttribute;
                            if (item.UDF_1 != null)
                            {
                                strwhere.UDF_1 = item.UDF_1;
                                planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_1 == item.UDF_1);
                            }

                            if (item.UDF_2 != null)
                            {
                                strwhere.UDF_2 = item.UDF_2;
                                planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_2 == item.UDF_2);
                            }

                            if (item.UDF_3 != null)
                            {
                                strwhere.UDF_3 = item.UDF_3;
                                planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_3 == item.UDF_3);
                            }

                            if (item.UDF_4 != null)
                            {
                                strwhere.UDF_4 = item.UDF_4;
                                planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_4 == item.UDF_4);
                            }

                            if (item.UDF_5 != null)
                            {
                                strwhere.UDF_5 = item.UDF_5;
                                planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_5 == item.UDF_5);
                            }
                        }
                        #endregion

                        if (planGIWaveResult3.OrderBy(c => c.LineNum).ToList().Count < 1)
                        {
                            continue;
                        }

                        #region Isuse
                        strwhere.isuse = model.goodsIssue_Index;
                        var Isuse = new SqlParameter("@Isuse", strwhere.isuse);
                        var product_index = new SqlParameter("@product_index", strwhere.Product_Index);
                        var itemstatus_index = new SqlParameter("@itemstatus_index", strwhere.ItemStatus_Index);
                        var owner_index = new SqlParameter("@owner_index", strwhere.Owner_Index);
                        var resultx = db.Database.ExecuteSqlCommand("EXEC sp_Update_isuse @Isuse ,@product_index ,@itemstatus_index ,@owner_index ", Isuse, product_index, itemstatus_index, owner_index);
                        #endregion

                        State = "planGIWaveResult3";
                        olog.logging("runwave", State);
                        strwhere.isuse = model.goodsIssue_Index;
                        strwhere.isActive = true;

                        decimal? QtyPlanGIRemian = 0;

                        #region for planGIWaveResult3 >>>> E_LOOP

                        foreach (var itemPlanGI in planGIWaveResult3.OrderBy(c => c.LineNum))
                        {
                            //E_LOOP++;
                            //log_Waveprocress logsaveM = new log_Waveprocress();
                            //logsaveM.Waveprocress_Index = Guid.NewGuid();
                            //logsaveM.GoodsIssue_Index = Guid.Parse(model.goodsIssue_Index);
                            //logsaveM.GoodsIssue_No = model.goodsIssue_No;
                            //logsaveM.DocumentRef_No1 = "planGIWaveResult3 E_LOOP";
                            //logsaveM.DocumentRef_No2 = "A : " + A_LOOP + " __ D: " + D_LOOP + " __ E: " + E_LOOP;
                            //logsaveM.Json = "";
                            //logsaveM.Create_By = model.create_by;
                            //logsaveM.Create_Date = DateTime.Now;
                            //dblog.log_Waveprocress.Add(logsaveM);

                            if (itemPlanGI.ModPlanGI == 0)
                            {
                                IsPA = 0;

                            }
                            else
                            {
                                IsPA = 1;
                            }

                            State = "listDataProduct2.ToList()";
                            olog.logging("runwave", State);
                            var listProducttote = listDataProduct2.Where(c => c.product_Index == itemPlanGI.Product_Index).ToList();
                            if (listProducttote != null)
                            {
                                var checkProduct = listProducttote.Where(c => c.product_Index == itemPlanGI.Product_Index).FirstOrDefault();
                                if (checkProduct == null)
                                {
                                    continue;
                                }

                                if (checkProduct.Ref_No1 == "carton flow rack")
                                {
                                    IsTote = true;

                                }
                                else
                                {
                                    IsTote = false;

                                }

                            }
                            else
                            {
                                IsTote = false;
                            }


                            var ListGoodsIssueItemLocation = new List<im_GoodsIssueItemLocation>();
                            if (itemPlanGI.Product_Id == "1004492")
                            {
                                var lnum = itemPlanGI.LineNum;

                            }

                            QtyPlanGIRemian = itemPlanGI.TotalQty - itemPlanGI.GITotalQty;
                            if (QtyPlanGIRemian <= 0)
                            {
                                break;
                            }

                            #region view_waveBinbalance2
                            State = "getViewBinbalanceapi";
                            olog.logging("runwave", State);

                            //var listDataBinbalance2 = utils.SendDataApi<List<BinBalanceViewModel>>(new AppSettingConfig().GetUrl("getViewBinbalance"), strwhere.sJson());

                            //var checklistDataBinbalance2 = listDataBinbalance2.ToList();

                            State = "View_WaveCheckProductLot";
                            olog.logging("runwave", State);

                            var ListLot = new List<String>();
                            var ListLotNotWave = new List<String>();
                            var listAll_Lot = db.View_WaveCheckProductLot.Where(c => c.Product_Index == itemPlanGI.Product_Index).ToList();

                            var listLot_In_Product = listAll_Lot.Where(c => c.PlanGoodsIssue_Index == itemPlanGI.PlanGoodsIssue_Index && c.Product_Index == itemPlanGI.Product_Index).ToList();

                            if (listLot_In_Product.Count > 0)
                            {
                                foreach (var itemlot in listLot_In_Product)
                                {
                                    ListLot.Add(item.Product_Lot);
                                }
                            }

                            var listLot_NotIN_Wave = listAll_Lot.Where(c => !ListLot.Contains(c.Product_Lot)).ToList();


                            if (listLot_NotIN_Wave.Count > 0)
                            {
                                foreach (var itemlot in listLot_NotIN_Wave)
                                {
                                    ListLotNotWave.Add(itemlot.Product_Lot);
                                }
                            }

                            State = "getView_WaveBinBalance2";
                            olog.logging("runwave", State);
                            var GIDate = model.goodsIssue_Date.toDate();

                            var GoodsIssue_Index = new SqlParameter("@GoodsIssue_Index", strwhere.isuse);
                            var Owner_Index = new SqlParameter("@Owner_Index", strwhere.Owner_Index.ToString());
                            var Product_Index = new SqlParameter("@Product_Index", strwhere.Product_Index.ToString());
                            var Product_Lot = new SqlParameter("@Product_Lot", strwhere.Product_Lot == null ? "" : strwhere.Product_Lot);
                            var ItemStatus_Index = new SqlParameter("@ItemStatus_Index", strwhere.ItemStatus_Index.ToString());
                            List<View_WaveBinBalanceViewModel_Ace> View_WaveBinBalance2 = new List<View_WaveBinBalanceViewModel_Ace>();
                            View_WaveBinBalance2 = db.View_WaveBinBalanceViewModel_Ace.FromSql("EXEC sp_WaveBinBalance @GoodsIssue_Index ,@Owner_Index ,@Product_Index ,@Product_Lot ,@ItemStatus_Index", GoodsIssue_Index, Owner_Index, Product_Index, Product_Lot, ItemStatus_Index).ToList();


                            State = "View_WaveBinBalance2 EXEC";
                            olog.logging("runwave", State);

                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(c =>
                                (c.goodsReceive_EXP_Date != null ? c.goodsReceive_EXP_Date.sParse<DateTime>().Subtract(DateTime.Now.AddDays(-1)).Days : 1) > (c.productShelfLife_D ?? 0) &&
                                !(ListLotNotWave.Contains(c.product_Lot)) &&
                                 (c.binBalance_QtyBal) > 0 &&
                                 (c.binBalance_QtyReserve) >= 0 &&
                                c.goodsReceive_Date <= GIDate.Value.Date &&
                                (string.IsNullOrEmpty(itemPlanGI.ERP_Location) ? (c.erp_Location ?? "") == "" : c.erp_Location == itemPlanGI.ERP_Location)
                            ).ToList();

                            State = "View_WaveBinBalance2 EXEC S";




                            #endregion

                            //var CheckBinBalanceResult = View_WaveBinBalance2.ToList();


                            #region for RuleDesSort >>>> F_LOOP
                            //var RuleDesList2 = getViewWaveTemplate.Where(c => c.isDestination == 1 && c.isSearch == 1).ToList();


                            //foreach (var itemRuleDesList in RuleDesList2)
                            //{

                            //    State = "RuleDesSort";
                            //    olog.logging("runwave", State);
                            //    //F_LOOP++;

                            //    //log_Waveprocress logsaveN = new log_Waveprocress();
                            //    //logsaveN.Waveprocress_Index = Guid.NewGuid();
                            //    //logsaveN.GoodsIssue_Index = Guid.Parse(model.goodsIssue_Index);
                            //    //logsaveN.GoodsIssue_No = model.goodsIssue_No;
                            //    //logsaveN.DocumentRef_No1 = "RuleDesList2 F_LOOP";
                            //    //logsaveN.DocumentRef_No2 = "A : " + A_LOOP + " __ D: " + D_LOOP + " __ E: " + E_LOOP + " __ F: " + F_LOOP;
                            //    //logsaveN.Json = "";
                            //    //logsaveN.Create_By = model.create_by;
                            //    //logsaveN.Create_Date = DateTime.Now;
                            //    //dblog.log_Waveprocress.Add(logsaveN);

                            //    if (itemRuleDesList.ruleConditionOperation == "IN")
                            //    {
                            //        if (itemRuleDesList.ruleConditionField_Name == "Zone_Id")
                            //        {
                            //            var listDataZoneLocation = utils.SendDataApi<List<ZoneLocationViewModel>>(new AppSettingConfig().GetUrl("getZoneLocationMaster"), new { }.sJson());
                            //            var listDataZone = utils.SendDataApi<List<ZoneViewModel>>(new AppSettingConfig().GetUrl("getZoneMaster"), new { }.sJson());

                            //            var dataarray = itemRuleDesList.ruleCondition_Param.Replace("'", "").Split(',');
                            //            var dataZone = listDataZone.Where(c => dataarray.Contains(c.zone_Id)).ToList();
                            //            var zoneArray = new List<Guid?>();
                            //            foreach (var z in dataZone)
                            //            {
                            //                zoneArray.Add(z.zone_Index);
                            //            }
                            //            var listLocation_index = listDataZoneLocation.Where(c => zoneArray.Contains(c.zone_Index)).Select(s => s.location_Index.ToString()).ToList();
                            //            View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => listLocation_index.Contains(c.location_Index)).ToList();
                            //        }
                            //        else
                            //        {
                            //            var dataarray = itemRuleDesList.ruleCondition_Param.Replace("'", "").Split(',');
                            //            if (itemRuleDesList.ruleConditionField_Name == "GoodsReceive_Date")
                            //            {
                            //                View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.goodsReceive_Date)).ToList();
                            //            }
                            //            if (itemRuleDesList.ruleConditionField_Name == "GoodsReceive_No")
                            //            {
                            //                View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.goodsReceive_No)).ToList();
                            //            }
                            //            if (itemRuleDesList.ruleConditionField_Name == "ItemStatus_Id")
                            //            {
                            //                View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.itemStatus_Id)).ToList();
                            //            }
                            //            if (itemRuleDesList.ruleConditionField_Name == "Location_Name")
                            //            {
                            //                View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.location_Name)).ToList();
                            //            }

                            //            if (itemRuleDesList.ruleConditionField_Name == "Product_Id")
                            //            {
                            //                View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.product_Id)).ToList();
                            //            }
                            //            if (itemRuleDesList.ruleConditionField_Name == "Product_Lot")
                            //            {
                            //                View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.product_Lot)).ToList();
                            //            }

                            //        }
                            //    }
                            //    else if (itemRuleDesList.ruleConditionOperation == "=")
                            //    {
                            //        if (itemRuleDesList.ruleConditionField_Name == "Zone_Id")
                            //        {
                            //            var listDataZoneLocation = utils.SendDataApi<List<ZoneLocationViewModel>>(new AppSettingConfig().GetUrl("getZoneLocationMaster"), new { }.sJson());
                            //            var listDataZone = utils.SendDataApi<List<ZoneViewModel>>(new AppSettingConfig().GetUrl("getZoneMaster"), new { }.sJson());

                            //            var param = Expression.Parameter(typeof(ZoneViewModel), "x");
                            //            var lambda = Expression.Lambda<Func<ZoneViewModel, bool>>((Expression)Expression.Equal(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                            //                , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            //            var dataZone = listDataZone.AsQueryable().Where(lambda).ToList();
                            //            var zoneArray = new List<Guid?>();
                            //            foreach (var z in dataZone)
                            //            {
                            //                zoneArray.Add(z.zone_Index);
                            //            }
                            //            var listLocation_index = listDataZoneLocation.Where(c => zoneArray.Contains(c.zone_Index)).Select(s => s.location_Index.ToString()).ToList();
                            //            View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => listLocation_index.Contains(c.location_Index)).ToList();
                            //        }
                            //        else
                            //        {
                            //            var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel_Ace), "x");
                            //            var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel_Ace, bool>>((Expression)Expression.Equal(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                            //                , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            //            View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
                            //        }
                            //    }
                            //    else if (itemRuleDesList.ruleConditionOperation == ">")
                            //    {
                            //        var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel_Ace), "x");
                            //        var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel_Ace, bool>>((Expression)Expression.GreaterThan(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                            //            , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            //        View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
                            //    }
                            //    else if (itemRuleDesList.ruleConditionOperation == "<")
                            //    {
                            //        var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel_Ace), "x");
                            //        var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel_Ace, bool>>((Expression)Expression.LessThan(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                            //            , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            //        View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
                            //    }
                            //    else if (itemRuleDesList.ruleConditionOperation == "!=")
                            //    {
                            //        var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel_Ace), "x");
                            //        var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel_Ace, bool>>((Expression)Expression.NotEqual(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                            //            , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            //        View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
                            //    }
                            //    else if (itemRuleDesList.ruleConditionOperation == ">=")
                            //    {
                            //        var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel_Ace), "x");
                            //        var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel_Ace, bool>>((Expression)Expression.GreaterThanOrEqual(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                            //            , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            //        View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
                            //    }
                            //    else if (itemRuleDesList.ruleConditionOperation == "<=")
                            //    {
                            //        var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel_Ace), "x");
                            //        var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel_Ace, bool>>((Expression)Expression.LessThanOrEqual(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                            //            , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            //        View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
                            //    }
                            //    else if (itemRuleDesList.ruleConditionOperation == "Like")
                            //    {
                            //        var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel_Ace), "x");
                            //        var predicate = Expression.Lambda<Func<View_WaveBinBalanceViewModel_Ace, bool>>(
                            //            Expression.Call(
                            //                Expression.PropertyOrField(param, itemRuleDesList.ruleConditionField_Name),
                            //                "Contains", null, Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""))
                            //            ), param);
                            //        View_WaveBinBalance2 = View_WaveBinBalance2.Where(predicate);
                            //    }

                            //}
                            #endregion

                            #region for RuleDesSortList >>>> G_LOOP
                            //var RuleDesSortList2 = getViewWaveTemplate.Where(c => c.isDestination == 1 && c.isSort == 1).ToList();

                            //int iRowsDesSort2 = 0;
                            //foreach (var itemRuleDesSortList in RuleDesSortList2)
                            //{
                            //    State = "RuleDesSortList";
                            //    olog.logging("runwave", State);
                            //    //G_LOOP++;

                            //    //log_Waveprocress logsaveO = new log_Waveprocress();
                            //    //logsaveO.Waveprocress_Index = Guid.NewGuid();
                            //    //logsaveO.GoodsIssue_Index = Guid.Parse(model.goodsIssue_Index);
                            //    //logsaveO.GoodsIssue_No = model.goodsIssue_No;
                            //    //logsaveO.DocumentRef_No1 = "RuleDesSortList2 G_LOOP";
                            //    //logsaveO.DocumentRef_No2 = "A : " + A_LOOP + " __ D: " + D_LOOP + " __ E: " + E_LOOP + " __ G: " + G_LOOP;
                            //    //logsaveO.Json = "";
                            //    //logsaveO.Create_By = model.create_by;
                            //    //logsaveO.Create_Date = DateTime.Now;
                            //    //dblog.log_Waveprocress.Add(logsaveO);

                            //    if (iRowsDesSort2 == 0)
                            //    {
                            //        var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel_Ace), "x");
                            //        var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel_Ace, string>>(Expression.Property(param, itemRuleDesSortList.ruleConditionField_Name), param);
                            //        if (itemRuleDesSortList.ruleCondition_Param.ToUpper() == "DESC")
                            //        {
                            //            View_WaveBinBalance2 = View_WaveBinBalance2.OrderByDescending(lambda);
                            //        }
                            //        else
                            //        {
                            //            View_WaveBinBalance2 = View_WaveBinBalance2.OrderBy(lambda);
                            //        }
                            //    }
                            //    else
                            //    {
                            //        var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel_Ace), "x");
                            //        var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel_Ace, string>>(Expression.Property(param, itemRuleDesSortList.ruleConditionField_Name), param);
                            //        if (itemRuleDesSortList.ruleCondition_Param.ToUpper() == "DESC")
                            //        {
                            //            View_WaveBinBalance2 = View_WaveBinBalance2.OrderByDescending(lambda);
                            //        }
                            //        else
                            //        {
                            //            View_WaveBinBalance2 = View_WaveBinBalance2.OrderBy(lambda);
                            //        }
                            //    }
                            //    iRowsDesSort2 = iRowsDesSort2 + 1;

                            //}
                            #endregion

                            State = "View_WaveBinBalance2";
                            olog.logging("runwave", State);
                            var BinBalanceResult = View_WaveBinBalance2.ToList();

                            State = "View_WaveBinBalance2.ToList";
                            olog.logging("runwave", State);

                            var itemBinSort = new List<View_WaveBinBalanceViewModel_Ace>();


                            if (IsPA == 1 && IsTote == true)
                            {
                                itemBinSort = BinBalanceResult.OrderBy(c => c.picking_Seq).ThenBy(f => f.location_Bay).ThenBy(d => d.ageRemain).ThenBy(e => e.goodsReceive_Date).ThenBy(f => f.location_Name).ToList();

                            }
                            else if (IsPA == 0 && IsTote == true)
                            {
                                itemBinSort = BinBalanceResult.OrderBy(c => c.picking_Seq).ThenByDescending(f => f.location_Bay).ThenBy(d => d.ageRemain).ThenBy(e => e.goodsReceive_Date).ThenBy(f => f.location_Name).ToList();
                            }
                            else
                            {
                                itemBinSort = BinBalanceResult.OrderBy(c => c.picking_Seq).ThenBy(d => d.ageRemain).ThenBy(e => e.goodsReceive_Date).ThenBy(f => f.location_Name).ToList();

                            }

                            int icountloop = 0;

                            #region for itemBinSort >>>> H_LOOP

                            //  foreach (var itemBin in BinBalanceResult.OrderBy(c => c.picking_Seq).ThenBy(d => d.ageRemain).ThenBy(e => e.goodsReceive_Date).ThenBy(f => f.location_Name))
                            foreach (var itemBin in itemBinSort)
                            {
                                icountloop = icountloop + 1;

                                olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [" + icountloop.ToString() + "]  Product_Id " + itemBin.product_Id + " Bin_Index " + itemBin.binBalance_Index);

                                decimal? QtyBal = itemBin.binBalance_QtyBal - itemBin.binBalance_QtyReserve;


                                olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " :  QtyBal " + QtyBal.ToString() + " =  binBalance_QtyBal : " + itemBin.binBalance_QtyBal.ToString() + "  -  binBalance_QtyReserve  : " + itemBin.binBalance_QtyReserve.ToString());


                                if (QtyPlanGIRemian <= 0)
                                {
                                    olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [QtyPlanGIRemian <= 0 ]  " + QtyPlanGIRemian.ToString());

                                    break;
                                }
                                if (QtyBal <= 0)
                                {
                                    olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [QtyBal <= 0 ]  " + QtyBal.ToString());
                                    continue;
                                }


                                if (QtyPlanGIRemian >= QtyBal && QtyBal > 0)
                                {
                                    State = "QtyPlanGIRemian >= QtyBal && QtyBal > 0";
                                    olog.logging("runwave", State + " TAG_NO " + itemBin.tag_No + " Product_Id " + itemBin.product_Id + " Bin_Index " + itemBin.binBalance_Index);


                                    olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [QtyPlanGIRemian >= QtyBal && QtyBal > 0]   QtyPlanGIRemian " + QtyPlanGIRemian.ToString() + "    QtyBal : " + QtyBal.ToString());



                                    // Add GI ITEMLOCATION 
                                    var GoodsIssueItemLocation = new im_GoodsIssueItemLocation();
                                    GoodsIssueItemLocation.GoodsIssueItemLocation_Index = Guid.NewGuid();
                                    GoodsIssueItemLocation.GoodsIssue_Index = new Guid(model.goodsIssue_Index);
                                    GoodsIssueItemLocation.TagItem_Index = new Guid(itemBin.tagItem_Index);
                                    GoodsIssueItemLocation.Tag_Index = new Guid(itemBin.tag_Index);
                                    GoodsIssueItemLocation.Tag_No = itemBin.tag_No;
                                    GoodsIssueItemLocation.Product_Index = new Guid(itemBin.product_Index);
                                    GoodsIssueItemLocation.Product_Id = itemBin.product_Id;
                                    GoodsIssueItemLocation.Product_Name = itemBin.product_Name;
                                    GoodsIssueItemLocation.Product_SecondName = itemBin.product_SecondName;
                                    GoodsIssueItemLocation.Product_ThirdName = itemBin.product_ThirdName;
                                    GoodsIssueItemLocation.Product_Lot = itemBin.product_Lot;
                                    GoodsIssueItemLocation.ItemStatus_Index = new Guid(itemBin.itemStatus_Index);
                                    GoodsIssueItemLocation.ItemStatus_Id = itemBin.itemStatus_Id;
                                    GoodsIssueItemLocation.ItemStatus_Name = itemBin.itemStatus_Name;
                                    GoodsIssueItemLocation.Location_Index = new Guid(itemBin.location_Index);
                                    GoodsIssueItemLocation.Location_Id = itemBin.location_Id;
                                    GoodsIssueItemLocation.Location_Name = itemBin.location_Name;
                                    GoodsIssueItemLocation.QtyPlan = (Decimal)itemPlanGI.TotalQtyRemian;
                                    GoodsIssueItemLocation.Qty = (Decimal)QtyBal / (Decimal)itemPlanGI.Ratio;
                                    GoodsIssueItemLocation.Ratio = (Decimal)itemPlanGI.Ratio;
                                    GoodsIssueItemLocation.TotalQty = (Decimal)QtyBal;
                                    //GoodsIssueItemLocation.ProductConversion_Index = new Guid(itemBin.productConversion_Index);
                                    //GoodsIssueItemLocation.ProductConversion_Id = itemBin.productConversion_Id;
                                    //GoodsIssueItemLocation.ProductConversion_Name = itemBin.productConversion_Name;
                                    GoodsIssueItemLocation.ProductConversion_Index = (Guid)itemPlanGI.ProductConversion_Index;
                                    GoodsIssueItemLocation.ProductConversion_Id = itemPlanGI.ProductConversion_Id;
                                    GoodsIssueItemLocation.ProductConversion_Name = itemPlanGI.ProductConversion_Name;
                                    GoodsIssueItemLocation.MFG_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_MFG_Date) ? itemBin.goodsReceive_MFG_Date.toDate() : null;
                                    GoodsIssueItemLocation.EXP_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_EXP_Date) ? itemBin.goodsReceive_EXP_Date.toDate() : null;

                                    GoodsIssueItemLocation.UnitWeight = itemBin.binBalance_UnitWeightBal;
                                    GoodsIssueItemLocation.UnitWeight_Index = itemBin.binBalance_UnitWeightBal_Index;
                                    GoodsIssueItemLocation.UnitWeight_Id = itemBin.binBalance_UnitWeightBal_Id;
                                    GoodsIssueItemLocation.UnitWeight_Name = itemBin.binBalance_UnitWeightBal_Name;
                                    GoodsIssueItemLocation.UnitWeightRatio = itemBin.binBalance_UnitWeightBalRatio;

                                    GoodsIssueItemLocation.Weight = (itemBin.binBalance_WeightBal ?? 0) - (itemBin.binBalance_WeightReserve ?? 0);
                                    GoodsIssueItemLocation.Weight_Index = itemBin.binBalance_WeightBal_Index;
                                    GoodsIssueItemLocation.Weight_Id = itemBin.binBalance_WeightBal_Id;
                                    GoodsIssueItemLocation.Weight_Name = itemBin.binBalance_WeightBal_Name;
                                    GoodsIssueItemLocation.WeightRatio = itemBin.binBalance_WeightBalRatio;

                                    GoodsIssueItemLocation.UnitNetWeight = itemBin.binBalance_UnitNetWeightBal;
                                    GoodsIssueItemLocation.UnitNetWeight_Index = itemBin.binBalance_UnitNetWeightBal_Index;
                                    GoodsIssueItemLocation.UnitNetWeight_Id = itemBin.binBalance_UnitNetWeightBal_Id;
                                    GoodsIssueItemLocation.UnitNetWeight_Name = itemBin.binBalance_UnitNetWeightBal_Name;
                                    GoodsIssueItemLocation.UnitNetWeightRatio = itemBin.binBalance_UnitNetWeightBalRatio;

                                    GoodsIssueItemLocation.NetWeight = (itemBin.binBalance_NetWeightBal ?? 0) - (itemBin.binBalance_NetWeightReserve ?? 0);
                                    GoodsIssueItemLocation.NetWeight_Index = itemBin.binBalance_NetWeightBal_Index;
                                    GoodsIssueItemLocation.NetWeight_Id = itemBin.binBalance_NetWeightBal_Id;
                                    GoodsIssueItemLocation.NetWeight_Name = itemBin.binBalance_NetWeightBal_Name;
                                    GoodsIssueItemLocation.NetWeightRatio = itemBin.binBalance_NetWeightBalRatio;

                                    GoodsIssueItemLocation.UnitGrsWeight = itemBin.binBalance_UnitGrsWeightBal;
                                    GoodsIssueItemLocation.UnitGrsWeight_Index = itemBin.binBalance_UnitGrsWeightBal_Index;
                                    GoodsIssueItemLocation.UnitGrsWeight_Id = itemBin.binBalance_UnitGrsWeightBal_Id;
                                    GoodsIssueItemLocation.UnitGrsWeight_Name = itemBin.binBalance_UnitGrsWeightBal_Name;
                                    GoodsIssueItemLocation.UnitGrsWeightRatio = itemBin.binBalance_UnitGrsWeightBalRatio;

                                    GoodsIssueItemLocation.GrsWeight = (itemBin.binBalance_GrsWeightBal ?? 0) - (itemBin.binBalance_GrsWeightReserve ?? 0);
                                    GoodsIssueItemLocation.GrsWeight_Index = itemBin.binBalance_GrsWeightBal_Index;
                                    GoodsIssueItemLocation.GrsWeight_Id = itemBin.binBalance_GrsWeightBal_Id;
                                    GoodsIssueItemLocation.GrsWeight_Name = itemBin.binBalance_GrsWeightBal_Name;
                                    GoodsIssueItemLocation.GrsWeightRatio = itemBin.binBalance_GrsWeightBalRatio;

                                    GoodsIssueItemLocation.UnitWidth = (itemBin.binBalance_UnitWidthBal ?? 0);
                                    GoodsIssueItemLocation.UnitWidth_Index = itemBin.binBalance_UnitWidthBal_Index;
                                    GoodsIssueItemLocation.UnitWidth_Id = itemBin.binBalance_UnitWidthBal_Id;
                                    GoodsIssueItemLocation.UnitWidth_Name = itemBin.binBalance_UnitWidthBal_Name;
                                    GoodsIssueItemLocation.UnitWidthRatio = itemBin.binBalance_UnitWidthBalRatio;

                                    GoodsIssueItemLocation.Width = (itemBin.binBalance_WidthBal ?? 0) - (itemBin.binBalance_WidthReserve ?? 0);
                                    GoodsIssueItemLocation.Width_Index = itemBin.binBalance_WidthBal_Index;
                                    GoodsIssueItemLocation.Width_Id = itemBin.binBalance_WidthBal_Id;
                                    GoodsIssueItemLocation.Width_Name = itemBin.binBalance_WidthBal_Name;
                                    GoodsIssueItemLocation.WidthRatio = itemBin.binBalance_WidthBalRatio;

                                    GoodsIssueItemLocation.UnitLength = (itemBin.binBalance_UnitLengthBal ?? 0);
                                    GoodsIssueItemLocation.UnitLength_Index = itemBin.binBalance_UnitLengthBal_Index;
                                    GoodsIssueItemLocation.UnitLength_Id = itemBin.binBalance_UnitLengthBal_Id;
                                    GoodsIssueItemLocation.UnitLength_Name = itemBin.binBalance_UnitLengthBal_Name;
                                    GoodsIssueItemLocation.UnitLengthRatio = itemBin.binBalance_UnitLengthBalRatio;

                                    GoodsIssueItemLocation.Length = (itemBin.binBalance_LengthBal ?? 0) - (itemBin.binBalance_LengthReserve ?? 0);
                                    GoodsIssueItemLocation.Length_Index = itemBin.binBalance_LengthBal_Index;
                                    GoodsIssueItemLocation.Length_Id = itemBin.binBalance_LengthBal_Id;
                                    GoodsIssueItemLocation.Length_Name = itemBin.binBalance_LengthBal_Name;
                                    GoodsIssueItemLocation.LengthRatio = itemBin.binBalance_LengthBalRatio;

                                    GoodsIssueItemLocation.UnitHeight = (itemBin.binBalance_UnitHeightBal ?? 0);
                                    GoodsIssueItemLocation.UnitHeight_Index = itemBin.binBalance_UnitHeightBal_Index;
                                    GoodsIssueItemLocation.UnitHeight_Id = itemBin.binBalance_UnitHeightBal_Id;
                                    GoodsIssueItemLocation.UnitHeight_Name = itemBin.binBalance_UnitHeightBal_Name;
                                    GoodsIssueItemLocation.UnitHeightRatio = itemBin.binBalance_UnitHeightBalRatio;

                                    GoodsIssueItemLocation.Height = (itemBin.binBalance_HeightBal ?? 0) - (itemBin.binBalance_HeightReserve ?? 0);
                                    GoodsIssueItemLocation.Height_Index = itemBin.binBalance_HeightBal_Index;
                                    GoodsIssueItemLocation.Height_Id = itemBin.binBalance_HeightBal_Id;
                                    GoodsIssueItemLocation.Height_Name = itemBin.binBalance_HeightBal_Name;
                                    GoodsIssueItemLocation.HeightRatio = itemBin.binBalance_HeightBalRatio;

                                    GoodsIssueItemLocation.UnitVolume = (itemBin.binBalance_UnitVolumeBal ?? 0);
                                    GoodsIssueItemLocation.Volume = (itemBin.binBalance_VolumeBal ?? 0) - (itemBin.binBalance_VolumeReserve ?? 0);

                                    GoodsIssueItemLocation.UnitPrice = (itemBin.unitPrice ?? 0);
                                    GoodsIssueItemLocation.UnitPrice_Index = itemBin.unitPrice_Index;
                                    GoodsIssueItemLocation.UnitPrice_Id = itemBin.unitPrice_Id;
                                    GoodsIssueItemLocation.UnitPrice_Name = itemBin.unitPrice_Name;
                                    GoodsIssueItemLocation.Price = (itemBin.price ?? 0);
                                    GoodsIssueItemLocation.Price_Index = itemBin.price_Index;
                                    GoodsIssueItemLocation.Price_Id = itemBin.price_Id;
                                    GoodsIssueItemLocation.Price_Name = itemBin.price_Name;


                                    GoodsIssueItemLocation.DocumentRef_No1 = itemPlanGI.DocumentRef_No1;
                                    GoodsIssueItemLocation.DocumentRef_No2 = itemPlanGI.DocumentRef_No2;
                                    GoodsIssueItemLocation.DocumentRef_No3 = itemPlanGI.DocumentRef_No3;
                                    GoodsIssueItemLocation.DocumentRef_No4 = itemPlanGI.DocumentRef_No4;
                                    GoodsIssueItemLocation.DocumentRef_No5 = itemPlanGI.DocumentRef_No5;
                                    GoodsIssueItemLocation.Document_Status = -2;
                                    GoodsIssueItemLocation.UDF_1 = itemPlanGI.UDF_1;
                                    GoodsIssueItemLocation.UDF_2 = itemPlanGI.UDF_2;
                                    GoodsIssueItemLocation.UDF_3 = itemPlanGI.UDF_3;
                                    GoodsIssueItemLocation.UDF_4 = itemPlanGI.UDF_4;
                                    GoodsIssueItemLocation.UDF_5 = itemPlanGI.UDF_5;
                                    GoodsIssueItemLocation.Ref_Process_Index = new Guid("22744590-55D8-4448-88EF-5997C252111F");  // PLAN GI Process
                                    GoodsIssueItemLocation.Ref_Document_No = itemPlanGI.PlanGoodsIssue_No;
                                    GoodsIssueItemLocation.Ref_Document_Index = (Guid)itemPlanGI.PlanGoodsIssue_Index;
                                    GoodsIssueItemLocation.Ref_DocumentItem_Index = itemPlanGI.PlanGoodsIssueItem_Index;
                                    GoodsIssueItemLocation.GoodsReceiveItem_Index = new Guid(itemBin.goodsReceiveItem_Index);
                                    GoodsIssueItemLocation.Create_By = model.create_by;
                                    GoodsIssueItemLocation.Create_Date = DateTime.Now;
                                    GoodsIssueItemLocation.GoodsIssue_No = model.goodsIssue_No;
                                    GoodsIssueItemLocation.BinBalance_Index = new Guid(itemBin.binBalance_Index);


                                    GoodsIssueItemLocation.Invoice_No = itemBin.invoice_No;
                                    GoodsIssueItemLocation.Declaration_No = itemBin.declaration_No;
                                    GoodsIssueItemLocation.HS_Code = itemBin.hs_Code;
                                    GoodsIssueItemLocation.Conutry_of_Origin = itemBin.conutry_of_Origin;
                                    GoodsIssueItemLocation.Tax1 = itemBin.tax1;
                                    GoodsIssueItemLocation.Tax1_Currency_Index = itemBin.tax1_Currency_Index;
                                    GoodsIssueItemLocation.Tax1_Currency_Id = itemBin.tax1_Currency_Id;
                                    GoodsIssueItemLocation.Tax1_Currency_Name = itemBin.tax1_Currency_Name;
                                    GoodsIssueItemLocation.Tax2 = itemBin.tax2;
                                    GoodsIssueItemLocation.Tax2_Currency_Index = itemBin.tax2_Currency_Index;
                                    GoodsIssueItemLocation.Tax2_Currency_Id = itemBin.tax2_Currency_Id;
                                    GoodsIssueItemLocation.Tax2_Currency_Name = itemBin.tax2_Currency_Name;
                                    GoodsIssueItemLocation.Tax3 = itemBin.tax3;
                                    GoodsIssueItemLocation.Tax3_Currency_Index = itemBin.tax3_Currency_Index;
                                    GoodsIssueItemLocation.Tax3_Currency_Id = itemBin.tax3_Currency_Id;
                                    GoodsIssueItemLocation.Tax3_Currency_Name = itemBin.tax3_Currency_Name;
                                    GoodsIssueItemLocation.Tax4 = itemBin.tax4;
                                    GoodsIssueItemLocation.Tax4_Currency_Index = itemBin.tax4_Currency_Index;
                                    GoodsIssueItemLocation.Tax4_Currency_Id = itemBin.tax4_Currency_Id;
                                    GoodsIssueItemLocation.Tax4_Currency_Name = itemBin.tax4_Currency_Name;
                                    GoodsIssueItemLocation.Tax5 = itemBin.tax5;
                                    GoodsIssueItemLocation.Tax5_Currency_Index = itemBin.tax5_Currency_Index;
                                    GoodsIssueItemLocation.Tax5_Currency_Id = itemBin.tax5_Currency_Id;
                                    GoodsIssueItemLocation.Tax5_Currency_Name = itemBin.tax5_Currency_Name;
                                    GoodsIssueItemLocation.ERP_Location = itemBin.erp_Location;



                                    chkdatawave = true;
                                    ListGoodsIssueItemLocation.Add(GoodsIssueItemLocation);

                                    olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [GIL]   GoodsIssueItemLocation.TotalQty " + GoodsIssueItemLocation.TotalQty.ToString() + "    Ref_Document_No : " + GoodsIssueItemLocation.Ref_Document_No.ToString());




                                    itemPlanGI.GITotalQty = itemPlanGI.GITotalQty + QtyBal;

                                    olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [QtyPlanGIRemian - QtyBal ]  " + QtyPlanGIRemian.ToString() + "  - " + QtyBal.ToString());

                                    QtyPlanGIRemian = QtyPlanGIRemian - QtyBal;

                                    olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [END line QtyPlanGIRemian ]  " + QtyPlanGIRemian.ToString());


                                }
                                else if (QtyPlanGIRemian < QtyBal && QtyPlanGIRemian > 0 && QtyBal > 0)
                                {


                                    State = "QtyPlanGIRemian < QtyBal && QtyPlanGIRemian > 0 && QtyBal > 0";
                                    olog.logging("runwave", State + " TAG_NO " + itemBin.tag_No + " Product_Id " + itemBin.product_Id + " Bin_Index " + itemBin.binBalance_Index);


                                    olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [QtyPlanGIRemian < QtyBal && QtyPlanGIRemian > 0 && QtyBal > 0]   QtyPlanGIRemian " + QtyPlanGIRemian.ToString() + "    QtyBal : " + QtyBal.ToString());




                                    var QtyPick = QtyPlanGIRemian;
                                    //itemBin.binBalance_QtyReserve = itemBin.binBalance_QtyReserve + QtyPick;


                                    olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [QtyPick]   QtyPick " + QtyPick.ToString());



                                    // Add GI ITEMLOCATION 
                                    var GoodsIssueItemLocation = new im_GoodsIssueItemLocation();
                                    GoodsIssueItemLocation.GoodsIssueItemLocation_Index = Guid.NewGuid();
                                    GoodsIssueItemLocation.GoodsIssue_Index = new Guid(model.goodsIssue_Index);
                                    GoodsIssueItemLocation.TagItem_Index = new Guid(itemBin.tagItem_Index);
                                    GoodsIssueItemLocation.Tag_Index = new Guid(itemBin.tag_Index);
                                    GoodsIssueItemLocation.Tag_No = itemBin.tag_No;
                                    GoodsIssueItemLocation.Product_Index = new Guid(itemBin.product_Index);
                                    GoodsIssueItemLocation.Product_Id = itemBin.product_Id;
                                    GoodsIssueItemLocation.Product_Name = itemBin.product_Name;
                                    GoodsIssueItemLocation.Product_SecondName = itemBin.product_SecondName;
                                    GoodsIssueItemLocation.Product_ThirdName = itemBin.product_ThirdName;
                                    GoodsIssueItemLocation.Product_Lot = itemBin.product_Lot;
                                    GoodsIssueItemLocation.ItemStatus_Index = new Guid(itemBin.itemStatus_Index);
                                    GoodsIssueItemLocation.ItemStatus_Id = itemBin.itemStatus_Id;
                                    GoodsIssueItemLocation.ItemStatus_Name = itemBin.itemStatus_Name;
                                    GoodsIssueItemLocation.Location_Index = new Guid(itemBin.location_Index);
                                    GoodsIssueItemLocation.Location_Id = itemBin.location_Id;
                                    GoodsIssueItemLocation.Location_Name = itemBin.location_Name;
                                    GoodsIssueItemLocation.QtyPlan = (Decimal)itemPlanGI.TotalQtyRemian;
                                    GoodsIssueItemLocation.Qty = (Decimal)QtyPick / (Decimal)itemPlanGI.Ratio;
                                    GoodsIssueItemLocation.Ratio = (Decimal)itemPlanGI.Ratio;
                                    GoodsIssueItemLocation.TotalQty = (Decimal)QtyPick;
                                    //GoodsIssueItemLocation.ProductConversion_Index = new Guid(itemBin.productConversion_Index);
                                    //GoodsIssueItemLocation.ProductConversion_Id = itemBin.productConversion_Id;
                                    //GoodsIssueItemLocation.ProductConversion_Name = itemBin.productConversion_Name;
                                    GoodsIssueItemLocation.ProductConversion_Index = (Guid)itemPlanGI.ProductConversion_Index;
                                    GoodsIssueItemLocation.ProductConversion_Id = itemPlanGI.ProductConversion_Id;
                                    GoodsIssueItemLocation.ProductConversion_Name = itemPlanGI.ProductConversion_Name;
                                    GoodsIssueItemLocation.MFG_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_MFG_Date) ? itemBin.goodsReceive_MFG_Date.toDate() : null;
                                    GoodsIssueItemLocation.EXP_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_EXP_Date) ? itemBin.goodsReceive_EXP_Date.toDate() : null;

                                    if (itemBin.binBalance_WeightBegin == 0)
                                    {
                                        GoodsIssueItemLocation.Weight = 0;
                                    }
                                    else
                                    {
                                        GoodsIssueItemLocation.UnitWeight = itemBin.binBalance_UnitWeightBal;
                                        GoodsIssueItemLocation.UnitWeight_Index = itemBin.binBalance_UnitWeightBal_Index;
                                        GoodsIssueItemLocation.UnitWeight_Id = itemBin.binBalance_UnitWeightBal_Id;
                                        GoodsIssueItemLocation.UnitWeight_Name = itemBin.binBalance_UnitWeightBal_Name;
                                        GoodsIssueItemLocation.UnitWeightRatio = itemBin.binBalance_UnitWeightBalRatio;

                                        GoodsIssueItemLocation.Weight = (Decimal)(QtyPick * (itemBin.binBalance_UnitWeightBal ?? 0));
                                        GoodsIssueItemLocation.Weight_Index = itemBin.binBalance_UnitWeightBal_Index;
                                        GoodsIssueItemLocation.Weight_Id = itemBin.binBalance_UnitWeightBal_Id;
                                        GoodsIssueItemLocation.Weight_Name = itemBin.binBalance_UnitWeightBal_Name;
                                        GoodsIssueItemLocation.WeightRatio = itemBin.binBalance_UnitWeightBalRatio;
                                    }

                                    if (itemBin.binBalance_NetWeightBegin == 0)
                                    {
                                        GoodsIssueItemLocation.NetWeight = 0;
                                    }
                                    else
                                    {
                                        GoodsIssueItemLocation.UnitNetWeight = itemBin.binBalance_UnitNetWeightBal;
                                        GoodsIssueItemLocation.UnitNetWeight_Index = itemBin.binBalance_UnitNetWeightBal_Index;
                                        GoodsIssueItemLocation.UnitNetWeight_Id = itemBin.binBalance_UnitNetWeightBal_Id;
                                        GoodsIssueItemLocation.UnitNetWeight_Name = itemBin.binBalance_UnitNetWeightBal_Name;
                                        GoodsIssueItemLocation.UnitNetWeightRatio = itemBin.binBalance_UnitNetWeightBalRatio;

                                        GoodsIssueItemLocation.NetWeight = (Decimal)(QtyPick * (itemBin.binBalance_UnitNetWeightBal ?? 0));
                                        GoodsIssueItemLocation.NetWeight_Index = itemBin.binBalance_UnitNetWeightBal_Index;
                                        GoodsIssueItemLocation.NetWeight_Id = itemBin.binBalance_UnitNetWeightBal_Id;
                                        GoodsIssueItemLocation.NetWeight_Name = itemBin.binBalance_UnitNetWeightBal_Name;
                                        GoodsIssueItemLocation.NetWeightRatio = itemBin.binBalance_UnitNetWeightBalRatio;
                                    }

                                    if (itemBin.binBalance_GrsWeightBegin == 0)
                                    {
                                        GoodsIssueItemLocation.GrsWeight = 0;
                                    }
                                    else
                                    {
                                        GoodsIssueItemLocation.UnitGrsWeight = itemBin.binBalance_UnitGrsWeightBal;
                                        GoodsIssueItemLocation.UnitGrsWeight_Index = itemBin.binBalance_UnitGrsWeightBal_Index;
                                        GoodsIssueItemLocation.UnitGrsWeight_Id = itemBin.binBalance_UnitGrsWeightBal_Id;
                                        GoodsIssueItemLocation.UnitGrsWeight_Name = itemBin.binBalance_UnitGrsWeightBal_Name;
                                        GoodsIssueItemLocation.UnitGrsWeightRatio = itemBin.binBalance_UnitGrsWeightBalRatio;

                                        GoodsIssueItemLocation.GrsWeight = (Decimal)(QtyPick * (itemBin.binBalance_UnitGrsWeightBal ?? 0));
                                        GoodsIssueItemLocation.GrsWeight_Index = itemBin.binBalance_UnitGrsWeightBal_Index;
                                        GoodsIssueItemLocation.GrsWeight_Id = itemBin.binBalance_UnitGrsWeightBal_Id;
                                        GoodsIssueItemLocation.GrsWeight_Name = itemBin.binBalance_UnitGrsWeightBal_Name;
                                        GoodsIssueItemLocation.GrsWeightRatio = itemBin.binBalance_UnitGrsWeightBalRatio;
                                    }

                                    if (itemBin.binBalance_WidthBegin == 0)
                                    {
                                        GoodsIssueItemLocation.Width = 0;
                                    }
                                    else
                                    {
                                        GoodsIssueItemLocation.UnitWidth = (itemBin.binBalance_UnitWidthBal ?? 0);
                                        GoodsIssueItemLocation.UnitWidth_Index = itemBin.binBalance_UnitWidthBal_Index;
                                        GoodsIssueItemLocation.UnitWidth_Id = itemBin.binBalance_UnitWidthBal_Id;
                                        GoodsIssueItemLocation.UnitWidth_Name = itemBin.binBalance_UnitWidthBal_Name;
                                        GoodsIssueItemLocation.UnitWidthRatio = itemBin.binBalance_UnitWidthBalRatio;

                                        GoodsIssueItemLocation.Width = (Decimal)(QtyPick * (itemBin.binBalance_UnitWidthBal ?? 0));
                                        GoodsIssueItemLocation.Width_Index = itemBin.binBalance_UnitWidthBal_Index;
                                        GoodsIssueItemLocation.Width_Id = itemBin.binBalance_UnitWidthBal_Id;
                                        GoodsIssueItemLocation.Width_Name = itemBin.binBalance_UnitWidthBal_Name;
                                        GoodsIssueItemLocation.WidthRatio = itemBin.binBalance_UnitWidthBalRatio;
                                    }

                                    if (itemBin.binBalance_LengthBegin == 0)
                                    {
                                        GoodsIssueItemLocation.Length = 0;
                                    }
                                    else
                                    {
                                        GoodsIssueItemLocation.UnitLength = (itemBin.binBalance_UnitLengthBal ?? 0);
                                        GoodsIssueItemLocation.UnitLength_Index = itemBin.binBalance_UnitLengthBal_Index;
                                        GoodsIssueItemLocation.UnitLength_Id = itemBin.binBalance_UnitLengthBal_Id;
                                        GoodsIssueItemLocation.UnitLength_Name = itemBin.binBalance_UnitLengthBal_Name;
                                        GoodsIssueItemLocation.UnitLengthRatio = itemBin.binBalance_UnitLengthBalRatio;

                                        GoodsIssueItemLocation.Length = (Decimal)(QtyPick * (itemBin.binBalance_UnitWidthBal ?? 0));
                                        GoodsIssueItemLocation.Length_Index = itemBin.binBalance_UnitLengthBal_Index;
                                        GoodsIssueItemLocation.Length_Id = itemBin.binBalance_UnitLengthBal_Id;
                                        GoodsIssueItemLocation.Length_Name = itemBin.binBalance_UnitLengthBal_Name;
                                        GoodsIssueItemLocation.LengthRatio = itemBin.binBalance_UnitLengthBalRatio;
                                    }

                                    if (itemBin.binBalance_HeightBegin == 0)
                                    {
                                        GoodsIssueItemLocation.Height = 0;
                                    }
                                    else
                                    {
                                        GoodsIssueItemLocation.UnitHeight = (itemBin.binBalance_UnitHeightBal ?? 0);
                                        GoodsIssueItemLocation.UnitHeight_Index = itemBin.binBalance_UnitHeightBal_Index;
                                        GoodsIssueItemLocation.UnitHeight_Id = itemBin.binBalance_UnitHeightBal_Id;
                                        GoodsIssueItemLocation.UnitHeight_Name = itemBin.binBalance_UnitHeightBal_Name;
                                        GoodsIssueItemLocation.UnitHeightRatio = itemBin.binBalance_UnitHeightBalRatio;

                                        GoodsIssueItemLocation.Height = (Decimal)(QtyPick * (itemBin.binBalance_UnitHeightBal ?? 0));
                                        GoodsIssueItemLocation.Height_Index = itemBin.binBalance_UnitHeightBal_Index;
                                        GoodsIssueItemLocation.Height_Id = itemBin.binBalance_UnitHeightBal_Id;
                                        GoodsIssueItemLocation.Height_Name = itemBin.binBalance_UnitHeightBal_Name;
                                        GoodsIssueItemLocation.HeightRatio = itemBin.binBalance_UnitHeightBalRatio;
                                    }

                                    if (itemBin.binBalance_UnitVolumeBal == 0)
                                    {
                                        GoodsIssueItemLocation.UnitVolume = 0;
                                    }
                                    else
                                    {
                                        GoodsIssueItemLocation.UnitVolume = (itemBin.binBalance_UnitVolumeBal ?? 0);
                                        GoodsIssueItemLocation.Volume = (Decimal)(QtyPick * (itemBin.binBalance_UnitVolumeBal ?? 0));
                                    }

                                    GoodsIssueItemLocation.UnitPrice = (itemBin.unitPrice ?? 0);
                                    GoodsIssueItemLocation.UnitPrice_Index = itemBin.unitPrice_Index;
                                    GoodsIssueItemLocation.UnitPrice_Id = itemBin.unitPrice_Id;
                                    GoodsIssueItemLocation.UnitPrice_Name = itemBin.unitPrice_Name;
                                    GoodsIssueItemLocation.Price = (Decimal)(QtyPick * (itemBin.unitPrice ?? 0));
                                    GoodsIssueItemLocation.Price_Index = itemBin.unitPrice_Index;
                                    GoodsIssueItemLocation.Price_Id = itemBin.unitPrice_Id;
                                    GoodsIssueItemLocation.Price_Name = itemBin.unitPrice_Name;



                                    GoodsIssueItemLocation.DocumentRef_No1 = itemPlanGI.DocumentRef_No1;
                                    GoodsIssueItemLocation.DocumentRef_No2 = itemPlanGI.DocumentRef_No2;
                                    GoodsIssueItemLocation.DocumentRef_No3 = itemPlanGI.DocumentRef_No3;
                                    GoodsIssueItemLocation.DocumentRef_No4 = itemPlanGI.DocumentRef_No4;
                                    GoodsIssueItemLocation.DocumentRef_No5 = itemPlanGI.DocumentRef_No5;
                                    GoodsIssueItemLocation.Document_Status = -2;
                                    GoodsIssueItemLocation.UDF_1 = itemPlanGI.UDF_1;
                                    GoodsIssueItemLocation.UDF_2 = itemPlanGI.UDF_2;
                                    GoodsIssueItemLocation.UDF_3 = itemPlanGI.UDF_3;
                                    GoodsIssueItemLocation.UDF_4 = itemPlanGI.UDF_4;
                                    GoodsIssueItemLocation.UDF_5 = itemPlanGI.UDF_5;
                                    GoodsIssueItemLocation.Ref_Process_Index = new Guid("22744590-55D8-4448-88EF-5997C252111F");  // PLAN GI Process
                                    GoodsIssueItemLocation.Ref_Document_No = itemPlanGI.PlanGoodsIssue_No;
                                    GoodsIssueItemLocation.Ref_Document_Index = (Guid)itemPlanGI.PlanGoodsIssue_Index;
                                    GoodsIssueItemLocation.Ref_DocumentItem_Index = itemPlanGI.PlanGoodsIssueItem_Index;
                                    GoodsIssueItemLocation.GoodsReceiveItem_Index = new Guid(itemBin.goodsReceiveItem_Index);
                                    GoodsIssueItemLocation.Create_By = model.create_by;
                                    GoodsIssueItemLocation.Create_Date = DateTime.Now;
                                    GoodsIssueItemLocation.GoodsIssue_No = model.goodsIssue_No;
                                    GoodsIssueItemLocation.BinBalance_Index = new Guid(itemBin.binBalance_Index);

                                    GoodsIssueItemLocation.Invoice_No = itemBin.invoice_No;
                                    GoodsIssueItemLocation.Declaration_No = itemBin.declaration_No;
                                    GoodsIssueItemLocation.HS_Code = itemBin.hs_Code;
                                    GoodsIssueItemLocation.Conutry_of_Origin = itemBin.conutry_of_Origin;
                                    GoodsIssueItemLocation.Tax1 = itemBin.tax1;
                                    GoodsIssueItemLocation.Tax1_Currency_Index = itemBin.tax1_Currency_Index;
                                    GoodsIssueItemLocation.Tax1_Currency_Id = itemBin.tax1_Currency_Id;
                                    GoodsIssueItemLocation.Tax1_Currency_Name = itemBin.tax1_Currency_Name;
                                    GoodsIssueItemLocation.Tax2 = itemBin.tax2;
                                    GoodsIssueItemLocation.Tax2_Currency_Index = itemBin.tax2_Currency_Index;
                                    GoodsIssueItemLocation.Tax2_Currency_Id = itemBin.tax2_Currency_Id;
                                    GoodsIssueItemLocation.Tax2_Currency_Name = itemBin.tax2_Currency_Name;
                                    GoodsIssueItemLocation.Tax3 = itemBin.tax3;
                                    GoodsIssueItemLocation.Tax3_Currency_Index = itemBin.tax3_Currency_Index;
                                    GoodsIssueItemLocation.Tax3_Currency_Id = itemBin.tax3_Currency_Id;
                                    GoodsIssueItemLocation.Tax3_Currency_Name = itemBin.tax3_Currency_Name;
                                    GoodsIssueItemLocation.Tax4 = itemBin.tax4;
                                    GoodsIssueItemLocation.Tax4_Currency_Index = itemBin.tax4_Currency_Index;
                                    GoodsIssueItemLocation.Tax4_Currency_Id = itemBin.tax4_Currency_Id;
                                    GoodsIssueItemLocation.Tax4_Currency_Name = itemBin.tax4_Currency_Name;
                                    GoodsIssueItemLocation.Tax5 = itemBin.tax5;
                                    GoodsIssueItemLocation.Tax5_Currency_Index = itemBin.tax5_Currency_Index;
                                    GoodsIssueItemLocation.Tax5_Currency_Id = itemBin.tax5_Currency_Id;
                                    GoodsIssueItemLocation.Tax5_Currency_Name = itemBin.tax5_Currency_Name;
                                    GoodsIssueItemLocation.ERP_Location = itemBin.erp_Location;

                                    chkdatawave = true;
                                    ListGoodsIssueItemLocation.Add(GoodsIssueItemLocation);


                                    olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [GIL]   GoodsIssueItemLocation.TotalQty " + GoodsIssueItemLocation.TotalQty.ToString() + "    Ref_Document_No : " + GoodsIssueItemLocation.Ref_Document_No.ToString());



                                    itemPlanGI.GITotalQty = itemPlanGI.GITotalQty + QtyPick;


                                    olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [ QtyPlanGIRemian - QtyPick ]  " + QtyPlanGIRemian.ToString() + "  - " + QtyPick.ToString());



                                    QtyPlanGIRemian = QtyPlanGIRemian - QtyPick;

                                    olog.logging("GIStock", " TAG_NO " + itemBin.tag_No + " : [END line QtyPlanGIRemian ]  " + QtyPlanGIRemian.ToString());



                                }
                            }

                            #endregion

                            olog.logging("GIStock", " -------------- ");

                            #region inset GIL and runwave status 30

                            using (var db4 = new GIDbContext())
                            {
                                db4.Database.SetCommandTimeout(120);
                                var transaction = db4.Database.BeginTransaction(IsolationLevel.Serializable);
                                try
                                {
                                    var GI = db4.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 20).ToList();
                                    foreach (var g in GI)
                                    {
                                        g.RunWave_Status = 30;
                                    }

                                    db4.IM_GoodsIssueItemLocation.AddRange(ListGoodsIssueItemLocation);
                                    db4.SaveChanges();
                                    transaction.Commit();
                                }
                                catch (Exception exy)
                                {
                                    msglog = State + " ex Rollback " + exy.Message.ToString();
                                    olog.logging("runwave", msglog);
                                    transaction.Rollback();
                                    throw exy;
                                }
                            }

                            #endregion

                            State = "inset GIL and runwave status 30";
                            olog.logging("runwave", State);

                            #region insert bincardreserve and runwave status 40

                            using (var Contact = new GIDbContext())
                            {


                                Contact.Database.SetCommandTimeout(360);

                                State = "Contact.IM_GoodsIssueItemLocation";
                                olog.logging("runwave", State);

                                var GIL = Contact.IM_GoodsIssueItemLocation.Where(c => c.Ref_Document_Index == itemPlanGI.PlanGoodsIssue_Index && c.Ref_DocumentItem_Index == itemPlanGI.PlanGoodsIssueItem_Index && c.Document_Status != -1).ToList();

                                #region for GIL >>>>  I_LOOP

                                foreach (var g in GIL)
                                {
                                    //I_LOOP++;

                                    //log_Waveprocress logsaveQ = new log_Waveprocress();
                                    //logsaveQ.Waveprocress_Index = Guid.NewGuid();
                                    //logsaveQ.GoodsIssue_Index = Guid.Parse(model.goodsIssue_Index);
                                    //logsaveQ.GoodsIssue_No = model.goodsIssue_No;
                                    //logsaveQ.DocumentRef_No1 = "GIL I_LOOP";
                                    //logsaveQ.DocumentRef_No2 = "A : " + A_LOOP + " __ D: " + D_LOOP + " __ E: " + E_LOOP + " __ I: " + I_LOOP;
                                    //logsaveQ.Json = "";
                                    //logsaveQ.Create_By = model.create_by;
                                    //logsaveQ.Create_Date = DateTime.Now;
                                    //dblog.log_Waveprocress.Add(logsaveQ);

                                    State = "insertBinCardReserve";

                                    olog.logging("runwave", State + " GIIL_Index" + g.GoodsIssueItemLocation_Index.ToString());

                                    var insertBinCardReserve = new PickbinbalanceFromGIViewModel();

                                    insertBinCardReserve.ref_Document_Index = g.GoodsIssue_Index.ToString();
                                    insertBinCardReserve.ref_DocumentItem_Index = g.GoodsIssueItemLocation_Index.ToString();
                                    insertBinCardReserve.goodsIssue_No = model.goodsIssue_No;
                                    insertBinCardReserve.process_Index = "22744590-55D8-4448-88EF-5997C252111F";
                                    insertBinCardReserve.create_By = model.create_by;
                                    insertBinCardReserve.pick = g.TotalQty;
                                    insertBinCardReserve.binbalance_Index = g.BinBalance_Index.ToString();
                                    insertBinCardReserve.wave_Index = "7efa474a-8ff4-439e-a5d7-8c844cb53b56";

                                    State = "insetBinRe";
                                    olog.logging("runwave", State);
                                    var insetBinRe = getinsertBinCardReserve(insertBinCardReserve);
                                    //var insetBinRe = utils.SendDataApi<actionResultPickbinbalanceViewModel>(new AppSettingConfig().GetUrl("insertBinCardReserve"), insertBinCardReserve.sJson());
                                    if (insetBinRe.resultIsUse)
                                    {
                                        State = "resultIsUse";
                                        olog.logging("runwave", State);

                                        var transaction = Contact.Database.BeginTransaction(IsolationLevel.Serializable);
                                        try
                                        {
                                            var GI = Contact.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 30).ToList();
                                            foreach (var gg in GI)
                                            {
                                                gg.RunWave_Status = 40;
                                            }
                                            Contact.SaveChanges();
                                            transaction.Commit();
                                        }
                                        catch (Exception exy)
                                        {
                                            msglog = State + " ex Rollback " + exy.Message.ToString();
                                            olog.logging("runwave", msglog);
                                            transaction.Rollback();
                                            throw exy;
                                        }
                                    }
                                    else
                                    {
                                        State = "resultIsUse else";
                                        olog.logging("runwave", State);
                                        
                                        var transaction = Contact.Database.BeginTransaction(IsolationLevel.Serializable);
                                        try
                                        {

                                            //var GoodsIssueItemLocation_Index = new SqlParameter("@GoodsIssueItemLocation_Index", g.GoodsIssueItemLocation_Index);
                                            //var resultPickingplan = db.Database.ExecuteSqlCommand("EXEC sp_DeleteGIIL_Error @GoodsIssueItemLocation_Index", GoodsIssueItemLocation_Index);

                                            var GI = Contact.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && (c.RunWave_Status == 30 || c.RunWave_Status == 40)).ToList();
                                            foreach (var gg in GI)
                                            {
                                                gg.RunWave_Status = 30;
                                            }
                                            Contact.SaveChanges();
                                            transaction.Commit();
                                        }
                                        catch (Exception exy)
                                        {
                                            msglog = State + " ex Rollback " + exy.Message.ToString();
                                            olog.logging("runwave", msglog);
                                            transaction.Rollback();
                                            throw exy;
                                        }
                                        msglog = State + " ex Rollback " + "Insert BinCardReserve Error";
                                        olog.logging("runwave", msglog);
                                        result.resultMsg = "Insert BinCardReserve Error";
                                        result.resultIsUse = false;
                                        //return result;

                                    }
                                }

                                #endregion

                            }
                            #endregion
                            State = "insert bincardreserve and runwave status 40";
                            olog.logging("runwave", State);
                        }

                        #endregion

                        #region update isuse = '' and runwave 50

                        //strwhere.isActive = true;

                        //log_Waveprocress logsaveT = new log_Waveprocress();
                        //logsaveT.Waveprocress_Index = Guid.NewGuid();
                        //logsaveT.GoodsIssue_Index = Guid.Parse(model.goodsIssue_Index);
                        //logsaveT.GoodsIssue_No = model.goodsIssue_No;
                        //logsaveT.DocumentRef_No1 = "update isuse = '' and runwave 50";
                        //logsaveT.DocumentRef_No2 = "Update";
                        //logsaveT.Json = "";
                        //logsaveT.Create_By = model.create_by;
                        //logsaveT.Create_Date = DateTime.Now;
                        //dblog.log_Waveprocress.Add(logsaveT);

                        //var resultXX = db.Database.ExecuteSqlCommand("EXEC sp_Delete_isuse @Isuse ,@product_index ,@itemstatus_index ,@owner_index ", Isuse, product_index, itemstatus_index, owner_index);

                        #region update isuse = '' and runwave 50
                        strwhere.isActive = true;
                        State = "updateIsuseViewBinbalance ";
                        var updateIsuseViewBinbalance = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("updateIsuseViewBinbalance"), strwhere.sJson());
                        //PickbinbalanceFromGIViewModel data = new PickbinbalanceFromGIViewModel();
                        //data = strwhere;
                        //var updateIsuseViewBinbalance = insertBinCardReserve(data);
                        if (updateIsuseViewBinbalance)
                        {
                            using (var db5 = new GIDbContext())
                            {
                                db5.Database.SetCommandTimeout(120);
                                var transaction = db5.Database.BeginTransaction(IsolationLevel.Serializable);
                                try
                                {
                                    var GI = db5.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 40).ToList();
                                    foreach (var g in GI)
                                    {
                                        g.RunWave_Status = 50;
                                        g.GI_status = 1;
                                        g.TaskGI_status = 0;
                                        g.TagOut_status = 0;
                                        g.WCS_status = 0;
                                    }
                                    db5.SaveChanges();
                                    transaction.Commit();
                                }
                                catch (Exception exy)
                                {
                                    msglog = State + " ex Rollback " + exy.Message.ToString();
                                    olog.logging("runwave", msglog);
                                    transaction.Rollback();

                                    throw exy;
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Update IsUse By Error");
                        }
                        #endregion

                        #endregion

                        State = "region update isuse = '' and runwave 50";
                        olog.logging("runwave", State);
                    }

                    #endregion

                }

                #endregion

                result.goodsIssue_Index = model.goodsIssue_Index;
                result.goodsIssue_No = model.goodsIssue_No;

                result.resultIsUse = true;

                #region ------------------------------------------------

                //------------------------------------------------

                State = "Update GI Status = 2 : " + model.goodsIssue_No.ToString();
                olog.logging("runwave", State);

                string cmd = "";

                cmd = "  Update  im_GoodsIssue set   " +
                         "  GI_status = 2      " +
                         "  ,Complete_prepareWave = GETDATE()      " +
                         "  where GoodsIssue_Index = '" + result.goodsIssue_Index + "'  " +
                         "   and GI_status = 1 " +
                         "   and Document_Status = -2 ";

                try
                {
                    olog.logging("runwave", State + " " + cmd.ToString());
                    var GIRes = db.Database.ExecuteSqlCommand(cmd);

                }
                catch (Exception exTrans)
                {
                    msglog = State + " exTrans   GI_status = 2   " + exTrans.Message.ToString();
                    olog.logging("runwave", msglog);
                    olog.logging("runwave", "exTrans inner - " + exTrans.InnerException.Message.ToString());

                    throw exTrans;
                }


                //-----------------------------------------------

                #endregion

                State = "end for";
                olog.logging("runwave", State);

                #region Check retrun status PGII >>>> J_LOOP

                foreach (var itemPGII in model.listGoodsIssueItemViewModel)
                {
                    //J_LOOP++;
                    //log_Waveprocress logsaveR = new log_Waveprocress();
                    //logsaveR.Waveprocress_Index = Guid.NewGuid();
                    //logsaveR.GoodsIssue_Index = Guid.Parse(model.goodsIssue_Index);
                    //logsaveR.GoodsIssue_No = model.goodsIssue_No;
                    //logsaveR.DocumentRef_No1 = "listGoodsIssueItemViewModel J_LOOP";
                    //logsaveR.DocumentRef_No2 = "J : " + J_LOOP;
                    //logsaveR.Json = "";
                    //logsaveR.Create_By = model.create_by;
                    //logsaveR.Create_Date = DateTime.Now;
                    //dblog.log_Waveprocress.Add(logsaveR);


                    var chkGIL2 = db.IM_GoodsIssueItemLocation.Where(c => c.Ref_Document_Index == itemPGII.planGoodsIssue_Index && c.Ref_DocumentItem_Index == itemPGII.planGoodsIssueItem_Index && c.Document_Status != -1).ToList();
                    var sumqty = chkGIL2.Sum(s => s.TotalQty);
                    if (chkGIL2.Count == 0 || sumqty != itemPGII.totalQty)
                    {

                        var pgii = model.listGoodsIssueItemViewModel.Where(c => c.planGoodsIssueItem_Index == itemPGII.planGoodsIssueItem_Index).ToList();

                        #region for pgii >>>> K_LOOP

                        foreach (var resultpgii in pgii)
                        {
                            //K_LOOP++;
                            //log_Waveprocress logsaveS = new log_Waveprocress();
                            //logsaveS.Waveprocress_Index = Guid.NewGuid();
                            //logsaveS.GoodsIssue_Index = Guid.Parse(model.goodsIssue_Index);
                            //logsaveS.GoodsIssue_No = model.goodsIssue_No;
                            //logsaveS.DocumentRef_No1 = "RuleSourceList K_LOOP";
                            //logsaveS.DocumentRef_No2 = "J : " + J_LOOP + " __ K: " + K_LOOP;
                            //logsaveS.Json = "";
                            //logsaveS.Create_By = model.create_by;
                            //logsaveS.Create_Date = DateTime.Now;
                            //dblog.log_Waveprocress.Add(logsaveS);



                            resultpgii.qtyPlan = (resultpgii.totalQty - sumqty);
                            resultpgii.totalQty = (resultpgii.totalQty - sumqty);
                            listpgiinotinsert.Add(resultpgii);
                            CheckRunwavePast = true;
                            using (var updatepginotProduct = new GIDbContext())
                            {
                                var transactionresultpgii = updatepginotProduct.Database.BeginTransaction(IsolationLevel.Serializable);
                                try
                                {

                                    var updateresultpgii = updatepginotProduct.IM_PlanGoodsIssueItem.Where(c => c.PlanGoodsIssueItem_Index == resultpgii.planGoodsIssueItem_Index && c.Document_Status == 1).ToList();
                                    foreach (var p in updateresultpgii)
                                    {
                                        p.Document_Status = 0;
                                    }
                                    updatepginotProduct.SaveChanges();
                                    transactionresultpgii.Commit();
                                }

                                catch (Exception exy)
                                {
                                    msglog = State + " ex Rollback " + exy.Message.ToString();
                                    olog.logging("UpdateUserAssign", msglog);
                                    transactionresultpgii.Rollback();
                                    throw exy;
                                }
                            }
                        }

                        #endregion

                    }
                }
                #endregion

                State = "Check retrun status PGII";
                olog.logging("runwave", State);

                #region update PI status 3 and runwave status 60
                using (var db5 = new GIDbContext())
                {
                    db5.Database.SetCommandTimeout(120);
                    var listPGI = new List<Guid>();
                    if (model.listGoodsIssueItemViewModel.Count > 0)
                    {
                        foreach (var item in model.listGoodsIssueItemViewModel)
                        {
                            if (item.planGoodsIssue_Index != Guid.Parse("00000000-0000-0000-0000-000000000000"))
                            {
                                listPGI.Add(item.planGoodsIssue_Index);
                            }
                        }
                    }
                    foreach (var item in listPGI)
                    {
                        var pgii = db5.IM_PlanGoodsIssueItem.Where(c => c.PlanGoodsIssue_Index == item && c.Document_Status == 0).Count();
                        if (pgii == 0)
                        {
                            var transaction = db5.Database.BeginTransaction(IsolationLevel.Serializable);
                            try
                            {
                                var pgi = db5.IM_PlanGoodsIssue.Where(c => c.PlanGoodsIssue_Index == item).ToList();
                                foreach (var p in pgi)
                                {
                                    p.Document_Status = 3;
                                }
                                db5.SaveChanges();
                                transaction.Commit();
                            }

                            catch (Exception exy)
                            {
                                msglog = State + " ex Rollback " + exy.Message.ToString();
                                olog.logging("runwave", msglog);
                                transaction.Rollback();
                                throw exy;
                            }
                        }
                    }
                }
                #endregion

                State = "update PI status 3 and runwave status 60";
                olog.logging("runwave", State);

                result.resultMsg = CheckRunwavePast ? chkdatawave ? "หยิบสินค้าได้บางส่วน" : "สินค้าไม่เพียงพอ" : "หยิบสินค้าสำเร็จ";
                result.pgii = listpgiinotinsert;
                return result;

            }
            catch (Exception ex)
            {
                #region update isuse = '' and runwave 50
                var strwhere = new getViewBinbalanceViewModel();
                strwhere.isuse = model.goodsIssue_Index;
                strwhere.isActive = true;
                var updateIsuseViewBinbalance = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("updateIsuseViewBinbalance"), strwhere.sJson());

                #endregion

                msglog = State + " ex Rollback " + ex.Message.ToString();
                olog.logging("runwave", msglog);
                olog.logging("runwave", "ex inner - " + ex.InnerException.Message.ToString());

                var result = new actionResultRunWaveV2ViewModelViewModel();
                result.resultIsUse = false;
                result.resultMsg = ex.Message;
                return result;
            }
            //finally
            //{

            //    var transactionlog = dblog.Database.BeginTransaction(IsolationLevel.Serializable);
            //    try
            //    {
            //        dblog.SaveChanges();
            //        transactionlog.Commit();
            //    }

            //    catch (Exception exy)
            //    {
            //        transactionlog.Rollback();
            //        throw exy;
            //    }
            //}
        }


        #endregion

        #region insertBinCardReserve new
        public actionResultPickbinbalanceFromGIViewModel getinsertBinCardReserve(PickbinbalanceFromGIViewModel model)
        {
            String State = "Start " + model.sJson();
            String msglog = "";
            var xx = "";
            var olog = new logtxt();
            try
            {
                olog.logging("insertBinCardReserve", State);


                var result = new actionResultPickbinbalanceFromGIViewModel();
                var BinCardReserve_Index = Guid.NewGuid();

                olog.logging("insertBinCardReserve", " ref_DocumentItem_Index  - " + model.ref_DocumentItem_Index.ToString());
                db.Database.SetCommandTimeout(360);
                var itemBinReserve = dbBinbalance.wm_BinCardReserve.Where(c => c.Ref_Document_Index == new Guid(model.ref_Document_Index) && c.Ref_DocumentItem_Index == new Guid(model.ref_DocumentItem_Index)).ToList();
                if (itemBinReserve.Count == 0)
                {

                    State = "itemBinReserve.Count == 0";
                    olog.logging("insertBinCardReserve", State + " - " + model.ref_DocumentItem_Index.ToString());

                    var itemBin = dbBinbalance.wm_BinBalance.Find(Guid.Parse(model.binbalance_Index));
                    var BinCardReserve = new wm_BinCardReserve();

                    BinCardReserve.BinCardReserve_Index = BinCardReserve_Index;
                    BinCardReserve.BinBalance_Index = itemBin.BinBalance_Index;
                    BinCardReserve.Process_Index = new Guid(model.process_Index);
                    BinCardReserve.GoodsReceive_Index = itemBin.GoodsReceive_Index;
                    BinCardReserve.GoodsReceive_No = itemBin.GoodsReceive_No;
                    BinCardReserve.GoodsReceive_Date = itemBin.GoodsReceive_Date;
                    BinCardReserve.GoodsReceiveItem_Index = itemBin.GoodsReceiveItem_Index;
                    BinCardReserve.TagItem_Index = itemBin.TagItem_Index;
                    BinCardReserve.Tag_Index = itemBin.Tag_Index;
                    BinCardReserve.Tag_No = itemBin.Tag_No;
                    BinCardReserve.Product_Index = itemBin.Product_Index;
                    BinCardReserve.Product_Id = itemBin.Product_Id;
                    BinCardReserve.Product_Name = itemBin.Product_Name;
                    BinCardReserve.Product_SecondName = itemBin.Product_SecondName;
                    BinCardReserve.Product_ThirdName = itemBin.Product_ThirdName;
                    BinCardReserve.Product_Lot = itemBin.Product_Lot;
                    BinCardReserve.ItemStatus_Index = itemBin.ItemStatus_Index;
                    BinCardReserve.ItemStatus_Id = itemBin.ItemStatus_Id;
                    BinCardReserve.ItemStatus_Name = itemBin.ItemStatus_Name;
                    BinCardReserve.MFG_Date = itemBin.GoodsReceive_MFG_Date;
                    BinCardReserve.EXP_Date = itemBin.GoodsReceive_EXP_Date;
                    BinCardReserve.ProductConversion_Index = itemBin.ProductConversion_Index;
                    BinCardReserve.ProductConversion_Id = itemBin.ProductConversion_Id;
                    BinCardReserve.ProductConversion_Name = itemBin.ProductConversion_Name;
                    BinCardReserve.Owner_Index = itemBin.Owner_Index;
                    BinCardReserve.Owner_Id = itemBin.Owner_Id;
                    BinCardReserve.Owner_Name = itemBin.Owner_Name;
                    BinCardReserve.Location_Index = itemBin.Location_Index;
                    BinCardReserve.Location_Id = itemBin.Location_Id;
                    BinCardReserve.Location_Name = itemBin.Location_Name;
                    BinCardReserve.BinCardReserve_QtyBal = model.pick;


                    BinCardReserve.BinCardReserve_UnitWeightBal = itemBin.BinBalance_UnitWeightBal;
                    BinCardReserve.BinCardReserve_UnitWeightBal_Index = itemBin.BinBalance_UnitWeightBal_Index;
                    BinCardReserve.BinCardReserve_UnitWeightBal_Id = itemBin.BinBalance_UnitWeightBal_Id;
                    BinCardReserve.BinCardReserve_UnitWeightBal_Name = itemBin.BinBalance_UnitWeightBal_Name;
                    BinCardReserve.BinCardReserve_UnitWeightBalRatio = itemBin.BinBalance_UnitWeightBalRatio;
                    BinCardReserve.BinCardReserve_WeightBal = model.pick * (itemBin.BinBalance_UnitWeightBal ?? 0);
                    BinCardReserve.BinCardReserve_WeightBal_Index = itemBin.BinBalance_WeightBal_Index;
                    BinCardReserve.BinCardReserve_WeightBal_Id = itemBin.BinBalance_WeightBal_Id;
                    BinCardReserve.BinCardReserve_WeightBal_Name = itemBin.BinBalance_WeightBal_Name;
                    BinCardReserve.BinCardReserve_WeightBalRatio = itemBin.BinBalance_WeightBalRatio;

                    BinCardReserve.BinCardReserve_UnitNetWeightBal = itemBin.BinBalance_UnitNetWeightBal;
                    BinCardReserve.BinCardReserve_UnitNetWeightBal_Index = itemBin.BinBalance_UnitNetWeightBal_Index;
                    BinCardReserve.BinCardReserve_UnitNetWeightBal_Id = itemBin.BinBalance_UnitNetWeightBal_Id;
                    BinCardReserve.BinCardReserve_UnitNetWeightBal_Name = itemBin.BinBalance_UnitNetWeightBal_Name;
                    BinCardReserve.BinCardReserve_UnitNetWeightBalRatio = itemBin.BinBalance_UnitNetWeightBalRatio;
                    BinCardReserve.BinCardReserve_NetWeightBal = model.pick * (itemBin.BinBalance_UnitNetWeightBal ?? 0);
                    BinCardReserve.BinCardReserve_NetWeightBal_Index = itemBin.BinBalance_NetWeightBal_Index;
                    BinCardReserve.BinCardReserve_NetWeightBal_Id = itemBin.BinBalance_NetWeightBal_Id;
                    BinCardReserve.BinCardReserve_NetWeightBal_Name = itemBin.BinBalance_NetWeightBal_Name;
                    BinCardReserve.BinCardReserve_NetWeightBalRatio = itemBin.BinBalance_NetWeightBalRatio;

                    BinCardReserve.BinCardReserve_UnitGrsWeightBal = itemBin.BinBalance_UnitGrsWeightBal;
                    BinCardReserve.BinCardReserve_UnitGrsWeightBal_Index = itemBin.BinBalance_UnitGrsWeightBal_Index;
                    BinCardReserve.BinCardReserve_UnitGrsWeightBal_Id = itemBin.BinBalance_UnitGrsWeightBal_Id;
                    BinCardReserve.BinCardReserve_UnitGrsWeightBal_Name = itemBin.BinBalance_UnitGrsWeightBal_Name;
                    BinCardReserve.BinCardReserve_UnitGrsWeightBalRatio = itemBin.BinBalance_UnitGrsWeightBalRatio;
                    BinCardReserve.BinCardReserve_GrsWeightBal = model.pick * (itemBin.BinBalance_UnitGrsWeightBal ?? 0);
                    BinCardReserve.BinCardReserve_GrsWeightBal_Index = itemBin.BinBalance_GrsWeightBal_Index;
                    BinCardReserve.BinCardReserve_GrsWeightBal_Id = itemBin.BinBalance_GrsWeightBal_Id;
                    BinCardReserve.BinCardReserve_GrsWeightBal_Name = itemBin.BinBalance_GrsWeightBal_Name;
                    BinCardReserve.BinCardReserve_GrsWeightBalRatio = itemBin.BinBalance_GrsWeightBalRatio;

                    BinCardReserve.BinCardReserve_UnitWidthBal = itemBin.BinBalance_UnitWidthBal;
                    BinCardReserve.BinCardReserve_UnitWidthBal_Index = itemBin.BinBalance_UnitWidthBal_Index;
                    BinCardReserve.BinCardReserve_UnitWidthBal_Id = itemBin.BinBalance_UnitWidthBal_Id;
                    BinCardReserve.BinCardReserve_UnitWidthBal_Name = itemBin.BinBalance_UnitWidthBal_Name;
                    BinCardReserve.BinCardReserve_UnitWidthBalRatio = itemBin.BinBalance_UnitWidthBalRatio;
                    BinCardReserve.BinCardReserve_WidthBal = model.pick * (itemBin.BinBalance_UnitWidthBal ?? 0);
                    BinCardReserve.BinCardReserve_WidthBal_Index = itemBin.BinBalance_WidthBal_Index;
                    BinCardReserve.BinCardReserve_WidthBal_Id = itemBin.BinBalance_WidthBal_Id;
                    BinCardReserve.BinCardReserve_WidthBal_Name = itemBin.BinBalance_WidthBal_Name;
                    BinCardReserve.BinCardReserve_WidthBalRatio = itemBin.BinBalance_WidthBalRatio;

                    BinCardReserve.BinCardReserve_UnitLengthBal = itemBin.BinBalance_UnitLengthBal;
                    BinCardReserve.BinCardReserve_UnitLengthBal_Index = itemBin.BinBalance_UnitLengthBal_Index;
                    BinCardReserve.BinCardReserve_UnitLengthBal_Id = itemBin.BinBalance_UnitLengthBal_Id;
                    BinCardReserve.BinCardReserve_UnitLengthBal_Name = itemBin.BinBalance_UnitLengthBal_Name;
                    BinCardReserve.BinCardReserve_UnitLengthBalRatio = itemBin.BinBalance_UnitLengthBalRatio;
                    BinCardReserve.BinCardReserve_LengthBal = model.pick * (itemBin.BinBalance_UnitLengthBal ?? 0);
                    BinCardReserve.BinCardReserve_LengthBal_Index = itemBin.BinBalance_LengthBal_Index;
                    BinCardReserve.BinCardReserve_LengthBal_Id = itemBin.BinBalance_LengthBal_Id;
                    BinCardReserve.BinCardReserve_LengthBal_Name = itemBin.BinBalance_LengthBal_Name;
                    BinCardReserve.BinCardReserve_LengthBalRatio = itemBin.BinBalance_LengthBalRatio;

                    BinCardReserve.BinCardReserve_UnitHeightBal = itemBin.BinBalance_UnitHeightBal;
                    BinCardReserve.BinCardReserve_UnitHeightBal_Index = itemBin.BinBalance_UnitHeightBal_Index;
                    BinCardReserve.BinCardReserve_UnitHeightBal_Id = itemBin.BinBalance_UnitHeightBal_Id;
                    BinCardReserve.BinCardReserve_UnitHeightBal_Name = itemBin.BinBalance_UnitHeightBal_Name;
                    BinCardReserve.BinCardReserve_UnitHeightBalRatio = itemBin.BinBalance_UnitHeightBalRatio;
                    BinCardReserve.BinCardReserve_HeightBal = model.pick * (itemBin.BinBalance_UnitHeightBal ?? 0);
                    BinCardReserve.BinCardReserve_HeightBal_Index = itemBin.BinBalance_HeightBal_Index;
                    BinCardReserve.BinCardReserve_HeightBal_Id = itemBin.BinBalance_HeightBal_Id;
                    BinCardReserve.BinCardReserve_HeightBal_Name = itemBin.BinBalance_HeightBal_Name;
                    BinCardReserve.BinCardReserve_HeightBalRatio = itemBin.BinBalance_HeightBalRatio;

                    BinCardReserve.BinCardReserve_UnitVolumeBal = itemBin.BinBalance_UnitVolumeBal;
                    BinCardReserve.BinCardReserve_VolumeBal = model.pick * (itemBin.BinBalance_UnitVolumeBal ?? 0);

                    BinCardReserve.UnitPrice = itemBin.UnitPrice;
                    BinCardReserve.UnitPrice_Index = itemBin.UnitPrice_Index;
                    BinCardReserve.UnitPrice_Id = itemBin.UnitPrice_Id;
                    BinCardReserve.UnitPrice_Name = itemBin.UnitPrice_Name;
                    BinCardReserve.Price = model.pick * (itemBin.UnitPrice ?? 0);
                    BinCardReserve.Price_Index = itemBin.UnitPrice_Index;
                    BinCardReserve.Price_Id = itemBin.UnitPrice_Id;
                    BinCardReserve.Price_Name = itemBin.UnitPrice_Name;



                    BinCardReserve.Ref_Document_Index = Guid.Parse(model.ref_Document_Index);
                    BinCardReserve.Ref_DocumentItem_Index = Guid.Parse(model.ref_DocumentItem_Index);
                    BinCardReserve.Ref_Document_No = model.goodsIssue_No;
                    BinCardReserve.Ref_Wave_Index = model.wave_Index;

                    BinCardReserve.Create_By = model.create_By;
                    BinCardReserve.Create_Date = DateTime.Now;


                    dbBinbalance.wm_BinCardReserve.Add(BinCardReserve);

                    itemBin.BinBalance_QtyReserve = itemBin.BinBalance_QtyReserve + model.pick;

                    if (itemBin.BinBalance_WeightBegin != 0)
                    {
                        var WeightReserve = (model.pick * itemBin.BinBalance_UnitWeightBal);

                        itemBin.BinBalance_WeightReserve = itemBin.BinBalance_WeightReserve + WeightReserve;
                    }

                    if (itemBin.BinBalance_NetWeightBegin != 0)
                    {
                        var NetWeightReserve = (model.pick * itemBin.BinBalance_UnitNetWeightBal);
                        itemBin.BinBalance_NetWeightReserve = itemBin.BinBalance_NetWeightReserve + NetWeightReserve;
                    }


                    if (itemBin.BinBalance_GrsWeightBegin != 0)
                    {
                        var GrsWeightReserve = (model.pick * itemBin.BinBalance_UnitGrsWeightBal);
                        itemBin.BinBalance_GrsWeightReserve = itemBin.BinBalance_GrsWeightReserve + GrsWeightReserve;
                    }


                    if (itemBin.BinBalance_WidthBegin != 0)
                    {
                        var WidthReserve = (model.pick * itemBin.BinBalance_UnitWidthBal);
                        itemBin.BinBalance_WidthReserve = itemBin.BinBalance_WidthReserve + WidthReserve;
                    }


                    if (itemBin.BinBalance_LengthBegin != 0)
                    {
                        var LengthReserve = (model.pick * itemBin.BinBalance_UnitLengthBal);
                        itemBin.BinBalance_LengthReserve = itemBin.BinBalance_LengthReserve + LengthReserve;

                    }


                    if (itemBin.BinBalance_HeightBegin != 0)
                    {
                        var HeightReserve = (model.pick * itemBin.BinBalance_UnitHeightBal);
                        itemBin.BinBalance_HeightReserve = itemBin.BinBalance_HeightReserve + HeightReserve;
                    }

                    if (itemBin.BinBalance_VolumeBegin != 0)
                    {
                        var VolReserve = (model.pick * itemBin.BinBalance_UnitVolumeBal);
                        itemBin.BinBalance_VolumeReserve = itemBin.BinBalance_VolumeReserve + VolReserve;
                    }


                    if ((itemBin.UnitPrice ?? 0) != 0)
                    {
                        var VoltPrice = (model.pick * itemBin.UnitPrice);
                        itemBin.Price = itemBin.Price - VoltPrice;
                    }

                    State = "s.SaveChanges";

                    olog.logging("insertBinCardReserve", State + " - " + model.ref_DocumentItem_Index.ToString());


                    State = "s.SaveChanges";
                    olog.logging("insertBinCardReserve", State + " - " + model.ref_DocumentItem_Index.ToString());


                    var transactionx = dbBinbalance.Database.BeginTransaction(IsolationLevel.Serializable);
                    try
                    {
                        dbBinbalance.SaveChanges();
                        transactionx.Commit();

                        State = "e.SaveChanges";
                        olog.logging("insertBinCardReserve", State + " - " + model.ref_DocumentItem_Index.ToString());


                    }

                    catch (Exception exy)
                    {
                        msglog = State + " ex Rollback " + exy.Message.ToString();
                        olog.logging("insertBinCardReserve", msglog);
                        transactionx.Rollback();

                        throw exy;

                    }
                }
                else
                {
                    result.resultMsg = "สินค้าไม่พอ กรุณาลองใหม่อีกครั้ง";
                    result.resultIsUse = false;
                    return result;
                }

                model.binCardReserve_Index = BinCardReserve_Index.ToString();
                result.items = model;
                result.resultMsg = "รับสินค้าเรียบร้อยแล้ว";
                result.resultIsUse = true;
                return result;
            }
            catch (Exception ex)
            {
                msglog = State + " ex Rollback " + ex.Message.ToString();
                olog.logging("insertBinCardReserve", xx);
                var result = new actionResultPickbinbalanceFromGIViewModel();
                result.resultIsUse = false;
                result.resultMsg = ex.Message;
                return result;
            }

        }
        #endregion

        #endregion


        //public actionResultRunWaveV2ViewModelViewModel runwaveandHeaderAMZ(RunWaveFilterV2ViewModel model)
        //{

        //    String State = "Start";
        //    String msglog = "";
        //    var olog = new logtxt();
        //    var process = new Guid("2E026669-99BD-4DE0-8818-534F29F7B89D");
        //    var strprocess = "2E026669-99BD-4DE0-8818-534F29F7B89D";
        //    var PlanGiRunWave = new List<Guid>();
        //    var ListPlanGi_Index = new List<Guid>();
        //    var listpgiinotinsert = new List<plangoodsissueitemViewModel>();
        //    bool CheckRunwavePast = false;
        //    olog.logging("runwave", State);

        //    try
        //    {
        //        var listDataProduct2 = utils.SendDataApi<List<ProductViewModel>>(new AppSettingConfig().GetUrl("getProductMaster"), new { }.sJson());
        //        var listDataLocation2 = utils.SendDataApi<List<locationViewModel>>(new AppSettingConfig().GetUrl("getLocationMaster"), new { }.sJson());


        //        #region create and update header

        //        Guid gi_index = !string.IsNullOrEmpty(model.goodsIssue_Index) ? new Guid(model.goodsIssue_Index) : new Guid("00000000-0000-0000-0000-000000000000");
        //        var gi = db.IM_GoodsIssue.Find(gi_index);
        //        if (gi == null)
        //        {
        //            var filterModel = new GenDocumentTypeViewModel();

        //            filterModel.process_Index = new Guid("2E026669-99BD-4DE0-8818-534F29F7B89D");
        //            filterModel.documentType_Index = new Guid(model.documentType_Index);
        //            //GetConfig
        //            var dropDownDocumentType = utils.SendDataApi<List<GenDocumentTypeViewModel>>(new AppSettingConfig().GetUrl("dropDownDocumentType"), filterModel.sJson());

        //            var genDoc = new AutoNumberService();
        //            DateTime DocumentDate = DateTime.Now;
        //            string DocNum = genDoc.genAutoDocmentNumber(dropDownDocumentType, DocumentDate);

        //            var newGI = new im_GoodsIssue();
        //            newGI.GoodsIssue_Index = Guid.NewGuid();
        //            newGI.Owner_Index = !string.IsNullOrEmpty(model.owner_Index) ? new Guid(model.owner_Index) : Guid.Parse("00000000-0000-0000-0000-000000000000");
        //            newGI.Owner_Id = !string.IsNullOrEmpty(model.owner_Index) ? model.owner_Id : "";
        //            newGI.Owner_Name = !string.IsNullOrEmpty(model.owner_Index) ? model.owner_Name : "";
        //            newGI.DocumentType_Index = new Guid(model.documentType_Index);
        //            newGI.DocumentType_Id = model.documentType_Id;
        //            newGI.DocumentType_Name = model.documentType_Name;
        //            newGI.GoodsIssue_No = DocNum;
        //            newGI.GoodsIssue_Date = model.goodsIssue_Date.toDateDefault();
        //            newGI.GoodsIssue_Time = model.goodsIssue_Time;
        //            newGI.DocumentRef_No1 = model.documentRef_No1;
        //            newGI.DocumentRef_No2 = model.documentRef_No2;
        //            newGI.DocumentRef_No3 = model.documentRef_No3;
        //            newGI.DocumentRef_No4 = model.documentRef_No4;
        //            newGI.DocumentRef_No5 = model.documentRef_No5;
        //            newGI.Document_Remark = model.document_Remark;
        //            newGI.DocumentPriority_Status = model.documentPriority_Status;
        //            newGI.Document_Date = model.document_Date.toDate();
        //            newGI.Warehouse_Index = !string.IsNullOrEmpty(model.warehouse_Index) ? new Guid(model.warehouse_Index) : (Guid?)null;
        //            newGI.Warehouse_Id = !string.IsNullOrEmpty(model.warehouse_Index) ? model.warehouse_Id : null;
        //            newGI.Warehouse_Name = !string.IsNullOrEmpty(model.warehouse_Index) ? model.warehouse_Name : null;
        //            newGI.Document_Status = -2;
        //            newGI.Create_By = model.create_by;
        //            newGI.Create_Date = DateTime.Now;
        //            db.IM_GoodsIssue.Add(newGI);

        //            model.goodsIssue_Index = newGI.GoodsIssue_Index.ToString();
        //            model.goodsIssue_No = newGI.GoodsIssue_No;
        //        }
        //        else
        //        {
        //            if (gi.Document_Status == 0)
        //            {
        //                gi.Owner_Index = !string.IsNullOrEmpty(model.owner_Index) ? new Guid(model.owner_Index) : Guid.Parse("00000000-0000-0000-0000-000000000000");
        //                gi.Owner_Id = !string.IsNullOrEmpty(model.owner_Index) ? model.owner_Id : "";
        //                gi.Owner_Name = !string.IsNullOrEmpty(model.owner_Index) ? model.owner_Name : "";
        //                gi.DocumentType_Index = new Guid(model.documentType_Index);
        //                gi.DocumentType_Id = model.documentType_Id;
        //                gi.DocumentType_Name = model.documentType_Name;
        //                gi.GoodsIssue_Date = model.goodsIssue_Date.toDateDefault();
        //                gi.GoodsIssue_Time = model.goodsIssue_Time;
        //                gi.DocumentRef_No1 = model.documentRef_No1;
        //                gi.Document_Remark = model.document_Remark;
        //                gi.Document_Date = model.document_Date.toDate();
        //                gi.Warehouse_Index = !string.IsNullOrEmpty(model.warehouse_Index) ? new Guid(model.warehouse_Index) : (Guid?)null;
        //                gi.Warehouse_Id = !string.IsNullOrEmpty(model.warehouse_Index) ? model.warehouse_Id : null;
        //                gi.Warehouse_Name = !string.IsNullOrEmpty(model.warehouse_Index) ? model.warehouse_Name : null;
        //                gi.Update_By = model.create_by;
        //                gi.Update_Date = DateTime.Now;
        //            }
        //        }

        //        var transactionx = db.Database.BeginTransaction();
        //        try
        //        {
        //            db.SaveChanges();
        //            transactionx.Commit();
        //        }

        //        catch (Exception exy)
        //        {
        //            msglog = State + " ex Rollback " + exy.Message.ToString();
        //            olog.logging("SavePlanGR", msglog);
        //            transactionx.Rollback();

        //            throw exy;

        //        }
        //        #endregion


        //        //int CheckRunwavePast = model.listGoodsIssueItemViewModel.Count();
        //        var result = new actionResultRunWaveV2ViewModelViewModel();

        //        db.Database.SetCommandTimeout(360);


        //        #region runwave status 10
        //        if (model.listGoodsIssueItemViewModel.Count > 0)
        //        {
        //            foreach (var item in model.listGoodsIssueItemViewModel)
        //            {
        //                if (item.planGoodsIssueItem_Index != Guid.Parse("00000000-0000-0000-0000-000000000000"))
        //                {
        //                    PlanGiRunWave.Add(item.planGoodsIssueItem_Index);
        //                    ListPlanGi_Index.Add(item.planGoodsIssue_Index);
        //                }
        //            }
        //        }






        //        using (var db2 = new GIDbContext())
        //        {
        //            var transaction = db2.Database.BeginTransaction(IsolationLevel.Serializable);
        //            try
        //            {
        //                //update status 10
        //                var pgi = db2.IM_PlanGoodsIssueItem.Where(c => PlanGiRunWave.Contains(c.PlanGoodsIssueItem_Index) && c.Document_Status == 0).ToList();
        //                foreach (var p in pgi)
        //                {
        //                    //p.Ref_WavePick_index = new Guid(model.goodsIssue_Index);
        //                    p.Document_Status = 1;
        //                }
        //                var GI = db2.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && (c.RunWave_Status == null || c.RunWave_Status == 0)).ToList();
        //                foreach (var g in GI)
        //                {
        //                    g.Wave_Index = new Guid(model.wave_Index);
        //                    g.RunWave_Status = 10;
        //                }
        //                db2.SaveChanges();
        //                transaction.Commit();
        //            }

        //            catch (Exception exy)
        //            {
        //                msglog = State + " ex Rollback " + exy.Message.ToString();
        //                olog.logging("runwave", msglog);
        //                transaction.Rollback();
        //                throw exy;
        //            }
        //        }
        //        #endregion



        //        var planGIResultx = db.View_PLANWAVEV.Where(c => PlanGiRunWave.Contains(c.PlanGoodsIssueItem_Index))
        //            .GroupBy(g => new
        //            {
        //                g.Product_Index,
        //                g.Product_Id,
        //                g.Product_Name,
        //                g.Product_SecondName,
        //                g.Product_ThirdName,
        //                g.Product_Lot,
        //                g.ItemStatus_Index,
        //                g.ItemStatus_Id,
        //                g.ItemStatus_Name,
        //                g.MFG_Date,
        //                g.EXP_Date,
        //                g.DocumentRef_No1,
        //                g.DocumentRef_No2,
        //                g.DocumentRef_No3,
        //                g.DocumentRef_No4,
        //                g.DocumentRef_No5,
        //                g.UDF_1,
        //                g.UDF_2,
        //                g.UDF_3,
        //                g.UDF_4,
        //                g.UDF_5,
        //                //g.sum(TotalQty) as TotalQty,
        //                //g.isnull(sum(GITotalQty), 0) as GITotalQty,
        //                //g.sum(TotalQty) - isnull(sum(GITotalQty), 0)  AS QtyWave,
        //                //g.ROW_NUMBER() OVER(Order by Product_Id) as RowNum,
        //                g.Owner_Index,
        //                g.PlanGoodsIssue_UDF_1,
        //                g.PlanGoodsIssue_UDF_2,
        //                g.PlanGoodsIssue_UDF_3,
        //                g.PlanGoodsIssue_UDF_4,
        //                g.PlanGoodsIssue_UDF_5
        //            })
        //            .Select(s => new
        //            {
        //                s.Key.Product_Index,
        //                s.Key.Product_Id,
        //                s.Key.Product_Name,
        //                s.Key.Product_SecondName,
        //                s.Key.Product_ThirdName,
        //                s.Key.Product_Lot,
        //                s.Key.ItemStatus_Index,
        //                s.Key.ItemStatus_Id,
        //                s.Key.ItemStatus_Name,
        //                s.Key.MFG_Date,
        //                s.Key.EXP_Date,
        //                s.Key.DocumentRef_No1,
        //                s.Key.DocumentRef_No2,
        //                s.Key.DocumentRef_No3,
        //                s.Key.DocumentRef_No4,
        //                s.Key.DocumentRef_No5,
        //                s.Key.UDF_1,
        //                s.Key.UDF_2,
        //                s.Key.UDF_3,
        //                s.Key.UDF_4,
        //                s.Key.UDF_5,
        //                total = s.Sum(x => x.TotalQty),
        //                GITotalQty = s.Sum(x => x.GITotalQty),
        //                QtyWave = s.Sum(x => x.TotalQty) - s.Sum(x => x.GITotalQty),
        //                //g.ROW_NUMBER() OVER(Order by Product_Id) as RowNum,
        //                s.Key.Owner_Index,
        //                s.Key.PlanGoodsIssue_UDF_1,
        //                s.Key.PlanGoodsIssue_UDF_2,
        //                s.Key.PlanGoodsIssue_UDF_3,
        //                s.Key.PlanGoodsIssue_UDF_4,
        //                s.Key.PlanGoodsIssue_UDF_5
        //            }).ToList();

        //        State = "View_PLANWAVEV";
        //        olog.logging("runwave", State);
        //        if (planGIResultx.Count == 0)
        //        {
        //            throw new Exception("Plan GI not found..");
        //        }


        //        //find wave template
        //        var jsGetWaveRule = new { process_Index = process, wave_Index = model.wave_Index };
        //        var getWaveRule = utils.SendDataApi<List<WaveRuleViewModel>>(new AppSettingConfig().GetUrl("getWaveRule"), jsGetWaveRule.sJson());

        //        if (getWaveRule.Count == 0)
        //        {
        //            throw new Exception("Wave Template not found.");
        //        }

        //        var getViewWaveTemplateEX = utils.SendDataApi<List<WaveTemplateViewModel>>(new AppSettingConfig().GetUrl("getViewWaveTemplate"), new { }.sJson());

        //        State = "getWaveRule";
        //        olog.logging("runwave", State);
        //        bool isUseAttribute = false;

        //        foreach (var waveRule in getWaveRule.OrderBy(o => o.waveRule_Seq))
        //        {
        //            var jsgetViewWaveTemplate = new { process_Index = process, wave_Index = model.wave_Index, rule_Index = waveRule.rule_Index };
        //            //var getViewWaveTemplate = utils.SendDataApi<List<WaveTemplateViewModel>>(new AppSettingConfig().GetUrl("getViewWaveTemplate"), jsgetViewWaveTemplate.sJson());
        //            var getViewWaveTemplate = getViewWaveTemplateEX.Where(c => c.process_Index == process.ToString() && c.wave_Index == model.wave_Index && c.rule_Index == waveRule.rule_Index);
        //            State = "getViewWaveTemplate";
        //            olog.logging("runwave", State);
        //            var planGIWaveResult = db.View_PLANWAVEbyPLANGIV2.AsQueryable();
        //            var check = planGIWaveResult.ToList();
        //            planGIWaveResult = planGIWaveResult.Where(c => PlanGiRunWave.Contains(c.PlanGoodsIssueItem_Index)).OrderByDescending(c => c.DocumentPriority_Status);

        //            #region for RuleSource
        //            var RuleSourceList = getViewWaveTemplate.Where(c => c.isSource == 1 && c.isSearch == 1).ToList();

        //            foreach (var itemRuleSourceList in RuleSourceList)
        //            {
        //                if (itemRuleSourceList.ruleConditionOperation == "IN")
        //                {
        //                    var dataarray = itemRuleSourceList.ruleCondition_Param.Replace("'", "").Split(',');
        //                    if (itemRuleSourceList.ruleConditionField_Name == "DocumentType_Id")
        //                    {
        //                        planGIWaveResult = planGIWaveResult.Where(c => dataarray.Contains(c.DocumentType_Id));
        //                    }
        //                    if (itemRuleSourceList.ruleConditionField_Name == "Owner_Id")
        //                    {
        //                        planGIWaveResult = planGIWaveResult.Where(c => dataarray.Contains(c.Owner_Id));
        //                    }
        //                    //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " IN (" + itemRuleSourceList.ruleCondition_Param + ") ";
        //                    //var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
        //                    //var predicate = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>(
        //                    //    Expression.Call(
        //                    //        Expression.PropertyOrField(param, itemRuleSourceList.ruleConditionField_Name),
        //                    //        "Contains", null, Expression.Constant(itemRuleSourceList.ruleCondition_Param)
        //                    //    ), param);
        //                    //planGIWaveResult = planGIWaveResult.Where(predicate);
        //                }
        //                else if (itemRuleSourceList.ruleConditionOperation == "=")
        //                {
        //                    if (itemRuleSourceList.ruleConditionField_Name == "UseAttribute")
        //                    {
        //                        if (itemRuleSourceList.ruleCondition_Param.ToString().ToUpper() == "TRUE")
        //                        {
        //                            isUseAttribute = true;
        //                        }
        //                        else
        //                        {
        //                            isUseAttribute = false;
        //                        }

        //                    }
        //                    else
        //                    {
        //                        //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " = '" + itemRuleSourceList.ruleCondition_Param + "' ";
        //                        var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
        //                        var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.Equal(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
        //                            , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                        planGIWaveResult = planGIWaveResult.Where(lambda);
        //                    }


        //                }
        //                else if (itemRuleSourceList.ruleConditionOperation == ">")
        //                {
        //                    //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " > '" + itemRuleSourceList.ruleCondition_Param + "' ";
        //                    var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
        //                    var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.GreaterThan(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
        //                        , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                    planGIWaveResult = planGIWaveResult.Where(lambda);

        //                }
        //                else if (itemRuleSourceList.ruleConditionOperation == "<")
        //                {
        //                    //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " < '" + itemRuleSourceList.ruleCondition_Param + "' ";
        //                    var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
        //                    var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.LessThan(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
        //                        , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                    planGIWaveResult = planGIWaveResult.Where(lambda);
        //                }
        //                else if (itemRuleSourceList.ruleConditionOperation == "!=")
        //                {
        //                    //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " != '" + itemRuleSourceList.ruleCondition_Param + "' ";
        //                    var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
        //                    var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.NotEqual(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
        //                        , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                    planGIWaveResult = planGIWaveResult.Where(lambda);
        //                }
        //                else if (itemRuleSourceList.ruleConditionOperation == ">=")
        //                {
        //                    //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " >= '" + itemRuleSourceList.ruleCondition_Param + "' ";
        //                    var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
        //                    var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.GreaterThanOrEqual(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
        //                        , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                    planGIWaveResult = planGIWaveResult.Where(lambda);
        //                }
        //                else if (itemRuleSourceList.ruleConditionOperation == "<=")
        //                {
        //                    //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " <= '" + itemRuleSourceList.ruleCondition_Param + "' ";
        //                    var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
        //                    var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.LessThanOrEqual(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
        //                        , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                    planGIWaveResult = planGIWaveResult.Where(lambda);
        //                }
        //                else if (itemRuleSourceList.ruleConditionOperation == "Like")
        //                {
        //                    //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " Like '" + itemRuleSourceList.ruleCondition_Param + "' ";
        //                    var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
        //                    var predicate = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>(
        //                        Expression.Call(
        //                            Expression.PropertyOrField(param, itemRuleSourceList.ruleConditionField_Name),
        //                            "Contains", null, Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""))
        //                        ), param);
        //                    planGIWaveResult = planGIWaveResult.Where(predicate);
        //                }
        //            }
        //            #endregion

        //            #region for RuleDesSort
        //            var RuleSourceSortList = getViewWaveTemplate.Where(c => c.isSource == 1 && c.isSort == 1).ToList();

        //            string setWhereSourceSort = "";

        //            if (RuleSourceSortList.Count > 0)
        //            {
        //                setWhereSourceSort += " Order by ";
        //            }

        //            int iRowsSourceSort = 0;
        //            foreach (var itemRuleSourceSortList in RuleSourceSortList)
        //            {
        //                if (iRowsSourceSort == 0)
        //                {
        //                    setWhereSourceSort += itemRuleSourceSortList.ruleConditionField_Name + ' ' + itemRuleSourceSortList.ruleCondition_Param;
        //                    var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
        //                    var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, string>>(Expression.Property(param, itemRuleSourceSortList.ruleConditionField_Name), param);
        //                    if (itemRuleSourceSortList.ruleCondition_Param.ToUpper() == "DESC")
        //                    {
        //                        planGIWaveResult = planGIWaveResult.OrderByDescending(lambda);
        //                    }
        //                    else /*if (itemRuleSourceSortList.ruleCondition_Param.ToUpper() == "DESC")*/
        //                    {
        //                        planGIWaveResult = planGIWaveResult.OrderBy(lambda);
        //                    }
        //                }
        //                else
        //                {
        //                    setWhereSourceSort += "," + itemRuleSourceSortList.ruleConditionField_Name + ' ' + itemRuleSourceSortList.ruleCondition_Param;
        //                    var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
        //                    var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, string>>(Expression.Property(param, itemRuleSourceSortList.ruleConditionField_Name), param);
        //                    if (itemRuleSourceSortList.ruleCondition_Param.ToUpper() == "DESC")
        //                    {
        //                        planGIWaveResult = planGIWaveResult.OrderByDescending(lambda);
        //                    }
        //                    else /*if (itemRuleSourceSortList.ruleCondition_Param.ToUpper() == "DESC")*/
        //                    {
        //                        planGIWaveResult = planGIWaveResult.OrderBy(lambda);
        //                    }
        //                }
        //                iRowsSourceSort = iRowsSourceSort + 1;

        //            }
        //            #endregion


        //            String SqlWhere = "";
        //            var planGIWaveResult2 = planGIWaveResult.ToList();
        //            State = "View_PLANWAVEbyPLANGIV2";
        //            olog.logging("runwave", State);


        //            // LOOP Group SUM PLAN GI
        //            foreach (var item in planGIResultx)
        //            {
        //                var planGIWaveResult3 = planGIWaveResult2.AsQueryable();
        //                var strwhere = new getViewBinbalanceViewModel();
        //                //GET Condition  From Plan GI
        //                #region query Plag Gi
        //                if (item.Owner_Index.ToString() != "")
        //                {
        //                    //SqlWhere += " And Convert(Nvarchar(200) ,Owner_Index) =  '" + item.Owner_Index.ToString() + "' ";
        //                    //SqlWhere += " And Owner_Index =  '" + item.Owner_Index + "' ";
        //                    strwhere.Owner_Index = item.Owner_Index;
        //                    planGIWaveResult3 = planGIWaveResult3.Where(c => c.Owner_Index == item.Owner_Index);
        //                }
        //                if (item.Product_Index.ToString() != "")
        //                {
        //                    //SqlWhere += " And Convert(Nvarchar(200) , Product_Index ) = '" + item.Product_Index.ToString() + "' ";
        //                    //SqlWhere += " And Product_Index  = '" + item.Product_Index + "' ";
        //                    strwhere.Product_Index = item.Product_Index;
        //                    planGIWaveResult3 = planGIWaveResult3.Where(c => c.Product_Index == item.Product_Index);
        //                }


        //                if (item.ItemStatus_Index.ToString() != "")
        //                {
        //                    //SqlWhere += " And Convert(Nvarchar(200) ,ItemStatus_Index) =  '" + item.ItemStatus_Index.ToString() + "' ";
        //                    strwhere.ItemStatus_Index = item.ItemStatus_Index;
        //                    planGIWaveResult3 = planGIWaveResult3.Where(c => c.ItemStatus_Index == item.ItemStatus_Index);
        //                }
        //                if (item.MFG_Date != null)
        //                {
        //                    if (item.MFG_Date.ToString() != "")
        //                    {
        //                        //strwhere.MFG_Date = item.MFG_Date;
        //                        // SqlWhere += " And MFG_Date = @MFG_Date ";
        //                    }
        //                }
        //                if (item.EXP_Date != null)
        //                {
        //                    if (item.EXP_Date.ToString() != "")
        //                    {
        //                        //strwhere.EXP_Date = item.EXP_Date;
        //                        //SqlWhere += " And EXP_Date = @EXP_Date ";
        //                    }
        //                }

        //                if (item.Product_Lot != null)
        //                {
        //                    if (item.Product_Lot.ToString() != "")
        //                    {
        //                        //strwhere.EXP_Date = item.EXP_Date;
        //                        planGIWaveResult3 = planGIWaveResult3.Where(c => c.Product_Lot == item.Product_Lot);
        //                    }
        //                }

        //                if (isUseAttribute == true)
        //                {
        //                    // ADD UDF 1-5 
        //                    strwhere.isUseAttribute = isUseAttribute;
        //                    if (item.UDF_1 != null)
        //                    {
        //                        //SqlWhere += " And Isnull(UDF_1,'') = '" + item.UDF_1.ToString() + "'";
        //                        strwhere.UDF_1 = item.UDF_1;
        //                        planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_1 == item.UDF_1);
        //                    }

        //                    if (item.UDF_2 != null)
        //                    {
        //                        //SqlWhere += " And  Isnull( UDF_2,'') = '" + item.UDF_2.ToString() + "'";
        //                        strwhere.UDF_2 = item.UDF_2;
        //                        planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_2 == item.UDF_2);
        //                    }

        //                    if (item.UDF_3 != null)
        //                    {
        //                        //SqlWhere += " And  Isnull(UDF_3,'') = '" + item.UDF_3.ToString() + "'";
        //                        strwhere.UDF_3 = item.UDF_3;
        //                        planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_3 == item.UDF_3);
        //                    }

        //                    if (item.UDF_4 != null)
        //                    {
        //                        //SqlWhere += " And  Isnull(UDF_4,'') = '" + item.UDF_4.ToString() + "'";
        //                        strwhere.UDF_4 = item.UDF_4;
        //                        planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_4 == item.UDF_4);
        //                    }

        //                    if (item.UDF_5 != null)
        //                    {
        //                        //SqlWhere += " And  Isnull(UDF_5,'') = '" + item.UDF_5.ToString() + "'";
        //                        strwhere.UDF_5 = item.UDF_5;
        //                        planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_5 == item.UDF_5);
        //                    }
        //                }
        //                #endregion

        //                //planGIWaveResult = planGIWaveResult.Where(setWhereSource);

        //                if (planGIWaveResult3.ToList().Count < 1)
        //                {
        //                    continue;
        //                }
        //                #region update isuse and runwave status 20
        //                strwhere.isuse = model.goodsIssue_Index;
        //                var listDataBinbalance = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("updateIsuseViewBinbalance"), strwhere.sJson());
        //                if (listDataBinbalance)
        //                {
        //                    using (var db3 = new GIDbContext())
        //                    {
        //                        var transaction = db3.Database.BeginTransaction(IsolationLevel.Serializable);
        //                        try
        //                        {
        //                            var GI = db3.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 10).ToList();
        //                            foreach (var g in GI)
        //                            {
        //                                g.RunWave_Status = 20;
        //                            }
        //                            db3.SaveChanges();
        //                            transaction.Commit();
        //                        }
        //                        catch (Exception exy)
        //                        {
        //                            msglog = State + " ex Rollback " + exy.Message.ToString();
        //                            olog.logging("runwave", msglog);
        //                            transaction.Rollback();
        //                            throw exy;
        //                        }
        //                    }
        //                }
        //                else
        //                {
        //                    throw new Exception("Update IsUse Error");
        //                }
        //                #endregion

        //                // Assign Qty for  wave Loop
        //                State = "planGIWaveResult3";
        //                olog.logging("runwave", State);
        //                strwhere.isuse = model.goodsIssue_Index;
        //                strwhere.isActive = true;
        //                int? WhereQtyBal = null;
        //                decimal? qty_Per_Tag = null;
        //                qty_Per_Tag = listDataProduct2.FirstOrDefault(c => c.product_Id == planGIWaveResult3.FirstOrDefault().Product_Id).qty_Per_Tag;

        //                if (waveRule.rule_Name.ToUpper() == "FULL")
        //                {
        //                    strwhere.qtyPreTag = listDataProduct2.FirstOrDefault(c => c.product_Id == planGIWaveResult3.FirstOrDefault().Product_Id).qty_Per_Tag;
        //                    WhereQtyBal = Convert.ToInt16(Math.Floor((planGIWaveResult3.Sum(s => s.TotalQty) ?? 0) / (qty_Per_Tag ?? 1)));
        //                    var chkFull = CraterGILBy_Binbalance(WhereQtyBal, qty_Per_Tag, strwhere, listDataProduct2, model, getViewWaveTemplate.ToList(), planGIWaveResult3.ToList(), listDataLocation2);
        //                    #region update isuse = '' and runwave 50
        //                    strwhere.isActive = true;
        //                    State = "region update isuse = '' and runwave 50 1";
        //                    var updateIsuseViewBinbalance2 = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("updateIsuseViewBinbalance"), strwhere.sJson());
        //                    if (updateIsuseViewBinbalance2)
        //                    {
        //                        using (var db5 = new GIDbContext())
        //                        {
        //                            var transaction = db5.Database.BeginTransaction(IsolationLevel.Serializable);
        //                            try
        //                            {
        //                                var GI = db5.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 40).ToList();
        //                                foreach (var g in GI)
        //                                {
        //                                    g.RunWave_Status = 50;
        //                                }
        //                                db5.SaveChanges();
        //                                transaction.Commit();
        //                            }
        //                            catch (Exception exy)
        //                            {
        //                                msglog = State + " ex Rollback " + exy.Message.ToString();
        //                                olog.logging("runwave", msglog);
        //                                transaction.Rollback();
        //                                throw exy;
        //                            }
        //                        }
        //                    }
        //                    else
        //                    {
        //                        throw new Exception("Update IsUse By Error");
        //                    }
        //                    #endregion
        //                    continue;
        //                    //if (chkFull)
        //                    //{
        //                    //    continue;
        //                    //}
        //                    //else
        //                    //{
        //                    //    var resultFull = new actionResultRunWaveV2ViewModelViewModel();
        //                    //    resultFull.resultIsUse = false;
        //                    //    resultFull.resultMsg = "Error Full";
        //                    //    return result;
        //                    //}
        //                }

        //                decimal? QtyPlanGIRemian = 0;
        //                foreach (var itemPlanGI in planGIWaveResult3)
        //                {
        //                    var ListGoodsIssueItemLocation = new List<im_GoodsIssueItemLocation>();
        //                    QtyPlanGIRemian = itemPlanGI.TotalQty - itemPlanGI.GITotalQty;
        //                    if (QtyPlanGIRemian <= 0)
        //                    {
        //                        break;
        //                    }


        //                    #region view_waveBinbalance2
        //                    //strwhere.isuse = model.goodsIssue_Index;
        //                    //strwhere.isActive = true;
        //                    var listDataBinbalance2 = utils.SendDataApi<List<BinBalanceViewModel>>(new AppSettingConfig().GetUrl("getViewBinbalance"), strwhere.sJson());

        //                    var checklistDataBinbalance2 = listDataBinbalance2.ToList();



        //                    var ListLot = new List<String>();
        //                    var ListLotNotWave = new List<String>();
        //                    // get All Product Lot Status not Wave by Product
        //                    var listAll_Lot = db.View_WaveCheckProductLot.Where(c => c.Product_Index == itemPlanGI.Product_Index).ToList();

        //                    // get lot in plan gi amd product
        //                    var listLot_In_Product = listAll_Lot.Where(c => c.PlanGoodsIssue_Index == itemPlanGI.PlanGoodsIssue_Index && c.Product_Index == itemPlanGI.Product_Index).ToList();

        //                    if (listLot_In_Product.Count > 0)
        //                    {
        //                        foreach (var itemlot in listLot_In_Product)
        //                        {
        //                            ListLot.Add(item.Product_Lot);
        //                        }
        //                    }

        //                    var listLot_NotIN_Wave = listAll_Lot.Where(c => !ListLot.Contains(c.Product_Lot)).ToList();


        //                    if (listLot_NotIN_Wave.Count > 0)
        //                    {
        //                        foreach (var itemlot in listLot_NotIN_Wave)
        //                        {
        //                            ListLotNotWave.Add(itemlot.Product_Lot);
        //                        }
        //                    }


        //                    State = "getViewBinbalance";
        //                    olog.logging("runwave", State);
        //                    var GIDate = model.goodsIssue_Date.toDate();
        //                    var CheckView_WaveBinBalance2 = (from BB in listDataBinbalance2
        //                                                     join LC in listDataLocation2 on BB.location_Index equals LC.location_Index into gj
        //                                                     from L in gj.DefaultIfEmpty()
        //                                                     join Prd in listDataProduct2 on BB.product_Index equals Prd.product_Index
        //                                                     where (BB.goodsReceive_EXP_Date != null ? BB.goodsReceive_EXP_Date.sParse<DateTime>().Subtract(DateTime.Now.AddDays(-1)).Days : 1) > (Prd.ProductShelfLife_D ?? 0)
        //                                                     && !(L?.locationType_Index == Guid.Parse("14C5F85D-137D-470E-8C70-C1E535005DC3")
        //                                                         || L?.locationType_Index == Guid.Parse("2E9338D3-0931-4E36-B240-782BF9508641")
        //                                                         || L?.locationType_Index == Guid.Parse("65A2D25D-5520-47D3-8776-AE064D909285")
        //                                                         || L?.locationType_Index == Guid.Parse("94D86CEA-3D04-4304-9E97-28E954F03C35")
        //                                                         || L?.locationType_Index == Guid.Parse("64341969-E596-4B8B-8836-395061777490")
        //                                                         || L?.locationType_Index == Guid.Parse("6A1FB140-CC78-4C2B-BEC8-42B2D0AE62E9")
        //                                                         || L?.locationType_Index == Guid.Parse("F9EDDAEC-A893-4F63-A700-526C69CC0774")
        //                                                         || L?.locationType_Index == Guid.Parse("A1F7BFA0-1429-4010-863D-6A0EB01DB61D")
        //                                                         || L?.locationType_Index == Guid.Parse("472E5117-3A7A-4C23-B8C2-7FEA55B3E69C")
        //                                                         || L?.locationType_Index == Guid.Parse("7D30298A-8BA0-47ED-8342-E3F953E11D8C")
        //                                                         || L?.locationType_Index == Guid.Parse("A706D789-F5C9-41A6-BEC7-E57034DFC166")
        //                                                         || L?.locationType_Index == Guid.Parse("E4310B71-D6A7-4FF6-B4A8-EACBDFADAFFC")
        //                                                         || L?.locationType_Index == Guid.Parse("D4DFC92C-C5DC-4397-BF87-FEEEB579C0AF")
        //                                                         || L?.locationType_Index == Guid.Parse("3a7d807a-9f2c-4215-8703-f51846bcc4bd")
        //                                                         || L?.locationType_Index == Guid.Parse("8A545442-77A3-43A4-939A-6B9102DFE8C6")
        //                                                         || L?.locationType_Index == Guid.Parse("8A545442-77A3-43A4-939A-6B9102DFE8C6")
        //                                                         || L?.locationType_Index == Guid.Parse("1D2DF268-F004-4820-831F-B823FF9C7564")

        //                                                      )


        //                                                     // && (waveRule.rule_Name.ToUpper() == "PATIAL" ? (BB.binBalance_QtyBal - BB.binBalance_QtyReserve) < qty_Per_Tag : BB.binBalance_QtyBal > 0)
        //                                                     && !(ListLotNotWave.Contains(BB.product_Lot))
        //                                                     //  && waveRule.rule_Name.ToUpper() == "PATIAL"
        //                                                     && (BB.binBalance_QtyBal) > 0
        //                                                     && (BB.binBalance_QtyReserve) >= 0
        //                                                     && (L?.BlockPick ?? 0) != 1
        //                                                     // && (BB?.product_Lot ?? "") == itemPlanGI.Product_Lot
        //                                                     && BB.goodsReceive_Date.Date <= GIDate.Value.Date
        //                                                     && (string.IsNullOrEmpty(itemPlanGI.ERP_Location) ? (BB.erp_Location ?? "") == "" : BB.erp_Location == itemPlanGI.ERP_Location)
        //                                                     select new View_WaveBinBalanceViewModel
        //                                                     {
        //                                                         binBalance_Index = BB.binBalance_Index.ToString(),
        //                                                         owner_Index = BB.owner_Index.ToString(),
        //                                                         owner_Id = BB.owner_Id,
        //                                                         owner_Name = BB.owner_Name,
        //                                                         location_Index = BB.location_Index.ToString(),
        //                                                         location_Id = BB.location_Id,
        //                                                         location_Name = BB.location_Name,
        //                                                         goodsReceive_Index = BB.goodsReceive_Index.ToString(),
        //                                                         goodsReceive_No = BB.goodsReceive_No,
        //                                                         goodsReceive_Date = BB.goodsReceive_Date.ToString(),
        //                                                         goodsReceiveItem_Index = BB.goodsReceiveItem_Index.ToString(),
        //                                                         goodsReceiveItemLocation_Index = BB.goodsReceiveItemLocation_Index.ToString(),
        //                                                         tagItem_Index = BB.tagItem_Index.ToString(),
        //                                                         tag_Index = BB.tag_Index.ToString(),
        //                                                         tag_No = BB.tag_No,
        //                                                         product_Index = BB.product_Index.ToString(),
        //                                                         product_Id = BB.product_Id,
        //                                                         product_Name = BB.product_Name,
        //                                                         product_SecondName = BB.product_SecondName,
        //                                                         product_ThirdName = BB.product_ThirdName,
        //                                                         product_Lot = BB.product_Lot,
        //                                                         itemStatus_Index = BB.itemStatus_Index.ToString(),
        //                                                         itemStatus_Id = BB.itemStatus_Id,
        //                                                         itemStatus_Name = BB.itemStatus_Name,
        //                                                         goodsReceive_MFG_Date = BB.goodsReceive_MFG_Date.ToString(),
        //                                                         goodsReceive_EXP_Date = BB.goodsReceive_EXP_Date.ToString(),
        //                                                         goodsReceive_ProductConversion_Index = BB.goodsReceive_ProductConversion_Index.ToString(),
        //                                                         goodsReceive_ProductConversion_Id = BB.goodsReceive_ProductConversion_Id.ToString(),
        //                                                         goodsReceive_ProductConversion_Name = BB.goodsReceive_ProductConversion_Name.ToString(),


        //                                                         binBalance_Ratio = BB.binBalance_Ratio,
        //                                                         binBalance_QtyBegin = BB.binBalance_QtyBegin,
        //                                                         binBalance_WeightBegin = BB.binBalance_WeightBegin,
        //                                                         binBalance_WeightBegin_Index = BB.binBalance_WeightBegin_Index,
        //                                                         binBalance_WeightBegin_Id = BB.binBalance_WeightBegin_Id,
        //                                                         binBalance_WeightBegin_Name = BB.binBalance_WeightBegin_Name,
        //                                                         binBalance_WeightBeginRatio = BB.binBalance_WeightBeginRatio,
        //                                                         binBalance_NetWeightBegin = BB.binBalance_NetWeightBegin,
        //                                                         binBalance_NetWeightBegin_Index = BB.binBalance_NetWeightBegin_Index,
        //                                                         binBalance_NetWeightBegin_Id = BB.binBalance_NetWeightBegin_Id,
        //                                                         binBalance_NetWeightBegin_Name = BB.binBalance_NetWeightBegin_Name,
        //                                                         binBalance_NetWeightBeginRatio = BB.binBalance_NetWeightBeginRatio,
        //                                                         binBalance_GrsWeightBegin = BB.binBalance_GrsWeightBegin,
        //                                                         binBalance_GrsWeightBegin_Index = BB.binBalance_GrsWeightBegin_Index,
        //                                                         binBalance_GrsWeightBegin_Id = BB.binBalance_GrsWeightBegin_Id,
        //                                                         binBalance_GrsWeightBegin_Name = BB.binBalance_GrsWeightBegin_Name,
        //                                                         binBalance_GrsWeightBeginRatio = BB.binBalance_GrsWeightBeginRatio,
        //                                                         binBalance_WidthBegin = BB.binBalance_WidthBegin,
        //                                                         binBalance_WidthBegin_Index = BB.binBalance_WidthBegin_Index,
        //                                                         binBalance_WidthBegin_Id = BB.binBalance_WidthBegin_Id,
        //                                                         binBalance_WidthBegin_Name = BB.binBalance_WidthBegin_Name,
        //                                                         binBalance_WidthBeginRatio = BB.binBalance_WidthBeginRatio,
        //                                                         binBalance_LengthBegin = BB.binBalance_LengthBegin,
        //                                                         binBalance_LengthBegin_Index = BB.binBalance_LengthBegin_Index,
        //                                                         binBalance_LengthBegin_Id = BB.binBalance_LengthBegin_Id,
        //                                                         binBalance_LengthBegin_Name = BB.binBalance_LengthBegin_Name,
        //                                                         binBalance_LengthBeginRatio = BB.binBalance_LengthBeginRatio,
        //                                                         binBalance_HeightBegin = BB.binBalance_HeightBegin,
        //                                                         binBalance_HeightBegin_Index = BB.binBalance_HeightBegin_Index,
        //                                                         binBalance_HeightBegin_Id = BB.binBalance_HeightBegin_Id,
        //                                                         binBalance_HeightBegin_Name = BB.binBalance_HeightBegin_Name,
        //                                                         binBalance_HeightBeginRatio = BB.binBalance_HeightBeginRatio,
        //                                                         binBalance_UnitVolumeBegin = BB.binBalance_UnitVolumeBegin,
        //                                                         binBalance_VolumeBegin = BB.binBalance_VolumeBegin,
        //                                                         binBalance_QtyBal = BB.binBalance_QtyBal,
        //                                                         binBalance_UnitWeightBal = BB.binBalance_UnitWeightBal,
        //                                                         binBalance_UnitWeightBal_Index = BB.binBalance_UnitWeightBal_Index,
        //                                                         binBalance_UnitWeightBal_Id = BB.binBalance_UnitWeightBal_Id,
        //                                                         binBalance_UnitWeightBal_Name = BB.binBalance_UnitWeightBal_Name,
        //                                                         binBalance_UnitWeightBalRatio = BB.binBalance_UnitWeightBalRatio,
        //                                                         binBalance_WeightBal = BB.binBalance_WeightBal,
        //                                                         binBalance_WeightBal_Index = BB.binBalance_WeightBal_Index,
        //                                                         binBalance_WeightBal_Id = BB.binBalance_WeightBal_Id,
        //                                                         binBalance_WeightBal_Name = BB.binBalance_WeightBal_Name,
        //                                                         binBalance_WeightBalRatio = BB.binBalance_WeightBalRatio,
        //                                                         binBalance_UnitNetWeightBal = BB.binBalance_UnitNetWeightBal,
        //                                                         binBalance_UnitNetWeightBal_Index = BB.binBalance_UnitNetWeightBal_Index,
        //                                                         binBalance_UnitNetWeightBal_Id = BB.binBalance_UnitNetWeightBal_Id,
        //                                                         binBalance_UnitNetWeightBal_Name = BB.binBalance_UnitNetWeightBal_Name,
        //                                                         binBalance_UnitNetWeightBalRatio = BB.binBalance_UnitNetWeightBalRatio,
        //                                                         binBalance_NetWeightBal = BB.binBalance_NetWeightBal,
        //                                                         binBalance_NetWeightBal_Index = BB.binBalance_NetWeightBal_Index,
        //                                                         binBalance_NetWeightBal_Id = BB.binBalance_NetWeightBal_Id,
        //                                                         binBalance_NetWeightBal_Name = BB.binBalance_NetWeightBal_Name,
        //                                                         binBalance_NetWeightBalRatio = BB.binBalance_NetWeightBalRatio,
        //                                                         binBalance_UnitGrsWeightBal = BB.binBalance_UnitGrsWeightBal,
        //                                                         binBalance_UnitGrsWeightBal_Index = BB.binBalance_UnitGrsWeightBal_Index,
        //                                                         binBalance_UnitGrsWeightBal_Id = BB.binBalance_UnitGrsWeightBal_Id,
        //                                                         binBalance_UnitGrsWeightBal_Name = BB.binBalance_UnitGrsWeightBal_Name,
        //                                                         binBalance_UnitGrsWeightBalRatio = BB.binBalance_UnitGrsWeightBalRatio,
        //                                                         binBalance_GrsWeightBal = BB.binBalance_GrsWeightBal,
        //                                                         binBalance_GrsWeightBal_Index = BB.binBalance_GrsWeightBal_Index,
        //                                                         binBalance_GrsWeightBal_Id = BB.binBalance_GrsWeightBal_Id,
        //                                                         binBalance_GrsWeightBal_Name = BB.binBalance_GrsWeightBal_Name,
        //                                                         binBalance_GrsWeightBalRatio = BB.binBalance_GrsWeightBalRatio,
        //                                                         binBalance_UnitWidthBal = BB.binBalance_UnitWidthBal,
        //                                                         binBalance_UnitWidthBal_Index = BB.binBalance_UnitWidthBal_Index,
        //                                                         binBalance_UnitWidthBal_Id = BB.binBalance_UnitWidthBal_Id,
        //                                                         binBalance_UnitWidthBal_Name = BB.binBalance_UnitWidthBal_Name,
        //                                                         binBalance_UnitWidthBalRatio = BB.binBalance_UnitWidthBalRatio,
        //                                                         binBalance_WidthBal = BB.binBalance_WidthBal,
        //                                                         binBalance_WidthBal_Index = BB.binBalance_WidthBal_Index,
        //                                                         binBalance_WidthBal_Id = BB.binBalance_WidthBal_Id,
        //                                                         binBalance_WidthBal_Name = BB.binBalance_WidthBal_Name,
        //                                                         binBalance_WidthBalRatio = BB.binBalance_WidthBalRatio,
        //                                                         binBalance_UnitLengthBal = BB.binBalance_UnitLengthBal,
        //                                                         binBalance_UnitLengthBal_Index = BB.binBalance_UnitLengthBal_Index,
        //                                                         binBalance_UnitLengthBal_Id = BB.binBalance_UnitLengthBal_Id,
        //                                                         binBalance_UnitLengthBal_Name = BB.binBalance_UnitLengthBal_Name,
        //                                                         binBalance_UnitLengthBalRatio = BB.binBalance_UnitLengthBalRatio,
        //                                                         binBalance_LengthBal = BB.binBalance_LengthBal,
        //                                                         binBalance_LengthBal_Index = BB.binBalance_LengthBal_Index,
        //                                                         binBalance_LengthBal_Id = BB.binBalance_LengthBal_Id,
        //                                                         binBalance_LengthBal_Name = BB.binBalance_LengthBal_Name,
        //                                                         binBalance_LengthBalRatio = BB.binBalance_LengthBalRatio,
        //                                                         binBalance_UnitHeightBal = BB.binBalance_UnitHeightBal,
        //                                                         binBalance_UnitHeightBal_Index = BB.binBalance_UnitHeightBal_Index,
        //                                                         binBalance_UnitHeightBal_Id = BB.binBalance_UnitHeightBal_Id,
        //                                                         binBalance_UnitHeightBal_Name = BB.binBalance_UnitHeightBal_Name,
        //                                                         binBalance_UnitHeightBalRatio = BB.binBalance_UnitHeightBalRatio,
        //                                                         binBalance_HeightBal = BB.binBalance_HeightBal,
        //                                                         binBalance_HeightBal_Index = BB.binBalance_HeightBal_Index,
        //                                                         binBalance_HeightBal_Id = BB.binBalance_HeightBal_Id,
        //                                                         binBalance_HeightBal_Name = BB.binBalance_HeightBal_Name,
        //                                                         binBalance_HeightBalRatio = BB.binBalance_HeightBalRatio,
        //                                                         binBalance_UnitVolumeBal = BB.binBalance_UnitVolumeBal,
        //                                                         binBalance_VolumeBal = BB.binBalance_VolumeBal,
        //                                                         binBalance_QtyReserve = BB.binBalance_QtyReserve,
        //                                                         binBalance_WeightReserve = BB.binBalance_WeightReserve,
        //                                                         binBalance_WeightReserve_Index = BB.binBalance_WeightReserve_Index,
        //                                                         binBalance_WeightReserve_Id = BB.binBalance_WeightReserve_Id,
        //                                                         binBalance_WeightReserve_Name = BB.binBalance_WeightReserve_Name,
        //                                                         binBalance_WeightReserveRatio = BB.binBalance_WeightReserveRatio,
        //                                                         binBalance_NetWeightReserve = BB.binBalance_NetWeightReserve,
        //                                                         binBalance_NetWeightReserve_Index = BB.binBalance_NetWeightReserve_Index,
        //                                                         binBalance_NetWeightReserve_Id = BB.binBalance_NetWeightReserve_Id,
        //                                                         binBalance_NetWeightReserve_Name = BB.binBalance_NetWeightReserve_Name,
        //                                                         binBalance_NetWeightReserveRatio = BB.binBalance_NetWeightReserveRatio,
        //                                                         binBalance_GrsWeightReserve = BB.binBalance_GrsWeightReserve,
        //                                                         binBalance_GrsWeightReserve_Index = BB.binBalance_GrsWeightReserve_Index,
        //                                                         binBalance_GrsWeightReserve_Id = BB.binBalance_GrsWeightReserve_Id,
        //                                                         binBalance_GrsWeightReserve_Name = BB.binBalance_GrsWeightReserve_Name,
        //                                                         binBalance_GrsWeightReserveRatio = BB.binBalance_GrsWeightReserveRatio,
        //                                                         binBalance_WidthReserve = BB.binBalance_WidthReserve,
        //                                                         binBalance_WidthReserve_Index = BB.binBalance_WidthReserve_Index,
        //                                                         binBalance_WidthReserve_Id = BB.binBalance_WidthReserve_Id,
        //                                                         binBalance_WidthReserve_Name = BB.binBalance_WidthReserve_Name,
        //                                                         binBalance_WidthReserveRatio = BB.binBalance_WidthReserveRatio,
        //                                                         binBalance_LengthReserve = BB.binBalance_LengthReserve,
        //                                                         binBalance_LengthReserve_Index = BB.binBalance_LengthReserve_Index,
        //                                                         binBalance_LengthReserve_Id = BB.binBalance_LengthReserve_Id,
        //                                                         binBalance_LengthReserve_Name = BB.binBalance_LengthReserve_Name,
        //                                                         binBalance_LengthReserveRatio = BB.binBalance_LengthReserveRatio,
        //                                                         binBalance_HeightReserve = BB.binBalance_HeightReserve,
        //                                                         binBalance_HeightReserve_Index = BB.binBalance_HeightReserve_Index,
        //                                                         binBalance_HeightReserve_Id = BB.binBalance_HeightReserve_Id,
        //                                                         binBalance_HeightReserve_Name = BB.binBalance_HeightReserve_Name,
        //                                                         binBalance_HeightReserveRatio = BB.binBalance_HeightReserveRatio,
        //                                                         binBalance_UnitVolumeReserve = BB.binBalance_UnitVolumeReserve,
        //                                                         binBalance_VolumeReserve = BB.binBalance_VolumeReserve,


        //                                                         productConversion_Index = BB.productConversion_Index.ToString(),
        //                                                         productConversion_Id = BB.productConversion_Id,
        //                                                         productConversion_Name = BB.productConversion_Name,

        //                                                         unitPrice = BB.unitPrice,
        //                                                         unitPrice_Index = BB.unitPrice_Index,
        //                                                         unitPrice_Id = BB.unitPrice_Id,
        //                                                         unitPrice_Name = BB.unitPrice_Name,
        //                                                         price = BB.price,
        //                                                         price_Index = BB.price_Index,
        //                                                         price_Id = BB.price_Id,
        //                                                         price_Name = BB.price_Name,

        //                                                         udf_1 = BB.uDF_1,
        //                                                         udf_2 = BB.uDF_2,
        //                                                         udf_3 = BB.uDF_3,
        //                                                         udf_4 = BB.uDF_4,
        //                                                         udf_5 = BB.uDF_5,
        //                                                         create_By = BB.create_By,
        //                                                         create_Date = BB.create_Date.ToString(),
        //                                                         update_By = BB.update_By,
        //                                                         update_Date = BB.update_Date.ToString(),
        //                                                         cancel_By = BB.cancel_By,
        //                                                         cancel_Date = BB.cancel_Date.ToString(),
        //                                                         isUse = BB.isUse,
        //                                                         binBalance_Status = BB.binBalance_Status,
        //                                                         picking_Seq = L?.picking_Seq,
        //                                                         ageRemain = BB.ageRemain,

        //                                                         invoice_No = BB.invoice_No,
        //                                                         declaration_No = BB.declaration_No,
        //                                                         hs_Code = BB.hs_Code,
        //                                                         conutry_of_Origin = BB.conutry_of_Origin,
        //                                                         tax1 = BB.tax1,
        //                                                         tax1_Currency_Index = BB.tax1_Currency_Index,
        //                                                         tax1_Currency_Id = BB.tax1_Currency_Id,
        //                                                         tax1_Currency_Name = BB.tax1_Currency_Name,
        //                                                         tax2 = BB.tax2,
        //                                                         tax2_Currency_Index = BB.tax2_Currency_Index,
        //                                                         tax2_Currency_Id = BB.tax2_Currency_Id,
        //                                                         tax2_Currency_Name = BB.tax2_Currency_Name,
        //                                                         tax3 = BB.tax3,
        //                                                         tax3_Currency_Index = BB.tax3_Currency_Index,
        //                                                         tax3_Currency_Id = BB.tax3_Currency_Id,
        //                                                         tax3_Currency_Name = BB.tax3_Currency_Name,
        //                                                         tax4 = BB.tax4,
        //                                                         tax4_Currency_Index = BB.tax4_Currency_Index,
        //                                                         tax4_Currency_Id = BB.tax4_Currency_Id,
        //                                                         tax4_Currency_Name = BB.tax4_Currency_Name,
        //                                                         tax5 = BB.tax5,
        //                                                         tax5_Currency_Index = BB.tax5_Currency_Index,
        //                                                         tax5_Currency_Id = BB.tax5_Currency_Id,
        //                                                         tax5_Currency_Name = BB.tax5_Currency_Name,

        //                                                         erp_Location = BB.erp_Location,
        //                                                         productShelfLife_D = Prd.ProductShelfLife_D != null ? Prd.ProductShelfLife_D : 0,
        //                                                     }).AsQueryable();


        //                    #endregion

        //                    var View_WaveBinBalance2 = CheckView_WaveBinBalance2;

        //                    //CheckView_WaveBinBalance2

        //                    #region for RuleDesSort
        //                    var RuleDesList2 = getViewWaveTemplate.Where(c => c.isDestination == 1 && c.isSearch == 1).ToList();

        //                    //var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>(e, param);

        //                    foreach (var itemRuleDesList in RuleDesList2)
        //                    {
        //                        if (itemRuleDesList.ruleConditionOperation == "IN")
        //                        {
        //                            if (itemRuleDesList.ruleConditionField_Name == "Zone_Id")
        //                            {
        //                                //setWhereDes += " And  Location_Index   in (  select   Location_Index  from ms_ZoneLocation   where  IsDelete <> -1 and Zone_Index  in (select Zone_Index from ms_Zone where IsDelete <> -1 and " + itemRuleDesList.ruleConditionField_Name + " IN (" + itemRuleDesList.ruleCondition_Param + " )" + ")) ";
        //                                var listDataZoneLocation = utils.SendDataApi<List<ZoneLocationViewModel>>(new AppSettingConfig().GetUrl("getZoneLocationMaster"), new { }.sJson());
        //                                var listDataZone = utils.SendDataApi<List<ZoneViewModel>>(new AppSettingConfig().GetUrl("getZoneMaster"), new { }.sJson());

        //                                //var param = Expression.Parameter(typeof(ZoneViewModel), "x");
        //                                //var predicate = Expression.Lambda<Func<ZoneViewModel, bool>>(
        //                                //    Expression.Call(
        //                                //        Expression.PropertyOrField(param, itemRuleDesList.ruleConditionField_Name),
        //                                //        "Contains", null, Expression.Constant(itemRuleDesList.ruleCondition_Param)
        //                                //    ), param);
        //                                var dataarray = itemRuleDesList.ruleCondition_Param.Replace("'", "").Split(',');
        //                                var dataZone = listDataZone.Where(c => dataarray.Contains(c.zone_Id)).ToList();
        //                                var zoneArray = new List<Guid?>();
        //                                foreach (var z in dataZone)
        //                                {
        //                                    zoneArray.Add(z.zone_Index);
        //                                }
        //                                var listLocation_index = listDataZoneLocation.Where(c => zoneArray.Contains(c.zone_Index)).Select(s => s.location_Index.ToString()).ToList();
        //                                View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => listLocation_index.Contains(c.location_Index));
        //                            }
        //                            else
        //                            {
        //                                var dataarray = itemRuleDesList.ruleCondition_Param.Replace("'", "").Split(',');
        //                                if (itemRuleDesList.ruleConditionField_Name == "GoodsReceive_Date")
        //                                {
        //                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.goodsReceive_Date));
        //                                }
        //                                if (itemRuleDesList.ruleConditionField_Name == "GoodsReceive_No")
        //                                {
        //                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.goodsReceive_No));
        //                                }
        //                                if (itemRuleDesList.ruleConditionField_Name == "ItemStatus_Id")
        //                                {
        //                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.itemStatus_Id));
        //                                }
        //                                if (itemRuleDesList.ruleConditionField_Name == "Location_Name")
        //                                {
        //                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.location_Name));
        //                                }
        //                                if (itemRuleDesList.ruleConditionField_Name == "Locationtype_Id")
        //                                {
        //                                    //View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.location));
        //                                }
        //                                if (itemRuleDesList.ruleConditionField_Name == "Product_Id")
        //                                {
        //                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.product_Id));
        //                                }
        //                                if (itemRuleDesList.ruleConditionField_Name == "Product_Lot")
        //                                {
        //                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.product_Lot));
        //                                }
        //                                if (itemRuleDesList.ruleConditionField_Name == "Warehouse")
        //                                {
        //                                    //planGIWaveResult = planGIWaveResult.Where(c => dataarray.Contains(c.Warehouse));
        //                                }

        //                                //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " IN (" + itemRuleDesList.ruleCondition_Param + ") ";
        //                                //var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
        //                                //var predicate = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>(
        //                                //    Expression.Call(
        //                                //        Expression.PropertyOrField(param, itemRuleDesList.ruleConditionField_Name),
        //                                //        "Contains", null, Expression.Constant(itemRuleDesList.ruleCondition_Param)
        //                                //    ), param);
        //                                //View_WaveBinBalance = View_WaveBinBalance.Where(predicate);
        //                            }
        //                        }
        //                        else if (itemRuleDesList.ruleConditionOperation == "=")
        //                        {
        //                            if (itemRuleDesList.ruleConditionField_Name == "Zone_Id")
        //                            {
        //                                //setWhereDes += "  And  Location_Index   in (  select   Location_Index  from ms_ZoneLocation   where IsDelete <> -1 and Zone_Index  in (select Zone_Index from ms_Zone where IsDelete <> -1 and " + itemRuleDesList.ruleConditionField_Name + " = '" + itemRuleDesList.ruleCondition_Param + "' " + ")) ";
        //                                var listDataZoneLocation = utils.SendDataApi<List<ZoneLocationViewModel>>(new AppSettingConfig().GetUrl("getZoneLocationMaster"), new { }.sJson());
        //                                var listDataZone = utils.SendDataApi<List<ZoneViewModel>>(new AppSettingConfig().GetUrl("getZoneMaster"), new { }.sJson());

        //                                var param = Expression.Parameter(typeof(ZoneViewModel), "x");
        //                                var lambda = Expression.Lambda<Func<ZoneViewModel, bool>>((Expression)Expression.Equal(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
        //                                    , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                                var dataZone = listDataZone.AsQueryable().Where(lambda).ToList();
        //                                var zoneArray = new List<Guid?>();
        //                                foreach (var z in dataZone)
        //                                {
        //                                    zoneArray.Add(z.zone_Index);
        //                                }
        //                                var listLocation_index = listDataZoneLocation.Where(c => zoneArray.Contains(c.zone_Index)).Select(s => s.location_Index.ToString()).ToList();
        //                                View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => listLocation_index.Contains(c.location_Index));
        //                            }
        //                            else
        //                            {
        //                                //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " = '" + itemRuleDesList.ruleCondition_Param + "' ";
        //                                var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
        //                                var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.Equal(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
        //                                    , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                                View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
        //                            }
        //                        }
        //                        else if (itemRuleDesList.ruleConditionOperation == ">")
        //                        {
        //                            //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " > '" + itemRuleDesList.ruleCondition_Param + "' ";
        //                            var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
        //                            var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.GreaterThan(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
        //                                , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
        //                        }
        //                        else if (itemRuleDesList.ruleConditionOperation == "<")
        //                        {
        //                            //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " < '" + itemRuleDesList.ruleCondition_Param + "' ";
        //                            var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
        //                            var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.LessThan(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
        //                                , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
        //                        }
        //                        else if (itemRuleDesList.ruleConditionOperation == "!=")
        //                        {
        //                            //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " != '" + itemRuleDesList.ruleCondition_Param + "' ";
        //                            var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
        //                            var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.NotEqual(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
        //                                , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
        //                        }
        //                        else if (itemRuleDesList.ruleConditionOperation == ">=")
        //                        {
        //                            //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " >= '" + itemRuleDesList.ruleCondition_Param + "' ";
        //                            var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
        //                            var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.GreaterThanOrEqual(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
        //                                , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
        //                        }
        //                        else if (itemRuleDesList.ruleConditionOperation == "<=")
        //                        {
        //                            //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " <= '" + itemRuleDesList.ruleCondition_Param + "' ";
        //                            var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
        //                            var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.LessThanOrEqual(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
        //                                , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

        //                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
        //                        }
        //                        else if (itemRuleDesList.ruleConditionOperation == "Like")
        //                        {
        //                            //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " Like '" + itemRuleDesList.ruleCondition_Param + "' ";
        //                            var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
        //                            var predicate = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>(
        //                                Expression.Call(
        //                                    Expression.PropertyOrField(param, itemRuleDesList.ruleConditionField_Name),
        //                                    "Contains", null, Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""))
        //                                ), param);
        //                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(predicate);
        //                        }
        //                        //setWhereDes += "";

        //                    }
        //                    #endregion

        //                    #region for RuleDesSortList
        //                    var RuleDesSortList2 = getViewWaveTemplate.Where(c => c.isDestination == 1 && c.isSort == 1).ToList();

        //                    int iRowsDesSort2 = 0;
        //                    foreach (var itemRuleDesSortList in RuleDesSortList2)
        //                    {
        //                        if (iRowsDesSort2 == 0)
        //                        {
        //                            //setWhereDesSort += itemRuleDesSortList.ruleConditionField_Name + ' ' + itemRuleDesSortList.ruleCondition_Param;
        //                            var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
        //                            var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, string>>(Expression.Property(param, itemRuleDesSortList.ruleConditionField_Name), param);
        //                            if (itemRuleDesSortList.ruleCondition_Param.ToUpper() == "DESC")
        //                            {
        //                                View_WaveBinBalance2 = View_WaveBinBalance2.OrderByDescending(lambda);
        //                            }
        //                            else /*if (itemRuleDesSortList.ruleCondition_Param.ToUpper() == "DESC")*/
        //                            {
        //                                View_WaveBinBalance2 = View_WaveBinBalance2.OrderBy(lambda);
        //                            }
        //                        }
        //                        else
        //                        {
        //                            var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
        //                            var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, string>>(Expression.Property(param, itemRuleDesSortList.ruleConditionField_Name), param);
        //                            if (itemRuleDesSortList.ruleCondition_Param.ToUpper() == "DESC")
        //                            {
        //                                View_WaveBinBalance2 = View_WaveBinBalance2.OrderByDescending(lambda);
        //                            }
        //                            else /*if (itemRuleDesSortList.ruleCondition_Param.ToUpper() == "DESC")*/
        //                            {
        //                                View_WaveBinBalance2 = View_WaveBinBalance2.OrderBy(lambda);
        //                            }
        //                        }
        //                        iRowsDesSort2 = iRowsDesSort2 + 1;

        //                    }
        //                    #endregion



        //                    State = "View_WaveBinBalance2";
        //                    olog.logging("runwave", State);


        //                    //ListLotNotWave

        //                    var BinBalanceResult = View_WaveBinBalance2.Where(c => !ListLotNotWave.Contains(c.product_Lot)).ToList();
        //                    foreach (var itemBin in BinBalanceResult)
        //                    {

        //                        decimal? QtyBal = itemBin.binBalance_QtyBal - itemBin.binBalance_QtyReserve;
        //                        if (QtyPlanGIRemian <= 0)
        //                        {
        //                            break;
        //                        }
        //                        if (QtyBal <= 0)
        //                        {
        //                            continue;
        //                        }
        //                        if (QtyPlanGIRemian >= QtyBal && QtyBal > 0)
        //                        {
        //                            // Add GI ITEMLOCATION 
        //                            var GoodsIssueItemLocation = new im_GoodsIssueItemLocation();
        //                            GoodsIssueItemLocation.GoodsIssueItemLocation_Index = Guid.NewGuid();
        //                            GoodsIssueItemLocation.GoodsIssue_Index = new Guid(model.goodsIssue_Index);
        //                            GoodsIssueItemLocation.TagItem_Index = new Guid(itemBin.tagItem_Index);
        //                            GoodsIssueItemLocation.Tag_Index = new Guid(itemBin.tag_Index);
        //                            GoodsIssueItemLocation.Tag_No = itemBin.tag_No;
        //                            GoodsIssueItemLocation.Product_Index = new Guid(itemBin.product_Index);
        //                            GoodsIssueItemLocation.Product_Id = itemBin.product_Id;
        //                            GoodsIssueItemLocation.Product_Name = itemBin.product_Name;
        //                            GoodsIssueItemLocation.Product_SecondName = itemBin.product_SecondName;
        //                            GoodsIssueItemLocation.Product_ThirdName = itemBin.product_ThirdName;
        //                            GoodsIssueItemLocation.Product_Lot = itemBin.product_Lot;
        //                            GoodsIssueItemLocation.ItemStatus_Index = new Guid(itemBin.itemStatus_Index);
        //                            GoodsIssueItemLocation.ItemStatus_Id = itemBin.itemStatus_Id;
        //                            GoodsIssueItemLocation.ItemStatus_Name = itemBin.itemStatus_Name;
        //                            GoodsIssueItemLocation.Location_Index = new Guid(itemBin.location_Index);
        //                            GoodsIssueItemLocation.Location_Id = itemBin.location_Id;
        //                            GoodsIssueItemLocation.Location_Name = itemBin.location_Name;
        //                            GoodsIssueItemLocation.QtyPlan = (Decimal)itemPlanGI.TotalQtyRemian;
        //                            GoodsIssueItemLocation.Qty = (Decimal)QtyBal / (Decimal)itemPlanGI.Ratio;
        //                            GoodsIssueItemLocation.Ratio = (Decimal)itemPlanGI.Ratio;
        //                            GoodsIssueItemLocation.TotalQty = (Decimal)QtyBal;
        //                            //GoodsIssueItemLocation.ProductConversion_Index = new Guid(itemBin.productConversion_Index);
        //                            //GoodsIssueItemLocation.ProductConversion_Id = itemBin.productConversion_Id;
        //                            //GoodsIssueItemLocation.ProductConversion_Name = itemBin.productConversion_Name;
        //                            GoodsIssueItemLocation.ProductConversion_Index = (Guid)itemPlanGI.ProductConversion_Index;
        //                            GoodsIssueItemLocation.ProductConversion_Id = itemPlanGI.ProductConversion_Id;
        //                            GoodsIssueItemLocation.ProductConversion_Name = itemPlanGI.ProductConversion_Name;
        //                            GoodsIssueItemLocation.MFG_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_MFG_Date) ? itemBin.goodsReceive_MFG_Date.toDate() : null;
        //                            GoodsIssueItemLocation.EXP_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_EXP_Date) ? itemBin.goodsReceive_EXP_Date.toDate() : null;

        //                            GoodsIssueItemLocation.UnitWeight = itemBin.binBalance_UnitWeightBal;
        //                            GoodsIssueItemLocation.UnitWeight_Index = itemBin.binBalance_UnitWeightBal_Index;
        //                            GoodsIssueItemLocation.UnitWeight_Id = itemBin.binBalance_UnitWeightBal_Id;
        //                            GoodsIssueItemLocation.UnitWeight_Name = itemBin.binBalance_UnitWeightBal_Name;
        //                            GoodsIssueItemLocation.UnitWeightRatio = itemBin.binBalance_UnitWeightBalRatio;

        //                            GoodsIssueItemLocation.Weight = (itemBin.binBalance_WeightBal ?? 0) - (itemBin.binBalance_WeightReserve ?? 0);
        //                            GoodsIssueItemLocation.Weight_Index = itemBin.binBalance_WeightBal_Index;
        //                            GoodsIssueItemLocation.Weight_Id = itemBin.binBalance_WeightBal_Id;
        //                            GoodsIssueItemLocation.Weight_Name = itemBin.binBalance_WeightBal_Name;
        //                            GoodsIssueItemLocation.WeightRatio = itemBin.binBalance_WeightBalRatio;

        //                            GoodsIssueItemLocation.UnitNetWeight = itemBin.binBalance_UnitNetWeightBal;
        //                            GoodsIssueItemLocation.UnitNetWeight_Index = itemBin.binBalance_UnitNetWeightBal_Index;
        //                            GoodsIssueItemLocation.UnitNetWeight_Id = itemBin.binBalance_UnitNetWeightBal_Id;
        //                            GoodsIssueItemLocation.UnitNetWeight_Name = itemBin.binBalance_UnitNetWeightBal_Name;
        //                            GoodsIssueItemLocation.UnitNetWeightRatio = itemBin.binBalance_UnitNetWeightBalRatio;

        //                            GoodsIssueItemLocation.NetWeight = (itemBin.binBalance_NetWeightBal ?? 0) - (itemBin.binBalance_NetWeightReserve ?? 0);
        //                            GoodsIssueItemLocation.NetWeight_Index = itemBin.binBalance_NetWeightBal_Index;
        //                            GoodsIssueItemLocation.NetWeight_Id = itemBin.binBalance_NetWeightBal_Id;
        //                            GoodsIssueItemLocation.NetWeight_Name = itemBin.binBalance_NetWeightBal_Name;
        //                            GoodsIssueItemLocation.NetWeightRatio = itemBin.binBalance_NetWeightBalRatio;

        //                            GoodsIssueItemLocation.UnitGrsWeight = itemBin.binBalance_UnitGrsWeightBal;
        //                            GoodsIssueItemLocation.UnitGrsWeight_Index = itemBin.binBalance_UnitGrsWeightBal_Index;
        //                            GoodsIssueItemLocation.UnitGrsWeight_Id = itemBin.binBalance_UnitGrsWeightBal_Id;
        //                            GoodsIssueItemLocation.UnitGrsWeight_Name = itemBin.binBalance_UnitGrsWeightBal_Name;
        //                            GoodsIssueItemLocation.UnitGrsWeightRatio = itemBin.binBalance_UnitGrsWeightBalRatio;

        //                            GoodsIssueItemLocation.GrsWeight = (itemBin.binBalance_GrsWeightBal ?? 0) - (itemBin.binBalance_GrsWeightReserve ?? 0);
        //                            GoodsIssueItemLocation.GrsWeight_Index = itemBin.binBalance_GrsWeightBal_Index;
        //                            GoodsIssueItemLocation.GrsWeight_Id = itemBin.binBalance_GrsWeightBal_Id;
        //                            GoodsIssueItemLocation.GrsWeight_Name = itemBin.binBalance_GrsWeightBal_Name;
        //                            GoodsIssueItemLocation.GrsWeightRatio = itemBin.binBalance_GrsWeightBalRatio;

        //                            GoodsIssueItemLocation.UnitWidth = (itemBin.binBalance_UnitWidthBal ?? 0);
        //                            GoodsIssueItemLocation.UnitWidth_Index = itemBin.binBalance_UnitWidthBal_Index;
        //                            GoodsIssueItemLocation.UnitWidth_Id = itemBin.binBalance_UnitWidthBal_Id;
        //                            GoodsIssueItemLocation.UnitWidth_Name = itemBin.binBalance_UnitWidthBal_Name;
        //                            GoodsIssueItemLocation.UnitWidthRatio = itemBin.binBalance_UnitWidthBalRatio;

        //                            GoodsIssueItemLocation.Width = (itemBin.binBalance_WidthBal ?? 0) - (itemBin.binBalance_WidthReserve ?? 0);
        //                            GoodsIssueItemLocation.Width_Index = itemBin.binBalance_WidthBal_Index;
        //                            GoodsIssueItemLocation.Width_Id = itemBin.binBalance_WidthBal_Id;
        //                            GoodsIssueItemLocation.Width_Name = itemBin.binBalance_WidthBal_Name;
        //                            GoodsIssueItemLocation.WidthRatio = itemBin.binBalance_WidthBalRatio;

        //                            GoodsIssueItemLocation.UnitLength = (itemBin.binBalance_UnitLengthBal ?? 0);
        //                            GoodsIssueItemLocation.UnitLength_Index = itemBin.binBalance_UnitLengthBal_Index;
        //                            GoodsIssueItemLocation.UnitLength_Id = itemBin.binBalance_UnitLengthBal_Id;
        //                            GoodsIssueItemLocation.UnitLength_Name = itemBin.binBalance_UnitLengthBal_Name;
        //                            GoodsIssueItemLocation.UnitLengthRatio = itemBin.binBalance_UnitLengthBalRatio;

        //                            GoodsIssueItemLocation.Length = (itemBin.binBalance_LengthBal ?? 0) - (itemBin.binBalance_LengthReserve ?? 0);
        //                            GoodsIssueItemLocation.Length_Index = itemBin.binBalance_LengthBal_Index;
        //                            GoodsIssueItemLocation.Length_Id = itemBin.binBalance_LengthBal_Id;
        //                            GoodsIssueItemLocation.Length_Name = itemBin.binBalance_LengthBal_Name;
        //                            GoodsIssueItemLocation.LengthRatio = itemBin.binBalance_LengthBalRatio;

        //                            GoodsIssueItemLocation.UnitHeight = (itemBin.binBalance_UnitHeightBal ?? 0);
        //                            GoodsIssueItemLocation.UnitHeight_Index = itemBin.binBalance_UnitHeightBal_Index;
        //                            GoodsIssueItemLocation.UnitHeight_Id = itemBin.binBalance_UnitHeightBal_Id;
        //                            GoodsIssueItemLocation.UnitHeight_Name = itemBin.binBalance_UnitHeightBal_Name;
        //                            GoodsIssueItemLocation.UnitHeightRatio = itemBin.binBalance_UnitHeightBalRatio;

        //                            GoodsIssueItemLocation.Height = (itemBin.binBalance_HeightBal ?? 0) - (itemBin.binBalance_HeightReserve ?? 0);
        //                            GoodsIssueItemLocation.Height_Index = itemBin.binBalance_HeightBal_Index;
        //                            GoodsIssueItemLocation.Height_Id = itemBin.binBalance_HeightBal_Id;
        //                            GoodsIssueItemLocation.Height_Name = itemBin.binBalance_HeightBal_Name;
        //                            GoodsIssueItemLocation.HeightRatio = itemBin.binBalance_HeightBalRatio;

        //                            GoodsIssueItemLocation.UnitVolume = (itemBin.binBalance_UnitVolumeBal ?? 0);
        //                            GoodsIssueItemLocation.Volume = (itemBin.binBalance_VolumeBal ?? 0) - (itemBin.binBalance_VolumeReserve ?? 0);

        //                            GoodsIssueItemLocation.UnitPrice = (itemBin.unitPrice ?? 0);
        //                            GoodsIssueItemLocation.UnitPrice_Index = itemBin.unitPrice_Index;
        //                            GoodsIssueItemLocation.UnitPrice_Id = itemBin.unitPrice_Id;
        //                            GoodsIssueItemLocation.UnitPrice_Name = itemBin.unitPrice_Name;
        //                            GoodsIssueItemLocation.Price = (itemBin.price ?? 0);
        //                            GoodsIssueItemLocation.Price_Index = itemBin.price_Index;
        //                            GoodsIssueItemLocation.Price_Id = itemBin.price_Id;
        //                            GoodsIssueItemLocation.Price_Name = itemBin.price_Name;


        //                            GoodsIssueItemLocation.DocumentRef_No1 = itemPlanGI.DocumentRef_No1;
        //                            GoodsIssueItemLocation.DocumentRef_No2 = itemPlanGI.DocumentRef_No2;
        //                            GoodsIssueItemLocation.DocumentRef_No3 = itemPlanGI.DocumentRef_No3;
        //                            GoodsIssueItemLocation.DocumentRef_No4 = itemPlanGI.DocumentRef_No4;
        //                            GoodsIssueItemLocation.DocumentRef_No5 = itemPlanGI.DocumentRef_No5;
        //                            GoodsIssueItemLocation.Document_Status = -2;
        //                            GoodsIssueItemLocation.UDF_1 = itemPlanGI.UDF_1;
        //                            GoodsIssueItemLocation.UDF_2 = itemPlanGI.UDF_2;
        //                            GoodsIssueItemLocation.UDF_3 = itemPlanGI.UDF_3;
        //                            GoodsIssueItemLocation.UDF_4 = itemPlanGI.UDF_4;
        //                            GoodsIssueItemLocation.UDF_5 = itemPlanGI.UDF_5;
        //                            GoodsIssueItemLocation.Ref_Process_Index = new Guid("22744590-55D8-4448-88EF-5997C252111F");  // PLAN GI Process
        //                            GoodsIssueItemLocation.Ref_Document_No = itemPlanGI.PlanGoodsIssue_No;
        //                            GoodsIssueItemLocation.Ref_Document_Index = (Guid)itemPlanGI.PlanGoodsIssue_Index;
        //                            GoodsIssueItemLocation.Ref_DocumentItem_Index = itemPlanGI.PlanGoodsIssueItem_Index;
        //                            GoodsIssueItemLocation.GoodsReceiveItem_Index = new Guid(itemBin.goodsReceiveItem_Index);
        //                            GoodsIssueItemLocation.Create_By = model.create_by;
        //                            GoodsIssueItemLocation.Create_Date = DateTime.Now;
        //                            GoodsIssueItemLocation.GoodsIssue_No = model.goodsIssue_No;
        //                            GoodsIssueItemLocation.BinBalance_Index = new Guid(itemBin.binBalance_Index);


        //                            GoodsIssueItemLocation.Invoice_No = itemBin.invoice_No;
        //                            GoodsIssueItemLocation.Declaration_No = itemBin.declaration_No;
        //                            GoodsIssueItemLocation.HS_Code = itemBin.hs_Code;
        //                            GoodsIssueItemLocation.Conutry_of_Origin = itemBin.conutry_of_Origin;
        //                            GoodsIssueItemLocation.Tax1 = itemBin.tax1;
        //                            GoodsIssueItemLocation.Tax1_Currency_Index = itemBin.tax1_Currency_Index;
        //                            GoodsIssueItemLocation.Tax1_Currency_Id = itemBin.tax1_Currency_Id;
        //                            GoodsIssueItemLocation.Tax1_Currency_Name = itemBin.tax1_Currency_Name;
        //                            GoodsIssueItemLocation.Tax2 = itemBin.tax2;
        //                            GoodsIssueItemLocation.Tax2_Currency_Index = itemBin.tax2_Currency_Index;
        //                            GoodsIssueItemLocation.Tax2_Currency_Id = itemBin.tax2_Currency_Id;
        //                            GoodsIssueItemLocation.Tax2_Currency_Name = itemBin.tax2_Currency_Name;
        //                            GoodsIssueItemLocation.Tax3 = itemBin.tax3;
        //                            GoodsIssueItemLocation.Tax3_Currency_Index = itemBin.tax3_Currency_Index;
        //                            GoodsIssueItemLocation.Tax3_Currency_Id = itemBin.tax3_Currency_Id;
        //                            GoodsIssueItemLocation.Tax3_Currency_Name = itemBin.tax3_Currency_Name;
        //                            GoodsIssueItemLocation.Tax4 = itemBin.tax4;
        //                            GoodsIssueItemLocation.Tax4_Currency_Index = itemBin.tax4_Currency_Index;
        //                            GoodsIssueItemLocation.Tax4_Currency_Id = itemBin.tax4_Currency_Id;
        //                            GoodsIssueItemLocation.Tax4_Currency_Name = itemBin.tax4_Currency_Name;
        //                            GoodsIssueItemLocation.Tax5 = itemBin.tax5;
        //                            GoodsIssueItemLocation.Tax5_Currency_Index = itemBin.tax5_Currency_Index;
        //                            GoodsIssueItemLocation.Tax5_Currency_Id = itemBin.tax5_Currency_Id;
        //                            GoodsIssueItemLocation.Tax5_Currency_Name = itemBin.tax5_Currency_Name;
        //                            GoodsIssueItemLocation.ERP_Location = itemBin.erp_Location;



        //                            chkdatawave = true;
        //                            ListGoodsIssueItemLocation.Add(GoodsIssueItemLocation);


        //                            itemPlanGI.GITotalQty = itemPlanGI.GITotalQty + QtyBal;

        //                            QtyPlanGIRemian = QtyPlanGIRemian - QtyBal;

        //                        }
        //                        else if (QtyPlanGIRemian < QtyBal && QtyPlanGIRemian > 0 && QtyBal > 0)
        //                        {
        //                            var QtyPick = QtyPlanGIRemian;
        //                            // Add GI ITEMLOCATION 
        //                            var GoodsIssueItemLocation = new im_GoodsIssueItemLocation();
        //                            GoodsIssueItemLocation.GoodsIssueItemLocation_Index = Guid.NewGuid();
        //                            GoodsIssueItemLocation.GoodsIssue_Index = new Guid(model.goodsIssue_Index);
        //                            GoodsIssueItemLocation.TagItem_Index = new Guid(itemBin.tagItem_Index);
        //                            GoodsIssueItemLocation.Tag_Index = new Guid(itemBin.tag_Index);
        //                            GoodsIssueItemLocation.Tag_No = itemBin.tag_No;
        //                            GoodsIssueItemLocation.Product_Index = new Guid(itemBin.product_Index);
        //                            GoodsIssueItemLocation.Product_Id = itemBin.product_Id;
        //                            GoodsIssueItemLocation.Product_Name = itemBin.product_Name;
        //                            GoodsIssueItemLocation.Product_SecondName = itemBin.product_SecondName;
        //                            GoodsIssueItemLocation.Product_ThirdName = itemBin.product_ThirdName;
        //                            GoodsIssueItemLocation.Product_Lot = itemBin.product_Lot;
        //                            GoodsIssueItemLocation.ItemStatus_Index = new Guid(itemBin.itemStatus_Index);
        //                            GoodsIssueItemLocation.ItemStatus_Id = itemBin.itemStatus_Id;
        //                            GoodsIssueItemLocation.ItemStatus_Name = itemBin.itemStatus_Name;
        //                            GoodsIssueItemLocation.Location_Index = new Guid(itemBin.location_Index);
        //                            GoodsIssueItemLocation.Location_Id = itemBin.location_Id;
        //                            GoodsIssueItemLocation.Location_Name = itemBin.location_Name;
        //                            GoodsIssueItemLocation.QtyPlan = (Decimal)itemPlanGI.TotalQtyRemian;
        //                            GoodsIssueItemLocation.Qty = (Decimal)QtyPick / (Decimal)itemPlanGI.Ratio;
        //                            GoodsIssueItemLocation.Ratio = (Decimal)itemPlanGI.Ratio;
        //                            GoodsIssueItemLocation.TotalQty = (Decimal)QtyPick;
        //                            //GoodsIssueItemLocation.ProductConversion_Index = new Guid(itemBin.productConversion_Index);
        //                            //GoodsIssueItemLocation.ProductConversion_Id = itemBin.productConversion_Id;
        //                            //GoodsIssueItemLocation.ProductConversion_Name = itemBin.productConversion_Name;
        //                            GoodsIssueItemLocation.ProductConversion_Index = (Guid)itemPlanGI.ProductConversion_Index;
        //                            GoodsIssueItemLocation.ProductConversion_Id = itemPlanGI.ProductConversion_Id;
        //                            GoodsIssueItemLocation.ProductConversion_Name = itemPlanGI.ProductConversion_Name;
        //                            GoodsIssueItemLocation.MFG_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_MFG_Date) ? itemBin.goodsReceive_MFG_Date.toDate() : null;
        //                            GoodsIssueItemLocation.EXP_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_EXP_Date) ? itemBin.goodsReceive_EXP_Date.toDate() : null;

        //                            if (itemBin.binBalance_WeightBegin == 0)
        //                            {
        //                                GoodsIssueItemLocation.Weight = 0;
        //                            }
        //                            else
        //                            {
        //                                GoodsIssueItemLocation.UnitWeight = itemBin.binBalance_UnitWeightBal;
        //                                GoodsIssueItemLocation.UnitWeight_Index = itemBin.binBalance_UnitWeightBal_Index;
        //                                GoodsIssueItemLocation.UnitWeight_Id = itemBin.binBalance_UnitWeightBal_Id;
        //                                GoodsIssueItemLocation.UnitWeight_Name = itemBin.binBalance_UnitWeightBal_Name;
        //                                GoodsIssueItemLocation.UnitWeightRatio = itemBin.binBalance_UnitWeightBalRatio;

        //                                GoodsIssueItemLocation.Weight = (Decimal)(QtyPick * (itemBin.binBalance_UnitWeightBal ?? 0));
        //                                GoodsIssueItemLocation.Weight_Index = itemBin.binBalance_UnitWeightBal_Index;
        //                                GoodsIssueItemLocation.Weight_Id = itemBin.binBalance_UnitWeightBal_Id;
        //                                GoodsIssueItemLocation.Weight_Name = itemBin.binBalance_UnitWeightBal_Name;
        //                                GoodsIssueItemLocation.WeightRatio = itemBin.binBalance_UnitWeightBalRatio;
        //                            }

        //                            if (itemBin.binBalance_NetWeightBegin == 0)
        //                            {
        //                                GoodsIssueItemLocation.NetWeight = 0;
        //                            }
        //                            else
        //                            {
        //                                GoodsIssueItemLocation.UnitNetWeight = itemBin.binBalance_UnitNetWeightBal;
        //                                GoodsIssueItemLocation.UnitNetWeight_Index = itemBin.binBalance_UnitNetWeightBal_Index;
        //                                GoodsIssueItemLocation.UnitNetWeight_Id = itemBin.binBalance_UnitNetWeightBal_Id;
        //                                GoodsIssueItemLocation.UnitNetWeight_Name = itemBin.binBalance_UnitNetWeightBal_Name;
        //                                GoodsIssueItemLocation.UnitNetWeightRatio = itemBin.binBalance_UnitNetWeightBalRatio;

        //                                GoodsIssueItemLocation.NetWeight = (Decimal)(QtyPick * (itemBin.binBalance_UnitNetWeightBal ?? 0));
        //                                GoodsIssueItemLocation.NetWeight_Index = itemBin.binBalance_UnitNetWeightBal_Index;
        //                                GoodsIssueItemLocation.NetWeight_Id = itemBin.binBalance_UnitNetWeightBal_Id;
        //                                GoodsIssueItemLocation.NetWeight_Name = itemBin.binBalance_UnitNetWeightBal_Name;
        //                                GoodsIssueItemLocation.NetWeightRatio = itemBin.binBalance_UnitNetWeightBalRatio;
        //                            }

        //                            if (itemBin.binBalance_GrsWeightBegin == 0)
        //                            {
        //                                GoodsIssueItemLocation.GrsWeight = 0;
        //                            }
        //                            else
        //                            {
        //                                GoodsIssueItemLocation.UnitGrsWeight = itemBin.binBalance_UnitGrsWeightBal;
        //                                GoodsIssueItemLocation.UnitGrsWeight_Index = itemBin.binBalance_UnitGrsWeightBal_Index;
        //                                GoodsIssueItemLocation.UnitGrsWeight_Id = itemBin.binBalance_UnitGrsWeightBal_Id;
        //                                GoodsIssueItemLocation.UnitGrsWeight_Name = itemBin.binBalance_UnitGrsWeightBal_Name;
        //                                GoodsIssueItemLocation.UnitGrsWeightRatio = itemBin.binBalance_UnitGrsWeightBalRatio;

        //                                GoodsIssueItemLocation.GrsWeight = (Decimal)(QtyPick * (itemBin.binBalance_UnitGrsWeightBal ?? 0));
        //                                GoodsIssueItemLocation.GrsWeight_Index = itemBin.binBalance_UnitGrsWeightBal_Index;
        //                                GoodsIssueItemLocation.GrsWeight_Id = itemBin.binBalance_UnitGrsWeightBal_Id;
        //                                GoodsIssueItemLocation.GrsWeight_Name = itemBin.binBalance_UnitGrsWeightBal_Name;
        //                                GoodsIssueItemLocation.GrsWeightRatio = itemBin.binBalance_UnitGrsWeightBalRatio;
        //                            }

        //                            if (itemBin.binBalance_WidthBegin == 0)
        //                            {
        //                                GoodsIssueItemLocation.Width = 0;
        //                            }
        //                            else
        //                            {
        //                                GoodsIssueItemLocation.UnitWidth = (itemBin.binBalance_UnitWidthBal ?? 0);
        //                                GoodsIssueItemLocation.UnitWidth_Index = itemBin.binBalance_UnitWidthBal_Index;
        //                                GoodsIssueItemLocation.UnitWidth_Id = itemBin.binBalance_UnitWidthBal_Id;
        //                                GoodsIssueItemLocation.UnitWidth_Name = itemBin.binBalance_UnitWidthBal_Name;
        //                                GoodsIssueItemLocation.UnitWidthRatio = itemBin.binBalance_UnitWidthBalRatio;

        //                                GoodsIssueItemLocation.Width = (Decimal)(QtyPick * (itemBin.binBalance_UnitWidthBal ?? 0));
        //                                GoodsIssueItemLocation.Width_Index = itemBin.binBalance_UnitWidthBal_Index;
        //                                GoodsIssueItemLocation.Width_Id = itemBin.binBalance_UnitWidthBal_Id;
        //                                GoodsIssueItemLocation.Width_Name = itemBin.binBalance_UnitWidthBal_Name;
        //                                GoodsIssueItemLocation.WidthRatio = itemBin.binBalance_UnitWidthBalRatio;
        //                            }

        //                            if (itemBin.binBalance_LengthBegin == 0)
        //                            {
        //                                GoodsIssueItemLocation.Length = 0;
        //                            }
        //                            else
        //                            {
        //                                GoodsIssueItemLocation.UnitLength = (itemBin.binBalance_UnitLengthBal ?? 0);
        //                                GoodsIssueItemLocation.UnitLength_Index = itemBin.binBalance_UnitLengthBal_Index;
        //                                GoodsIssueItemLocation.UnitLength_Id = itemBin.binBalance_UnitLengthBal_Id;
        //                                GoodsIssueItemLocation.UnitLength_Name = itemBin.binBalance_UnitLengthBal_Name;
        //                                GoodsIssueItemLocation.UnitLengthRatio = itemBin.binBalance_UnitLengthBalRatio;

        //                                GoodsIssueItemLocation.Length = (Decimal)(QtyPick * (itemBin.binBalance_UnitWidthBal ?? 0));
        //                                GoodsIssueItemLocation.Length_Index = itemBin.binBalance_UnitLengthBal_Index;
        //                                GoodsIssueItemLocation.Length_Id = itemBin.binBalance_UnitLengthBal_Id;
        //                                GoodsIssueItemLocation.Length_Name = itemBin.binBalance_UnitLengthBal_Name;
        //                                GoodsIssueItemLocation.LengthRatio = itemBin.binBalance_UnitLengthBalRatio;
        //                            }

        //                            if (itemBin.binBalance_HeightBegin == 0)
        //                            {
        //                                GoodsIssueItemLocation.Height = 0;
        //                            }
        //                            else
        //                            {
        //                                GoodsIssueItemLocation.UnitHeight = (itemBin.binBalance_UnitHeightBal ?? 0);
        //                                GoodsIssueItemLocation.UnitHeight_Index = itemBin.binBalance_UnitHeightBal_Index;
        //                                GoodsIssueItemLocation.UnitHeight_Id = itemBin.binBalance_UnitHeightBal_Id;
        //                                GoodsIssueItemLocation.UnitHeight_Name = itemBin.binBalance_UnitHeightBal_Name;
        //                                GoodsIssueItemLocation.UnitHeightRatio = itemBin.binBalance_UnitHeightBalRatio;

        //                                GoodsIssueItemLocation.Height = (Decimal)(QtyPick * (itemBin.binBalance_UnitHeightBal ?? 0));
        //                                GoodsIssueItemLocation.Height_Index = itemBin.binBalance_UnitHeightBal_Index;
        //                                GoodsIssueItemLocation.Height_Id = itemBin.binBalance_UnitHeightBal_Id;
        //                                GoodsIssueItemLocation.Height_Name = itemBin.binBalance_UnitHeightBal_Name;
        //                                GoodsIssueItemLocation.HeightRatio = itemBin.binBalance_UnitHeightBalRatio;
        //                            }

        //                            if (itemBin.binBalance_UnitVolumeBal == 0)
        //                            {
        //                                GoodsIssueItemLocation.UnitVolume = 0;
        //                            }
        //                            else
        //                            {
        //                                GoodsIssueItemLocation.UnitVolume = (itemBin.binBalance_UnitVolumeBal ?? 0);
        //                                GoodsIssueItemLocation.Volume = (Decimal)(QtyPick * (itemBin.binBalance_UnitVolumeBal ?? 0));
        //                            }

        //                            GoodsIssueItemLocation.UnitPrice = (itemBin.unitPrice ?? 0);
        //                            GoodsIssueItemLocation.UnitPrice_Index = itemBin.unitPrice_Index;
        //                            GoodsIssueItemLocation.UnitPrice_Id = itemBin.unitPrice_Id;
        //                            GoodsIssueItemLocation.UnitPrice_Name = itemBin.unitPrice_Name;
        //                            GoodsIssueItemLocation.Price = (Decimal)(QtyPick * (itemBin.unitPrice ?? 0));
        //                            GoodsIssueItemLocation.Price_Index = itemBin.unitPrice_Index;
        //                            GoodsIssueItemLocation.Price_Id = itemBin.unitPrice_Id;
        //                            GoodsIssueItemLocation.Price_Name = itemBin.unitPrice_Name;



        //                            GoodsIssueItemLocation.DocumentRef_No1 = itemPlanGI.DocumentRef_No1;
        //                            GoodsIssueItemLocation.DocumentRef_No2 = itemPlanGI.DocumentRef_No2;
        //                            GoodsIssueItemLocation.DocumentRef_No3 = itemPlanGI.DocumentRef_No3;
        //                            GoodsIssueItemLocation.DocumentRef_No4 = itemPlanGI.DocumentRef_No4;
        //                            GoodsIssueItemLocation.DocumentRef_No5 = itemPlanGI.DocumentRef_No5;
        //                            GoodsIssueItemLocation.Document_Status = -2;
        //                            GoodsIssueItemLocation.UDF_1 = itemPlanGI.UDF_1;
        //                            GoodsIssueItemLocation.UDF_2 = itemPlanGI.UDF_2;
        //                            GoodsIssueItemLocation.UDF_3 = itemPlanGI.UDF_3;
        //                            GoodsIssueItemLocation.UDF_4 = itemPlanGI.UDF_4;
        //                            GoodsIssueItemLocation.UDF_5 = itemPlanGI.UDF_5;
        //                            GoodsIssueItemLocation.Ref_Process_Index = new Guid("22744590-55D8-4448-88EF-5997C252111F");  // PLAN GI Process
        //                            GoodsIssueItemLocation.Ref_Document_No = itemPlanGI.PlanGoodsIssue_No;
        //                            GoodsIssueItemLocation.Ref_Document_Index = (Guid)itemPlanGI.PlanGoodsIssue_Index;
        //                            GoodsIssueItemLocation.Ref_DocumentItem_Index = itemPlanGI.PlanGoodsIssueItem_Index;
        //                            GoodsIssueItemLocation.GoodsReceiveItem_Index = new Guid(itemBin.goodsReceiveItem_Index);
        //                            GoodsIssueItemLocation.Create_By = model.create_by;
        //                            GoodsIssueItemLocation.Create_Date = DateTime.Now;
        //                            GoodsIssueItemLocation.GoodsIssue_No = model.goodsIssue_No;
        //                            GoodsIssueItemLocation.BinBalance_Index = new Guid(itemBin.binBalance_Index);

        //                            GoodsIssueItemLocation.Invoice_No = itemBin.invoice_No;
        //                            GoodsIssueItemLocation.Declaration_No = itemBin.declaration_No;
        //                            GoodsIssueItemLocation.HS_Code = itemBin.hs_Code;
        //                            GoodsIssueItemLocation.Conutry_of_Origin = itemBin.conutry_of_Origin;
        //                            GoodsIssueItemLocation.Tax1 = itemBin.tax1;
        //                            GoodsIssueItemLocation.Tax1_Currency_Index = itemBin.tax1_Currency_Index;
        //                            GoodsIssueItemLocation.Tax1_Currency_Id = itemBin.tax1_Currency_Id;
        //                            GoodsIssueItemLocation.Tax1_Currency_Name = itemBin.tax1_Currency_Name;
        //                            GoodsIssueItemLocation.Tax2 = itemBin.tax2;
        //                            GoodsIssueItemLocation.Tax2_Currency_Index = itemBin.tax2_Currency_Index;
        //                            GoodsIssueItemLocation.Tax2_Currency_Id = itemBin.tax2_Currency_Id;
        //                            GoodsIssueItemLocation.Tax2_Currency_Name = itemBin.tax2_Currency_Name;
        //                            GoodsIssueItemLocation.Tax3 = itemBin.tax3;
        //                            GoodsIssueItemLocation.Tax3_Currency_Index = itemBin.tax3_Currency_Index;
        //                            GoodsIssueItemLocation.Tax3_Currency_Id = itemBin.tax3_Currency_Id;
        //                            GoodsIssueItemLocation.Tax3_Currency_Name = itemBin.tax3_Currency_Name;
        //                            GoodsIssueItemLocation.Tax4 = itemBin.tax4;
        //                            GoodsIssueItemLocation.Tax4_Currency_Index = itemBin.tax4_Currency_Index;
        //                            GoodsIssueItemLocation.Tax4_Currency_Id = itemBin.tax4_Currency_Id;
        //                            GoodsIssueItemLocation.Tax4_Currency_Name = itemBin.tax4_Currency_Name;
        //                            GoodsIssueItemLocation.Tax5 = itemBin.tax5;
        //                            GoodsIssueItemLocation.Tax5_Currency_Index = itemBin.tax5_Currency_Index;
        //                            GoodsIssueItemLocation.Tax5_Currency_Id = itemBin.tax5_Currency_Id;
        //                            GoodsIssueItemLocation.Tax5_Currency_Name = itemBin.tax5_Currency_Name;
        //                            GoodsIssueItemLocation.ERP_Location = itemBin.erp_Location;

        //                            chkdatawave = true;
        //                            ListGoodsIssueItemLocation.Add(GoodsIssueItemLocation);

        //                            itemPlanGI.GITotalQty = itemPlanGI.GITotalQty + QtyPick;

        //                            QtyPlanGIRemian = QtyPlanGIRemian - QtyPick;

        //                        }
        //                    }

        //                    #region inset GIL and runwave status 30
        //                    using (var db4 = new GIDbContext())
        //                    {
        //                        var transaction = db4.Database.BeginTransaction(IsolationLevel.Serializable);
        //                        try
        //                        {
        //                            var GI = db4.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 20).ToList();
        //                            foreach (var g in GI)
        //                            {
        //                                g.RunWave_Status = 30;
        //                            }

        //                            db4.IM_GoodsIssueItemLocation.AddRange(ListGoodsIssueItemLocation);
        //                            db4.SaveChanges();
        //                            transaction.Commit();
        //                        }
        //                        catch (Exception exy)
        //                        {
        //                            msglog = State + " ex Rollback " + exy.Message.ToString();
        //                            olog.logging("runwave", msglog);
        //                            transaction.Rollback();
        //                            throw exy;
        //                        }
        //                    }
        //                    #endregion
        //                    State = "inset GIL and runwave status 30";
        //                    olog.logging("runwave", State);

        //                    #region insert bincardreserve and runwave status 40

        //                    using (var Contact = new GIDbContext())
        //                    {
        //                        var GIL = Contact.IM_GoodsIssueItemLocation.Where(c => c.Ref_Document_Index == itemPlanGI.PlanGoodsIssue_Index && c.Ref_DocumentItem_Index == itemPlanGI.PlanGoodsIssueItem_Index && c.Document_Status != -1).ToList();
        //                        foreach (var g in GIL)
        //                        {
        //                            var insertBinCardReserve = new PickbinbalanceViewModel();

        //                            insertBinCardReserve.ref_Document_Index = g.GoodsIssue_Index.ToString();
        //                            insertBinCardReserve.ref_DocumentItem_Index = g.GoodsIssueItemLocation_Index.ToString();
        //                            insertBinCardReserve.goodsIssue_No = model.goodsIssue_No;
        //                            insertBinCardReserve.Process_Index = "22744590-55D8-4448-88EF-5997C252111F";
        //                            //model.GIIL = GoodsIssueItemLocation;
        //                            insertBinCardReserve.create_By = model.create_by;
        //                            insertBinCardReserve.pick = g.TotalQty;
        //                            insertBinCardReserve.binbalance_Index = g.BinBalance_Index.ToString();
        //                            insertBinCardReserve.wave_Index = Contact.IM_GoodsIssue.FirstOrDefault(f => f.GoodsIssue_Index == g.GoodsIssue_Index)?.Wave_Index.ToString();
        //                            var insetBinRe = utils.SendDataApi<actionResultPickbinbalanceViewModel>(new AppSettingConfig().GetUrl("insertBinCardReserve"), insertBinCardReserve.sJson());
        //                            if (insetBinRe.resultIsUse)
        //                            {
        //                                var transaction = Contact.Database.BeginTransaction(IsolationLevel.Serializable);
        //                                try
        //                                {
        //                                    var GI = Contact.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 30).ToList();
        //                                    foreach (var gg in GI)
        //                                    {
        //                                        gg.RunWave_Status = 40;
        //                                    }
        //                                    Contact.SaveChanges();
        //                                    transaction.Commit();
        //                                }
        //                                catch (Exception exy)
        //                                {
        //                                    msglog = State + " ex Rollback " + exy.Message.ToString();
        //                                    olog.logging("runwave", msglog);
        //                                    transaction.Rollback();
        //                                    throw exy;
        //                                }
        //                            }
        //                            else
        //                            {
        //                                var transaction = Contact.Database.BeginTransaction(IsolationLevel.Serializable);
        //                                try
        //                                {
        //                                    var GI = Contact.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && (c.RunWave_Status == 30 || c.RunWave_Status == 40)).ToList();
        //                                    foreach (var gg in GI)
        //                                    {
        //                                        gg.RunWave_Status = 30;
        //                                    }
        //                                    Contact.SaveChanges();
        //                                    transaction.Commit();
        //                                }
        //                                catch (Exception exy)
        //                                {
        //                                    msglog = State + " ex Rollback " + exy.Message.ToString();
        //                                    olog.logging("runwave", msglog);
        //                                    transaction.Rollback();
        //                                    throw exy;
        //                                }
        //                                msglog = State + " ex Rollback " + "Insert BinCardReserve Error";
        //                                olog.logging("runwave", msglog);
        //                                result.resultMsg = "Insert BinCardReserve Error";
        //                                result.resultIsUse = false;
        //                                //return result;

        //                            }
        //                        }
        //                    }
        //                    #endregion
        //                    State = "insert bincardreserve and runwave status 40";
        //                    olog.logging("runwave", State);
        //                }

        //                #region update isuse = '' and runwave 50
        //                strwhere.isActive = true;
        //                var updateIsuseViewBinbalance = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("updateIsuseViewBinbalance"), strwhere.sJson());
        //                if (updateIsuseViewBinbalance)
        //                {
        //                    using (var db5 = new GIDbContext())
        //                    {
        //                        var transaction = db5.Database.BeginTransaction(IsolationLevel.Serializable);
        //                        try
        //                        {
        //                            var GI = db5.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 40).ToList();
        //                            foreach (var g in GI)
        //                            {
        //                                g.RunWave_Status = 50;
        //                            }
        //                            db5.SaveChanges();
        //                            transaction.Commit();
        //                        }
        //                        catch (Exception exy)
        //                        {
        //                            msglog = State + " ex Rollback " + exy.Message.ToString();
        //                            olog.logging("runwave", msglog);
        //                            transaction.Rollback();
        //                            throw exy;
        //                        }
        //                    }
        //                }
        //                else
        //                {
        //                    throw new Exception("Update IsUse By Error");
        //                }
        //                #endregion
        //                State = "region update isuse = '' and runwave 50";
        //                olog.logging("runwave", State);
        //            }
        //        }


        //        result.goodsIssue_Index = model.goodsIssue_Index;
        //        result.goodsIssue_No = model.goodsIssue_No;

        //        result.resultIsUse = true;
        //        State = "end for";
        //        olog.logging("runwave", State);
        //        #region Check retrun status PGII 
        //        foreach (var itemPGII in model.listGoodsIssueItemViewModel)
        //        {
        //            var chkGIL2 = db.IM_GoodsIssueItemLocation.Where(c => c.Ref_Document_Index == itemPGII.planGoodsIssue_Index && c.Ref_DocumentItem_Index == itemPGII.planGoodsIssueItem_Index && c.Document_Status != -1).ToList();
        //            var sumqty = chkGIL2.Sum(s => s.TotalQty);
        //            if (chkGIL2.Count == 0 || sumqty != itemPGII.totalQty)
        //            {

        //                var pgii = model.listGoodsIssueItemViewModel.Where(c => c.planGoodsIssueItem_Index == itemPGII.planGoodsIssueItem_Index).ToList();
        //                foreach (var resultpgii in pgii)
        //                {
        //                    resultpgii.qtyPlan = (resultpgii.totalQty - sumqty);
        //                    resultpgii.totalQty = (resultpgii.totalQty - sumqty);
        //                    listpgiinotinsert.Add(resultpgii);
        //                    CheckRunwavePast = true;
        //                    using (var updatepginotProduct = new GIDbContext())
        //                    {
        //                        var transactionresultpgii = updatepginotProduct.Database.BeginTransaction(IsolationLevel.Serializable);
        //                        try
        //                        {

        //                            var updateresultpgii = updatepginotProduct.IM_PlanGoodsIssueItem.Where(c => c.PlanGoodsIssueItem_Index == resultpgii.planGoodsIssueItem_Index && c.Document_Status == 1).ToList();
        //                            foreach (var p in updateresultpgii)
        //                            {
        //                                p.Document_Status = 0;
        //                            }
        //                            updatepginotProduct.SaveChanges();
        //                            transactionresultpgii.Commit();
        //                        }

        //                        catch (Exception exy)
        //                        {
        //                            msglog = State + " ex Rollback " + exy.Message.ToString();
        //                            olog.logging("UpdateUserAssign", msglog);
        //                            transactionresultpgii.Rollback();
        //                            throw exy;
        //                        }
        //                    }
        //                }
        //            }
        //        }
        //        #endregion

        //        State = "Check retrun status PGII";
        //        olog.logging("runwave", State);
        //        #region update PI status 3 and runwave status 60
        //        using (var db5 = new GIDbContext())
        //        {
        //            var listPGI = new List<Guid>();
        //            if (model.listGoodsIssueItemViewModel.Count > 0)
        //            {
        //                foreach (var item in model.listGoodsIssueItemViewModel)
        //                {
        //                    if (item.planGoodsIssue_Index != Guid.Parse("00000000-0000-0000-0000-000000000000"))
        //                    {
        //                        listPGI.Add(item.planGoodsIssue_Index);
        //                    }
        //                }
        //            }
        //            foreach (var item in listPGI)
        //            {
        //                var pgii = db5.IM_PlanGoodsIssueItem.Where(c => c.PlanGoodsIssue_Index == item && c.Document_Status == 0).Count();
        //                if (pgii == 0)
        //                {
        //                    var transaction = db5.Database.BeginTransaction(IsolationLevel.Serializable);
        //                    try
        //                    {
        //                        var pgi = db5.IM_PlanGoodsIssue.Where(c => c.PlanGoodsIssue_Index == item).ToList();
        //                        foreach (var p in pgi)
        //                        {
        //                            p.Document_Status = 3;
        //                        }
        //                        //var GI = db5.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 50).ToList();
        //                        //foreach (var g in GI)
        //                        //{
        //                        //    g.Wave_Index = new Guid(model.wave_Index);
        //                        //    g.RunWave_Status = 60;
        //                        //}
        //                        db5.SaveChanges();
        //                        transaction.Commit();
        //                    }

        //                    catch (Exception exy)
        //                    {
        //                        msglog = State + " ex Rollback " + exy.Message.ToString();
        //                        olog.logging("runwave", msglog);
        //                        transaction.Rollback();
        //                        throw exy;
        //                    }
        //                }
        //            }
        //        }
        //        #endregion

        //        State = "update PI status 3 and runwave status 60";
        //        olog.logging("runwave", State);

        //        result.resultMsg = CheckRunwavePast ? chkdatawave ? "หยิบสินค้าได้บางส่วน" : "สินค้าไม่เพียงพอ" : "หยิบสินค้าสำเร็จ";
        //        result.pgii = listpgiinotinsert;
        //        return result;

        //    }
        //    catch (Exception ex)
        //    {
        //        #region update isuse = '' and runwave 50
        //        var strwhere = new getViewBinbalanceViewModel();
        //        strwhere.isuse = model.goodsIssue_Index;
        //        strwhere.isActive = true;
        //        var updateIsuseViewBinbalance = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("updateIsuseViewBinbalance"), strwhere.sJson());

        //        #endregion

        //        msglog = State + " ex Rollback " + ex.Message.ToString();
        //        olog.logging("runwave", msglog);
        //        var result = new actionResultRunWaveV2ViewModelViewModel();
        //        result.resultIsUse = false;
        //        result.resultMsg = ex.Message;
        //        return result;
        //    }
        //}
        
        public actionResultRunWaveV2ViewModelViewModel runwaveandHeaderBom(RunWaveFilterV2ViewModel model)
        {

            String State = "Start";
            String msglog = "";
            var olog = new logtxt();
            var process = new Guid("2E026669-99BD-4DE0-8818-534F29F7B89D");
            var strprocess = "2E026669-99BD-4DE0-8818-534F29F7B89D";
            var PlanGiRunWave = new List<Guid>();
            var ListDocumentViewModel = new List<DocumentViewModel>();
            var listpgiinotinsert = new List<BomItemViewModel>();
            try
            {
                var listDataLocation2 = utils.SendDataApi<List<locationViewModel>>(new AppSettingConfig().GetUrl("getLocationMaster"), new { }.sJson());
                var listDataProduct2 = utils.SendDataApi<List<ProductViewModel>>(new AppSettingConfig().GetUrl("getProductMaster"), new { }.sJson());

                #region create and update header
                Guid gi_index = !string.IsNullOrEmpty(model.goodsIssue_Index) ? new Guid(model.goodsIssue_Index) : new Guid("00000000-0000-0000-0000-000000000000");
                var gi = db.IM_GoodsIssue.Find(gi_index);
                if (gi == null)
                {
                    var filterModel = new GenDocumentTypeViewModel();

                    filterModel.process_Index = new Guid("2E026669-99BD-4DE0-8818-534F29F7B89D");
                    filterModel.documentType_Index = new Guid(model.documentType_Index);
                    //GetConfig
                    var dropDownDocumentType = utils.SendDataApi<List<GenDocumentTypeViewModel>>(new AppSettingConfig().GetUrl("dropDownDocumentType"), filterModel.sJson());

                    var genDoc = new AutoNumberService();
                    DateTime DocumentDate = DateTime.Now;
                    string DocNum = genDoc.genAutoDocmentNumber(dropDownDocumentType, DocumentDate);

                    var newGI = new im_GoodsIssue();
                    newGI.GoodsIssue_Index = Guid.NewGuid();
                    newGI.Owner_Index = !string.IsNullOrEmpty(model.owner_Index) ? new Guid(model.owner_Index) : Guid.Parse("00000000-0000-0000-0000-000000000000");
                    newGI.Owner_Id = !string.IsNullOrEmpty(model.owner_Index) ? model.owner_Id : "";
                    newGI.Owner_Name = !string.IsNullOrEmpty(model.owner_Index) ? model.owner_Name : "";
                    newGI.DocumentType_Index = new Guid(model.documentType_Index);
                    newGI.DocumentType_Id = model.documentType_Id;
                    newGI.DocumentType_Name = model.documentType_Name;
                    newGI.GoodsIssue_No = DocNum;
                    newGI.GoodsIssue_Date = model.goodsIssue_Date.toDateDefault();
                    newGI.GoodsIssue_Time = model.goodsIssue_Time;
                    newGI.DocumentRef_No1 = model.documentRef_No1;
                    newGI.DocumentRef_No2 = model.documentRef_No2;
                    newGI.DocumentRef_No3 = model.documentRef_No3;
                    newGI.DocumentRef_No4 = model.documentRef_No4;
                    newGI.DocumentRef_No5 = model.documentRef_No5;
                    newGI.Document_Remark = model.document_Remark;
                    newGI.DocumentPriority_Status = model.documentPriority_Status;
                    newGI.Document_Date = model.document_Date.toDate();
                    newGI.Warehouse_Index = !string.IsNullOrEmpty(model.warehouse_Index) ? new Guid(model.warehouse_Index) : (Guid?)null;
                    newGI.Warehouse_Id = !string.IsNullOrEmpty(model.warehouse_Index) ? model.warehouse_Id : null;
                    newGI.Warehouse_Name = !string.IsNullOrEmpty(model.warehouse_Index) ? model.warehouse_Name : null;
                    newGI.Document_Status = -2;
                    newGI.Create_By = model.create_by;
                    newGI.Create_Date = DateTime.Now;
                    db.IM_GoodsIssue.Add(newGI);

                    model.goodsIssue_Index = newGI.GoodsIssue_Index.ToString();
                    model.goodsIssue_No = newGI.GoodsIssue_No;
                }
                else
                {
                    if (gi.Document_Status == 0)
                    {
                        gi.Owner_Index = !string.IsNullOrEmpty(model.owner_Index) ? new Guid(model.owner_Index) : Guid.Parse("00000000-0000-0000-0000-000000000000");
                        gi.Owner_Id = !string.IsNullOrEmpty(model.owner_Index) ? model.owner_Id : "";
                        gi.Owner_Name = !string.IsNullOrEmpty(model.owner_Index) ? model.owner_Name : "";
                        gi.DocumentType_Index = new Guid(model.documentType_Index);
                        gi.DocumentType_Id = model.documentType_Id;
                        gi.DocumentType_Name = model.documentType_Name;
                        gi.GoodsIssue_Date = model.goodsIssue_Date.toDateDefault();
                        gi.GoodsIssue_Time = model.goodsIssue_Time;
                        gi.DocumentRef_No1 = model.documentRef_No1;
                        gi.Document_Remark = model.document_Remark;
                        gi.Document_Date = model.document_Date.toDate();
                        gi.Warehouse_Index = !string.IsNullOrEmpty(model.warehouse_Index) ? new Guid(model.warehouse_Index) : (Guid?)null;
                        gi.Warehouse_Id = !string.IsNullOrEmpty(model.warehouse_Index) ? model.warehouse_Id : null;
                        gi.Warehouse_Name = !string.IsNullOrEmpty(model.warehouse_Index) ? model.warehouse_Name : null;
                        gi.Update_By = model.create_by;
                        gi.Update_Date = DateTime.Now;
                    }
                }

                var transactionx = db.Database.BeginTransaction();
                try
                {
                    db.SaveChanges();
                    transactionx.Commit();
                }

                catch (Exception exy)
                {
                    msglog = State + " ex Rollback " + exy.Message.ToString();
                    olog.logging("SavePlanGR", msglog);
                    transactionx.Rollback();

                    throw exy;

                }
                #endregion

                int CheckRunwavePast = model.listGoodsIssueItemBomViewModel.Count();
                var result = new actionResultRunWaveV2ViewModelViewModel();

                #region runwave status 10
                if (model.listGoodsIssueItemBomViewModel.Count > 0)
                {
                    foreach (var item in model.listGoodsIssueItemBomViewModel)
                    {
                        if (item.bomItem_Index != Guid.Parse("00000000-0000-0000-0000-000000000000"))
                        {
                            PlanGiRunWave.Add(item.bomItem_Index);

                            var DocumentViewModel = new DocumentViewModel();
                            DocumentViewModel.documentItem_Index = item.bomItem_Index;
                            DocumentViewModel.document_Index = item.bom_Index;
                            DocumentViewModel.whereDocument_Status = 0;
                            DocumentViewModel.document_Status = 1;

                            ListDocumentViewModel.Add(DocumentViewModel);
                        }
                    }
                }

                using (var db2 = new GIDbContext())
                {
                    var transaction = db2.Database.BeginTransaction(IsolationLevel.Serializable);
                    try
                    {
                        //update status 10
                        var objectPGII = new DocumentViewModel();
                        objectPGII.listDocumentViewModel = ListDocumentViewModel;
                        var UpdatePGII = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("UpdateBomItem"), objectPGII.sJson());
                        if (!UpdatePGII)
                        {
                            throw new Exception("Update Status PGII Error 1");
                        }
                        var GI = db2.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && (c.RunWave_Status == null || c.RunWave_Status == 0)).ToList();
                        foreach (var g in GI)
                        {
                            g.Wave_Index = new Guid(model.wave_Index);
                            g.RunWave_Status = 10;
                        }
                        db2.SaveChanges();
                        transaction.Commit();
                    }

                    catch (Exception exy)
                    {
                        msglog = State + " ex Rollback " + exy.Message.ToString();
                        olog.logging("runwave", msglog);
                        transaction.Rollback();
                        throw exy;
                    }
                }
                #endregion


                var Bom = utils.SendDataApi<List<BomViewModel>>(new AppSettingConfig().GetUrl("FilterBom"), new DocumentViewModel { listDocumentViewModel = ListDocumentViewModel }.sJson());
                var BomItem = utils.SendDataApi<List<BomItemViewModel>>(new AppSettingConfig().GetUrl("FilterBomItem"), new DocumentViewModel { listDocumentViewModel = ListDocumentViewModel }.sJson());

                var planGIResultx = (from BI in BomItem
                                     join B in Bom on BI.bom_Index equals B.BOM_Index
                                     join GI in (from G in db.IM_GoodsIssue
                                                 join GIL in db.IM_GoodsIssueItemLocation on G.GoodsIssue_Index equals GIL.GoodsIssue_Index
                                                 where G.Document_Status != -1 && GIL.Document_Status != -1
                                                 group GIL by new
                                                 {
                                                     GIL.Ref_Document_No,
                                                     GIL.Ref_Document_LineNum,
                                                     GIL.Ref_Document_Index,
                                                     GIL.Ref_DocumentItem_Index
                                                 } into g
                                                 select new
                                                 {
                                                     g.Key.Ref_Document_No,
                                                     g.Key.Ref_Document_LineNum,
                                                     g.Key.Ref_Document_Index,
                                                     g.Key.Ref_DocumentItem_Index,
                                                     GITotalQty = g.Sum(s => s.TotalQty)
                                                 }
                                                  ) on BI.bomItem_Index equals GI.Ref_DocumentItem_Index into gil
                                     from lgi in gil.DefaultIfEmpty()
                                     where BI.document_Status != -1 && B.Document_Status != -1 && BI.document_Status == 1 && PlanGiRunWave.Contains(BI.bomItem_Index)
                                     select new View_PLANWAVEV
                                     {
                                         PlanGoodsIssue_Index = B.BOM_Index,
                                         Owner_Id = B.Owner_Id,
                                         Owner_Name = B.Owner_Name,
                                         Owner_Index = B.Owner_Index,
                                         DocumentType_Index = B.DocumentType_Index,
                                         DocumentType_Id = B.DocumentType_Id,
                                         DocumentType_Name = B.DocumentType_Name,
                                         PlanGoodsIssue_No = B.BOM_No,
                                         PlanGoodsIssue_Date = B.BOM_Date.toDateDefault(),
                                         PlanGoodsIssue_Due_Date = B.BOM_Due_Date.toDate(),
                                         PlanGoodsIssueItem_Index = BI.bomItem_Index,
                                         Product_Index = BI.product_Index,
                                         Product_Id = BI.product_Id,
                                         Product_Name = BI.product_Name,
                                         Product_SecondName = BI.product_SecondName,
                                         Product_ThirdName = BI.product_ThirdName,
                                         Product_Lot = BI.product_Lot,
                                         ItemStatus_Index = BI.itemStatus_Index,
                                         ItemStatus_Id = BI.itemStatus_Id,
                                         Qty = BI.qty,
                                         ItemStatus_Name = BI.itemStatus_Name,
                                         Ratio = BI.ratio,
                                         ProductConversion_Index = BI.productConversion_Index,
                                         TotalQty = BI.totalQty,
                                         ProductConversion_Id = BI.productConversion_Id,
                                         ProductConversion_Name = BI.productConversion_Name,
                                         MFG_Date = BI.mfg_Date.toDate(),
                                         EXP_Date = BI.exp_Date.toDate(),
                                         UnitWeight = BI.unitWeight,
                                         Weight = BI.weight,
                                         UnitWidth = BI.unitWidth,
                                         UnitLength = BI.unitLength,
                                         UnitHeight = BI.unitHeight,
                                         Volume = BI.volume,
                                         UnitVolume = BI.unitVolume,
                                         UnitPrice = BI.unitPrice,
                                         Price = BI.price,
                                         DocumentPriority_Status = B.DocumentPriority_Status,
                                         Document_Status = B.Document_Status,
                                         ItemDocument_Status = BI.document_Status,
                                         DocumentRef_No1 = BI.documentRef_No1,
                                         DocumentRef_No2 = BI.documentRef_No2,
                                         DocumentRef_No3 = BI.documentRef_No3,
                                         DocumentRef_No4 = BI.documentRef_No4,
                                         DocumentRef_No5 = BI.documentRef_No5,
                                         UDF_1 = BI.udf_1,
                                         UDF_2 = BI.udf_2,
                                         UDF_3 = BI.udf_3,
                                         UDF_4 = BI.udf_4,
                                         UDF_5 = BI.udf_5,
                                         PlanGoodsIssue_UDF_1 = B.UDF_1,
                                         PlanGoodsIssue_UDF_2 = B.UDF_2,
                                         PlanGoodsIssue_UDF_3 = B.UDF_3,
                                         PlanGoodsIssue_UDF_4 = B.UDF_4,
                                         PlanGoodsIssue_UDF_5 = B.UDF_5,
                                         GITotalQty = lgi?.GITotalQty,
                                     }).GroupBy(g => new
                                     {
                                         g.Product_Index,
                                         g.Product_Id,
                                         g.Product_Name,
                                         g.Product_SecondName,
                                         g.Product_ThirdName,
                                         g.Product_Lot,
                                         g.ItemStatus_Index,
                                         g.ItemStatus_Id,
                                         g.ItemStatus_Name,
                                         g.MFG_Date,
                                         g.EXP_Date,
                                         g.DocumentRef_No1,
                                         g.DocumentRef_No2,
                                         g.DocumentRef_No3,
                                         g.DocumentRef_No4,
                                         g.DocumentRef_No5,
                                         g.UDF_1,
                                         g.UDF_2,
                                         g.UDF_3,
                                         g.UDF_4,
                                         g.UDF_5,
                                         g.Owner_Index,
                                         g.PlanGoodsIssue_UDF_1,
                                         g.PlanGoodsIssue_UDF_2,
                                         g.PlanGoodsIssue_UDF_3,
                                         g.PlanGoodsIssue_UDF_4,
                                         g.PlanGoodsIssue_UDF_5
                                     }).Select(s => new
                                     {
                                         s.Key.Product_Index,
                                         s.Key.Product_Id,
                                         s.Key.Product_Name,
                                         s.Key.Product_SecondName,
                                         s.Key.Product_ThirdName,
                                         s.Key.Product_Lot,
                                         s.Key.ItemStatus_Index,
                                         s.Key.ItemStatus_Id,
                                         s.Key.ItemStatus_Name,
                                         s.Key.MFG_Date,
                                         s.Key.EXP_Date,
                                         s.Key.DocumentRef_No1,
                                         s.Key.DocumentRef_No2,
                                         s.Key.DocumentRef_No3,
                                         s.Key.DocumentRef_No4,
                                         s.Key.DocumentRef_No5,
                                         s.Key.UDF_1,
                                         s.Key.UDF_2,
                                         s.Key.UDF_3,
                                         s.Key.UDF_4,
                                         s.Key.UDF_5,
                                         total = s.Sum(x => x.TotalQty),
                                         GITotalQty = s.Sum(x => x.GITotalQty),
                                         QtyWave = s.Sum(x => x.TotalQty) - s.Sum(x => x.GITotalQty),
                                         s.Key.Owner_Index,
                                         s.Key.PlanGoodsIssue_UDF_1,
                                         s.Key.PlanGoodsIssue_UDF_2,
                                         s.Key.PlanGoodsIssue_UDF_3,
                                         s.Key.PlanGoodsIssue_UDF_4,
                                         s.Key.PlanGoodsIssue_UDF_5
                                     }).ToList();

                if (planGIResultx.Count == 0)
                {
                    throw new Exception("Plan GI not found..");
                }


                //find wave template
                var jsGetWaveRule = new { process_Index = process, wave_Index = model.wave_Index };
                var getWaveRule = utils.SendDataApi<List<WaveRuleViewModel>>(new AppSettingConfig().GetUrl("getWaveRule"), jsGetWaveRule.sJson());

                if (getWaveRule.Count == 0)
                {
                    throw new Exception("Wave Template not found.");
                }


                bool isUseAttribute = false;
                var getViewWaveTemplateEX = utils.SendDataApi<List<WaveTemplateViewModel>>(new AppSettingConfig().GetUrl("getViewWaveTemplate"), new { }.sJson());
                foreach (var waveRule in getWaveRule.OrderBy(o => o.waveRule_Seq))
                {
                    //var jsgetViewWaveTemplate = new { process_Index = process, wave_Index = model.wave_Index, rule_Index = waveRule.rule_Index };
                    //var getViewWaveTemplate = utils.SendDataApi<List<WaveTemplateViewModel>>(new AppSettingConfig().GetUrl("getViewWaveTemplate"), jsgetViewWaveTemplate.sJson());
                    var getViewWaveTemplate = getViewWaveTemplateEX.Where(c => c.process_Index == strprocess && c.wave_Index == model.wave_Index && c.rule_Index == waveRule.rule_Index);

                    var planGIWaveResult = (from BI in BomItem
                                            join B in Bom on BI.bom_Index equals B.BOM_Index
                                            join GI in (from G in db.IM_GoodsIssue
                                                        join GIL in db.IM_GoodsIssueItemLocation on G.GoodsIssue_Index equals GIL.GoodsIssue_Index
                                                        where G.Document_Status != -1 && GIL.Document_Status != -1
                                                        group GIL by new
                                                        {
                                                            GIL.Ref_Document_No,
                                                            GIL.Ref_Document_LineNum,
                                                            GIL.Ref_Document_Index,
                                                            GIL.Ref_DocumentItem_Index
                                                        } into g
                                                        select new
                                                        {
                                                            g.Key.Ref_Document_No,
                                                            g.Key.Ref_Document_LineNum,
                                                            g.Key.Ref_Document_Index,
                                                            g.Key.Ref_DocumentItem_Index,
                                                            GITotalQty = g.Sum(s => s.TotalQty)
                                                        }
                                                         ) on BI.bomItem_Index equals GI.Ref_DocumentItem_Index into gil
                                            from lgi in gil.DefaultIfEmpty()
                                            where BI.document_Status != -1 && B.Document_Status != -1
                                            select new View_PLANWAVEbyPLANGIV2
                                            {
                                                PlanGoodsIssue_Index = B.BOM_Index,
                                                Owner_Id = B.Owner_Id,
                                                Owner_Name = B.Owner_Name,
                                                Owner_Index = B.Owner_Index,
                                                DocumentType_Index = B.DocumentType_Index,
                                                DocumentType_Id = B.DocumentType_Id,
                                                DocumentType_Name = B.DocumentType_Name,
                                                PlanGoodsIssue_No = B.BOM_No,
                                                PlanGoodsIssue_Date = B.BOM_Date.toDateDefault(),
                                                PlanGoodsIssue_Due_Date = B.BOM_Due_Date.toDate(),
                                                PlanGoodsIssueItem_Index = BI.bomItem_Index,
                                                Product_Index = BI.product_Index,
                                                Product_Id = BI.product_Id,
                                                Product_Name = BI.product_Name,
                                                Product_SecondName = BI.product_SecondName,
                                                Product_ThirdName = BI.product_ThirdName,
                                                Product_Lot = BI.product_Lot,
                                                ItemStatus_Index = BI.itemStatus_Index,
                                                ItemStatus_Id = BI.itemStatus_Id,
                                                Qty = BI.qty,
                                                ItemStatus_Name = BI.itemStatus_Name,
                                                Ratio = BI.ratio,
                                                ProductConversion_Index = BI.productConversion_Index,
                                                TotalQty = BI.totalQty,
                                                ProductConversion_Id = BI.productConversion_Id,
                                                ProductConversion_Name = BI.productConversion_Name,
                                                MFG_Date = BI.mfg_Date.toDate(),
                                                EXP_Date = BI.exp_Date.toDate(),
                                                UnitWeight = BI.unitWeight,
                                                Weight = BI.weight,
                                                UnitWidth = BI.unitWidth,
                                                UnitLength = BI.unitLength,
                                                UnitHeight = BI.unitHeight,
                                                Volume = BI.volume,
                                                UnitVolume = BI.unitVolume,
                                                UnitPrice = BI.unitPrice,
                                                Price = BI.price,
                                                DocumentPriority_Status = B.DocumentPriority_Status,
                                                Document_Status = B.Document_Status,
                                                ItemDocument_Status = BI.document_Status,
                                                DocumentRef_No1 = BI.documentRef_No1,
                                                DocumentRef_No2 = BI.documentRef_No2,
                                                DocumentRef_No3 = BI.documentRef_No3,
                                                DocumentRef_No4 = BI.documentRef_No4,
                                                DocumentRef_No5 = BI.documentRef_No5,
                                                UDF_1 = BI.udf_1,
                                                UDF_2 = BI.udf_2,
                                                UDF_3 = BI.udf_3,
                                                UDF_4 = BI.udf_4,
                                                UDF_5 = BI.udf_5,
                                                //PlanGoodsIssue_UDF_1 = B.UDF_1,
                                                //PlanGoodsIssue_UDF_2 = B.UDF_2,
                                                //PlanGoodsIssue_UDF_3 = B.UDF_3,
                                                //PlanGoodsIssue_UDF_4 = B.UDF_4,
                                                //PlanGoodsIssue_UDF_5 = B.UDF_5,
                                                GITotalQty = lgi?.GITotalQty,
                                                TotalQtyRemian = (BI.totalQty ?? 0) - (lgi?.GITotalQty ?? 0)
                                            }).AsQueryable();

                    planGIWaveResult = planGIWaveResult.Where(c => PlanGiRunWave.Contains(c.PlanGoodsIssueItem_Index));

                    #region for RuleSource
                    var RuleSourceList = getViewWaveTemplate.Where(c => c.isSource == 1 && c.isSearch == 1).ToList();

                    foreach (var itemRuleSourceList in RuleSourceList)
                    {
                        if (itemRuleSourceList.ruleConditionOperation == "IN")
                        {
                            var dataarray = itemRuleSourceList.ruleCondition_Param.Replace("'", "").Split(',');
                            if (itemRuleSourceList.ruleConditionField_Name == "DocumentType_Id")
                            {
                                planGIWaveResult = planGIWaveResult.Where(c => dataarray.Contains(c.DocumentType_Id));
                            }
                            if (itemRuleSourceList.ruleConditionField_Name == "Owner_Id")
                            {
                                planGIWaveResult = planGIWaveResult.Where(c => dataarray.Contains(c.Owner_Id));
                            }
                            //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " IN (" + itemRuleSourceList.ruleCondition_Param + ") ";
                            //var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            //var predicate = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>(
                            //    Expression.Call(
                            //        Expression.PropertyOrField(param, itemRuleSourceList.ruleConditionField_Name),
                            //        "Contains", null, Expression.Constant(itemRuleSourceList.ruleCondition_Param)
                            //    ), param);
                            //planGIWaveResult = planGIWaveResult.Where(predicate);
                        }
                        else if (itemRuleSourceList.ruleConditionOperation == "=")
                        {
                            if (itemRuleSourceList.ruleConditionField_Name == "UseAttribute")
                            {
                                if (itemRuleSourceList.ruleCondition_Param.ToString().ToUpper() == "TRUE")
                                {
                                    isUseAttribute = true;
                                }
                                else
                                {
                                    isUseAttribute = false;
                                }

                            }
                            else
                            {
                                //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " = '" + itemRuleSourceList.ruleCondition_Param + "' ";
                                var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                                var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.Equal(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
                                    , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                                planGIWaveResult = planGIWaveResult.Where(lambda);
                            }


                        }
                        else if (itemRuleSourceList.ruleConditionOperation == ">")
                        {
                            //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " > '" + itemRuleSourceList.ruleCondition_Param + "' ";
                            var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.GreaterThan(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
                                , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            planGIWaveResult = planGIWaveResult.Where(lambda);

                        }
                        else if (itemRuleSourceList.ruleConditionOperation == "<")
                        {
                            //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " < '" + itemRuleSourceList.ruleCondition_Param + "' ";
                            var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.LessThan(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
                                , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            planGIWaveResult = planGIWaveResult.Where(lambda);
                        }
                        else if (itemRuleSourceList.ruleConditionOperation == "!=")
                        {
                            //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " != '" + itemRuleSourceList.ruleCondition_Param + "' ";
                            var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.NotEqual(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
                                , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            planGIWaveResult = planGIWaveResult.Where(lambda);
                        }
                        else if (itemRuleSourceList.ruleConditionOperation == ">=")
                        {
                            //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " >= '" + itemRuleSourceList.ruleCondition_Param + "' ";
                            var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.GreaterThanOrEqual(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
                                , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            planGIWaveResult = planGIWaveResult.Where(lambda);
                        }
                        else if (itemRuleSourceList.ruleConditionOperation == "<=")
                        {
                            //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " <= '" + itemRuleSourceList.ruleCondition_Param + "' ";
                            var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>((Expression)Expression.LessThanOrEqual(Expression.Property(param, itemRuleSourceList.ruleConditionField_Name)
                                , Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            planGIWaveResult = planGIWaveResult.Where(lambda);
                        }
                        else if (itemRuleSourceList.ruleConditionOperation == "Like")
                        {
                            //setWhereSource += " And " + itemRuleSourceList.ruleConditionField_Name + " Like '" + itemRuleSourceList.ruleCondition_Param + "' ";
                            var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            var predicate = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>(
                                Expression.Call(
                                    Expression.PropertyOrField(param, itemRuleSourceList.ruleConditionField_Name),
                                    "Contains", null, Expression.Constant(itemRuleSourceList.ruleCondition_Param.Replace("'", ""))
                                ), param);
                            planGIWaveResult = planGIWaveResult.Where(predicate);
                        }
                    }
                    #endregion

                    #region for RuleDesSort
                    var RuleSourceSortList = getViewWaveTemplate.Where(c => c.isSource == 1 && c.isSort == 1).ToList();

                    string setWhereSourceSort = "";

                    if (RuleSourceSortList.Count > 0)
                    {
                        setWhereSourceSort += " Order by ";
                    }

                    int iRowsSourceSort = 0;
                    foreach (var itemRuleSourceSortList in RuleSourceSortList)
                    {
                        if (iRowsSourceSort == 0)
                        {
                            setWhereSourceSort += itemRuleSourceSortList.ruleConditionField_Name + ' ' + itemRuleSourceSortList.ruleCondition_Param;
                            var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, string>>(Expression.Property(param, itemRuleSourceSortList.ruleConditionField_Name), param);
                            if (itemRuleSourceSortList.ruleCondition_Param.ToUpper() == "DESC")
                            {
                                planGIWaveResult = planGIWaveResult.OrderByDescending(lambda);
                            }
                            else /*if (itemRuleSourceSortList.ruleCondition_Param.ToUpper() == "DESC")*/
                            {
                                planGIWaveResult = planGIWaveResult.OrderBy(lambda);
                            }
                        }
                        else
                        {
                            setWhereSourceSort += "," + itemRuleSourceSortList.ruleConditionField_Name + ' ' + itemRuleSourceSortList.ruleCondition_Param;
                            var param = Expression.Parameter(typeof(View_PLANWAVEbyPLANGIV2), "x");
                            var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, string>>(Expression.Property(param, itemRuleSourceSortList.ruleConditionField_Name), param);
                            if (itemRuleSourceSortList.ruleCondition_Param.ToUpper() == "DESC")
                            {
                                planGIWaveResult = planGIWaveResult.OrderByDescending(lambda);
                            }
                            else /*if (itemRuleSourceSortList.ruleCondition_Param.ToUpper() == "DESC")*/
                            {
                                planGIWaveResult = planGIWaveResult.OrderBy(lambda);
                            }
                        }
                        iRowsSourceSort = iRowsSourceSort + 1;

                    }
                    #endregion



                    var planGIWaveResult2 = planGIWaveResult.ToList();

                    //if (planGIWaveResult2.Count != PlanGiRunWave.Count)
                    //{
                    //    var listpgii = PlanGiRunWave.Where(c => !planGIWaveResult2.Select(s => s.PlanGoodsIssueItem_Index).Contains(c)).ToList();

                    //    if (listpgii.Count != 0)
                    //    {
                    //        ListDocumentViewModel = new List<DocumentViewModel>();

                    //        var pgii = model.listGoodsIssueItemBomViewModel.Where(c => listpgii.Contains(c.BOMItem_Index)).ToList();
                    //        foreach (var resultpgii in pgii)
                    //        {
                    //            listpgiinotinsert.Add(resultpgii);

                    //            var PlanGiRunWaveitem = new DocumentViewModel();
                    //            PlanGiRunWaveitem.documentItem_Index = resultpgii.BOMItem_Index;
                    //            PlanGiRunWaveitem.whereDocument_Status = 1;
                    //            PlanGiRunWaveitem.document_Status = 0;

                    //            ListDocumentViewModel.Add(PlanGiRunWaveitem);
                    //        }

                    //        var objectPGII = new DocumentViewModel();
                    //        objectPGII.listDocumentViewModel = ListDocumentViewModel;
                    //        var UpdatePGII = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("UpdateBomItem"), objectPGII.sJson());
                    //        if (!UpdatePGII)
                    //        {
                    //            throw new Exception("Update Status PGII Error 2");
                    //        }
                    //    }
                    //}

                    // LOOP Group SUM PLAN GI
                    foreach (var item in planGIResultx)
                    {
                        var planGIWaveResult3 = planGIWaveResult2.AsQueryable();
                        var strwhere = new getViewBinbalanceViewModel();
                        //GET Condition  From Plan GI
                        #region query Plag Gi
                        if (item.Owner_Index.ToString() != "")
                        {
                            //SqlWhere += " And Convert(Nvarchar(200) ,Owner_Index) =  '" + item.Owner_Index.ToString() + "' ";
                            //SqlWhere += " And Owner_Index =  '" + item.Owner_Index + "' ";
                            strwhere.Owner_Index = item.Owner_Index;
                            planGIWaveResult3 = planGIWaveResult3.Where(c => c.Owner_Index == item.Owner_Index);
                        }
                        if (item.Product_Index.ToString() != "")
                        {
                            //SqlWhere += " And Convert(Nvarchar(200) , Product_Index ) = '" + item.Product_Index.ToString() + "' ";
                            //SqlWhere += " And Product_Index  = '" + item.Product_Index + "' ";
                            strwhere.Product_Index = item.Product_Index;
                            planGIWaveResult3 = planGIWaveResult3.Where(c => c.Product_Index == item.Product_Index);
                        }

                        //if (item.Product_Lot != null)
                        //{
                        //    if (item.Product_Lot.ToString() != "")
                        //    {
                        //        //SqlWhere += " And Product_Lot = '" + item.Product_Lot.ToString() + "' ";
                        //        strwhere.Product_Lot = item.Product_Lot;
                        //        planGIWaveResult3 = planGIWaveResult3.Where(c => c.Product_Lot == item.Product_Lot);
                        //    }
                        //}
                        if (item.ItemStatus_Index.ToString() != "")
                        {
                            //SqlWhere += " And Convert(Nvarchar(200) ,ItemStatus_Index) =  '" + item.ItemStatus_Index.ToString() + "' ";
                            //SqlWhere += " And ItemStatus_Index =  '" + item.ItemStatus_Index + "' ";
                            strwhere.ItemStatus_Index = item.ItemStatus_Index;
                            planGIWaveResult3 = planGIWaveResult3.Where(c => c.ItemStatus_Index == item.ItemStatus_Index);
                        }
                        if (item.MFG_Date != null)
                        {
                            if (item.MFG_Date.ToString() != "")
                            {
                                //strwhere.MFG_Date = item.MFG_Date;
                                // SqlWhere += " And MFG_Date = @MFG_Date ";
                            }
                        }
                        if (item.EXP_Date != null)
                        {
                            if (item.EXP_Date.ToString() != "")
                            {
                                //strwhere.EXP_Date = item.EXP_Date;
                                //SqlWhere += " And EXP_Date = @EXP_Date ";
                            }
                        }
                        if (isUseAttribute == true)
                        {
                            // ADD UDF 1-5 
                            strwhere.isUseAttribute = isUseAttribute;
                            if (item.UDF_1 != null)
                            {
                                //SqlWhere += " And Isnull(UDF_1,'') = '" + item.UDF_1.ToString() + "'";
                                strwhere.UDF_1 = item.UDF_1;
                                planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_1 == item.UDF_1);
                            }

                            if (item.UDF_2 != null)
                            {
                                //SqlWhere += " And  Isnull( UDF_2,'') = '" + item.UDF_2.ToString() + "'";
                                strwhere.UDF_2 = item.UDF_2;
                                planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_2 == item.UDF_2);
                            }

                            if (item.UDF_3 != null)
                            {
                                //SqlWhere += " And  Isnull(UDF_3,'') = '" + item.UDF_3.ToString() + "'";
                                strwhere.UDF_3 = item.UDF_3;
                                planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_3 == item.UDF_3);
                            }

                            if (item.UDF_4 != null)
                            {
                                //SqlWhere += " And  Isnull(UDF_4,'') = '" + item.UDF_4.ToString() + "'";
                                strwhere.UDF_4 = item.UDF_4;
                                planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_4 == item.UDF_4);
                            }

                            if (item.UDF_5 != null)
                            {
                                //SqlWhere += " And  Isnull(UDF_5,'') = '" + item.UDF_5.ToString() + "'";
                                strwhere.UDF_5 = item.UDF_5;
                                planGIWaveResult3 = planGIWaveResult3.Where(c => c.UDF_5 == item.UDF_5);
                            }
                        }
                        #endregion

                        //planGIWaveResult = planGIWaveResult.Where(setWhereSource);

                        if (planGIWaveResult3.ToList().Count < 1)
                        {
                            continue;
                        }
                        #region update isuse and runwave status 20
                        strwhere.isuse = model.goodsIssue_Index;
                        var listDataBinbalance = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("updateIsuseViewBinbalance"), strwhere.sJson());
                        if (listDataBinbalance)
                        {
                            using (var db3 = new GIDbContext())
                            {
                                var transaction = db3.Database.BeginTransaction(IsolationLevel.Serializable);
                                try
                                {
                                    var GI = db3.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 10).ToList();
                                    foreach (var g in GI)
                                    {
                                        g.RunWave_Status = 20;
                                    }
                                    db3.SaveChanges();
                                    transaction.Commit();
                                }
                                catch (Exception exy)
                                {
                                    msglog = State + " ex Rollback " + exy.Message.ToString();
                                    olog.logging("runwave", msglog);
                                    transaction.Rollback();
                                    throw exy;
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Update IsUse Error");
                        }
                        #endregion

                        // Assign Qty for  wave Loop
                        strwhere.isuse = model.goodsIssue_Index;
                        strwhere.isActive = true;
                        int? WhereQtyBal = null;
                        decimal? qty_Per_Tag = null;
                        qty_Per_Tag = listDataProduct2.FirstOrDefault(c => c.product_Id == planGIWaveResult3.FirstOrDefault().Product_Id).qty_Per_Tag;

                        if (waveRule.rule_Name.ToUpper() == "FULL")
                        {
                            strwhere.qtyPreTag = listDataProduct2.FirstOrDefault(c => c.product_Id == planGIWaveResult3.FirstOrDefault().Product_Id).qty_Per_Tag;
                            WhereQtyBal = Convert.ToInt16(Math.Floor((planGIWaveResult3.Sum(s => s.TotalQty) ?? 0) / (qty_Per_Tag ?? 0)));
                            var chkFull = CraterGILBy_Binbalance(WhereQtyBal, qty_Per_Tag, strwhere, listDataProduct2, model, getViewWaveTemplate.ToList(), planGIWaveResult3.ToList(), listDataLocation2);
                            #region update isuse = '' and runwave 50
                            strwhere.isActive = true;
                            var updateIsuseViewBinbalance2 = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("updateIsuseViewBinbalance"), strwhere.sJson());
                            if (updateIsuseViewBinbalance2)
                            {
                                using (var db5 = new GIDbContext())
                                {
                                    var transaction = db5.Database.BeginTransaction(IsolationLevel.Serializable);
                                    try
                                    {
                                        var GI = db5.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 40).ToList();
                                        foreach (var g in GI)
                                        {
                                            g.RunWave_Status = 50;
                                        }
                                        db5.SaveChanges();
                                        transaction.Commit();
                                    }
                                    catch (Exception exy)
                                    {
                                        msglog = State + " ex Rollback " + exy.Message.ToString();
                                        olog.logging("runwave", msglog);
                                        transaction.Rollback();
                                        throw exy;
                                    }
                                }
                            }
                            else
                            {
                                throw new Exception("Update IsUse By Error");
                            }
                            #endregion
                            continue;
                            //if (chkFull)
                            //{
                            //    continue;
                            //}
                            //else
                            //{
                            //    var resultFull = new actionResultRunWaveV2ViewModelViewModel();
                            //    resultFull.resultIsUse = false;
                            //    resultFull.resultMsg = "Error Full";
                            //    return result;
                            //}
                        }


                        decimal? QtyPlanGIRemian = 0;
                        foreach (var itemPlanGI in planGIWaveResult3)
                        {
                            var ListGoodsIssueItemLocation = new List<im_GoodsIssueItemLocation>();

                            QtyPlanGIRemian = itemPlanGI.TotalQty - (itemPlanGI.GITotalQty ?? 0);
                            if (QtyPlanGIRemian <= 0)
                            {
                                break;
                            }
                            //chkBinCardReserve = GIL
                            //var chkGIL = db.IM_GoodsIssueItemLocation.Where(c => c.Ref_Document_Index == itemPlanGI.PlanGoodsIssue_Index && c.Ref_DocumentItem_Index == itemPlanGI.PlanGoodsIssueItem_Index && c.Document_Status != -1).ToList();
                            //if (chkGIL.Count() != 0)
                            //{

                            //    var chkBinCardReserve = new PickbinbalanceViewModel();
                            //    chkBinCardReserve.ref_Document_Index = chkGIL.FirstOrDefault().GoodsIssue_Index.ToString();
                            //    chkBinCardReserve.ref_DocumentItem_Index = chkGIL.FirstOrDefault().GoodsIssueItemLocation_Index.ToString();
                            //    var countBinCardReserve = utils.SendDataApi<int>(new AppSettingConfig().GetUrl("chkBinCardReserve"), chkBinCardReserve.sJson());
                            //    if (chkGIL.Count() != countBinCardReserve)
                            //    {
                            //        using (var db7 = new GIDbContext())
                            //        {
                            //            var transaction = db7.Database.BeginTransaction(IsolationLevel.Serializable);
                            //            try
                            //            {
                            //                db7.RemoveRange(chkGIL);
                            //                db7.SaveChanges();
                            //                transaction.Commit();
                            //            }

                            //            catch (Exception exy)
                            //            {
                            //                msglog = State + " ex Rollback " + exy.Message.ToString();
                            //                olog.logging("runwave", msglog);
                            //                transaction.Rollback();
                            //                throw exy;
                            //            }
                            //        }
                            //        QtyPlanGIRemian = itemPlanGI.TotalQty - 0;
                            //    }
                            //}

                            #region view_waveBinbalance2
                            //strwhere.isuse = model.goodsIssue_Index;
                            //strwhere.isActive = true;
                            var listDataBinbalance2 = utils.SendDataApi<List<BinBalanceViewModel>>(new AppSettingConfig().GetUrl("getViewBinbalance"), strwhere.sJson());

                            var GIDate = model.goodsIssue_Date.toDate();
                            var View_WaveBinBalance2 = (from BB in listDataBinbalance2
                                                        join LC in listDataLocation2 on BB.location_Index equals LC.location_Index into gj
                                                        from L in gj.DefaultIfEmpty()
                                                        join Prd in listDataProduct2 on BB.product_Index equals Prd.product_Index
                                                        where !(L.locationType_Index == Guid.Parse("14C5F85D-137D-470E-8C70-C1E535005DC3") || L.locationType_Index == Guid.Parse("2E9338D3-0931-4E36-B240-782BF9508641") || L.locationType_Index == Guid.Parse("65A2D25D-5520-47D3-8776-AE064D909285"))
                                                        && (BB.goodsReceive_EXP_Date != null ? BB.goodsReceive_EXP_Date.sParse<DateTime>().Subtract(DateTime.Now.AddDays(-1)).Days : 1) > (Prd.ProductShelfLife_D ?? 0)
                                                        && (waveRule.rule_Name.ToUpper() == "PATIAL" ? (BB.binBalance_QtyBal - BB.binBalance_QtyReserve) < qty_Per_Tag : BB.binBalance_QtyBal > 0)
                                                        && (L.BlockPick ?? 0) != 1
                                                        && BB.goodsReceive_Date.Date <= GIDate.Value.Date
                                                        select new View_WaveBinBalanceViewModel
                                                        {
                                                            binBalance_Index = BB.binBalance_Index.ToString(),
                                                            owner_Index = BB.owner_Index.ToString(),
                                                            owner_Id = BB.owner_Id,
                                                            owner_Name = BB.owner_Name,
                                                            location_Index = BB.location_Index.ToString(),
                                                            location_Id = BB.location_Id,
                                                            location_Name = BB.location_Name,
                                                            goodsReceive_Index = BB.goodsReceive_Index.ToString(),
                                                            goodsReceive_No = BB.goodsReceive_No,
                                                            goodsReceive_Date = BB.goodsReceive_Date.ToString(),
                                                            goodsReceiveItem_Index = BB.goodsReceiveItem_Index.ToString(),
                                                            goodsReceiveItemLocation_Index = BB.goodsReceiveItemLocation_Index.ToString(),
                                                            tagItem_Index = BB.tagItem_Index.ToString(),
                                                            tag_Index = BB.tag_Index.ToString(),
                                                            tag_No = BB.tag_No,
                                                            product_Index = BB.product_Index.ToString(),
                                                            product_Id = BB.product_Id,
                                                            product_Name = BB.product_Name,
                                                            product_SecondName = BB.product_SecondName,
                                                            product_ThirdName = BB.product_ThirdName,
                                                            product_Lot = BB.product_Lot,
                                                            itemStatus_Index = BB.itemStatus_Index.ToString(),
                                                            itemStatus_Id = BB.itemStatus_Id,
                                                            itemStatus_Name = BB.itemStatus_Name,
                                                            goodsReceive_MFG_Date = BB.goodsReceive_MFG_Date.ToString(),
                                                            goodsReceive_EXP_Date = BB.goodsReceive_EXP_Date.ToString(),
                                                            goodsReceive_ProductConversion_Index = BB.goodsReceive_ProductConversion_Index.ToString(),
                                                            goodsReceive_ProductConversion_Id = BB.goodsReceive_ProductConversion_Id.ToString(),
                                                            goodsReceive_ProductConversion_Name = BB.goodsReceive_ProductConversion_Name.ToString(),


                                                            binBalance_Ratio = BB.binBalance_Ratio,
                                                            binBalance_QtyBegin = BB.binBalance_QtyBegin,
                                                            binBalance_WeightBegin = BB.binBalance_WeightBegin,
                                                            binBalance_WeightBegin_Index = BB.binBalance_WeightBegin_Index,
                                                            binBalance_WeightBegin_Id = BB.binBalance_WeightBegin_Id,
                                                            binBalance_WeightBegin_Name = BB.binBalance_WeightBegin_Name,
                                                            binBalance_WeightBeginRatio = BB.binBalance_WeightBeginRatio,
                                                            binBalance_NetWeightBegin = BB.binBalance_NetWeightBegin,
                                                            binBalance_NetWeightBegin_Index = BB.binBalance_NetWeightBegin_Index,
                                                            binBalance_NetWeightBegin_Id = BB.binBalance_NetWeightBegin_Id,
                                                            binBalance_NetWeightBegin_Name = BB.binBalance_NetWeightBegin_Name,
                                                            binBalance_NetWeightBeginRatio = BB.binBalance_NetWeightBeginRatio,
                                                            binBalance_GrsWeightBegin = BB.binBalance_GrsWeightBegin,
                                                            binBalance_GrsWeightBegin_Index = BB.binBalance_GrsWeightBegin_Index,
                                                            binBalance_GrsWeightBegin_Id = BB.binBalance_GrsWeightBegin_Id,
                                                            binBalance_GrsWeightBegin_Name = BB.binBalance_GrsWeightBegin_Name,
                                                            binBalance_GrsWeightBeginRatio = BB.binBalance_GrsWeightBeginRatio,
                                                            binBalance_WidthBegin = BB.binBalance_WidthBegin,
                                                            binBalance_WidthBegin_Index = BB.binBalance_WidthBegin_Index,
                                                            binBalance_WidthBegin_Id = BB.binBalance_WidthBegin_Id,
                                                            binBalance_WidthBegin_Name = BB.binBalance_WidthBegin_Name,
                                                            binBalance_WidthBeginRatio = BB.binBalance_WidthBeginRatio,
                                                            binBalance_LengthBegin = BB.binBalance_LengthBegin,
                                                            binBalance_LengthBegin_Index = BB.binBalance_LengthBegin_Index,
                                                            binBalance_LengthBegin_Id = BB.binBalance_LengthBegin_Id,
                                                            binBalance_LengthBegin_Name = BB.binBalance_LengthBegin_Name,
                                                            binBalance_LengthBeginRatio = BB.binBalance_LengthBeginRatio,
                                                            binBalance_HeightBegin = BB.binBalance_HeightBegin,
                                                            binBalance_HeightBegin_Index = BB.binBalance_HeightBegin_Index,
                                                            binBalance_HeightBegin_Id = BB.binBalance_HeightBegin_Id,
                                                            binBalance_HeightBegin_Name = BB.binBalance_HeightBegin_Name,
                                                            binBalance_HeightBeginRatio = BB.binBalance_HeightBeginRatio,
                                                            binBalance_UnitVolumeBegin = BB.binBalance_UnitVolumeBegin,
                                                            binBalance_VolumeBegin = BB.binBalance_VolumeBegin,
                                                            binBalance_QtyBal = BB.binBalance_QtyBal,
                                                            binBalance_UnitWeightBal = BB.binBalance_UnitWeightBal,
                                                            binBalance_UnitWeightBal_Index = BB.binBalance_UnitWeightBal_Index,
                                                            binBalance_UnitWeightBal_Id = BB.binBalance_UnitWeightBal_Id,
                                                            binBalance_UnitWeightBal_Name = BB.binBalance_UnitWeightBal_Name,
                                                            binBalance_UnitWeightBalRatio = BB.binBalance_UnitWeightBalRatio,
                                                            binBalance_WeightBal = BB.binBalance_WeightBal,
                                                            binBalance_WeightBal_Index = BB.binBalance_WeightBal_Index,
                                                            binBalance_WeightBal_Id = BB.binBalance_WeightBal_Id,
                                                            binBalance_WeightBal_Name = BB.binBalance_WeightBal_Name,
                                                            binBalance_WeightBalRatio = BB.binBalance_WeightBalRatio,
                                                            binBalance_UnitNetWeightBal = BB.binBalance_UnitNetWeightBal,
                                                            binBalance_UnitNetWeightBal_Index = BB.binBalance_UnitNetWeightBal_Index,
                                                            binBalance_UnitNetWeightBal_Id = BB.binBalance_UnitNetWeightBal_Id,
                                                            binBalance_UnitNetWeightBal_Name = BB.binBalance_UnitNetWeightBal_Name,
                                                            binBalance_UnitNetWeightBalRatio = BB.binBalance_UnitNetWeightBalRatio,
                                                            binBalance_NetWeightBal = BB.binBalance_NetWeightBal,
                                                            binBalance_NetWeightBal_Index = BB.binBalance_NetWeightBal_Index,
                                                            binBalance_NetWeightBal_Id = BB.binBalance_NetWeightBal_Id,
                                                            binBalance_NetWeightBal_Name = BB.binBalance_NetWeightBal_Name,
                                                            binBalance_NetWeightBalRatio = BB.binBalance_NetWeightBalRatio,
                                                            binBalance_UnitGrsWeightBal = BB.binBalance_UnitGrsWeightBal,
                                                            binBalance_UnitGrsWeightBal_Index = BB.binBalance_UnitGrsWeightBal_Index,
                                                            binBalance_UnitGrsWeightBal_Id = BB.binBalance_UnitGrsWeightBal_Id,
                                                            binBalance_UnitGrsWeightBal_Name = BB.binBalance_UnitGrsWeightBal_Name,
                                                            binBalance_UnitGrsWeightBalRatio = BB.binBalance_UnitGrsWeightBalRatio,
                                                            binBalance_GrsWeightBal = BB.binBalance_GrsWeightBal,
                                                            binBalance_GrsWeightBal_Index = BB.binBalance_GrsWeightBal_Index,
                                                            binBalance_GrsWeightBal_Id = BB.binBalance_GrsWeightBal_Id,
                                                            binBalance_GrsWeightBal_Name = BB.binBalance_GrsWeightBal_Name,
                                                            binBalance_GrsWeightBalRatio = BB.binBalance_GrsWeightBalRatio,
                                                            binBalance_UnitWidthBal = BB.binBalance_UnitWidthBal,
                                                            binBalance_UnitWidthBal_Index = BB.binBalance_UnitWidthBal_Index,
                                                            binBalance_UnitWidthBal_Id = BB.binBalance_UnitWidthBal_Id,
                                                            binBalance_UnitWidthBal_Name = BB.binBalance_UnitWidthBal_Name,
                                                            binBalance_UnitWidthBalRatio = BB.binBalance_UnitWidthBalRatio,
                                                            binBalance_WidthBal = BB.binBalance_WidthBal,
                                                            binBalance_WidthBal_Index = BB.binBalance_WidthBal_Index,
                                                            binBalance_WidthBal_Id = BB.binBalance_WidthBal_Id,
                                                            binBalance_WidthBal_Name = BB.binBalance_WidthBal_Name,
                                                            binBalance_WidthBalRatio = BB.binBalance_WidthBalRatio,
                                                            binBalance_UnitLengthBal = BB.binBalance_UnitLengthBal,
                                                            binBalance_UnitLengthBal_Index = BB.binBalance_UnitLengthBal_Index,
                                                            binBalance_UnitLengthBal_Id = BB.binBalance_UnitLengthBal_Id,
                                                            binBalance_UnitLengthBal_Name = BB.binBalance_UnitLengthBal_Name,
                                                            binBalance_UnitLengthBalRatio = BB.binBalance_UnitLengthBalRatio,
                                                            binBalance_LengthBal = BB.binBalance_LengthBal,
                                                            binBalance_LengthBal_Index = BB.binBalance_LengthBal_Index,
                                                            binBalance_LengthBal_Id = BB.binBalance_LengthBal_Id,
                                                            binBalance_LengthBal_Name = BB.binBalance_LengthBal_Name,
                                                            binBalance_LengthBalRatio = BB.binBalance_LengthBalRatio,
                                                            binBalance_UnitHeightBal = BB.binBalance_UnitHeightBal,
                                                            binBalance_UnitHeightBal_Index = BB.binBalance_UnitHeightBal_Index,
                                                            binBalance_UnitHeightBal_Id = BB.binBalance_UnitHeightBal_Id,
                                                            binBalance_UnitHeightBal_Name = BB.binBalance_UnitHeightBal_Name,
                                                            binBalance_UnitHeightBalRatio = BB.binBalance_UnitHeightBalRatio,
                                                            binBalance_HeightBal = BB.binBalance_HeightBal,
                                                            binBalance_HeightBal_Index = BB.binBalance_HeightBal_Index,
                                                            binBalance_HeightBal_Id = BB.binBalance_HeightBal_Id,
                                                            binBalance_HeightBal_Name = BB.binBalance_HeightBal_Name,
                                                            binBalance_HeightBalRatio = BB.binBalance_HeightBalRatio,
                                                            binBalance_UnitVolumeBal = BB.binBalance_UnitVolumeBal,
                                                            binBalance_VolumeBal = BB.binBalance_VolumeBal,
                                                            binBalance_QtyReserve = BB.binBalance_QtyReserve,
                                                            binBalance_WeightReserve = BB.binBalance_WeightReserve,
                                                            binBalance_WeightReserve_Index = BB.binBalance_WeightReserve_Index,
                                                            binBalance_WeightReserve_Id = BB.binBalance_WeightReserve_Id,
                                                            binBalance_WeightReserve_Name = BB.binBalance_WeightReserve_Name,
                                                            binBalance_WeightReserveRatio = BB.binBalance_WeightReserveRatio,
                                                            binBalance_NetWeightReserve = BB.binBalance_NetWeightReserve,
                                                            binBalance_NetWeightReserve_Index = BB.binBalance_NetWeightReserve_Index,
                                                            binBalance_NetWeightReserve_Id = BB.binBalance_NetWeightReserve_Id,
                                                            binBalance_NetWeightReserve_Name = BB.binBalance_NetWeightReserve_Name,
                                                            binBalance_NetWeightReserveRatio = BB.binBalance_NetWeightReserveRatio,
                                                            binBalance_GrsWeightReserve = BB.binBalance_GrsWeightReserve,
                                                            binBalance_GrsWeightReserve_Index = BB.binBalance_GrsWeightReserve_Index,
                                                            binBalance_GrsWeightReserve_Id = BB.binBalance_GrsWeightReserve_Id,
                                                            binBalance_GrsWeightReserve_Name = BB.binBalance_GrsWeightReserve_Name,
                                                            binBalance_GrsWeightReserveRatio = BB.binBalance_GrsWeightReserveRatio,
                                                            binBalance_WidthReserve = BB.binBalance_WidthReserve,
                                                            binBalance_WidthReserve_Index = BB.binBalance_WidthReserve_Index,
                                                            binBalance_WidthReserve_Id = BB.binBalance_WidthReserve_Id,
                                                            binBalance_WidthReserve_Name = BB.binBalance_WidthReserve_Name,
                                                            binBalance_WidthReserveRatio = BB.binBalance_WidthReserveRatio,
                                                            binBalance_LengthReserve = BB.binBalance_LengthReserve,
                                                            binBalance_LengthReserve_Index = BB.binBalance_LengthReserve_Index,
                                                            binBalance_LengthReserve_Id = BB.binBalance_LengthReserve_Id,
                                                            binBalance_LengthReserve_Name = BB.binBalance_LengthReserve_Name,
                                                            binBalance_LengthReserveRatio = BB.binBalance_LengthReserveRatio,
                                                            binBalance_HeightReserve = BB.binBalance_HeightReserve,
                                                            binBalance_HeightReserve_Index = BB.binBalance_HeightReserve_Index,
                                                            binBalance_HeightReserve_Id = BB.binBalance_HeightReserve_Id,
                                                            binBalance_HeightReserve_Name = BB.binBalance_HeightReserve_Name,
                                                            binBalance_HeightReserveRatio = BB.binBalance_HeightReserveRatio,
                                                            binBalance_UnitVolumeReserve = BB.binBalance_UnitVolumeReserve,
                                                            binBalance_VolumeReserve = BB.binBalance_VolumeReserve,


                                                            productConversion_Index = BB.productConversion_Index.ToString(),
                                                            productConversion_Id = BB.productConversion_Id,
                                                            productConversion_Name = BB.productConversion_Name,

                                                            unitPrice = BB.unitPrice,
                                                            unitPrice_Index = BB.unitPrice_Index,
                                                            unitPrice_Id = BB.unitPrice_Id,
                                                            unitPrice_Name = BB.unitPrice_Name,
                                                            price = BB.price,
                                                            price_Index = BB.price_Index,
                                                            price_Id = BB.price_Id,
                                                            price_Name = BB.price_Name,

                                                            udf_1 = BB.uDF_1,
                                                            udf_2 = BB.uDF_2,
                                                            udf_3 = BB.uDF_3,
                                                            udf_4 = BB.uDF_4,
                                                            udf_5 = BB.uDF_5,
                                                            create_By = BB.create_By,
                                                            create_Date = BB.create_Date.ToString(),
                                                            update_By = BB.update_By,
                                                            update_Date = BB.update_Date.ToString(),
                                                            cancel_By = BB.cancel_By,
                                                            cancel_Date = BB.cancel_Date.ToString(),
                                                            isUse = BB.isUse,
                                                            binBalance_Status = BB.binBalance_Status,
                                                            picking_Seq = L.picking_Seq,
                                                            ageRemain = BB.ageRemain,

                                                            invoice_No = BB.invoice_No,
                                                            declaration_No = BB.declaration_No,
                                                            hs_Code = BB.hs_Code,
                                                            conutry_of_Origin = BB.conutry_of_Origin,
                                                            tax1 = BB.tax1,
                                                            tax1_Currency_Index = BB.tax1_Currency_Index,
                                                            tax1_Currency_Id = BB.tax1_Currency_Id,
                                                            tax1_Currency_Name = BB.tax1_Currency_Name,
                                                            tax2 = BB.tax2,
                                                            tax2_Currency_Index = BB.tax2_Currency_Index,
                                                            tax2_Currency_Id = BB.tax2_Currency_Id,
                                                            tax2_Currency_Name = BB.tax2_Currency_Name,
                                                            tax3 = BB.tax3,
                                                            tax3_Currency_Index = BB.tax3_Currency_Index,
                                                            tax3_Currency_Id = BB.tax3_Currency_Id,
                                                            tax3_Currency_Name = BB.tax3_Currency_Name,
                                                            tax4 = BB.tax4,
                                                            tax4_Currency_Index = BB.tax4_Currency_Index,
                                                            tax4_Currency_Id = BB.tax4_Currency_Id,
                                                            tax4_Currency_Name = BB.tax4_Currency_Name,
                                                            tax5 = BB.tax5,
                                                            tax5_Currency_Index = BB.tax5_Currency_Index,
                                                            tax5_Currency_Id = BB.tax5_Currency_Id,
                                                            tax5_Currency_Name = BB.tax5_Currency_Name,


                                                            productShelfLife_D = Prd.ProductShelfLife_D != null ? Prd.ProductShelfLife_D : 0,
                                                        }).AsQueryable();

                            #endregion

                            #region for RuleDesSort
                            var RuleDesList2 = getViewWaveTemplate.Where(c => c.isDestination == 1 && c.isSearch == 1).ToList();

                            //var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>(e, param);

                            foreach (var itemRuleDesList in RuleDesList2)
                            {
                                if (itemRuleDesList.ruleConditionOperation == "IN")
                                {
                                    if (itemRuleDesList.ruleConditionField_Name == "Zone_Id")
                                    {
                                        //setWhereDes += " And  Location_Index   in (  select   Location_Index  from ms_ZoneLocation   where  IsDelete <> -1 and Zone_Index  in (select Zone_Index from ms_Zone where IsDelete <> -1 and " + itemRuleDesList.ruleConditionField_Name + " IN (" + itemRuleDesList.ruleCondition_Param + " )" + ")) ";
                                        var listDataZoneLocation = utils.SendDataApi<List<ZoneLocationViewModel>>(new AppSettingConfig().GetUrl("getZoneLocationMaster"), new { }.sJson());
                                        var listDataZone = utils.SendDataApi<List<ZoneViewModel>>(new AppSettingConfig().GetUrl("getZoneMaster"), new { }.sJson());

                                        //var param = Expression.Parameter(typeof(ZoneViewModel), "x");
                                        //var predicate = Expression.Lambda<Func<ZoneViewModel, bool>>(
                                        //    Expression.Call(
                                        //        Expression.PropertyOrField(param, itemRuleDesList.ruleConditionField_Name),
                                        //        "Contains", null, Expression.Constant(itemRuleDesList.ruleCondition_Param)
                                        //    ), param);
                                        var dataarray = itemRuleDesList.ruleCondition_Param.Replace("'", "").Split(',');
                                        var dataZone = listDataZone.Where(c => dataarray.Contains(c.zone_Id)).ToList();
                                        var zoneArray = new List<Guid?>();
                                        foreach (var z in dataZone)
                                        {
                                            zoneArray.Add(z.zone_Index);
                                        }
                                        var listLocation_index = listDataZoneLocation.Where(c => zoneArray.Contains(c.zone_Index)).Select(s => s.location_Index.ToString()).ToList();
                                        View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => listLocation_index.Contains(c.location_Index));
                                    }
                                    else
                                    {
                                        var dataarray = itemRuleDesList.ruleCondition_Param.Replace("'", "").Split(',');
                                        if (itemRuleDesList.ruleConditionField_Name == "GoodsReceive_Date")
                                        {
                                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.goodsReceive_Date));
                                        }
                                        if (itemRuleDesList.ruleConditionField_Name == "GoodsReceive_No")
                                        {
                                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.goodsReceive_No));
                                        }
                                        if (itemRuleDesList.ruleConditionField_Name == "ItemStatus_Id")
                                        {
                                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.itemStatus_Id));
                                        }
                                        if (itemRuleDesList.ruleConditionField_Name == "Location_Name")
                                        {
                                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.location_Name));
                                        }
                                        if (itemRuleDesList.ruleConditionField_Name == "Locationtype_Id")
                                        {
                                            //View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.location));
                                        }
                                        if (itemRuleDesList.ruleConditionField_Name == "Product_Id")
                                        {
                                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.product_Id));
                                        }
                                        if (itemRuleDesList.ruleConditionField_Name == "Product_Lot")
                                        {
                                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.product_Lot));
                                        }
                                        if (itemRuleDesList.ruleConditionField_Name == "Warehouse")
                                        {
                                            //planGIWaveResult = planGIWaveResult.Where(c => dataarray.Contains(c.Warehouse));
                                        }

                                        //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " IN (" + itemRuleDesList.ruleCondition_Param + ") ";
                                        //var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                        //var predicate = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>(
                                        //    Expression.Call(
                                        //        Expression.PropertyOrField(param, itemRuleDesList.ruleConditionField_Name),
                                        //        "Contains", null, Expression.Constant(itemRuleDesList.ruleCondition_Param)
                                        //    ), param);
                                        //View_WaveBinBalance = View_WaveBinBalance.Where(predicate);
                                    }
                                }
                                else if (itemRuleDesList.ruleConditionOperation == "=")
                                {
                                    if (itemRuleDesList.ruleConditionField_Name == "Zone_Id")
                                    {
                                        //setWhereDes += "  And  Location_Index   in (  select   Location_Index  from ms_ZoneLocation   where IsDelete <> -1 and Zone_Index  in (select Zone_Index from ms_Zone where IsDelete <> -1 and " + itemRuleDesList.ruleConditionField_Name + " = '" + itemRuleDesList.ruleCondition_Param + "' " + ")) ";
                                        var listDataZoneLocation = utils.SendDataApi<List<ZoneLocationViewModel>>(new AppSettingConfig().GetUrl("getZoneLocationMaster"), new { }.sJson());
                                        var listDataZone = utils.SendDataApi<List<ZoneViewModel>>(new AppSettingConfig().GetUrl("getZoneMaster"), new { }.sJson());

                                        var param = Expression.Parameter(typeof(ZoneViewModel), "x");
                                        var lambda = Expression.Lambda<Func<ZoneViewModel, bool>>((Expression)Expression.Equal(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                                            , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                                        var dataZone = listDataZone.AsQueryable().Where(lambda).ToList();
                                        var zoneArray = new List<Guid?>();
                                        foreach (var z in dataZone)
                                        {
                                            zoneArray.Add(z.zone_Index);
                                        }
                                        var listLocation_index = listDataZoneLocation.Where(c => zoneArray.Contains(c.zone_Index)).Select(s => s.location_Index.ToString()).ToList();
                                        View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => listLocation_index.Contains(c.location_Index));
                                    }
                                    else
                                    {
                                        //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " = '" + itemRuleDesList.ruleCondition_Param + "' ";
                                        var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                        var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.Equal(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                                            , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                                        View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
                                    }
                                }
                                else if (itemRuleDesList.ruleConditionOperation == ">")
                                {
                                    //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " > '" + itemRuleDesList.ruleCondition_Param + "' ";
                                    var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                    var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.GreaterThan(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                                        , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
                                }
                                else if (itemRuleDesList.ruleConditionOperation == "<")
                                {
                                    //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " < '" + itemRuleDesList.ruleCondition_Param + "' ";
                                    var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                    var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.LessThan(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                                        , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
                                }
                                else if (itemRuleDesList.ruleConditionOperation == "!=")
                                {
                                    //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " != '" + itemRuleDesList.ruleCondition_Param + "' ";
                                    var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                    var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.NotEqual(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                                        , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
                                }
                                else if (itemRuleDesList.ruleConditionOperation == ">=")
                                {
                                    //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " >= '" + itemRuleDesList.ruleCondition_Param + "' ";
                                    var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                    var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.GreaterThanOrEqual(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                                        , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
                                }
                                else if (itemRuleDesList.ruleConditionOperation == "<=")
                                {
                                    //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " <= '" + itemRuleDesList.ruleCondition_Param + "' ";
                                    var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                    var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.LessThanOrEqual(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                                        , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
                                }
                                else if (itemRuleDesList.ruleConditionOperation == "Like")
                                {
                                    //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " Like '" + itemRuleDesList.ruleCondition_Param + "' ";
                                    var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                    var predicate = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>(
                                        Expression.Call(
                                            Expression.PropertyOrField(param, itemRuleDesList.ruleConditionField_Name),
                                            "Contains", null, Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""))
                                        ), param);
                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(predicate);
                                }
                                //setWhereDes += "";

                            }
                            #endregion

                            #region for RuleDesSortList
                            var RuleDesSortList2 = getViewWaveTemplate.Where(c => c.isDestination == 1 && c.isSort == 1).ToList();

                            int iRowsDesSort2 = 0;
                            foreach (var itemRuleDesSortList in RuleDesSortList2)
                            {
                                if (iRowsDesSort2 == 0)
                                {
                                    //setWhereDesSort += itemRuleDesSortList.ruleConditionField_Name + ' ' + itemRuleDesSortList.ruleCondition_Param;
                                    var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                    var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, string>>(Expression.Property(param, itemRuleDesSortList.ruleConditionField_Name), param);
                                    if (itemRuleDesSortList.ruleCondition_Param.ToUpper() == "DESC")
                                    {
                                        View_WaveBinBalance2 = View_WaveBinBalance2.OrderByDescending(lambda);
                                    }
                                    else /*if (itemRuleDesSortList.ruleCondition_Param.ToUpper() == "DESC")*/
                                    {
                                        View_WaveBinBalance2 = View_WaveBinBalance2.OrderBy(lambda);
                                    }
                                }
                                else
                                {
                                    var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                    var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, string>>(Expression.Property(param, itemRuleDesSortList.ruleConditionField_Name), param);
                                    if (itemRuleDesSortList.ruleCondition_Param.ToUpper() == "DESC")
                                    {
                                        View_WaveBinBalance2 = View_WaveBinBalance2.OrderByDescending(lambda);
                                    }
                                    else /*if (itemRuleDesSortList.ruleCondition_Param.ToUpper() == "DESC")*/
                                    {
                                        View_WaveBinBalance2 = View_WaveBinBalance2.OrderBy(lambda);
                                    }
                                }
                                iRowsDesSort2 = iRowsDesSort2 + 1;

                            }
                            #endregion



                            var BinBalanceResult = View_WaveBinBalance2.ToList();
                            foreach (var itemBin in BinBalanceResult)
                            {

                                decimal? QtyBal = itemBin.binBalance_QtyBal - itemBin.binBalance_QtyReserve;
                                if (QtyPlanGIRemian <= 0)
                                {
                                    break;
                                }
                                if (QtyBal <= 0)
                                {
                                    continue;
                                }
                                if (QtyPlanGIRemian >= QtyBal && QtyBal > 0)
                                {
                                    // Add GI ITEMLOCATION 
                                    var GoodsIssueItemLocation = new im_GoodsIssueItemLocation();
                                    GoodsIssueItemLocation.GoodsIssueItemLocation_Index = Guid.NewGuid();
                                    GoodsIssueItemLocation.GoodsIssue_Index = new Guid(model.goodsIssue_Index);
                                    GoodsIssueItemLocation.TagItem_Index = new Guid(itemBin.tagItem_Index);
                                    GoodsIssueItemLocation.Tag_Index = new Guid(itemBin.tag_Index);
                                    GoodsIssueItemLocation.Tag_No = itemBin.tag_No;
                                    GoodsIssueItemLocation.Product_Index = new Guid(itemBin.product_Index);
                                    GoodsIssueItemLocation.Product_Id = itemBin.product_Id;
                                    GoodsIssueItemLocation.Product_Name = itemBin.product_Name;
                                    GoodsIssueItemLocation.Product_SecondName = itemBin.product_SecondName;
                                    GoodsIssueItemLocation.Product_ThirdName = itemBin.product_ThirdName;
                                    GoodsIssueItemLocation.Product_Lot = itemBin.product_Lot;
                                    GoodsIssueItemLocation.ItemStatus_Index = new Guid(itemBin.itemStatus_Index);
                                    GoodsIssueItemLocation.ItemStatus_Id = itemBin.itemStatus_Id;
                                    GoodsIssueItemLocation.ItemStatus_Name = itemBin.itemStatus_Name;
                                    GoodsIssueItemLocation.Location_Index = new Guid(itemBin.location_Index);
                                    GoodsIssueItemLocation.Location_Id = itemBin.location_Id;
                                    GoodsIssueItemLocation.Location_Name = itemBin.location_Name;
                                    GoodsIssueItemLocation.QtyPlan = (Decimal)itemPlanGI.TotalQtyRemian;
                                    GoodsIssueItemLocation.Qty = (Decimal)QtyBal / (Decimal)itemPlanGI.Ratio;
                                    GoodsIssueItemLocation.Ratio = (Decimal)itemPlanGI.Ratio;
                                    GoodsIssueItemLocation.TotalQty = (Decimal)QtyBal;
                                    GoodsIssueItemLocation.ProductConversion_Index = new Guid(itemBin.productConversion_Index);
                                    GoodsIssueItemLocation.ProductConversion_Id = itemBin.productConversion_Id;
                                    GoodsIssueItemLocation.ProductConversion_Name = itemBin.productConversion_Name;
                                    GoodsIssueItemLocation.MFG_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_MFG_Date) ? itemBin.goodsReceive_MFG_Date.toDate() : null;
                                    GoodsIssueItemLocation.EXP_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_EXP_Date) ? itemBin.goodsReceive_EXP_Date.toDate() : null;

                                    GoodsIssueItemLocation.UnitWeight = itemBin.binBalance_UnitWeightBal;
                                    GoodsIssueItemLocation.UnitWeight_Index = itemBin.binBalance_UnitWeightBal_Index;
                                    GoodsIssueItemLocation.UnitWeight_Id = itemBin.binBalance_UnitWeightBal_Id;
                                    GoodsIssueItemLocation.UnitWeight_Name = itemBin.binBalance_UnitWeightBal_Name;
                                    GoodsIssueItemLocation.UnitWeightRatio = itemBin.binBalance_UnitWeightBalRatio;

                                    GoodsIssueItemLocation.Weight = (itemBin.binBalance_WeightBal ?? 0) - (itemBin.binBalance_WeightReserve ?? 0);
                                    GoodsIssueItemLocation.Weight_Index = itemBin.binBalance_WeightBal_Index;
                                    GoodsIssueItemLocation.Weight_Id = itemBin.binBalance_WeightBal_Id;
                                    GoodsIssueItemLocation.Weight_Name = itemBin.binBalance_WeightBal_Name;
                                    GoodsIssueItemLocation.WeightRatio = itemBin.binBalance_WeightBalRatio;

                                    GoodsIssueItemLocation.UnitNetWeight = itemBin.binBalance_UnitNetWeightBal;
                                    GoodsIssueItemLocation.UnitNetWeight_Index = itemBin.binBalance_UnitNetWeightBal_Index;
                                    GoodsIssueItemLocation.UnitNetWeight_Id = itemBin.binBalance_UnitNetWeightBal_Id;
                                    GoodsIssueItemLocation.UnitNetWeight_Name = itemBin.binBalance_UnitNetWeightBal_Name;
                                    GoodsIssueItemLocation.UnitNetWeightRatio = itemBin.binBalance_UnitNetWeightBalRatio;

                                    GoodsIssueItemLocation.NetWeight = (itemBin.binBalance_NetWeightBal ?? 0) - (itemBin.binBalance_NetWeightReserve ?? 0);
                                    GoodsIssueItemLocation.NetWeight_Index = itemBin.binBalance_NetWeightBal_Index;
                                    GoodsIssueItemLocation.NetWeight_Id = itemBin.binBalance_NetWeightBal_Id;
                                    GoodsIssueItemLocation.NetWeight_Name = itemBin.binBalance_NetWeightBal_Name;
                                    GoodsIssueItemLocation.NetWeightRatio = itemBin.binBalance_NetWeightBalRatio;

                                    GoodsIssueItemLocation.UnitGrsWeight = itemBin.binBalance_UnitGrsWeightBal;
                                    GoodsIssueItemLocation.UnitGrsWeight_Index = itemBin.binBalance_UnitGrsWeightBal_Index;
                                    GoodsIssueItemLocation.UnitGrsWeight_Id = itemBin.binBalance_UnitGrsWeightBal_Id;
                                    GoodsIssueItemLocation.UnitGrsWeight_Name = itemBin.binBalance_UnitGrsWeightBal_Name;
                                    GoodsIssueItemLocation.UnitGrsWeightRatio = itemBin.binBalance_UnitGrsWeightBalRatio;

                                    GoodsIssueItemLocation.GrsWeight = (itemBin.binBalance_GrsWeightBal ?? 0) - (itemBin.binBalance_GrsWeightReserve ?? 0);
                                    GoodsIssueItemLocation.GrsWeight_Index = itemBin.binBalance_GrsWeightBal_Index;
                                    GoodsIssueItemLocation.GrsWeight_Id = itemBin.binBalance_GrsWeightBal_Id;
                                    GoodsIssueItemLocation.GrsWeight_Name = itemBin.binBalance_GrsWeightBal_Name;
                                    GoodsIssueItemLocation.GrsWeightRatio = itemBin.binBalance_GrsWeightBalRatio;

                                    GoodsIssueItemLocation.UnitWidth = (itemBin.binBalance_UnitWidthBal ?? 0);
                                    GoodsIssueItemLocation.UnitWidth_Index = itemBin.binBalance_UnitWidthBal_Index;
                                    GoodsIssueItemLocation.UnitWidth_Id = itemBin.binBalance_UnitWidthBal_Id;
                                    GoodsIssueItemLocation.UnitWidth_Name = itemBin.binBalance_UnitWidthBal_Name;
                                    GoodsIssueItemLocation.UnitWidthRatio = itemBin.binBalance_UnitWidthBalRatio;

                                    GoodsIssueItemLocation.Width = (itemBin.binBalance_WidthBal ?? 0) - (itemBin.binBalance_WidthReserve ?? 0);
                                    GoodsIssueItemLocation.Width_Index = itemBin.binBalance_WidthBal_Index;
                                    GoodsIssueItemLocation.Width_Id = itemBin.binBalance_WidthBal_Id;
                                    GoodsIssueItemLocation.Width_Name = itemBin.binBalance_WidthBal_Name;
                                    GoodsIssueItemLocation.WidthRatio = itemBin.binBalance_WidthBalRatio;

                                    GoodsIssueItemLocation.UnitLength = (itemBin.binBalance_UnitLengthBal ?? 0);
                                    GoodsIssueItemLocation.UnitLength_Index = itemBin.binBalance_UnitLengthBal_Index;
                                    GoodsIssueItemLocation.UnitLength_Id = itemBin.binBalance_UnitLengthBal_Id;
                                    GoodsIssueItemLocation.UnitLength_Name = itemBin.binBalance_UnitLengthBal_Name;
                                    GoodsIssueItemLocation.UnitLengthRatio = itemBin.binBalance_UnitLengthBalRatio;

                                    GoodsIssueItemLocation.Length = (itemBin.binBalance_LengthBal ?? 0) - (itemBin.binBalance_LengthReserve ?? 0);
                                    GoodsIssueItemLocation.Length_Index = itemBin.binBalance_LengthBal_Index;
                                    GoodsIssueItemLocation.Length_Id = itemBin.binBalance_LengthBal_Id;
                                    GoodsIssueItemLocation.Length_Name = itemBin.binBalance_LengthBal_Name;
                                    GoodsIssueItemLocation.LengthRatio = itemBin.binBalance_LengthBalRatio;

                                    GoodsIssueItemLocation.UnitHeight = (itemBin.binBalance_UnitHeightBal ?? 0);
                                    GoodsIssueItemLocation.UnitHeight_Index = itemBin.binBalance_UnitHeightBal_Index;
                                    GoodsIssueItemLocation.UnitHeight_Id = itemBin.binBalance_UnitHeightBal_Id;
                                    GoodsIssueItemLocation.UnitHeight_Name = itemBin.binBalance_UnitHeightBal_Name;
                                    GoodsIssueItemLocation.UnitHeightRatio = itemBin.binBalance_UnitHeightBalRatio;

                                    GoodsIssueItemLocation.Height = (itemBin.binBalance_HeightBal ?? 0) - (itemBin.binBalance_HeightReserve ?? 0);
                                    GoodsIssueItemLocation.Height_Index = itemBin.binBalance_HeightBal_Index;
                                    GoodsIssueItemLocation.Height_Id = itemBin.binBalance_HeightBal_Id;
                                    GoodsIssueItemLocation.Height_Name = itemBin.binBalance_HeightBal_Name;
                                    GoodsIssueItemLocation.HeightRatio = itemBin.binBalance_HeightBalRatio;

                                    GoodsIssueItemLocation.UnitVolume = (itemBin.binBalance_UnitVolumeBal ?? 0);
                                    GoodsIssueItemLocation.Volume = (itemBin.binBalance_VolumeBal ?? 0) - (itemBin.binBalance_VolumeReserve ?? 0);

                                    GoodsIssueItemLocation.UnitPrice = (itemBin.unitPrice ?? 0);
                                    GoodsIssueItemLocation.UnitPrice_Index = itemBin.unitPrice_Index;
                                    GoodsIssueItemLocation.UnitPrice_Id = itemBin.unitPrice_Id;
                                    GoodsIssueItemLocation.UnitPrice_Name = itemBin.unitPrice_Name;
                                    GoodsIssueItemLocation.Price = (itemBin.price ?? 0);
                                    GoodsIssueItemLocation.Price_Index = itemBin.price_Index;
                                    GoodsIssueItemLocation.Price_Id = itemBin.price_Id;
                                    GoodsIssueItemLocation.Price_Name = itemBin.price_Name;


                                    GoodsIssueItemLocation.DocumentRef_No1 = itemPlanGI.DocumentRef_No1;
                                    GoodsIssueItemLocation.DocumentRef_No2 = itemPlanGI.DocumentRef_No2;
                                    GoodsIssueItemLocation.DocumentRef_No3 = itemPlanGI.DocumentRef_No3;
                                    GoodsIssueItemLocation.DocumentRef_No4 = itemPlanGI.DocumentRef_No4;
                                    GoodsIssueItemLocation.DocumentRef_No5 = itemPlanGI.DocumentRef_No5;
                                    GoodsIssueItemLocation.Document_Status = -2;
                                    GoodsIssueItemLocation.UDF_1 = itemPlanGI.UDF_1;
                                    GoodsIssueItemLocation.UDF_2 = itemPlanGI.UDF_2;
                                    GoodsIssueItemLocation.UDF_3 = itemPlanGI.UDF_3;
                                    GoodsIssueItemLocation.UDF_4 = itemPlanGI.UDF_4;
                                    GoodsIssueItemLocation.UDF_5 = itemPlanGI.UDF_5;
                                    GoodsIssueItemLocation.Ref_Process_Index = new Guid("22744590-55D8-4448-88EF-5997C252111F");  // PLAN GI Process
                                    GoodsIssueItemLocation.Ref_Document_No = itemPlanGI.PlanGoodsIssue_No;
                                    GoodsIssueItemLocation.Ref_Document_Index = (Guid)itemPlanGI.PlanGoodsIssue_Index;
                                    GoodsIssueItemLocation.Ref_DocumentItem_Index = itemPlanGI.PlanGoodsIssueItem_Index;
                                    GoodsIssueItemLocation.GoodsReceiveItem_Index = new Guid(itemBin.goodsReceiveItem_Index);
                                    GoodsIssueItemLocation.Create_By = model.create_by;
                                    GoodsIssueItemLocation.Create_Date = DateTime.Now;
                                    GoodsIssueItemLocation.GoodsIssue_No = model.goodsIssue_No;
                                    GoodsIssueItemLocation.BinBalance_Index = new Guid(itemBin.binBalance_Index);


                                    GoodsIssueItemLocation.Invoice_No = itemBin.invoice_No;
                                    GoodsIssueItemLocation.Declaration_No = itemBin.declaration_No;
                                    GoodsIssueItemLocation.HS_Code = itemBin.hs_Code;
                                    GoodsIssueItemLocation.Conutry_of_Origin = itemBin.conutry_of_Origin;
                                    GoodsIssueItemLocation.Tax1 = itemBin.tax1;
                                    GoodsIssueItemLocation.Tax1_Currency_Index = itemBin.tax1_Currency_Index;
                                    GoodsIssueItemLocation.Tax1_Currency_Id = itemBin.tax1_Currency_Id;
                                    GoodsIssueItemLocation.Tax1_Currency_Name = itemBin.tax1_Currency_Name;
                                    GoodsIssueItemLocation.Tax2 = itemBin.tax2;
                                    GoodsIssueItemLocation.Tax2_Currency_Index = itemBin.tax2_Currency_Index;
                                    GoodsIssueItemLocation.Tax2_Currency_Id = itemBin.tax2_Currency_Id;
                                    GoodsIssueItemLocation.Tax2_Currency_Name = itemBin.tax2_Currency_Name;
                                    GoodsIssueItemLocation.Tax3 = itemBin.tax3;
                                    GoodsIssueItemLocation.Tax3_Currency_Index = itemBin.tax3_Currency_Index;
                                    GoodsIssueItemLocation.Tax3_Currency_Id = itemBin.tax3_Currency_Id;
                                    GoodsIssueItemLocation.Tax3_Currency_Name = itemBin.tax3_Currency_Name;
                                    GoodsIssueItemLocation.Tax4 = itemBin.tax4;
                                    GoodsIssueItemLocation.Tax4_Currency_Index = itemBin.tax4_Currency_Index;
                                    GoodsIssueItemLocation.Tax4_Currency_Id = itemBin.tax4_Currency_Id;
                                    GoodsIssueItemLocation.Tax4_Currency_Name = itemBin.tax4_Currency_Name;
                                    GoodsIssueItemLocation.Tax5 = itemBin.tax5;
                                    GoodsIssueItemLocation.Tax5_Currency_Index = itemBin.tax5_Currency_Index;
                                    GoodsIssueItemLocation.Tax5_Currency_Id = itemBin.tax5_Currency_Id;
                                    GoodsIssueItemLocation.Tax5_Currency_Name = itemBin.tax5_Currency_Name;



                                    chkdatawave = true;
                                    ListGoodsIssueItemLocation.Add(GoodsIssueItemLocation);


                                    itemPlanGI.GITotalQty = itemPlanGI.GITotalQty + QtyBal;

                                    QtyPlanGIRemian = QtyPlanGIRemian - QtyBal;

                                }
                                else if (QtyPlanGIRemian < QtyBal && QtyPlanGIRemian > 0 && QtyBal > 0)
                                {
                                    var QtyPick = QtyPlanGIRemian;
                                    // Add GI ITEMLOCATION 
                                    var GoodsIssueItemLocation = new im_GoodsIssueItemLocation();
                                    GoodsIssueItemLocation.GoodsIssueItemLocation_Index = Guid.NewGuid();
                                    GoodsIssueItemLocation.GoodsIssue_Index = new Guid(model.goodsIssue_Index);
                                    GoodsIssueItemLocation.TagItem_Index = new Guid(itemBin.tagItem_Index);
                                    GoodsIssueItemLocation.Tag_Index = new Guid(itemBin.tag_Index);
                                    GoodsIssueItemLocation.Tag_No = itemBin.tag_No;
                                    GoodsIssueItemLocation.Product_Index = new Guid(itemBin.product_Index);
                                    GoodsIssueItemLocation.Product_Id = itemBin.product_Id;
                                    GoodsIssueItemLocation.Product_Name = itemBin.product_Name;
                                    GoodsIssueItemLocation.Product_SecondName = itemBin.product_SecondName;
                                    GoodsIssueItemLocation.Product_ThirdName = itemBin.product_ThirdName;
                                    GoodsIssueItemLocation.Product_Lot = itemBin.product_Lot;
                                    GoodsIssueItemLocation.ItemStatus_Index = new Guid(itemBin.itemStatus_Index);
                                    GoodsIssueItemLocation.ItemStatus_Id = itemBin.itemStatus_Id;
                                    GoodsIssueItemLocation.ItemStatus_Name = itemBin.itemStatus_Name;
                                    GoodsIssueItemLocation.Location_Index = new Guid(itemBin.location_Index);
                                    GoodsIssueItemLocation.Location_Id = itemBin.location_Id;
                                    GoodsIssueItemLocation.Location_Name = itemBin.location_Name;
                                    GoodsIssueItemLocation.QtyPlan = (Decimal)itemPlanGI.TotalQtyRemian;
                                    GoodsIssueItemLocation.Qty = (Decimal)QtyPick / (Decimal)itemPlanGI.Ratio;
                                    GoodsIssueItemLocation.Ratio = (Decimal)itemPlanGI.Ratio;
                                    GoodsIssueItemLocation.TotalQty = (Decimal)QtyPick;
                                    GoodsIssueItemLocation.ProductConversion_Index = new Guid(itemBin.productConversion_Index);
                                    GoodsIssueItemLocation.ProductConversion_Id = itemBin.productConversion_Id;
                                    GoodsIssueItemLocation.ProductConversion_Name = itemBin.productConversion_Name;
                                    GoodsIssueItemLocation.MFG_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_MFG_Date) ? itemBin.goodsReceive_MFG_Date.toDate() : null;
                                    GoodsIssueItemLocation.EXP_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_EXP_Date) ? itemBin.goodsReceive_EXP_Date.toDate() : null;

                                    if (itemBin.binBalance_WeightBegin == 0)
                                    {
                                        GoodsIssueItemLocation.Weight = 0;
                                    }
                                    else
                                    {
                                        GoodsIssueItemLocation.UnitWeight = itemBin.binBalance_UnitWeightBal;
                                        GoodsIssueItemLocation.UnitWeight_Index = itemBin.binBalance_UnitWeightBal_Index;
                                        GoodsIssueItemLocation.UnitWeight_Id = itemBin.binBalance_UnitWeightBal_Id;
                                        GoodsIssueItemLocation.UnitWeight_Name = itemBin.binBalance_UnitWeightBal_Name;
                                        GoodsIssueItemLocation.UnitWeightRatio = itemBin.binBalance_UnitWeightBalRatio;

                                        GoodsIssueItemLocation.Weight = (Decimal)(QtyPick * (itemBin.binBalance_UnitWeightBal ?? 0));
                                        GoodsIssueItemLocation.Weight_Index = itemBin.binBalance_UnitWeightBal_Index;
                                        GoodsIssueItemLocation.Weight_Id = itemBin.binBalance_UnitWeightBal_Id;
                                        GoodsIssueItemLocation.Weight_Name = itemBin.binBalance_UnitWeightBal_Name;
                                        GoodsIssueItemLocation.WeightRatio = itemBin.binBalance_UnitWeightBalRatio;
                                    }

                                    if (itemBin.binBalance_NetWeightBegin == 0)
                                    {
                                        GoodsIssueItemLocation.NetWeight = 0;
                                    }
                                    else
                                    {
                                        GoodsIssueItemLocation.UnitNetWeight = itemBin.binBalance_UnitNetWeightBal;
                                        GoodsIssueItemLocation.UnitNetWeight_Index = itemBin.binBalance_UnitNetWeightBal_Index;
                                        GoodsIssueItemLocation.UnitNetWeight_Id = itemBin.binBalance_UnitNetWeightBal_Id;
                                        GoodsIssueItemLocation.UnitNetWeight_Name = itemBin.binBalance_UnitNetWeightBal_Name;
                                        GoodsIssueItemLocation.UnitNetWeightRatio = itemBin.binBalance_UnitNetWeightBalRatio;

                                        GoodsIssueItemLocation.NetWeight = (Decimal)(QtyPick * (itemBin.binBalance_UnitNetWeightBal ?? 0));
                                        GoodsIssueItemLocation.NetWeight_Index = itemBin.binBalance_UnitNetWeightBal_Index;
                                        GoodsIssueItemLocation.NetWeight_Id = itemBin.binBalance_UnitNetWeightBal_Id;
                                        GoodsIssueItemLocation.NetWeight_Name = itemBin.binBalance_UnitNetWeightBal_Name;
                                        GoodsIssueItemLocation.NetWeightRatio = itemBin.binBalance_UnitNetWeightBalRatio;
                                    }

                                    if (itemBin.binBalance_GrsWeightBegin == 0)
                                    {
                                        GoodsIssueItemLocation.GrsWeight = 0;
                                    }
                                    else
                                    {
                                        GoodsIssueItemLocation.UnitGrsWeight = itemBin.binBalance_UnitGrsWeightBal;
                                        GoodsIssueItemLocation.UnitGrsWeight_Index = itemBin.binBalance_UnitGrsWeightBal_Index;
                                        GoodsIssueItemLocation.UnitGrsWeight_Id = itemBin.binBalance_UnitGrsWeightBal_Id;
                                        GoodsIssueItemLocation.UnitGrsWeight_Name = itemBin.binBalance_UnitGrsWeightBal_Name;
                                        GoodsIssueItemLocation.UnitGrsWeightRatio = itemBin.binBalance_UnitGrsWeightBalRatio;

                                        GoodsIssueItemLocation.GrsWeight = (Decimal)(QtyPick * (itemBin.binBalance_UnitGrsWeightBal ?? 0));
                                        GoodsIssueItemLocation.GrsWeight_Index = itemBin.binBalance_UnitGrsWeightBal_Index;
                                        GoodsIssueItemLocation.GrsWeight_Id = itemBin.binBalance_UnitGrsWeightBal_Id;
                                        GoodsIssueItemLocation.GrsWeight_Name = itemBin.binBalance_UnitGrsWeightBal_Name;
                                        GoodsIssueItemLocation.GrsWeightRatio = itemBin.binBalance_UnitGrsWeightBalRatio;
                                    }

                                    if (itemBin.binBalance_WidthBegin == 0)
                                    {
                                        GoodsIssueItemLocation.Width = 0;
                                    }
                                    else
                                    {
                                        GoodsIssueItemLocation.UnitWidth = (itemBin.binBalance_UnitWidthBal ?? 0);
                                        GoodsIssueItemLocation.UnitWidth_Index = itemBin.binBalance_UnitWidthBal_Index;
                                        GoodsIssueItemLocation.UnitWidth_Id = itemBin.binBalance_UnitWidthBal_Id;
                                        GoodsIssueItemLocation.UnitWidth_Name = itemBin.binBalance_UnitWidthBal_Name;
                                        GoodsIssueItemLocation.UnitWidthRatio = itemBin.binBalance_UnitWidthBalRatio;

                                        GoodsIssueItemLocation.Width = (Decimal)(QtyPick * (itemBin.binBalance_UnitWidthBal ?? 0));
                                        GoodsIssueItemLocation.Width_Index = itemBin.binBalance_UnitWidthBal_Index;
                                        GoodsIssueItemLocation.Width_Id = itemBin.binBalance_UnitWidthBal_Id;
                                        GoodsIssueItemLocation.Width_Name = itemBin.binBalance_UnitWidthBal_Name;
                                        GoodsIssueItemLocation.WidthRatio = itemBin.binBalance_UnitWidthBalRatio;
                                    }

                                    if (itemBin.binBalance_LengthBegin == 0)
                                    {
                                        GoodsIssueItemLocation.Length = 0;
                                    }
                                    else
                                    {
                                        GoodsIssueItemLocation.UnitLength = (itemBin.binBalance_UnitLengthBal ?? 0);
                                        GoodsIssueItemLocation.UnitLength_Index = itemBin.binBalance_UnitLengthBal_Index;
                                        GoodsIssueItemLocation.UnitLength_Id = itemBin.binBalance_UnitLengthBal_Id;
                                        GoodsIssueItemLocation.UnitLength_Name = itemBin.binBalance_UnitLengthBal_Name;
                                        GoodsIssueItemLocation.UnitLengthRatio = itemBin.binBalance_UnitLengthBalRatio;

                                        GoodsIssueItemLocation.Length = (Decimal)(QtyPick * (itemBin.binBalance_UnitWidthBal ?? 0));
                                        GoodsIssueItemLocation.Length_Index = itemBin.binBalance_UnitLengthBal_Index;
                                        GoodsIssueItemLocation.Length_Id = itemBin.binBalance_UnitLengthBal_Id;
                                        GoodsIssueItemLocation.Length_Name = itemBin.binBalance_UnitLengthBal_Name;
                                        GoodsIssueItemLocation.LengthRatio = itemBin.binBalance_UnitLengthBalRatio;
                                    }

                                    if (itemBin.binBalance_HeightBegin == 0)
                                    {
                                        GoodsIssueItemLocation.Height = 0;
                                    }
                                    else
                                    {
                                        GoodsIssueItemLocation.UnitHeight = (itemBin.binBalance_UnitHeightBal ?? 0);
                                        GoodsIssueItemLocation.UnitHeight_Index = itemBin.binBalance_UnitHeightBal_Index;
                                        GoodsIssueItemLocation.UnitHeight_Id = itemBin.binBalance_UnitHeightBal_Id;
                                        GoodsIssueItemLocation.UnitHeight_Name = itemBin.binBalance_UnitHeightBal_Name;
                                        GoodsIssueItemLocation.UnitHeightRatio = itemBin.binBalance_UnitHeightBalRatio;

                                        GoodsIssueItemLocation.Height = (Decimal)(QtyPick * (itemBin.binBalance_UnitHeightBal ?? 0));
                                        GoodsIssueItemLocation.Height_Index = itemBin.binBalance_UnitHeightBal_Index;
                                        GoodsIssueItemLocation.Height_Id = itemBin.binBalance_UnitHeightBal_Id;
                                        GoodsIssueItemLocation.Height_Name = itemBin.binBalance_UnitHeightBal_Name;
                                        GoodsIssueItemLocation.HeightRatio = itemBin.binBalance_UnitHeightBalRatio;
                                    }

                                    if (itemBin.binBalance_UnitVolumeBal == 0)
                                    {
                                        GoodsIssueItemLocation.UnitVolume = 0;
                                    }
                                    else
                                    {
                                        GoodsIssueItemLocation.UnitVolume = (itemBin.binBalance_UnitVolumeBal ?? 0);
                                        GoodsIssueItemLocation.Volume = (Decimal)(QtyPick * (itemBin.binBalance_UnitVolumeBal ?? 0));
                                    }
                                     
                                    GoodsIssueItemLocation.UnitPrice = (itemBin.unitPrice ?? 0);
                                    GoodsIssueItemLocation.UnitPrice_Index = itemBin.unitPrice_Index;
                                    GoodsIssueItemLocation.UnitPrice_Id = itemBin.unitPrice_Id;
                                    GoodsIssueItemLocation.UnitPrice_Name = itemBin.unitPrice_Name;
                                    GoodsIssueItemLocation.Price = (Decimal)(QtyPick * (itemBin.unitPrice ?? 0));
                                    GoodsIssueItemLocation.Price_Index = itemBin.unitPrice_Index;
                                    GoodsIssueItemLocation.Price_Id = itemBin.unitPrice_Id;
                                    GoodsIssueItemLocation.Price_Name = itemBin.unitPrice_Name;



                                    GoodsIssueItemLocation.DocumentRef_No1 = itemPlanGI.DocumentRef_No1;
                                    GoodsIssueItemLocation.DocumentRef_No2 = itemPlanGI.DocumentRef_No2;
                                    GoodsIssueItemLocation.DocumentRef_No3 = itemPlanGI.DocumentRef_No3;
                                    GoodsIssueItemLocation.DocumentRef_No4 = itemPlanGI.DocumentRef_No4;
                                    GoodsIssueItemLocation.DocumentRef_No5 = itemPlanGI.DocumentRef_No5;
                                    GoodsIssueItemLocation.Document_Status = -2;
                                    GoodsIssueItemLocation.UDF_1 = itemPlanGI.UDF_1;
                                    GoodsIssueItemLocation.UDF_2 = itemPlanGI.UDF_2;
                                    GoodsIssueItemLocation.UDF_3 = itemPlanGI.UDF_3;
                                    GoodsIssueItemLocation.UDF_4 = itemPlanGI.UDF_4;
                                    GoodsIssueItemLocation.UDF_5 = itemPlanGI.UDF_5;
                                    GoodsIssueItemLocation.Ref_Process_Index = new Guid("22744590-55D8-4448-88EF-5997C252111F");  // PLAN GI Process
                                    GoodsIssueItemLocation.Ref_Document_No = itemPlanGI.PlanGoodsIssue_No;
                                    GoodsIssueItemLocation.Ref_Document_Index = (Guid)itemPlanGI.PlanGoodsIssue_Index;
                                    GoodsIssueItemLocation.Ref_DocumentItem_Index = itemPlanGI.PlanGoodsIssueItem_Index;
                                    GoodsIssueItemLocation.GoodsReceiveItem_Index = new Guid(itemBin.goodsReceiveItem_Index);
                                    GoodsIssueItemLocation.Create_By = model.create_by;
                                    GoodsIssueItemLocation.Create_Date = DateTime.Now;
                                    GoodsIssueItemLocation.GoodsIssue_No = model.goodsIssue_No;
                                    GoodsIssueItemLocation.BinBalance_Index = new Guid(itemBin.binBalance_Index);

                                    GoodsIssueItemLocation.Invoice_No = itemBin.invoice_No;
                                    GoodsIssueItemLocation.Declaration_No = itemBin.declaration_No;
                                    GoodsIssueItemLocation.HS_Code = itemBin.hs_Code;
                                    GoodsIssueItemLocation.Conutry_of_Origin = itemBin.conutry_of_Origin;
                                    GoodsIssueItemLocation.Tax1 = itemBin.tax1;
                                    GoodsIssueItemLocation.Tax1_Currency_Index = itemBin.tax1_Currency_Index;
                                    GoodsIssueItemLocation.Tax1_Currency_Id = itemBin.tax1_Currency_Id;
                                    GoodsIssueItemLocation.Tax1_Currency_Name = itemBin.tax1_Currency_Name;
                                    GoodsIssueItemLocation.Tax2 = itemBin.tax2;
                                    GoodsIssueItemLocation.Tax2_Currency_Index = itemBin.tax2_Currency_Index;
                                    GoodsIssueItemLocation.Tax2_Currency_Id = itemBin.tax2_Currency_Id;
                                    GoodsIssueItemLocation.Tax2_Currency_Name = itemBin.tax2_Currency_Name;
                                    GoodsIssueItemLocation.Tax3 = itemBin.tax3;
                                    GoodsIssueItemLocation.Tax3_Currency_Index = itemBin.tax3_Currency_Index;
                                    GoodsIssueItemLocation.Tax3_Currency_Id = itemBin.tax3_Currency_Id;
                                    GoodsIssueItemLocation.Tax3_Currency_Name = itemBin.tax3_Currency_Name;
                                    GoodsIssueItemLocation.Tax4 = itemBin.tax4;
                                    GoodsIssueItemLocation.Tax4_Currency_Index = itemBin.tax4_Currency_Index;
                                    GoodsIssueItemLocation.Tax4_Currency_Id = itemBin.tax4_Currency_Id;
                                    GoodsIssueItemLocation.Tax4_Currency_Name = itemBin.tax4_Currency_Name;
                                    GoodsIssueItemLocation.Tax5 = itemBin.tax5;
                                    GoodsIssueItemLocation.Tax5_Currency_Index = itemBin.tax5_Currency_Index;
                                    GoodsIssueItemLocation.Tax5_Currency_Id = itemBin.tax5_Currency_Id;
                                    GoodsIssueItemLocation.Tax5_Currency_Name = itemBin.tax5_Currency_Name;

                                    chkdatawave = true;
                                    ListGoodsIssueItemLocation.Add(GoodsIssueItemLocation);

                                    itemPlanGI.GITotalQty = itemPlanGI.GITotalQty + QtyPick;

                                    QtyPlanGIRemian = QtyPlanGIRemian - QtyPick;

                                }
                            }

                            #region inset GIL and runwave status 30
                            using (var db4 = new GIDbContext())
                            {
                                var transaction = db4.Database.BeginTransaction(IsolationLevel.Serializable);
                                try
                                {
                                    var GI = db4.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 20).ToList();
                                    foreach (var g in GI)
                                    {
                                        g.RunWave_Status = 30;
                                    }

                                    db4.IM_GoodsIssueItemLocation.AddRange(ListGoodsIssueItemLocation);
                                    db4.SaveChanges();
                                    transaction.Commit();
                                }
                                catch (Exception exy)
                                {
                                    msglog = State + " ex Rollback " + exy.Message.ToString();
                                    olog.logging("runwave", msglog);
                                    transaction.Rollback();
                                    throw exy;
                                }
                            }
                            #endregion


                            #region insert bincardreserve and runwave status 40

                            using (var Contact = new GIDbContext())
                            {
                                var GIL = Contact.IM_GoodsIssueItemLocation.Where(c => c.Ref_Document_Index == itemPlanGI.PlanGoodsIssue_Index && c.Ref_DocumentItem_Index == itemPlanGI.PlanGoodsIssueItem_Index && c.Document_Status != -1).ToList();
                                foreach (var g in GIL)
                                {
                                    var insertBinCardReserve = new PickbinbalanceViewModel();

                                    insertBinCardReserve.ref_Document_Index = g.GoodsIssue_Index.ToString();
                                    insertBinCardReserve.ref_DocumentItem_Index = g.GoodsIssueItemLocation_Index.ToString();
                                    insertBinCardReserve.goodsIssue_No = model.goodsIssue_No;
                                    insertBinCardReserve.Process_Index = "22744590-55D8-4448-88EF-5997C252111F";
                                    //model.GIIL = GoodsIssueItemLocation;
                                    insertBinCardReserve.create_By = model.create_by;
                                    insertBinCardReserve.pick = g.TotalQty;
                                    insertBinCardReserve.binbalance_Index = g.BinBalance_Index.ToString();
                                    insertBinCardReserve.wave_Index = Contact.IM_GoodsIssue.FirstOrDefault(f => f.GoodsIssue_Index == g.GoodsIssue_Index)?.Wave_Index.ToString();
                                    var insetBinRe = utils.SendDataApi<actionResultPickbinbalanceViewModel>(new AppSettingConfig().GetUrl("insertBinCardReserve"), insertBinCardReserve.sJson());
                                    if (insetBinRe.resultIsUse)
                                    {
                                        var transaction = Contact.Database.BeginTransaction(IsolationLevel.Serializable);
                                        try
                                        {
                                            var GI = Contact.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 30).ToList();
                                            foreach (var gg in GI)
                                            {
                                                gg.RunWave_Status = 40;
                                            }
                                            Contact.SaveChanges();
                                            transaction.Commit();
                                        }
                                        catch (Exception exy)
                                        {
                                            msglog = State + " ex Rollback " + exy.Message.ToString();
                                            olog.logging("runwave", msglog);
                                            transaction.Rollback();
                                            throw exy;
                                        }
                                    }
                                    else
                                    {
                                        var transaction = Contact.Database.BeginTransaction(IsolationLevel.Serializable);
                                        try
                                        {
                                            var GI = Contact.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && (c.RunWave_Status == 30 || c.RunWave_Status == 40)).ToList();
                                            foreach (var gg in GI)
                                            {
                                                gg.RunWave_Status = 30;
                                            }
                                            Contact.SaveChanges();
                                            transaction.Commit();
                                        }
                                        catch (Exception exy)
                                        {
                                            msglog = State + " ex Rollback " + exy.Message.ToString();
                                            olog.logging("runwave", msglog);
                                            transaction.Rollback();
                                            throw exy;
                                        }
                                        msglog = State + " ex Rollback " + "Insert BinCardReserve Error";
                                        olog.logging("runwave", msglog);
                                        result.resultMsg = "Insert BinCardReserve Error";
                                        result.resultIsUse = false;
                                        //return result;

                                    }
                                }
                            }
                            #endregion


                        }

                        #region update isuse = '' and runwave 50
                        strwhere.isActive = true;
                        var updateIsuseViewBinbalance = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("updateIsuseViewBinbalance"), strwhere.sJson());
                        if (updateIsuseViewBinbalance)
                        {
                            using (var db5 = new GIDbContext())
                            {
                                var transaction = db5.Database.BeginTransaction(IsolationLevel.Serializable);
                                try
                                {
                                    var GI = db5.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 40).ToList();
                                    foreach (var g in GI)
                                    {
                                        g.RunWave_Status = 50;
                                    }
                                    db5.SaveChanges();
                                    transaction.Commit();
                                }
                                catch (Exception exy)
                                {
                                    msglog = State + " ex Rollback " + exy.Message.ToString();
                                    olog.logging("runwave", msglog);
                                    transaction.Rollback();
                                    throw exy;
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Update IsUse By Error");
                        }
                        #endregion
                    }
                }


                result.goodsIssue_Index = model.goodsIssue_Index;
                result.goodsIssue_No = model.goodsIssue_No;
                result.resultIsUse = true;

                #region Check retrun status PGII 
                foreach (var itemPGII in model.listGoodsIssueItemBomViewModel)
                {
                    var chkGIL2 = db.IM_GoodsIssueItemLocation.Where(c => c.Ref_Document_Index == itemPGII.bom_Index && c.Ref_DocumentItem_Index == itemPGII.bomItem_Index && c.Document_Status != -1).ToList();
                    var sumqty = chkGIL2.Sum(s => s.TotalQty);
                    if (chkGIL2.Count == 0 || sumqty != itemPGII.totalQty)
                    {


                        var pgii = model.listGoodsIssueItemBomViewModel.Where(c => c.bomItem_Index == itemPGII.bomItem_Index).ToList();
                        foreach (var resultpgii in pgii)
                        {
                            resultpgii.qtyPlan = (resultpgii.totalQty - sumqty);
                            resultpgii.totalQty = (resultpgii.totalQty - sumqty);
                            listpgiinotinsert.Add(resultpgii);

                            ListDocumentViewModel = new List<DocumentViewModel>();

                            if (resultpgii.bomItem_Index != Guid.Parse("00000000-0000-0000-0000-000000000000"))
                            {
                                PlanGiRunWave.Add(resultpgii.bomItem_Index);

                                var DocumentViewModel = new DocumentViewModel();
                                DocumentViewModel.documentItem_Index = resultpgii.bomItem_Index;
                                DocumentViewModel.document_Index = resultpgii.bom_Index;
                                DocumentViewModel.whereDocument_Status = 1;
                                DocumentViewModel.document_Status = 0;

                                ListDocumentViewModel.Add(DocumentViewModel);
                            }
                        }

                        var objectPGII = new DocumentViewModel();
                        objectPGII.listDocumentViewModel = ListDocumentViewModel;
                        var UpdatePGII = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("UpdateBomItem"), objectPGII.sJson());
                        if (!UpdatePGII)
                        {
                            throw new Exception("Update Status PGII Error 1");
                        }
                    }
                }
                #endregion


                #region update PI status 3 and runwave status 60
                using (var db5 = new GIDbContext())
                {
                    var listPGI = new List<Guid>();
                    if (model.listGoodsIssueItemBomViewModel.Count > 0)
                    {
                        foreach (var item in model.listGoodsIssueItemBomViewModel)
                        {
                            if (item.bom_Index != Guid.Parse("00000000-0000-0000-0000-000000000000"))
                            {
                                listPGI.Add(item.bom_Index);
                            }
                        }
                    }
                    foreach (var item in listPGI)
                    {
                        ListDocumentViewModel = new List<DocumentViewModel>();

                        if (item != Guid.Parse("00000000-0000-0000-0000-000000000000"))
                        {
                            PlanGiRunWave.Add(item);

                            var DocumentViewModel = new DocumentViewModel();
                            DocumentViewModel.document_Index = item;
                            DocumentViewModel.document_Status = 0;

                            ListDocumentViewModel.Add(DocumentViewModel);
                        }

                        var GetBomItem = utils.SendDataApi<List<BomItemViewModel>>(new AppSettingConfig().GetUrl("FilterBomItem"), new DocumentViewModel { listDocumentViewModel = ListDocumentViewModel }.sJson()).Count();
                        if (GetBomItem == 0)
                        {
                            ListDocumentViewModel = new List<DocumentViewModel>();

                            var PlanGiRunWaveitem = new DocumentViewModel();
                            PlanGiRunWaveitem.document_Index = item;
                            PlanGiRunWaveitem.whereDocument_Status = 1;
                            PlanGiRunWaveitem.document_Status = 3;

                            ListDocumentViewModel.Add(PlanGiRunWaveitem);

                            var UpdatePGII = utils.SendDataApi<bool>(new AppSettingConfig().GetUrl("UpdateBom"), new DocumentViewModel { listDocumentViewModel = ListDocumentViewModel }.sJson());
                            if (!UpdatePGII)
                            {
                                throw new Exception("Update Status Bom Error 3");
                            }

                        }
                    }
                }
                #endregion


                result.resultMsg = CheckRunwavePast == listpgiinotinsert.Count() ? chkdatawave ? "หยิบสินค้าได้บางส่วน" : "สินค้าไม่เพียงพอ" : "หยิบสินค้าสำเร็จ";
                result.bi = listpgiinotinsert;
                return result;

            }
            catch (Exception ex)
            {
                msglog = State + " ex Rollback " + ex.Message.ToString();
                olog.logging("runwave", msglog);
                var result = new actionResultRunWaveV2ViewModelViewModel();
                result.resultIsUse = false;
                result.resultMsg = ex.Message;
                return result;
            }
        }

        #region ReportPrintOutGI
        public string ReportPrintOutGI(ReportPrintOutGIViewModel data, string rootPath = "")
        {

            var culture = new System.Globalization.CultureInfo("en-US");
            String State = "Start";
            String msglog = "";
            var olog = new logtxt();

            try
            {
                var queryGI = db.View_PrintOutGI.AsQueryable();


                if (data.goodsIssue_Index != null)
                {
                    queryGI = queryGI.Where(c => c.GoodsIssue_Index == data.goodsIssue_Index);
                }

                var query_GI = queryGI.ToList();


                var ownerTaxID = "";
                var ownerId = "";
                var ownerName = "";
                var shipToTaxID = "";

                var rowItem = 1;

                var OwnerModel = new OwnerViewModel();
                var resultOwner = new List<OwnerViewModel>();

                var time = DateTime.Now.ToString("HH:mm");

                var result = new List<ReportPrintOutGIViewModel>();

                if (data.documentType_Index.ToUpper() != "D7C596E9-BDFF-4759-91DB-FCEC709E16B8")
                {
                    var query_PlanGI = new List<View_PrintOutGI_PlanGI>();
                    query_PlanGI = db.View_PrintOutGI_PlanGI.ToList();

                    var query = (from GI in query_GI
                                 join PlanGI in query_PlanGI on GI.Ref_DocumentItem_Index equals PlanGI.PlanGoodsIssueItem_Index into ps
                                 from r in ps.DefaultIfEmpty()
                                 orderby r.PlanGoodsIssue_No ascending
                                 group GI by new
                                 {
                                     GI?.Ref_Document_Index,
                                     GI?.Product_Index,
                                     GI?.Product_Id,
                                     GI?.Product_Name,
                                     GI?.ProductConversion_Name,
                                     GI?.GoodsIssue_Date,
                                     GI?.GoodsIssue_No,
                                     GI?.Qty,
                                     GI?.Tag_No,
                                     r?.PlanGoodsIssue_No,
                                     r?.ShipTo_Id,
                                     r?.ShipTo_Name,
                                     r?.LineNum,
                                     r?.Warehouse_Id,
                                     r?.Warehouse_Name,
                                     r?.PlanGoodsIssue_Date,
                                     r?.DocumentType_Name,

                                 } into G
                                 select new
                                 {
                                     G.Key.Ref_Document_Index,
                                     G.Key.Product_Index,
                                     G.Key.Product_Id,
                                     G.Key.Product_Name,
                                     G.Key.ProductConversion_Name,
                                     G.Key.GoodsIssue_Date,
                                     G.Key.GoodsIssue_No,
                                     G.Key.Qty,
                                     G.Key.Tag_No,
                                     G.Key.PlanGoodsIssue_No,
                                     G.Key.ShipTo_Id,
                                     G.Key.ShipTo_Name,
                                     G.Key.LineNum,
                                     G.Key.Warehouse_Id,
                                     G.Key.Warehouse_Name,
                                     G.Key.PlanGoodsIssue_Date,
                                     G.Key.DocumentType_Name,
                                 }
                           ).ToList();

                    if (data.owner_Index != null)
                    {
                        resultOwner = utils.SendDataApi<List<OwnerViewModel>>(new AppSettingConfig().GetUrl("dropdownOwner"), OwnerModel.sJson());
                        if (resultOwner.Count > 0 && resultOwner != null)
                        {
                            var DataOwner = resultOwner.Find(c => c.owner_Index == data.owner_Index);
                            ownerId = query.FirstOrDefault().ShipTo_Id.ToUpper() == "D2" ? DataOwner.ref_No2 : DataOwner.owner_Id;
                            ownerName = DataOwner.owner_Name;
                            ownerTaxID = DataOwner.owner_TaxID;

                        }
                    }
                    var ShipToModel = new ShipToViewModel();
                    var resultShipTo = new List<ShipToViewModel>();
                    if (data.shipTo_Index != null)
                    {
                        resultShipTo = utils.SendDataApi<List<ShipToViewModel>>(new AppSettingConfig().GetUrl("dropdownShipTo"), ShipToModel.sJson());
                        if (resultShipTo.Count > 0 && resultShipTo != null)
                        {
                            var DataShipTo = resultShipTo.Find(c => c.shipTo_Index == data.shipTo_Index);
                            shipToTaxID = DataShipTo.shipTo_TaxID;

                        }
                    }

                    if (query.Count == 0)
                    {
                        var resultItem = new ReportPrintOutGIViewModel();

                        resultItem.checkQuery = true;


                        result.Add(resultItem);
                    }
                    else
                    {
                        foreach (var item in query.OrderBy(o => o.LineNum).ThenBy(t => t.Product_Id))
                        {
                            var resultItem = new ReportPrintOutGIViewModel();

                            string Pdate = item.PlanGoodsIssue_Date.toString();
                            string PlanGIDate = DateTime.ParseExact(Pdate.Substring(0, 8), "yyyyMMdd",
                            System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy", culture);
                            resultItem.planGoodsIssue_Date = PlanGIDate;

                            resultItem.planGoodsIssue_No = item.PlanGoodsIssue_No;
                            resultItem.shipTo_Id = item.ShipTo_Id;
                            resultItem.shipTo_Name = item.ShipTo_Name;
                            //resultItem.lineNum = item.LineNum;
                            resultItem.warehouse_Id = item.Warehouse_Id;
                            resultItem.warehouse_Name = item.Warehouse_Name;

                            string Gdate = item.GoodsIssue_Date.toString();
                            string GIDate = DateTime.ParseExact(Gdate.Substring(0, 8), "yyyyMMdd",
                            System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy", culture);

                            resultItem.goodsIssue_No = item.GoodsIssue_No;
                            resultItem.goodsIssue_Date = GIDate;
                            resultItem.owner_Id = ownerId;
                            resultItem.owner_Name = ownerName;
                            resultItem.owner_TaxID = ownerTaxID;
                            resultItem.date_Print = DateTime.Now.ToString("dd/MM/yyyy HH:mm", culture);
                            resultItem.shipTo_TaxID = shipToTaxID;
                            resultItem.product_Id = item.ShipTo_Id.ToUpper() == "D2" ? utils.SendDataApi<List<ProductViewModel>>(new AppSettingConfig().GetUrl("getProductMaster"), new { product_Index = item.Product_Index }.sJson()).FirstOrDefault().Ref_No2 : item.Product_Id;
                            resultItem.product_Name = item.Product_Name;
                            resultItem.qty = item.Qty;
                            resultItem.productConversion_Name = item.ProductConversion_Name;
                            resultItem.goodsIssue_Barcode = new NetBarcode.Barcode(item.GoodsIssue_No, NetBarcode.Type.Code128B).GetBase64Image();
                            resultItem.tag_No = item.Tag_No;
                            resultItem.documentType_Name = item.DocumentType_Name;
                            rowItem = rowItem + 1;
                            resultItem.checkBomPO = "เลขที่ PO :";
                            resultItem.checkBomDate = "วันที่สั่งซื้อ :";
                            result.Add(resultItem);
                        }
                    }
                }
                else
                {

                    var ListDocumentViewModel = new List<DocumentViewModel>();
                    foreach (var item in query_GI)
                    {
                        var DocumentViewModel = new DocumentViewModel();
                        DocumentViewModel.document_Index = item.Ref_Document_Index;
                        ListDocumentViewModel.Add(DocumentViewModel);
                    }
                    var BomItem = utils.SendDataApi<List<BomItemViewModel>>(new AppSettingConfig().GetUrl("FilterBomItem"), new DocumentViewModel { listDocumentViewModel = ListDocumentViewModel }.sJson());
                    var Bom = utils.SendDataApi<List<BomViewModel>>(new AppSettingConfig().GetUrl("FilterBom"), new DocumentViewModel { listDocumentViewModel = ListDocumentViewModel }.sJson());

                    var view_Bom = (from BI in BomItem
                                    join B in Bom on BI.bom_Index equals B.BOM_Index
                                    where BI.document_Status != -1
                                    select new
                                    {
                                        B.BOM_Index,
                                        B.BOM_No,
                                        B.Warehouse_Id,
                                        B.Warehouse_Name,
                                        B.BOM_Date,
                                        B.DocumentType_Name,
                                    }).ToList();

                    var query = (from GI in query_GI
                                 join VB in view_Bom on GI.Ref_Document_Index equals VB.BOM_Index into ps
                                 from r in ps.DefaultIfEmpty()
                                 orderby r.BOM_No ascending
                                 group GI by new
                                 {
                                     GI?.Ref_Document_Index,
                                     GI?.Product_Id,
                                     GI?.Product_Name,
                                     GI?.ProductConversion_Name,
                                     GI?.GoodsIssue_Date,
                                     GI?.GoodsIssue_No,
                                     GI?.Qty,
                                     GI?.Tag_No,
                                     r?.BOM_No,
                                     r?.Warehouse_Id,
                                     r?.Warehouse_Name,
                                     r?.BOM_Date,
                                     r?.DocumentType_Name,

                                 } into G
                                 select new
                                 {
                                     G.Key.Ref_Document_Index,
                                     G.Key.Product_Id,
                                     G.Key.Product_Name,
                                     G.Key.ProductConversion_Name,
                                     G.Key.GoodsIssue_Date,
                                     G.Key.GoodsIssue_No,
                                     G.Key.Qty,
                                     G.Key.Tag_No,
                                     G.Key.BOM_No,
                                     G.Key.Warehouse_Id,
                                     G.Key.Warehouse_Name,
                                     G.Key.BOM_Date,
                                     G.Key.DocumentType_Name,
                                 }
                            ).ToList();

                    if (query.Count == 0)
                    {
                        var resultItem = new ReportPrintOutGIViewModel();

                        resultItem.checkQuery = true;


                        result.Add(resultItem);
                    }
                    else
                    {
                        foreach (var item in query.OrderBy(o => o.Product_Id))
                        {
                            var resultItem = new ReportPrintOutGIViewModel();

                            string Pdate = item.BOM_Date;
                            string PlanGIDate = DateTime.ParseExact(Pdate.Substring(0, 8), "yyyyMMdd",
                            System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy", culture);
                            resultItem.planGoodsIssue_Date = PlanGIDate;

                            resultItem.planGoodsIssue_No = item.BOM_No;
                            resultItem.shipTo_Id = "";
                            resultItem.shipTo_Name = "";
                            //resultItem.lineNum = item.LineNum;
                            resultItem.warehouse_Id = item.Warehouse_Id;
                            resultItem.warehouse_Name = item.Warehouse_Name;

                            string Gdate = item.GoodsIssue_Date.toString();
                            string GIDate = DateTime.ParseExact(Gdate.Substring(0, 8), "yyyyMMdd",
                            System.Globalization.CultureInfo.InvariantCulture).ToString("dd/MM/yyyy", culture);

                            resultItem.goodsIssue_No = item.GoodsIssue_No;
                            resultItem.goodsIssue_Date = GIDate;
                            resultItem.owner_Id = ownerId;
                            resultItem.owner_Name = ownerName;
                            resultItem.owner_TaxID = ownerTaxID;
                            resultItem.date_Print = DateTime.Now.ToString("dd/MM/yyyy HH:mm", culture);
                            resultItem.shipTo_TaxID = shipToTaxID;
                            resultItem.product_Id = item.Product_Id;
                            resultItem.product_Name = item.Product_Name;
                            resultItem.qty = item.Qty;
                            resultItem.productConversion_Name = item.ProductConversion_Name;
                            resultItem.goodsIssue_Barcode = new NetBarcode.Barcode(item.GoodsIssue_No, NetBarcode.Type.Code128B).GetBase64Image();
                            resultItem.tag_No = item.Tag_No;
                            resultItem.documentType_Name = item.DocumentType_Name;
                            rowItem = rowItem + 1;
                            resultItem.checkBomPO = "เลขที่ BOM :";
                            resultItem.checkBomDate = "วันที่ประกอบ :";
                            result.Add(resultItem);
                        }
                    }
                }

                result.ToList();

                rootPath = rootPath.Replace("\\GIAPI", "");
                //var reportPath = rootPath + "\\GIBusiness\\Reports\\ReportPrintOutGI\\ReportPrintOutGI.rdlc";
                //var reportPath = rootPath + "\\Reports\\ReportPrintOutGI\\ReportPrintOutGI.rdlc";
                var reportPath = rootPath + new AppSettingConfig().GetUrl("ReportPrintOutGI");
                LocalReport report = new LocalReport(reportPath);
                report.AddDataSource("DataSet1", result);

                System.Text.Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);

                string fileName = "";
                string fullPath = "";
                fileName = "tmpReport" + DateTime.Now.ToString("yyyyMMddHHmmss");

                var renderedBytes = report.Execute(RenderType.Pdf);

                Utils objReport = new Utils();
                fullPath = objReport.saveReport(renderedBytes.MainStream, fileName + ".pdf", rootPath);
                var saveLocation = objReport.PhysicalPath(fileName + ".pdf", rootPath);
                return saveLocation;


            }
            catch (Exception ex)
            {

                throw ex;
            }
        }
        #endregion

        public bool CraterGILBy_Binbalance(decimal? round
            , decimal? qtyPerTag
            , getViewBinbalanceViewModel strwhere
            , List<ProductViewModel> listDataProduct2
            , RunWaveFilterV2ViewModel model
            , List<WaveTemplateViewModel> getViewWaveTemplate
            , List<View_PLANWAVEbyPLANGIV2> planGIWaveResult3
            , List<locationViewModel> listDataLocation2)
        {
            String State = "Start";
            String msglog = "";
            var olog = new logtxt();
            decimal? QtyPlanGIRemian = 0;
            decimal? binReserve = 0;
            try
            {
                for (int i = 0; i < round; i++)
                {
                    binReserve = 0;
                    //chkBinCardReserve = GIL
                    #region view_waveBinbalance2
                    var listDataBinbalance2 = utils.SendDataApi<List<BinBalanceViewModel>>(new AppSettingConfig().GetUrl("getViewBinbalance"), strwhere.sJson());

                    var GIDate = model.goodsIssue_Date.toDate();
                    var View_WaveBinBalance2 = (from BB in listDataBinbalance2
                                                join LC in listDataLocation2 on BB.location_Index equals LC.location_Index into gj
                                                from L in gj.DefaultIfEmpty()
                                                join Prd in listDataProduct2 on BB.product_Index equals Prd.product_Index
                                                where !(L?.locationType_Index == Guid.Parse("14C5F85D-137D-470E-8C70-C1E535005DC3") || L?.locationType_Index == Guid.Parse("2E9338D3-0931-4E36-B240-782BF9508641") || L?.locationType_Index == Guid.Parse("65A2D25D-5520-47D3-8776-AE064D909285"))
                                                 && (BB.goodsReceive_EXP_Date != null ? BB.goodsReceive_EXP_Date.sParse<DateTime>().Subtract(DateTime.Now.AddDays(-1)).Days : 1) > (Prd.ProductShelfLife_D ?? 0)
                                                 && (BB.binBalance_QtyBal - BB.binBalance_QtyReserve) == qtyPerTag
                                                 && (L?.BlockPick ?? 0) != 1
                                                 && BB.goodsReceive_Date.Date <= GIDate.Value.Date
                                                select new View_WaveBinBalanceViewModel
                                                {
                                                    binBalance_Index = BB.binBalance_Index.ToString(),
                                                    owner_Index = BB.owner_Index.ToString(),
                                                    owner_Id = BB.owner_Id,
                                                    owner_Name = BB.owner_Name,
                                                    location_Index = BB.location_Index.ToString(),
                                                    location_Id = BB.location_Id,
                                                    location_Name = BB.location_Name,
                                                    goodsReceive_Index = BB.goodsReceive_Index.ToString(),
                                                    goodsReceive_No = BB.goodsReceive_No,
                                                    goodsReceive_Date = BB.goodsReceive_Date.ToString(),
                                                    goodsReceiveItem_Index = BB.goodsReceiveItem_Index.ToString(),
                                                    goodsReceiveItemLocation_Index = BB.goodsReceiveItemLocation_Index.ToString(),
                                                    tagItem_Index = BB.tagItem_Index.ToString(),
                                                    tag_Index = BB.tag_Index.ToString(),
                                                    tag_No = BB.tag_No,
                                                    product_Index = BB.product_Index.ToString(),
                                                    product_Id = BB.product_Id,
                                                    product_Name = BB.product_Name,
                                                    product_SecondName = BB.product_SecondName,
                                                    product_ThirdName = BB.product_ThirdName,
                                                    product_Lot = BB.product_Lot,
                                                    itemStatus_Index = BB.itemStatus_Index.ToString(),
                                                    itemStatus_Id = BB.itemStatus_Id,
                                                    itemStatus_Name = BB.itemStatus_Name,
                                                    goodsReceive_MFG_Date = BB.goodsReceive_MFG_Date.ToString(),
                                                    goodsReceive_EXP_Date = BB.goodsReceive_EXP_Date.ToString(),
                                                    goodsReceive_ProductConversion_Index = BB.goodsReceive_ProductConversion_Index.ToString(),
                                                    goodsReceive_ProductConversion_Id = BB.goodsReceive_ProductConversion_Id.ToString(),
                                                    goodsReceive_ProductConversion_Name = BB.goodsReceive_ProductConversion_Name.ToString(),


                                                    binBalance_Ratio = BB.binBalance_Ratio,
                                                    binBalance_QtyBegin = BB.binBalance_QtyBegin,
                                                    binBalance_WeightBegin = BB.binBalance_WeightBegin,
                                                    binBalance_WeightBegin_Index = BB.binBalance_WeightBegin_Index,
                                                    binBalance_WeightBegin_Id = BB.binBalance_WeightBegin_Id,
                                                    binBalance_WeightBegin_Name = BB.binBalance_WeightBegin_Name,
                                                    binBalance_WeightBeginRatio = BB.binBalance_WeightBeginRatio,
                                                    binBalance_NetWeightBegin = BB.binBalance_NetWeightBegin,
                                                    binBalance_NetWeightBegin_Index = BB.binBalance_NetWeightBegin_Index,
                                                    binBalance_NetWeightBegin_Id = BB.binBalance_NetWeightBegin_Id,
                                                    binBalance_NetWeightBegin_Name = BB.binBalance_NetWeightBegin_Name,
                                                    binBalance_NetWeightBeginRatio = BB.binBalance_NetWeightBeginRatio,
                                                    binBalance_GrsWeightBegin = BB.binBalance_GrsWeightBegin,
                                                    binBalance_GrsWeightBegin_Index = BB.binBalance_GrsWeightBegin_Index,
                                                    binBalance_GrsWeightBegin_Id = BB.binBalance_GrsWeightBegin_Id,
                                                    binBalance_GrsWeightBegin_Name = BB.binBalance_GrsWeightBegin_Name,
                                                    binBalance_GrsWeightBeginRatio = BB.binBalance_GrsWeightBeginRatio,
                                                    binBalance_WidthBegin = BB.binBalance_WidthBegin,
                                                    binBalance_WidthBegin_Index = BB.binBalance_WidthBegin_Index,
                                                    binBalance_WidthBegin_Id = BB.binBalance_WidthBegin_Id,
                                                    binBalance_WidthBegin_Name = BB.binBalance_WidthBegin_Name,
                                                    binBalance_WidthBeginRatio = BB.binBalance_WidthBeginRatio,
                                                    binBalance_LengthBegin = BB.binBalance_LengthBegin,
                                                    binBalance_LengthBegin_Index = BB.binBalance_LengthBegin_Index,
                                                    binBalance_LengthBegin_Id = BB.binBalance_LengthBegin_Id,
                                                    binBalance_LengthBegin_Name = BB.binBalance_LengthBegin_Name,
                                                    binBalance_LengthBeginRatio = BB.binBalance_LengthBeginRatio,
                                                    binBalance_HeightBegin = BB.binBalance_HeightBegin,
                                                    binBalance_HeightBegin_Index = BB.binBalance_HeightBegin_Index,
                                                    binBalance_HeightBegin_Id = BB.binBalance_HeightBegin_Id,
                                                    binBalance_HeightBegin_Name = BB.binBalance_HeightBegin_Name,
                                                    binBalance_HeightBeginRatio = BB.binBalance_HeightBeginRatio,
                                                    binBalance_UnitVolumeBegin = BB.binBalance_UnitVolumeBegin,
                                                    binBalance_VolumeBegin = BB.binBalance_VolumeBegin,
                                                    binBalance_QtyBal = BB.binBalance_QtyBal,
                                                    binBalance_UnitWeightBal = BB.binBalance_UnitWeightBal,
                                                    binBalance_UnitWeightBal_Index = BB.binBalance_UnitWeightBal_Index,
                                                    binBalance_UnitWeightBal_Id = BB.binBalance_UnitWeightBal_Id,
                                                    binBalance_UnitWeightBal_Name = BB.binBalance_UnitWeightBal_Name,
                                                    binBalance_UnitWeightBalRatio = BB.binBalance_UnitWeightBalRatio,
                                                    binBalance_WeightBal = BB.binBalance_WeightBal,
                                                    binBalance_WeightBal_Index = BB.binBalance_WeightBal_Index,
                                                    binBalance_WeightBal_Id = BB.binBalance_WeightBal_Id,
                                                    binBalance_WeightBal_Name = BB.binBalance_WeightBal_Name,
                                                    binBalance_WeightBalRatio = BB.binBalance_WeightBalRatio,
                                                    binBalance_UnitNetWeightBal = BB.binBalance_UnitNetWeightBal,
                                                    binBalance_UnitNetWeightBal_Index = BB.binBalance_UnitNetWeightBal_Index,
                                                    binBalance_UnitNetWeightBal_Id = BB.binBalance_UnitNetWeightBal_Id,
                                                    binBalance_UnitNetWeightBal_Name = BB.binBalance_UnitNetWeightBal_Name,
                                                    binBalance_UnitNetWeightBalRatio = BB.binBalance_UnitNetWeightBalRatio,
                                                    binBalance_NetWeightBal = BB.binBalance_NetWeightBal,
                                                    binBalance_NetWeightBal_Index = BB.binBalance_NetWeightBal_Index,
                                                    binBalance_NetWeightBal_Id = BB.binBalance_NetWeightBal_Id,
                                                    binBalance_NetWeightBal_Name = BB.binBalance_NetWeightBal_Name,
                                                    binBalance_NetWeightBalRatio = BB.binBalance_NetWeightBalRatio,
                                                    binBalance_UnitGrsWeightBal = BB.binBalance_UnitGrsWeightBal,
                                                    binBalance_UnitGrsWeightBal_Index = BB.binBalance_UnitGrsWeightBal_Index,
                                                    binBalance_UnitGrsWeightBal_Id = BB.binBalance_UnitGrsWeightBal_Id,
                                                    binBalance_UnitGrsWeightBal_Name = BB.binBalance_UnitGrsWeightBal_Name,
                                                    binBalance_UnitGrsWeightBalRatio = BB.binBalance_UnitGrsWeightBalRatio,
                                                    binBalance_GrsWeightBal = BB.binBalance_GrsWeightBal,
                                                    binBalance_GrsWeightBal_Index = BB.binBalance_GrsWeightBal_Index,
                                                    binBalance_GrsWeightBal_Id = BB.binBalance_GrsWeightBal_Id,
                                                    binBalance_GrsWeightBal_Name = BB.binBalance_GrsWeightBal_Name,
                                                    binBalance_GrsWeightBalRatio = BB.binBalance_GrsWeightBalRatio,
                                                    binBalance_UnitWidthBal = BB.binBalance_UnitWidthBal,
                                                    binBalance_UnitWidthBal_Index = BB.binBalance_UnitWidthBal_Index,
                                                    binBalance_UnitWidthBal_Id = BB.binBalance_UnitWidthBal_Id,
                                                    binBalance_UnitWidthBal_Name = BB.binBalance_UnitWidthBal_Name,
                                                    binBalance_UnitWidthBalRatio = BB.binBalance_UnitWidthBalRatio,
                                                    binBalance_WidthBal = BB.binBalance_WidthBal,
                                                    binBalance_WidthBal_Index = BB.binBalance_WidthBal_Index,
                                                    binBalance_WidthBal_Id = BB.binBalance_WidthBal_Id,
                                                    binBalance_WidthBal_Name = BB.binBalance_WidthBal_Name,
                                                    binBalance_WidthBalRatio = BB.binBalance_WidthBalRatio,
                                                    binBalance_UnitLengthBal = BB.binBalance_UnitLengthBal,
                                                    binBalance_UnitLengthBal_Index = BB.binBalance_UnitLengthBal_Index,
                                                    binBalance_UnitLengthBal_Id = BB.binBalance_UnitLengthBal_Id,
                                                    binBalance_UnitLengthBal_Name = BB.binBalance_UnitLengthBal_Name,
                                                    binBalance_UnitLengthBalRatio = BB.binBalance_UnitLengthBalRatio,
                                                    binBalance_LengthBal = BB.binBalance_LengthBal,
                                                    binBalance_LengthBal_Index = BB.binBalance_LengthBal_Index,
                                                    binBalance_LengthBal_Id = BB.binBalance_LengthBal_Id,
                                                    binBalance_LengthBal_Name = BB.binBalance_LengthBal_Name,
                                                    binBalance_LengthBalRatio = BB.binBalance_LengthBalRatio,
                                                    binBalance_UnitHeightBal = BB.binBalance_UnitHeightBal,
                                                    binBalance_UnitHeightBal_Index = BB.binBalance_UnitHeightBal_Index,
                                                    binBalance_UnitHeightBal_Id = BB.binBalance_UnitHeightBal_Id,
                                                    binBalance_UnitHeightBal_Name = BB.binBalance_UnitHeightBal_Name,
                                                    binBalance_UnitHeightBalRatio = BB.binBalance_UnitHeightBalRatio,
                                                    binBalance_HeightBal = BB.binBalance_HeightBal,
                                                    binBalance_HeightBal_Index = BB.binBalance_HeightBal_Index,
                                                    binBalance_HeightBal_Id = BB.binBalance_HeightBal_Id,
                                                    binBalance_HeightBal_Name = BB.binBalance_HeightBal_Name,
                                                    binBalance_HeightBalRatio = BB.binBalance_HeightBalRatio,
                                                    binBalance_UnitVolumeBal = BB.binBalance_UnitVolumeBal,
                                                    binBalance_VolumeBal = BB.binBalance_VolumeBal,
                                                    binBalance_QtyReserve = BB.binBalance_QtyReserve,
                                                    binBalance_WeightReserve = BB.binBalance_WeightReserve,
                                                    binBalance_WeightReserve_Index = BB.binBalance_WeightReserve_Index,
                                                    binBalance_WeightReserve_Id = BB.binBalance_WeightReserve_Id,
                                                    binBalance_WeightReserve_Name = BB.binBalance_WeightReserve_Name,
                                                    binBalance_WeightReserveRatio = BB.binBalance_WeightReserveRatio,
                                                    binBalance_NetWeightReserve = BB.binBalance_NetWeightReserve,
                                                    binBalance_NetWeightReserve_Index = BB.binBalance_NetWeightReserve_Index,
                                                    binBalance_NetWeightReserve_Id = BB.binBalance_NetWeightReserve_Id,
                                                    binBalance_NetWeightReserve_Name = BB.binBalance_NetWeightReserve_Name,
                                                    binBalance_NetWeightReserveRatio = BB.binBalance_NetWeightReserveRatio,
                                                    binBalance_GrsWeightReserve = BB.binBalance_GrsWeightReserve,
                                                    binBalance_GrsWeightReserve_Index = BB.binBalance_GrsWeightReserve_Index,
                                                    binBalance_GrsWeightReserve_Id = BB.binBalance_GrsWeightReserve_Id,
                                                    binBalance_GrsWeightReserve_Name = BB.binBalance_GrsWeightReserve_Name,
                                                    binBalance_GrsWeightReserveRatio = BB.binBalance_GrsWeightReserveRatio,
                                                    binBalance_WidthReserve = BB.binBalance_WidthReserve,
                                                    binBalance_WidthReserve_Index = BB.binBalance_WidthReserve_Index,
                                                    binBalance_WidthReserve_Id = BB.binBalance_WidthReserve_Id,
                                                    binBalance_WidthReserve_Name = BB.binBalance_WidthReserve_Name,
                                                    binBalance_WidthReserveRatio = BB.binBalance_WidthReserveRatio,
                                                    binBalance_LengthReserve = BB.binBalance_LengthReserve,
                                                    binBalance_LengthReserve_Index = BB.binBalance_LengthReserve_Index,
                                                    binBalance_LengthReserve_Id = BB.binBalance_LengthReserve_Id,
                                                    binBalance_LengthReserve_Name = BB.binBalance_LengthReserve_Name,
                                                    binBalance_LengthReserveRatio = BB.binBalance_LengthReserveRatio,
                                                    binBalance_HeightReserve = BB.binBalance_HeightReserve,
                                                    binBalance_HeightReserve_Index = BB.binBalance_HeightReserve_Index,
                                                    binBalance_HeightReserve_Id = BB.binBalance_HeightReserve_Id,
                                                    binBalance_HeightReserve_Name = BB.binBalance_HeightReserve_Name,
                                                    binBalance_HeightReserveRatio = BB.binBalance_HeightReserveRatio,
                                                    binBalance_UnitVolumeReserve = BB.binBalance_UnitVolumeReserve,
                                                    binBalance_VolumeReserve = BB.binBalance_VolumeReserve,


                                                    productConversion_Index = BB.productConversion_Index.ToString(),
                                                    productConversion_Id = BB.productConversion_Id,
                                                    productConversion_Name = BB.productConversion_Name,

                                                    unitPrice = BB.unitPrice,
                                                    unitPrice_Index = BB.unitPrice_Index,
                                                    unitPrice_Id = BB.unitPrice_Id,
                                                    unitPrice_Name = BB.unitPrice_Name,
                                                    price = BB.price,
                                                    price_Index = BB.price_Index,
                                                    price_Id = BB.price_Id,
                                                    price_Name = BB.price_Name,

                                                    udf_1 = BB.uDF_1,
                                                    udf_2 = BB.uDF_2,
                                                    udf_3 = BB.uDF_3,
                                                    udf_4 = BB.uDF_4,
                                                    udf_5 = BB.uDF_5,
                                                    create_By = BB.create_By,
                                                    create_Date = BB.create_Date.ToString(),
                                                    update_By = BB.update_By,
                                                    update_Date = BB.update_Date.ToString(),
                                                    cancel_By = BB.cancel_By,
                                                    cancel_Date = BB.cancel_Date.ToString(),
                                                    isUse = BB.isUse,
                                                    binBalance_Status = BB.binBalance_Status,
                                                    picking_Seq = L?.picking_Seq,
                                                    ageRemain = BB.ageRemain,

                                                    invoice_No = BB.invoice_No,
                                                    declaration_No = BB.declaration_No,
                                                    hs_Code = BB.hs_Code,
                                                    conutry_of_Origin = BB.conutry_of_Origin,
                                                    tax1 = BB.tax1,
                                                    tax1_Currency_Index = BB.tax1_Currency_Index,
                                                    tax1_Currency_Id = BB.tax1_Currency_Id,
                                                    tax1_Currency_Name = BB.tax1_Currency_Name,
                                                    tax2 = BB.tax2,
                                                    tax2_Currency_Index = BB.tax2_Currency_Index,
                                                    tax2_Currency_Id = BB.tax2_Currency_Id,
                                                    tax2_Currency_Name = BB.tax2_Currency_Name,
                                                    tax3 = BB.tax3,
                                                    tax3_Currency_Index = BB.tax3_Currency_Index,
                                                    tax3_Currency_Id = BB.tax3_Currency_Id,
                                                    tax3_Currency_Name = BB.tax3_Currency_Name,
                                                    tax4 = BB.tax4,
                                                    tax4_Currency_Index = BB.tax4_Currency_Index,
                                                    tax4_Currency_Id = BB.tax4_Currency_Id,
                                                    tax4_Currency_Name = BB.tax4_Currency_Name,
                                                    tax5 = BB.tax5,
                                                    tax5_Currency_Index = BB.tax5_Currency_Index,
                                                    tax5_Currency_Id = BB.tax5_Currency_Id,
                                                    tax5_Currency_Name = BB.tax5_Currency_Name,


                                                    productShelfLife_D = Prd.ProductShelfLife_D != null ? Prd.ProductShelfLife_D : 0,
                                                }).AsQueryable();

                    #endregion

                    #region for RuleDesSort
                    var RuleDesList2 = getViewWaveTemplate.Where(c => c.isDestination == 1 && c.isSearch == 1).ToList();

                    //var lambda = Expression.Lambda<Func<View_PLANWAVEbyPLANGIV2, bool>>(e, param);

                    foreach (var itemRuleDesList in RuleDesList2)
                    {
                        if (itemRuleDesList.ruleConditionOperation == "IN")
                        {
                            if (itemRuleDesList.ruleConditionField_Name == "Zone_Id")
                            {
                                //setWhereDes += " And  Location_Index   in (  select   Location_Index  from ms_ZoneLocation   where  IsDelete <> -1 and Zone_Index  in (select Zone_Index from ms_Zone where IsDelete <> -1 and " + itemRuleDesList.ruleConditionField_Name + " IN (" + itemRuleDesList.ruleCondition_Param + " )" + ")) ";
                                var listDataZoneLocation = utils.SendDataApi<List<ZoneLocationViewModel>>(new AppSettingConfig().GetUrl("getZoneLocationMaster"), new { }.sJson());
                                var listDataZone = utils.SendDataApi<List<ZoneViewModel>>(new AppSettingConfig().GetUrl("getZoneMaster"), new { }.sJson());

                                //var param = Expression.Parameter(typeof(ZoneViewModel), "x");
                                //var predicate = Expression.Lambda<Func<ZoneViewModel, bool>>(
                                //    Expression.Call(
                                //        Expression.PropertyOrField(param, itemRuleDesList.ruleConditionField_Name),
                                //        "Contains", null, Expression.Constant(itemRuleDesList.ruleCondition_Param)
                                //    ), param);
                                var dataarray = itemRuleDesList.ruleCondition_Param.Replace("'", "").Split(',');
                                var dataZone = listDataZone.Where(c => dataarray.Contains(c.zone_Id)).ToList();
                                var zoneArray = new List<Guid?>();
                                foreach (var z in dataZone)
                                {
                                    zoneArray.Add(z.zone_Index);
                                }
                                var listLocation_index = listDataZoneLocation.Where(c => zoneArray.Contains(c.zone_Index)).Select(s => s.location_Index.ToString()).ToList();
                                View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => listLocation_index.Contains(c.location_Index));
                            }
                            else
                            {
                                var dataarray = itemRuleDesList.ruleCondition_Param.Replace("'", "").Split(',');
                                if (itemRuleDesList.ruleConditionField_Name == "GoodsReceive_Date")
                                {
                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.goodsReceive_Date));
                                }
                                if (itemRuleDesList.ruleConditionField_Name == "GoodsReceive_No")
                                {
                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.goodsReceive_No));
                                }
                                if (itemRuleDesList.ruleConditionField_Name == "ItemStatus_Id")
                                {
                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.itemStatus_Id));
                                }
                                if (itemRuleDesList.ruleConditionField_Name == "Location_Name")
                                {
                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.location_Name));
                                }
                                if (itemRuleDesList.ruleConditionField_Name == "Locationtype_Id")
                                {
                                    //View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.location));
                                }
                                if (itemRuleDesList.ruleConditionField_Name == "Product_Id")
                                {
                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.product_Id));
                                }
                                if (itemRuleDesList.ruleConditionField_Name == "Product_Lot")
                                {
                                    View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => dataarray.Contains(c.product_Lot));
                                }
                                if (itemRuleDesList.ruleConditionField_Name == "Warehouse")
                                {
                                    //planGIWaveResult = planGIWaveResult.Where(c => dataarray.Contains(c.Warehouse));
                                }

                                //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " IN (" + itemRuleDesList.ruleCondition_Param + ") ";
                                //var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                //var predicate = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>(
                                //    Expression.Call(
                                //        Expression.PropertyOrField(param, itemRuleDesList.ruleConditionField_Name),
                                //        "Contains", null, Expression.Constant(itemRuleDesList.ruleCondition_Param)
                                //    ), param);
                                //View_WaveBinBalance = View_WaveBinBalance.Where(predicate);
                            }
                        }
                        else if (itemRuleDesList.ruleConditionOperation == "=")
                        {
                            if (itemRuleDesList.ruleConditionField_Name == "Zone_Id")
                            {
                                //setWhereDes += "  And  Location_Index   in (  select   Location_Index  from ms_ZoneLocation   where IsDelete <> -1 and Zone_Index  in (select Zone_Index from ms_Zone where IsDelete <> -1 and " + itemRuleDesList.ruleConditionField_Name + " = '" + itemRuleDesList.ruleCondition_Param + "' " + ")) ";
                                var listDataZoneLocation = utils.SendDataApi<List<ZoneLocationViewModel>>(new AppSettingConfig().GetUrl("getZoneLocationMaster"), new { }.sJson());
                                var listDataZone = utils.SendDataApi<List<ZoneViewModel>>(new AppSettingConfig().GetUrl("getZoneMaster"), new { }.sJson());

                                var param = Expression.Parameter(typeof(ZoneViewModel), "x");
                                var lambda = Expression.Lambda<Func<ZoneViewModel, bool>>((Expression)Expression.Equal(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                                    , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                                var dataZone = listDataZone.AsQueryable().Where(lambda).ToList();
                                var zoneArray = new List<Guid?>();
                                foreach (var z in dataZone)
                                {
                                    zoneArray.Add(z.zone_Index);
                                }
                                var listLocation_index = listDataZoneLocation.Where(c => zoneArray.Contains(c.zone_Index)).Select(s => s.location_Index.ToString()).ToList();
                                View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => listLocation_index.Contains(c.location_Index));
                            }
                            else
                            {
                                //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " = '" + itemRuleDesList.ruleCondition_Param + "' ";
                                var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                                var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.Equal(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                                    , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                                View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
                            }
                        }
                        else if (itemRuleDesList.ruleConditionOperation == ">")
                        {
                            //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " > '" + itemRuleDesList.ruleCondition_Param + "' ";
                            var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                            var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.GreaterThan(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                                , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
                        }
                        else if (itemRuleDesList.ruleConditionOperation == "<")
                        {
                            //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " < '" + itemRuleDesList.ruleCondition_Param + "' ";
                            var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                            var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.LessThan(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                                , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
                        }
                        else if (itemRuleDesList.ruleConditionOperation == "!=")
                        {
                            //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " != '" + itemRuleDesList.ruleCondition_Param + "' ";
                            var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                            var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.NotEqual(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                                , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
                        }
                        else if (itemRuleDesList.ruleConditionOperation == ">=")
                        {
                            //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " >= '" + itemRuleDesList.ruleCondition_Param + "' ";
                            var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                            var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.GreaterThanOrEqual(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                                , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
                        }
                        else if (itemRuleDesList.ruleConditionOperation == "<=")
                        {
                            //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " <= '" + itemRuleDesList.ruleCondition_Param + "' ";
                            var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                            var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>((Expression)Expression.LessThanOrEqual(Expression.Property(param, itemRuleDesList.ruleConditionField_Name)
                                , Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""), typeof(string))), param);

                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(lambda);
                        }
                        else if (itemRuleDesList.ruleConditionOperation == "Like")
                        {
                            //setWhereDes += " And " + itemRuleDesList.ruleConditionField_Name + " Like '" + itemRuleDesList.ruleCondition_Param + "' ";
                            var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                            var predicate = Expression.Lambda<Func<View_WaveBinBalanceViewModel, bool>>(
                                Expression.Call(
                                    Expression.PropertyOrField(param, itemRuleDesList.ruleConditionField_Name),
                                    "Contains", null, Expression.Constant(itemRuleDesList.ruleCondition_Param.Replace("'", ""))
                                ), param);
                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(predicate);
                        }
                        //setWhereDes += "";

                    }
                    #endregion

                    #region for RuleDesSortList
                    var RuleDesSortList2 = getViewWaveTemplate.Where(c => c.isDestination == 1 && c.isSort == 1).ToList();

                    int iRowsDesSort2 = 0;
                    foreach (var itemRuleDesSortList in RuleDesSortList2)
                    {
                        if (iRowsDesSort2 == 0)
                        {
                            //setWhereDesSort += itemRuleDesSortList.ruleConditionField_Name + ' ' + itemRuleDesSortList.ruleCondition_Param;
                            var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                            var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, string>>(Expression.Property(param, itemRuleDesSortList.ruleConditionField_Name), param);
                            if (itemRuleDesSortList.ruleCondition_Param.ToUpper() == "DESC")
                            {
                                View_WaveBinBalance2 = View_WaveBinBalance2.OrderByDescending(lambda);
                            }
                            else /*if (itemRuleDesSortList.ruleCondition_Param.ToUpper() == "DESC")*/
                            {
                                View_WaveBinBalance2 = View_WaveBinBalance2.OrderBy(lambda);
                            }
                        }
                        else
                        {
                            var param = Expression.Parameter(typeof(View_WaveBinBalanceViewModel), "x");
                            var lambda = Expression.Lambda<Func<View_WaveBinBalanceViewModel, string>>(Expression.Property(param, itemRuleDesSortList.ruleConditionField_Name), param);
                            if (itemRuleDesSortList.ruleCondition_Param.ToUpper() == "DESC")
                            {
                                View_WaveBinBalance2 = View_WaveBinBalance2.OrderByDescending(lambda);
                            }
                            else /*if (itemRuleDesSortList.ruleCondition_Param.ToUpper() == "DESC")*/
                            {
                                View_WaveBinBalance2 = View_WaveBinBalance2.OrderBy(lambda);
                            }
                        }
                        iRowsDesSort2 = iRowsDesSort2 + 1;

                    }
                    #endregion


                    foreach (var itemPlanGI in planGIWaveResult3)
                    {
                        var ListGoodsIssueItemLocation = new List<im_GoodsIssueItemLocation>();
                        QtyPlanGIRemian = itemPlanGI.TotalQty - itemPlanGI.GITotalQty;

                        if (!string.IsNullOrEmpty(itemPlanGI.ERP_Location))
                        {
                            View_WaveBinBalance2 = View_WaveBinBalance2.Where(c => c.erp_Location == itemPlanGI.ERP_Location);
                        }

                        var BinBalanceResult = View_WaveBinBalance2.ToList();
                        foreach (var itemBin in BinBalanceResult.OrderBy(c => c.picking_Seq).ThenBy(d => d.goodsReceive_EXP_Date).ThenBy(e => e.goodsReceive_Date).ThenBy(f => f.location_Name))
                        {
                            decimal? QtyBal = (itemBin.binBalance_QtyBal - itemBin.binBalance_QtyReserve) - binReserve;
                            if (QtyPlanGIRemian <= 0)
                            {
                                break;
                            }
                            if (QtyBal <= 0)
                            {
                                continue;
                            }
                            if (QtyPlanGIRemian >= QtyBal && QtyBal > 0)
                            {
                                // Add GI ITEMLOCATION 
                                var GoodsIssueItemLocation = new im_GoodsIssueItemLocation();
                                GoodsIssueItemLocation.GoodsIssueItemLocation_Index = Guid.NewGuid();
                                GoodsIssueItemLocation.GoodsIssue_Index = new Guid(model.goodsIssue_Index);
                                GoodsIssueItemLocation.TagItem_Index = new Guid(itemBin.tagItem_Index);
                                GoodsIssueItemLocation.Tag_Index = new Guid(itemBin.tag_Index);
                                GoodsIssueItemLocation.Tag_No = itemBin.tag_No;
                                GoodsIssueItemLocation.Product_Index = new Guid(itemBin.product_Index);
                                GoodsIssueItemLocation.Product_Id = itemBin.product_Id;
                                GoodsIssueItemLocation.Product_Name = itemBin.product_Name;
                                GoodsIssueItemLocation.Product_SecondName = itemBin.product_SecondName;
                                GoodsIssueItemLocation.Product_ThirdName = itemBin.product_ThirdName;
                                GoodsIssueItemLocation.Product_Lot = itemBin.product_Lot;
                                GoodsIssueItemLocation.ItemStatus_Index = new Guid(itemBin.itemStatus_Index);
                                GoodsIssueItemLocation.ItemStatus_Id = itemBin.itemStatus_Id;
                                GoodsIssueItemLocation.ItemStatus_Name = itemBin.itemStatus_Name;
                                GoodsIssueItemLocation.Location_Index = new Guid(itemBin.location_Index);
                                GoodsIssueItemLocation.Location_Id = itemBin.location_Id;
                                GoodsIssueItemLocation.Location_Name = itemBin.location_Name;
                                GoodsIssueItemLocation.Qty = (Decimal)QtyBal / (Decimal)itemPlanGI.Ratio;
                                GoodsIssueItemLocation.Ratio = (Decimal)itemPlanGI.Ratio;
                                GoodsIssueItemLocation.TotalQty = (Decimal)QtyBal;
                                //GoodsIssueItemLocation.ProductConversion_Index = new Guid(itemBin.productConversion_Index);
                                //GoodsIssueItemLocation.ProductConversion_Id = itemBin.productConversion_Id;
                                //GoodsIssueItemLocation.ProductConversion_Name = itemBin.productConversion_Name;
                                GoodsIssueItemLocation.ProductConversion_Index = (Guid)itemPlanGI.ProductConversion_Index;
                                GoodsIssueItemLocation.ProductConversion_Id = itemPlanGI.ProductConversion_Id;
                                GoodsIssueItemLocation.ProductConversion_Name = itemPlanGI.ProductConversion_Name;
                                GoodsIssueItemLocation.MFG_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_MFG_Date) ? itemBin.goodsReceive_MFG_Date.toDate() : null;
                                GoodsIssueItemLocation.EXP_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_EXP_Date) ? itemBin.goodsReceive_EXP_Date.toDate() : null;

                                GoodsIssueItemLocation.UnitWeight = itemBin.binBalance_UnitWeightBal;
                                GoodsIssueItemLocation.UnitWeight_Index = itemBin.binBalance_UnitWeightBal_Index;
                                GoodsIssueItemLocation.UnitWeight_Id = itemBin.binBalance_UnitWeightBal_Id;
                                GoodsIssueItemLocation.UnitWeight_Name = itemBin.binBalance_UnitWeightBal_Name;
                                GoodsIssueItemLocation.UnitWeightRatio = itemBin.binBalance_UnitWeightBalRatio;

                                GoodsIssueItemLocation.Weight = (itemBin.binBalance_WeightBal ?? 0) - (itemBin.binBalance_WeightReserve ?? 0);
                                GoodsIssueItemLocation.Weight_Index = itemBin.binBalance_WeightBal_Index;
                                GoodsIssueItemLocation.Weight_Id = itemBin.binBalance_WeightBal_Id;
                                GoodsIssueItemLocation.Weight_Name = itemBin.binBalance_WeightBal_Name;
                                GoodsIssueItemLocation.WeightRatio = itemBin.binBalance_WeightBalRatio;

                                GoodsIssueItemLocation.UnitNetWeight = itemBin.binBalance_UnitNetWeightBal;
                                GoodsIssueItemLocation.UnitNetWeight_Index = itemBin.binBalance_UnitNetWeightBal_Index;
                                GoodsIssueItemLocation.UnitNetWeight_Id = itemBin.binBalance_UnitNetWeightBal_Id;
                                GoodsIssueItemLocation.UnitNetWeight_Name = itemBin.binBalance_UnitNetWeightBal_Name;
                                GoodsIssueItemLocation.UnitNetWeightRatio = itemBin.binBalance_UnitNetWeightBalRatio;

                                GoodsIssueItemLocation.NetWeight = (itemBin.binBalance_NetWeightBal ?? 0) - (itemBin.binBalance_NetWeightReserve ?? 0);
                                GoodsIssueItemLocation.NetWeight_Index = itemBin.binBalance_NetWeightBal_Index;
                                GoodsIssueItemLocation.NetWeight_Id = itemBin.binBalance_NetWeightBal_Id;
                                GoodsIssueItemLocation.NetWeight_Name = itemBin.binBalance_NetWeightBal_Name;
                                GoodsIssueItemLocation.NetWeightRatio = itemBin.binBalance_NetWeightBalRatio;

                                GoodsIssueItemLocation.UnitGrsWeight = itemBin.binBalance_UnitGrsWeightBal;
                                GoodsIssueItemLocation.UnitGrsWeight_Index = itemBin.binBalance_UnitGrsWeightBal_Index;
                                GoodsIssueItemLocation.UnitGrsWeight_Id = itemBin.binBalance_UnitGrsWeightBal_Id;
                                GoodsIssueItemLocation.UnitGrsWeight_Name = itemBin.binBalance_UnitGrsWeightBal_Name;
                                GoodsIssueItemLocation.UnitGrsWeightRatio = itemBin.binBalance_UnitGrsWeightBalRatio;

                                GoodsIssueItemLocation.GrsWeight = (itemBin.binBalance_GrsWeightBal ?? 0) - (itemBin.binBalance_GrsWeightReserve ?? 0);
                                GoodsIssueItemLocation.GrsWeight_Index = itemBin.binBalance_GrsWeightBal_Index;
                                GoodsIssueItemLocation.GrsWeight_Id = itemBin.binBalance_GrsWeightBal_Id;
                                GoodsIssueItemLocation.GrsWeight_Name = itemBin.binBalance_GrsWeightBal_Name;
                                GoodsIssueItemLocation.GrsWeightRatio = itemBin.binBalance_GrsWeightBalRatio;

                                GoodsIssueItemLocation.UnitWidth = (itemBin.binBalance_UnitWidthBal ?? 0);
                                GoodsIssueItemLocation.UnitWidth_Index = itemBin.binBalance_UnitWidthBal_Index;
                                GoodsIssueItemLocation.UnitWidth_Id = itemBin.binBalance_UnitWidthBal_Id;
                                GoodsIssueItemLocation.UnitWidth_Name = itemBin.binBalance_UnitWidthBal_Name;
                                GoodsIssueItemLocation.UnitWidthRatio = itemBin.binBalance_UnitWidthBalRatio;

                                GoodsIssueItemLocation.Width = (itemBin.binBalance_WidthBal ?? 0) - (itemBin.binBalance_WidthReserve ?? 0);
                                GoodsIssueItemLocation.Width_Index = itemBin.binBalance_WidthBal_Index;
                                GoodsIssueItemLocation.Width_Id = itemBin.binBalance_WidthBal_Id;
                                GoodsIssueItemLocation.Width_Name = itemBin.binBalance_WidthBal_Name;
                                GoodsIssueItemLocation.WidthRatio = itemBin.binBalance_WidthBalRatio;

                                GoodsIssueItemLocation.UnitLength = (itemBin.binBalance_UnitLengthBal ?? 0);
                                GoodsIssueItemLocation.UnitLength_Index = itemBin.binBalance_UnitLengthBal_Index;
                                GoodsIssueItemLocation.UnitLength_Id = itemBin.binBalance_UnitLengthBal_Id;
                                GoodsIssueItemLocation.UnitLength_Name = itemBin.binBalance_UnitLengthBal_Name;
                                GoodsIssueItemLocation.UnitLengthRatio = itemBin.binBalance_UnitLengthBalRatio;

                                GoodsIssueItemLocation.Length = (itemBin.binBalance_LengthBal ?? 0) - (itemBin.binBalance_LengthReserve ?? 0);
                                GoodsIssueItemLocation.Length_Index = itemBin.binBalance_LengthBal_Index;
                                GoodsIssueItemLocation.Length_Id = itemBin.binBalance_LengthBal_Id;
                                GoodsIssueItemLocation.Length_Name = itemBin.binBalance_LengthBal_Name;
                                GoodsIssueItemLocation.LengthRatio = itemBin.binBalance_LengthBalRatio;

                                GoodsIssueItemLocation.UnitHeight = (itemBin.binBalance_UnitHeightBal ?? 0);
                                GoodsIssueItemLocation.UnitHeight_Index = itemBin.binBalance_UnitHeightBal_Index;
                                GoodsIssueItemLocation.UnitHeight_Id = itemBin.binBalance_UnitHeightBal_Id;
                                GoodsIssueItemLocation.UnitHeight_Name = itemBin.binBalance_UnitHeightBal_Name;
                                GoodsIssueItemLocation.UnitHeightRatio = itemBin.binBalance_UnitHeightBalRatio;

                                GoodsIssueItemLocation.Height = (itemBin.binBalance_HeightBal ?? 0) - (itemBin.binBalance_HeightReserve ?? 0);
                                GoodsIssueItemLocation.Height_Index = itemBin.binBalance_HeightBal_Index;
                                GoodsIssueItemLocation.Height_Id = itemBin.binBalance_HeightBal_Id;
                                GoodsIssueItemLocation.Height_Name = itemBin.binBalance_HeightBal_Name;
                                GoodsIssueItemLocation.HeightRatio = itemBin.binBalance_HeightBalRatio;

                                GoodsIssueItemLocation.UnitVolume = (itemBin.binBalance_UnitVolumeBal ?? 0);
                                GoodsIssueItemLocation.Volume = (itemBin.binBalance_VolumeBal ?? 0) - (itemBin.binBalance_VolumeReserve ?? 0);

                                GoodsIssueItemLocation.UnitPrice = (itemBin.unitPrice ?? 0);
                                GoodsIssueItemLocation.UnitPrice_Index = itemBin.unitPrice_Index;
                                GoodsIssueItemLocation.UnitPrice_Id = itemBin.unitPrice_Id;
                                GoodsIssueItemLocation.UnitPrice_Name = itemBin.unitPrice_Name;
                                GoodsIssueItemLocation.Price = (itemBin.price ?? 0);
                                GoodsIssueItemLocation.Price_Index = itemBin.price_Index;
                                GoodsIssueItemLocation.Price_Id = itemBin.price_Id;
                                GoodsIssueItemLocation.Price_Name = itemBin.price_Name;


                                GoodsIssueItemLocation.DocumentRef_No1 = itemPlanGI.DocumentRef_No1;
                                GoodsIssueItemLocation.DocumentRef_No2 = itemPlanGI.DocumentRef_No2;
                                GoodsIssueItemLocation.DocumentRef_No3 = itemPlanGI.DocumentRef_No3;
                                GoodsIssueItemLocation.DocumentRef_No4 = itemPlanGI.DocumentRef_No4;
                                GoodsIssueItemLocation.DocumentRef_No5 = itemPlanGI.DocumentRef_No5;
                                GoodsIssueItemLocation.Document_Status = -2;
                                GoodsIssueItemLocation.UDF_1 = itemPlanGI.UDF_1;
                                GoodsIssueItemLocation.UDF_2 = itemPlanGI.UDF_2;
                                GoodsIssueItemLocation.UDF_3 = itemPlanGI.UDF_3;
                                GoodsIssueItemLocation.UDF_4 = itemPlanGI.UDF_4;
                                GoodsIssueItemLocation.UDF_5 = itemPlanGI.UDF_5;
                                GoodsIssueItemLocation.Ref_Process_Index = new Guid("22744590-55D8-4448-88EF-5997C252111F");  // PLAN GI Process
                                GoodsIssueItemLocation.Ref_Document_No = itemPlanGI.PlanGoodsIssue_No;
                                GoodsIssueItemLocation.Ref_Document_Index = (Guid)itemPlanGI.PlanGoodsIssue_Index;
                                GoodsIssueItemLocation.Ref_DocumentItem_Index = itemPlanGI.PlanGoodsIssueItem_Index;
                                GoodsIssueItemLocation.GoodsReceiveItem_Index = new Guid(itemBin.goodsReceiveItem_Index);
                                GoodsIssueItemLocation.Create_By = model.create_by;
                                GoodsIssueItemLocation.Create_Date = DateTime.Now;
                                GoodsIssueItemLocation.GoodsIssue_No = model.goodsIssue_No;
                                GoodsIssueItemLocation.BinBalance_Index = new Guid(itemBin.binBalance_Index);


                                GoodsIssueItemLocation.Invoice_No = itemBin.invoice_No;
                                GoodsIssueItemLocation.Declaration_No = itemBin.declaration_No;
                                GoodsIssueItemLocation.HS_Code = itemBin.hs_Code;
                                GoodsIssueItemLocation.Conutry_of_Origin = itemBin.conutry_of_Origin;
                                GoodsIssueItemLocation.Tax1 = itemBin.tax1;
                                GoodsIssueItemLocation.Tax1_Currency_Index = itemBin.tax1_Currency_Index;
                                GoodsIssueItemLocation.Tax1_Currency_Id = itemBin.tax1_Currency_Id;
                                GoodsIssueItemLocation.Tax1_Currency_Name = itemBin.tax1_Currency_Name;
                                GoodsIssueItemLocation.Tax2 = itemBin.tax2;
                                GoodsIssueItemLocation.Tax2_Currency_Index = itemBin.tax2_Currency_Index;
                                GoodsIssueItemLocation.Tax2_Currency_Id = itemBin.tax2_Currency_Id;
                                GoodsIssueItemLocation.Tax2_Currency_Name = itemBin.tax2_Currency_Name;
                                GoodsIssueItemLocation.Tax3 = itemBin.tax3;
                                GoodsIssueItemLocation.Tax3_Currency_Index = itemBin.tax3_Currency_Index;
                                GoodsIssueItemLocation.Tax3_Currency_Id = itemBin.tax3_Currency_Id;
                                GoodsIssueItemLocation.Tax3_Currency_Name = itemBin.tax3_Currency_Name;
                                GoodsIssueItemLocation.Tax4 = itemBin.tax4;
                                GoodsIssueItemLocation.Tax4_Currency_Index = itemBin.tax4_Currency_Index;
                                GoodsIssueItemLocation.Tax4_Currency_Id = itemBin.tax4_Currency_Id;
                                GoodsIssueItemLocation.Tax4_Currency_Name = itemBin.tax4_Currency_Name;
                                GoodsIssueItemLocation.Tax5 = itemBin.tax5;
                                GoodsIssueItemLocation.Tax5_Currency_Index = itemBin.tax5_Currency_Index;
                                GoodsIssueItemLocation.Tax5_Currency_Id = itemBin.tax5_Currency_Id;
                                GoodsIssueItemLocation.Tax5_Currency_Name = itemBin.tax5_Currency_Name;
                                GoodsIssueItemLocation.ERP_Location = itemBin.erp_Location;



                                chkdatawave = true;
                                ListGoodsIssueItemLocation.Add(GoodsIssueItemLocation);


                                itemPlanGI.GITotalQty = itemPlanGI.GITotalQty + QtyBal;

                                QtyPlanGIRemian = QtyPlanGIRemian - QtyBal;
                                binReserve += QtyBal;

                            }
                            else if (QtyPlanGIRemian < QtyBal && QtyPlanGIRemian > 0 && QtyBal > 0)
                            {
                                var QtyPick = QtyPlanGIRemian;
                                // Add GI ITEMLOCATION 
                                var GoodsIssueItemLocation = new im_GoodsIssueItemLocation();
                                GoodsIssueItemLocation.GoodsIssueItemLocation_Index = Guid.NewGuid();
                                GoodsIssueItemLocation.GoodsIssue_Index = new Guid(model.goodsIssue_Index);
                                GoodsIssueItemLocation.TagItem_Index = new Guid(itemBin.tagItem_Index);
                                GoodsIssueItemLocation.Tag_Index = new Guid(itemBin.tag_Index);
                                GoodsIssueItemLocation.Tag_No = itemBin.tag_No;
                                GoodsIssueItemLocation.Product_Index = new Guid(itemBin.product_Index);
                                GoodsIssueItemLocation.Product_Id = itemBin.product_Id;
                                GoodsIssueItemLocation.Product_Name = itemBin.product_Name;
                                GoodsIssueItemLocation.Product_SecondName = itemBin.product_SecondName;
                                GoodsIssueItemLocation.Product_ThirdName = itemBin.product_ThirdName;
                                GoodsIssueItemLocation.Product_Lot = itemBin.product_Lot;
                                GoodsIssueItemLocation.ItemStatus_Index = new Guid(itemBin.itemStatus_Index);
                                GoodsIssueItemLocation.ItemStatus_Id = itemBin.itemStatus_Id;
                                GoodsIssueItemLocation.ItemStatus_Name = itemBin.itemStatus_Name;
                                GoodsIssueItemLocation.Location_Index = new Guid(itemBin.location_Index);
                                GoodsIssueItemLocation.Location_Id = itemBin.location_Id;
                                GoodsIssueItemLocation.Location_Name = itemBin.location_Name;
                                GoodsIssueItemLocation.QtyPlan = (Decimal)itemPlanGI.TotalQtyRemian;
                                GoodsIssueItemLocation.Qty = (Decimal)QtyPick / (Decimal)itemPlanGI.Ratio;
                                GoodsIssueItemLocation.Ratio = (Decimal)itemPlanGI.Ratio;
                                GoodsIssueItemLocation.TotalQty = (Decimal)QtyPick;
                                //GoodsIssueItemLocation.ProductConversion_Index = new Guid(itemBin.productConversion_Index);
                                //GoodsIssueItemLocation.ProductConversion_Id = itemBin.productConversion_Id;
                                //GoodsIssueItemLocation.ProductConversion_Name = itemBin.productConversion_Name;
                                GoodsIssueItemLocation.ProductConversion_Index = (Guid)itemPlanGI.ProductConversion_Index;
                                GoodsIssueItemLocation.ProductConversion_Id = itemPlanGI.ProductConversion_Id;
                                GoodsIssueItemLocation.ProductConversion_Name = itemPlanGI.ProductConversion_Name;
                                GoodsIssueItemLocation.MFG_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_MFG_Date) ? itemBin.goodsReceive_MFG_Date.toDate() : null;
                                GoodsIssueItemLocation.EXP_Date = !string.IsNullOrEmpty(itemBin.goodsReceive_EXP_Date) ? itemBin.goodsReceive_EXP_Date.toDate() : null;

                                if (itemBin.binBalance_WeightBegin == 0)
                                {
                                    GoodsIssueItemLocation.Weight = 0;
                                }
                                else
                                {
                                    GoodsIssueItemLocation.UnitWeight = itemBin.binBalance_UnitWeightBal;
                                    GoodsIssueItemLocation.UnitWeight_Index = itemBin.binBalance_UnitWeightBal_Index;
                                    GoodsIssueItemLocation.UnitWeight_Id = itemBin.binBalance_UnitWeightBal_Id;
                                    GoodsIssueItemLocation.UnitWeight_Name = itemBin.binBalance_UnitWeightBal_Name;
                                    GoodsIssueItemLocation.UnitWeightRatio = itemBin.binBalance_UnitWeightBalRatio;

                                    GoodsIssueItemLocation.Weight = (Decimal)(QtyPick * (itemBin.binBalance_UnitWeightBal ?? 0));
                                    GoodsIssueItemLocation.Weight_Index = itemBin.binBalance_UnitWeightBal_Index;
                                    GoodsIssueItemLocation.Weight_Id = itemBin.binBalance_UnitWeightBal_Id;
                                    GoodsIssueItemLocation.Weight_Name = itemBin.binBalance_UnitWeightBal_Name;
                                    GoodsIssueItemLocation.WeightRatio = itemBin.binBalance_UnitWeightBalRatio;
                                }

                                if (itemBin.binBalance_NetWeightBegin == 0)
                                {
                                    GoodsIssueItemLocation.NetWeight = 0;
                                }
                                else
                                {
                                    GoodsIssueItemLocation.UnitNetWeight = itemBin.binBalance_UnitNetWeightBal;
                                    GoodsIssueItemLocation.UnitNetWeight_Index = itemBin.binBalance_UnitNetWeightBal_Index;
                                    GoodsIssueItemLocation.UnitNetWeight_Id = itemBin.binBalance_UnitNetWeightBal_Id;
                                    GoodsIssueItemLocation.UnitNetWeight_Name = itemBin.binBalance_UnitNetWeightBal_Name;
                                    GoodsIssueItemLocation.UnitNetWeightRatio = itemBin.binBalance_UnitNetWeightBalRatio;

                                    GoodsIssueItemLocation.NetWeight = (Decimal)(QtyPick * (itemBin.binBalance_UnitNetWeightBal ?? 0));
                                    GoodsIssueItemLocation.NetWeight_Index = itemBin.binBalance_UnitNetWeightBal_Index;
                                    GoodsIssueItemLocation.NetWeight_Id = itemBin.binBalance_UnitNetWeightBal_Id;
                                    GoodsIssueItemLocation.NetWeight_Name = itemBin.binBalance_UnitNetWeightBal_Name;
                                    GoodsIssueItemLocation.NetWeightRatio = itemBin.binBalance_UnitNetWeightBalRatio;
                                }

                                if (itemBin.binBalance_GrsWeightBegin == 0)
                                {
                                    GoodsIssueItemLocation.GrsWeight = 0;
                                }
                                else
                                {
                                    GoodsIssueItemLocation.UnitGrsWeight = itemBin.binBalance_UnitGrsWeightBal;
                                    GoodsIssueItemLocation.UnitGrsWeight_Index = itemBin.binBalance_UnitGrsWeightBal_Index;
                                    GoodsIssueItemLocation.UnitGrsWeight_Id = itemBin.binBalance_UnitGrsWeightBal_Id;
                                    GoodsIssueItemLocation.UnitGrsWeight_Name = itemBin.binBalance_UnitGrsWeightBal_Name;
                                    GoodsIssueItemLocation.UnitGrsWeightRatio = itemBin.binBalance_UnitGrsWeightBalRatio;

                                    GoodsIssueItemLocation.GrsWeight = (Decimal)(QtyPick * (itemBin.binBalance_UnitGrsWeightBal ?? 0));
                                    GoodsIssueItemLocation.GrsWeight_Index = itemBin.binBalance_UnitGrsWeightBal_Index;
                                    GoodsIssueItemLocation.GrsWeight_Id = itemBin.binBalance_UnitGrsWeightBal_Id;
                                    GoodsIssueItemLocation.GrsWeight_Name = itemBin.binBalance_UnitGrsWeightBal_Name;
                                    GoodsIssueItemLocation.GrsWeightRatio = itemBin.binBalance_UnitGrsWeightBalRatio;
                                }

                                if (itemBin.binBalance_WidthBegin == 0)
                                {
                                    GoodsIssueItemLocation.Width = 0;
                                }
                                else
                                {
                                    GoodsIssueItemLocation.UnitWidth = (itemBin.binBalance_UnitWidthBal ?? 0);
                                    GoodsIssueItemLocation.UnitWidth_Index = itemBin.binBalance_UnitWidthBal_Index;
                                    GoodsIssueItemLocation.UnitWidth_Id = itemBin.binBalance_UnitWidthBal_Id;
                                    GoodsIssueItemLocation.UnitWidth_Name = itemBin.binBalance_UnitWidthBal_Name;
                                    GoodsIssueItemLocation.UnitWidthRatio = itemBin.binBalance_UnitWidthBalRatio;

                                    GoodsIssueItemLocation.Width = (Decimal)(QtyPick * (itemBin.binBalance_UnitWidthBal ?? 0));
                                    GoodsIssueItemLocation.Width_Index = itemBin.binBalance_UnitWidthBal_Index;
                                    GoodsIssueItemLocation.Width_Id = itemBin.binBalance_UnitWidthBal_Id;
                                    GoodsIssueItemLocation.Width_Name = itemBin.binBalance_UnitWidthBal_Name;
                                    GoodsIssueItemLocation.WidthRatio = itemBin.binBalance_UnitWidthBalRatio;
                                }

                                if (itemBin.binBalance_LengthBegin == 0)
                                {
                                    GoodsIssueItemLocation.Length = 0;
                                }
                                else
                                {
                                    GoodsIssueItemLocation.UnitLength = (itemBin.binBalance_UnitLengthBal ?? 0);
                                    GoodsIssueItemLocation.UnitLength_Index = itemBin.binBalance_UnitLengthBal_Index;
                                    GoodsIssueItemLocation.UnitLength_Id = itemBin.binBalance_UnitLengthBal_Id;
                                    GoodsIssueItemLocation.UnitLength_Name = itemBin.binBalance_UnitLengthBal_Name;
                                    GoodsIssueItemLocation.UnitLengthRatio = itemBin.binBalance_UnitLengthBalRatio;

                                    GoodsIssueItemLocation.Length = (Decimal)(QtyPick * (itemBin.binBalance_UnitWidthBal ?? 0));
                                    GoodsIssueItemLocation.Length_Index = itemBin.binBalance_UnitLengthBal_Index;
                                    GoodsIssueItemLocation.Length_Id = itemBin.binBalance_UnitLengthBal_Id;
                                    GoodsIssueItemLocation.Length_Name = itemBin.binBalance_UnitLengthBal_Name;
                                    GoodsIssueItemLocation.LengthRatio = itemBin.binBalance_UnitLengthBalRatio;
                                }

                                if (itemBin.binBalance_HeightBegin == 0)
                                {
                                    GoodsIssueItemLocation.Height = 0;
                                }
                                else
                                {
                                    GoodsIssueItemLocation.UnitHeight = (itemBin.binBalance_UnitHeightBal ?? 0);
                                    GoodsIssueItemLocation.UnitHeight_Index = itemBin.binBalance_UnitHeightBal_Index;
                                    GoodsIssueItemLocation.UnitHeight_Id = itemBin.binBalance_UnitHeightBal_Id;
                                    GoodsIssueItemLocation.UnitHeight_Name = itemBin.binBalance_UnitHeightBal_Name;
                                    GoodsIssueItemLocation.UnitHeightRatio = itemBin.binBalance_UnitHeightBalRatio;

                                    GoodsIssueItemLocation.Height = (Decimal)(QtyPick * (itemBin.binBalance_UnitHeightBal ?? 0));
                                    GoodsIssueItemLocation.Height_Index = itemBin.binBalance_UnitHeightBal_Index;
                                    GoodsIssueItemLocation.Height_Id = itemBin.binBalance_UnitHeightBal_Id;
                                    GoodsIssueItemLocation.Height_Name = itemBin.binBalance_UnitHeightBal_Name;
                                    GoodsIssueItemLocation.HeightRatio = itemBin.binBalance_UnitHeightBalRatio;
                                }

                                if (itemBin.binBalance_UnitVolumeBal == 0)
                                {
                                    GoodsIssueItemLocation.UnitVolume = 0;
                                }
                                else
                                {
                                    GoodsIssueItemLocation.UnitVolume = (itemBin.binBalance_UnitVolumeBal ?? 0);
                                    GoodsIssueItemLocation.Volume = (Decimal)(QtyPick * (itemBin.binBalance_UnitVolumeBal ?? 0));
                                }

                                GoodsIssueItemLocation.UnitPrice = (itemBin.unitPrice ?? 0);
                                GoodsIssueItemLocation.UnitPrice_Index = itemBin.unitPrice_Index;
                                GoodsIssueItemLocation.UnitPrice_Id = itemBin.unitPrice_Id;
                                GoodsIssueItemLocation.UnitPrice_Name = itemBin.unitPrice_Name;
                                GoodsIssueItemLocation.Price = (Decimal)(QtyPick * (itemBin.unitPrice ?? 0));
                                GoodsIssueItemLocation.Price_Index = itemBin.unitPrice_Index;
                                GoodsIssueItemLocation.Price_Id = itemBin.unitPrice_Id;
                                GoodsIssueItemLocation.Price_Name = itemBin.unitPrice_Name;



                                GoodsIssueItemLocation.DocumentRef_No1 = itemPlanGI.DocumentRef_No1;
                                GoodsIssueItemLocation.DocumentRef_No2 = itemPlanGI.DocumentRef_No2;
                                GoodsIssueItemLocation.DocumentRef_No3 = itemPlanGI.DocumentRef_No3;
                                GoodsIssueItemLocation.DocumentRef_No4 = itemPlanGI.DocumentRef_No4;
                                GoodsIssueItemLocation.DocumentRef_No5 = itemPlanGI.DocumentRef_No5;
                                GoodsIssueItemLocation.Document_Status = -2;
                                GoodsIssueItemLocation.UDF_1 = itemPlanGI.UDF_1;
                                GoodsIssueItemLocation.UDF_2 = itemPlanGI.UDF_2;
                                GoodsIssueItemLocation.UDF_3 = itemPlanGI.UDF_3;
                                GoodsIssueItemLocation.UDF_4 = itemPlanGI.UDF_4;
                                GoodsIssueItemLocation.UDF_5 = itemPlanGI.UDF_5;
                                GoodsIssueItemLocation.Ref_Process_Index = new Guid("22744590-55D8-4448-88EF-5997C252111F");  // PLAN GI Process
                                GoodsIssueItemLocation.Ref_Document_No = itemPlanGI.PlanGoodsIssue_No;
                                GoodsIssueItemLocation.Ref_Document_Index = (Guid)itemPlanGI.PlanGoodsIssue_Index;
                                GoodsIssueItemLocation.Ref_DocumentItem_Index = itemPlanGI.PlanGoodsIssueItem_Index;
                                GoodsIssueItemLocation.GoodsReceiveItem_Index = new Guid(itemBin.goodsReceiveItem_Index);
                                GoodsIssueItemLocation.Create_By = model.create_by;
                                GoodsIssueItemLocation.Create_Date = DateTime.Now;
                                GoodsIssueItemLocation.GoodsIssue_No = model.goodsIssue_No;
                                GoodsIssueItemLocation.BinBalance_Index = new Guid(itemBin.binBalance_Index);

                                GoodsIssueItemLocation.Invoice_No = itemBin.invoice_No;
                                GoodsIssueItemLocation.Declaration_No = itemBin.declaration_No;
                                GoodsIssueItemLocation.HS_Code = itemBin.hs_Code;
                                GoodsIssueItemLocation.Conutry_of_Origin = itemBin.conutry_of_Origin;
                                GoodsIssueItemLocation.Tax1 = itemBin.tax1;
                                GoodsIssueItemLocation.Tax1_Currency_Index = itemBin.tax1_Currency_Index;
                                GoodsIssueItemLocation.Tax1_Currency_Id = itemBin.tax1_Currency_Id;
                                GoodsIssueItemLocation.Tax1_Currency_Name = itemBin.tax1_Currency_Name;
                                GoodsIssueItemLocation.Tax2 = itemBin.tax2;
                                GoodsIssueItemLocation.Tax2_Currency_Index = itemBin.tax2_Currency_Index;
                                GoodsIssueItemLocation.Tax2_Currency_Id = itemBin.tax2_Currency_Id;
                                GoodsIssueItemLocation.Tax2_Currency_Name = itemBin.tax2_Currency_Name;
                                GoodsIssueItemLocation.Tax3 = itemBin.tax3;
                                GoodsIssueItemLocation.Tax3_Currency_Index = itemBin.tax3_Currency_Index;
                                GoodsIssueItemLocation.Tax3_Currency_Id = itemBin.tax3_Currency_Id;
                                GoodsIssueItemLocation.Tax3_Currency_Name = itemBin.tax3_Currency_Name;
                                GoodsIssueItemLocation.Tax4 = itemBin.tax4;
                                GoodsIssueItemLocation.Tax4_Currency_Index = itemBin.tax4_Currency_Index;
                                GoodsIssueItemLocation.Tax4_Currency_Id = itemBin.tax4_Currency_Id;
                                GoodsIssueItemLocation.Tax4_Currency_Name = itemBin.tax4_Currency_Name;
                                GoodsIssueItemLocation.Tax5 = itemBin.tax5;
                                GoodsIssueItemLocation.Tax5_Currency_Index = itemBin.tax5_Currency_Index;
                                GoodsIssueItemLocation.Tax5_Currency_Id = itemBin.tax5_Currency_Id;
                                GoodsIssueItemLocation.Tax5_Currency_Name = itemBin.tax5_Currency_Name;
                                GoodsIssueItemLocation.ERP_Location = itemBin.erp_Location;

                                chkdatawave = true;
                                ListGoodsIssueItemLocation.Add(GoodsIssueItemLocation);

                                itemPlanGI.GITotalQty = itemPlanGI.GITotalQty + QtyPick;

                                QtyPlanGIRemian = QtyPlanGIRemian - QtyPick;

                                binReserve += QtyPick;

                            }
                        }

                        #region inset GIL and runwave status 30
                        using (var db4 = new GIDbContext())
                        {
                            var transaction = db4.Database.BeginTransaction(IsolationLevel.Serializable);
                            try
                            {
                                var GI = db4.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 20).ToList();
                                foreach (var g in GI)
                                {
                                    g.RunWave_Status = 30;
                                }

                                db4.IM_GoodsIssueItemLocation.AddRange(ListGoodsIssueItemLocation);
                                db4.SaveChanges();
                                transaction.Commit();
                            }
                            catch (Exception exy)
                            {
                                msglog = State + " ex Rollback " + exy.Message.ToString();
                                olog.logging("runwave", msglog);
                                transaction.Rollback();
                                throw exy;
                            }
                        }
                        #endregion


                        #region insert bincardreserve and runwave status 40

                        using (var Contact = new GIDbContext())
                        {
                            var GIL = Contact.IM_GoodsIssueItemLocation.Where(c => c.Ref_Document_Index == itemPlanGI.PlanGoodsIssue_Index && c.Ref_DocumentItem_Index == itemPlanGI.PlanGoodsIssueItem_Index && c.Document_Status != -1).ToList();
                            foreach (var g in GIL)
                            {
                                var insertBinCardReserve = new PickbinbalanceViewModel();

                                insertBinCardReserve.ref_Document_Index = g.GoodsIssue_Index.ToString();
                                insertBinCardReserve.ref_DocumentItem_Index = g.GoodsIssueItemLocation_Index.ToString();
                                insertBinCardReserve.goodsIssue_No = model.goodsIssue_No;
                                insertBinCardReserve.Process_Index = "22744590-55D8-4448-88EF-5997C252111F";
                                //model.GIIL = GoodsIssueItemLocation;
                                insertBinCardReserve.create_By = model.create_by;
                                insertBinCardReserve.pick = g.TotalQty;
                                insertBinCardReserve.binbalance_Index = g.BinBalance_Index.ToString();
                                insertBinCardReserve.wave_Index = Contact.IM_GoodsIssue.FirstOrDefault(f => f.GoodsIssue_Index == g.GoodsIssue_Index)?.Wave_Index.ToString();
                                var insetBinRe = utils.SendDataApi<actionResultPickbinbalanceViewModel>(new AppSettingConfig().GetUrl("insertBinCardReserve"), insertBinCardReserve.sJson());
                                if (insetBinRe.resultIsUse)
                                {
                                    var transaction = Contact.Database.BeginTransaction(IsolationLevel.Serializable);
                                    try
                                    {
                                        var GI = Contact.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && c.RunWave_Status == 30).ToList();
                                        foreach (var gg in GI)
                                        {
                                            gg.RunWave_Status = 40;
                                        }
                                        Contact.SaveChanges();
                                        transaction.Commit();
                                    }
                                    catch (Exception exy)
                                    {
                                        msglog = State + " ex Rollback " + exy.Message.ToString();
                                        olog.logging("runwave", msglog);
                                        transaction.Rollback();
                                        throw exy;
                                    }
                                }
                                else
                                {
                                    var transaction = Contact.Database.BeginTransaction(IsolationLevel.Serializable);
                                    try
                                    {
                                        var GI = Contact.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(model.goodsIssue_Index) && (c.RunWave_Status == 30 || c.RunWave_Status == 40)).ToList();
                                        foreach (var gg in GI)
                                        {
                                            gg.RunWave_Status = 30;
                                        }
                                        Contact.SaveChanges();
                                        transaction.Commit();
                                    }
                                    catch (Exception exy)
                                    {
                                        msglog = State + " ex Rollback " + exy.Message.ToString();
                                        olog.logging("runwave", msglog);
                                        transaction.Rollback();
                                        throw exy;
                                    }
                                    msglog = State + " ex Rollback " + "Insert BinCardReserve Error";
                                    olog.logging("runwave", msglog);
                                    //return false;
                                    //return result;

                                }
                            }
                        }
                        #endregion
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                msglog = State + " ex Rollback " + ex.Message.ToString();
                olog.logging("runwave", msglog);
                return false;
            }
        }

        #region findtag
        public string findtag(findtagViewModelItem data)
        {
            try
            {
                var tag = db.View_GoodsIssueItemLocation_tag.Where(c => c.tag_No == data.tag_No).ToList();
                if (tag.Count <= 0)
                {
                    return "ไม่พบ tag ที่หา";
                }
                return "";

            }
            catch (Exception ex)
            {

                throw ex;
            }
        }
        #endregion

        #region checkWaveWCS_location
        public ResultCheckWaveWCS checkWaveWCS_location(ResultRunWave model)
        {
            String State = "Start";
            String msglog = "";
            var olog = new logtxt();
            String msg = "";

            var resultWave = new ResultCheckWaveWCS();
            try
            {
                var goodsIssue_No = new SqlParameter("@WaveNo", model.goodsIssue_No);

                var CheckWaveWCS_result = db.View_location_PP_waveEnd.OrderBy(c => c.Location_ID).ToList();
                foreach (var item in CheckWaveWCS_result)
                {
                    ResultChecklocation_PP resultChecklocation = new ResultChecklocation_PP();

                    resultChecklocation.PalletSuggestion = item.PalletSuggestion;
                    resultChecklocation.Location_ID = item.Location_ID;
                    resultChecklocation.PalletID = item.PalletID;
                    resultChecklocation.ProductID = item.ProductID;
                    resultChecklocation.Product_Name = item.Product_Name;
                    resultChecklocation.QtySaleUnit = item.QtySaleUnit;
                    resultChecklocation.UOM = item.UOM;
                    resultChecklocation.ERP_Location = item.ERP_Location;
                    resultChecklocation.WMS_QTYBal = item.WMS_QTYBal;
                    resultChecklocation.WMS_QtyReserve = item.WMS_QtyReserve;

                    resultWave.Checklocation_PPmodel.Add(resultChecklocation);
                }

                return resultWave;


            }
            catch (Exception ex)
            {

                throw ex;
            }
        }
        #endregion

        #region CreateTask
        public String CreateTask(Guid? Index, DateTime? GID, List<View_AssignJobViewModel> ResultItem, String Create_By, String Tempalate)
        {
            decimal GILQty = 0;
            decimal CountQty = 0;
            decimal QtyBreak = 50000;
            String TaskIndex = "";
            String TaskNo = "";

            try
            {

                if (Tempalate != "1")
                {
                    foreach (var itemResult in ResultItem)
                    {

                        GILQty = itemResult.qty;


                        for (int i = (int)Math.Ceiling(GILQty); i > 0;)
                        {
                            if (CountQty == 0)
                            {
                                #region Create Task Header


                                #region GenDoc
                                var Gen = new List<GenDocumentTypeViewModel>();
                                var filterModel = new GenDocumentTypeViewModel();
                                filterModel.process_Index = new Guid("065A991E-77BD-4D28-83A7-0060ED68DE26");
                                filterModel.documentType_Index = new Guid("2F1985B9-E9E8-4059-9320-E07B4FB66E9D");
                                Gen = utils.SendDataApi<List<GenDocumentTypeViewModel>>(new AppSettingConfig().GetUrl("dropDownDocumentType"), filterModel.sJson());

                                ///////////////////
                                var genDoc = new AutoNumberService();
                                //string DocNo = "";
                                DateTime DocumentDate = DateTime.Now;
                                TaskNo = genDoc.genAutoDocmentNumber(Gen, DocumentDate);
                                #endregion

                                var result = new im_Task();

                                result.Task_Index = Guid.NewGuid();
                                result.Task_No = TaskNo;
                                result.Document_Status = 1;
                                result.Create_By = Create_By;
                                result.Create_Date = DateTime.Now;

                                db.IM_Task.Add(result);

                                TaskIndex = result.Task_Index.ToString();
                                CountQty = QtyBreak;

                                #endregion
                            }

                            #region Create TaskItem

                            var resultItem = new im_TaskItem();

                            var FindGIL = db.IM_GoodsIssueItemLocation.Where(c => c.GoodsIssueItemLocation_Index == itemResult.goodsIssueItemLocation_Index).FirstOrDefault();


                            if (GILQty >= CountQty)
                            {

                                resultItem.TaskItem_Index = Guid.NewGuid();
                                resultItem.Task_Index = new Guid(TaskIndex);
                                resultItem.Task_No = TaskNo;
                                resultItem.Tag_Index = FindGIL.Tag_Index;
                                resultItem.TagItem_Index = FindGIL.TagItem_Index;
                                resultItem.Tag_No = FindGIL.Tag_No;
                                resultItem.Product_Index = FindGIL.Product_Index;
                                resultItem.Product_Id = FindGIL.Product_Id;
                                resultItem.Product_Name = FindGIL.Product_Name;
                                resultItem.Product_SecondName = FindGIL.Product_SecondName;
                                resultItem.Product_ThirdName = FindGIL.Product_ThirdName;
                                resultItem.Product_Lot = FindGIL.Product_Lot;
                                resultItem.ItemStatus_Index = FindGIL.ItemStatus_Index;
                                resultItem.ItemStatus_Id = FindGIL.ItemStatus_Id;
                                resultItem.ItemStatus_Name = FindGIL.ItemStatus_Name;
                                resultItem.Location_Index = FindGIL.Location_Index;
                                resultItem.Location_Id = FindGIL.Location_Id;
                                resultItem.Location_Name = FindGIL.Location_Name;
                                resultItem.Qty = CountQty;
                                resultItem.Ratio = FindGIL.Ratio;
                                resultItem.TotalQty = (resultItem.Qty * resultItem.Ratio);
                                resultItem.ProductConversion_Index = FindGIL.ProductConversion_Index;
                                resultItem.ProductConversion_Id = FindGIL.ProductConversion_Id;
                                resultItem.ProductConversion_Name = FindGIL.ProductConversion_Name;
                                resultItem.MFG_Date = FindGIL.MFG_Date;
                                resultItem.EXP_Date = FindGIL.EXP_Date;

                                resultItem.UnitWeight = FindGIL.UnitWeight;
                                resultItem.UnitWeight_Index = FindGIL.UnitWeight_Index;
                                resultItem.UnitWeight_Id = FindGIL.UnitWeight_Id;
                                resultItem.UnitWeight_Name = FindGIL.UnitWeight_Name;
                                resultItem.UnitWeightRatio = FindGIL.UnitWeightRatio;

                                resultItem.Weight = (resultItem.Qty ?? 0) * (FindGIL.UnitWeight ?? 0);
                                resultItem.Weight_Index = FindGIL.Weight_Index;
                                resultItem.Weight_Id = FindGIL.Weight_Id;
                                resultItem.Weight_Name = FindGIL.Weight_Name;
                                resultItem.WeightRatio = FindGIL.WeightRatio;

                                resultItem.UnitNetWeight = FindGIL.UnitNetWeight;
                                resultItem.UnitNetWeight_Index = FindGIL.UnitNetWeight_Index;
                                resultItem.UnitNetWeight_Id = FindGIL.UnitNetWeight_Id;
                                resultItem.UnitNetWeight_Name = FindGIL.UnitNetWeight_Name;
                                resultItem.UnitNetWeightRatio = FindGIL.UnitNetWeightRatio;

                                resultItem.NetWeight = (resultItem.Qty ?? 0) * (FindGIL.UnitNetWeight ?? 0);
                                resultItem.NetWeight_Index = FindGIL.NetWeight_Index;
                                resultItem.NetWeight_Id = FindGIL.NetWeight_Id;
                                resultItem.NetWeight_Name = FindGIL.NetWeight_Name;
                                resultItem.NetWeightRatio = FindGIL.NetWeightRatio;

                                resultItem.UnitGrsWeight = FindGIL.UnitGrsWeight;
                                resultItem.UnitGrsWeight_Index = FindGIL.UnitGrsWeight_Index;
                                resultItem.UnitGrsWeight_Id = FindGIL.UnitGrsWeight_Id;
                                resultItem.UnitGrsWeight_Name = FindGIL.UnitGrsWeight_Name;
                                resultItem.UnitGrsWeightRatio = FindGIL.UnitGrsWeightRatio;

                                resultItem.GrsWeight = (resultItem.Qty ?? 0) * (FindGIL.UnitGrsWeight ?? 0);
                                resultItem.GrsWeight_Index = FindGIL.GrsWeight_Index;
                                resultItem.GrsWeight_Id = FindGIL.GrsWeight_Id;
                                resultItem.GrsWeight_Name = FindGIL.GrsWeight_Name;
                                resultItem.GrsWeightRatio = FindGIL.GrsWeightRatio;

                                resultItem.UnitWidth = FindGIL.UnitWidth;
                                resultItem.UnitWidth_Index = FindGIL.UnitWidth_Index;
                                resultItem.UnitWidth_Id = FindGIL.UnitWidth_Id;
                                resultItem.UnitWidth_Name = FindGIL.UnitWidth_Name;
                                resultItem.UnitWidthRatio = FindGIL.UnitWidthRatio;

                                resultItem.Width = (resultItem.Qty ?? 0) * FindGIL.UnitWidth;
                                resultItem.Width_Index = FindGIL.Width_Index;
                                resultItem.Width_Id = FindGIL.Width_Id;
                                resultItem.Width_Name = FindGIL.Width_Name;
                                resultItem.WidthRatio = FindGIL.WidthRatio;

                                resultItem.UnitLength = FindGIL.UnitLength;
                                resultItem.UnitLength_Index = FindGIL.UnitLength_Index;
                                resultItem.UnitLength_Id = FindGIL.UnitLength_Id;
                                resultItem.UnitLength_Name = FindGIL.UnitLength_Name;
                                resultItem.UnitLengthRatio = FindGIL.UnitLengthRatio;

                                resultItem.Length = (resultItem.Qty ?? 0) * FindGIL.UnitLength;
                                resultItem.Length_Index = FindGIL.Length_Index;
                                resultItem.Length_Id = FindGIL.Length_Id;
                                resultItem.Length_Name = FindGIL.Length_Name;
                                resultItem.LengthRatio = FindGIL.LengthRatio;

                                resultItem.UnitHeight = FindGIL.UnitHeight;
                                resultItem.UnitHeight_Index = FindGIL.UnitHeight_Index;
                                resultItem.UnitHeight_Id = FindGIL.UnitHeight_Id;
                                resultItem.UnitHeight_Name = FindGIL.UnitHeight_Name;
                                resultItem.UnitHeightRatio = FindGIL.UnitHeightRatio;

                                resultItem.Height = (resultItem.Qty ?? 0) * FindGIL.UnitHeight;
                                resultItem.Height_Index = FindGIL.Height_Index;
                                resultItem.Height_Id = FindGIL.Height_Id;
                                resultItem.Height_Name = FindGIL.Height_Name;
                                resultItem.HeightRatio = FindGIL.HeightRatio;

                                resultItem.UnitVolume = FindGIL.UnitVolume;
                                resultItem.Volume = (resultItem.Qty ?? 0) * FindGIL.UnitVolume;

                                resultItem.UnitPrice = FindGIL.UnitPrice;
                                resultItem.UnitPrice_Index = FindGIL.UnitPrice_Index;
                                resultItem.UnitPrice_Id = FindGIL.UnitPrice_Id;
                                resultItem.UnitPrice_Name = FindGIL.UnitPrice_Name;
                                resultItem.Price = (resultItem.Qty ?? 0) * FindGIL.UnitPrice;
                                resultItem.Price_Index = FindGIL.Price_Index;
                                resultItem.Price_Id = FindGIL.Price_Id;
                                resultItem.Price_Name = FindGIL.Price_Name;

                                resultItem.DocumentRef_No1 = FindGIL.DocumentRef_No1;
                                resultItem.DocumentRef_No2 = FindGIL.DocumentRef_No2;
                                resultItem.DocumentRef_No3 = FindGIL.DocumentRef_No3;
                                resultItem.DocumentRef_No4 = FindGIL.DocumentRef_No4;
                                resultItem.DocumentRef_No5 = FindGIL.DocumentRef_No5;
                                resultItem.Document_Status = 0;
                                resultItem.UDF_1 = FindGIL.UDF_1;
                                resultItem.UDF_2 = FindGIL.UDF_2;
                                resultItem.UDF_3 = FindGIL.UDF_3;
                                resultItem.UDF_4 = FindGIL.UDF_2;
                                resultItem.UDF_5 = FindGIL.UDF_5;
                                resultItem.Ref_Process_Index = new Guid("2E026669-99BD-4DE0-8818-534F29F7B89D");
                                resultItem.Ref_Document_Index = FindGIL.GoodsIssue_Index;
                                resultItem.Ref_Document_No = itemResult.goodsIssue_No;
                                resultItem.Ref_Document_LineNum = FindGIL.LineNum;
                                resultItem.Ref_DocumentItem_Index = FindGIL.GoodsIssueItemLocation_Index;
                                resultItem.PlanGoodsIssue_Index = FindGIL.Ref_Document_Index;
                                resultItem.PlanGoodsIssueItem_Index = FindGIL.Ref_DocumentItem_Index;
                                resultItem.PlanGoodsIssue_No = FindGIL.Ref_Document_No;
                                resultItem.Create_By = Create_By;
                                resultItem.Create_Date = DateTime.Now;
                                resultItem.BinBalance_Index = FindGIL.BinBalance_Index;

                                resultItem.Invoice_No = FindGIL.Invoice_No;
                                resultItem.Invoice_No_Out = FindGIL.Invoice_No_Out;
                                resultItem.Declaration_No = FindGIL.Declaration_No;
                                resultItem.Declaration_No_Out = FindGIL.Declaration_No_Out;
                                resultItem.HS_Code = FindGIL.HS_Code;
                                resultItem.Conutry_of_Origin = FindGIL.Conutry_of_Origin;
                                resultItem.Tax1 = FindGIL.Tax1;
                                resultItem.Tax1_Currency_Index = FindGIL.Tax1_Currency_Index;
                                resultItem.Tax1_Currency_Id = FindGIL.Tax1_Currency_Id;
                                resultItem.Tax1_Currency_Name = FindGIL.Tax1_Currency_Name;
                                resultItem.Tax2 = FindGIL.Tax2;
                                resultItem.Tax2_Currency_Index = FindGIL.Tax2_Currency_Index;
                                resultItem.Tax2_Currency_Id = FindGIL.Tax2_Currency_Id;
                                resultItem.Tax2_Currency_Name = FindGIL.Tax2_Currency_Name;
                                resultItem.Tax3 = FindGIL.Tax3;
                                resultItem.Tax3_Currency_Index = FindGIL.Tax3_Currency_Index;
                                resultItem.Tax3_Currency_Id = FindGIL.Tax3_Currency_Id;
                                resultItem.Tax3_Currency_Name = FindGIL.Tax3_Currency_Name;
                                resultItem.Tax4 = FindGIL.Tax4;
                                resultItem.Tax4_Currency_Index = FindGIL.Tax4_Currency_Index;
                                resultItem.Tax4_Currency_Id = FindGIL.Tax4_Currency_Id;
                                resultItem.Tax4_Currency_Name = FindGIL.Tax4_Currency_Name;
                                resultItem.Tax5 = FindGIL.Tax5;
                                resultItem.Tax5_Currency_Index = FindGIL.Tax5_Currency_Index;
                                resultItem.Tax5_Currency_Id = FindGIL.Tax5_Currency_Id;
                                resultItem.Tax5_Currency_Name = FindGIL.Tax5_Currency_Name;


                                db.IM_TaskItem.Add(resultItem);

                                GILQty = GILQty - CountQty;
                                CountQty = 0;
                                i = (int)Math.Ceiling(GILQty);


                            }

                            else if (GILQty < QtyBreak)
                            {
                                resultItem.TaskItem_Index = Guid.NewGuid();
                                resultItem.Task_Index = new Guid(TaskIndex);
                                resultItem.Task_No = TaskNo;
                                resultItem.Tag_Index = FindGIL.Tag_Index;
                                resultItem.TagItem_Index = FindGIL.TagItem_Index;
                                resultItem.Tag_No = FindGIL.Tag_No;
                                resultItem.Product_Index = FindGIL.Product_Index;
                                resultItem.Product_Id = FindGIL.Product_Id;
                                resultItem.Product_Name = FindGIL.Product_Name;
                                resultItem.Product_SecondName = FindGIL.Product_SecondName;
                                resultItem.Product_ThirdName = FindGIL.Product_ThirdName;
                                resultItem.Product_Lot = FindGIL.Product_Lot;
                                resultItem.ItemStatus_Index = FindGIL.ItemStatus_Index;
                                resultItem.ItemStatus_Id = FindGIL.ItemStatus_Id;
                                resultItem.ItemStatus_Name = FindGIL.ItemStatus_Name;
                                resultItem.Location_Index = FindGIL.Location_Index;
                                resultItem.Location_Id = FindGIL.Location_Id;
                                resultItem.Location_Name = FindGIL.Location_Name;
                                resultItem.Qty = GILQty;
                                resultItem.Ratio = FindGIL.Ratio;
                                resultItem.TotalQty = (resultItem.Qty * resultItem.Ratio);
                                resultItem.ProductConversion_Index = FindGIL.ProductConversion_Index;
                                resultItem.ProductConversion_Id = FindGIL.ProductConversion_Id;
                                resultItem.ProductConversion_Name = FindGIL.ProductConversion_Name;
                                resultItem.MFG_Date = FindGIL.MFG_Date;
                                resultItem.EXP_Date = FindGIL.EXP_Date;

                                resultItem.UnitWeight = FindGIL.UnitWeight;
                                resultItem.UnitWeight_Index = FindGIL.UnitWeight_Index;
                                resultItem.UnitWeight_Id = FindGIL.UnitWeight_Id;
                                resultItem.UnitWeight_Name = FindGIL.UnitWeight_Name;
                                resultItem.UnitWeightRatio = FindGIL.UnitWeightRatio;

                                resultItem.Weight = (resultItem.Qty ?? 0) * (FindGIL.UnitWeight ?? 0);
                                resultItem.Weight_Index = FindGIL.Weight_Index;
                                resultItem.Weight_Id = FindGIL.Weight_Id;
                                resultItem.Weight_Name = FindGIL.Weight_Name;
                                resultItem.WeightRatio = FindGIL.WeightRatio;

                                resultItem.UnitNetWeight = FindGIL.UnitNetWeight;
                                resultItem.UnitNetWeight_Index = FindGIL.UnitNetWeight_Index;
                                resultItem.UnitNetWeight_Id = FindGIL.UnitNetWeight_Id;
                                resultItem.UnitNetWeight_Name = FindGIL.UnitNetWeight_Name;
                                resultItem.UnitNetWeightRatio = FindGIL.UnitNetWeightRatio;

                                resultItem.NetWeight = (resultItem.Qty ?? 0) * (FindGIL.UnitNetWeight ?? 0);
                                resultItem.NetWeight_Index = FindGIL.NetWeight_Index;
                                resultItem.NetWeight_Id = FindGIL.NetWeight_Id;
                                resultItem.NetWeight_Name = FindGIL.NetWeight_Name;
                                resultItem.NetWeightRatio = FindGIL.NetWeightRatio;

                                resultItem.UnitGrsWeight = FindGIL.UnitGrsWeight;
                                resultItem.UnitGrsWeight_Index = FindGIL.UnitGrsWeight_Index;
                                resultItem.UnitGrsWeight_Id = FindGIL.UnitGrsWeight_Id;
                                resultItem.UnitGrsWeight_Name = FindGIL.UnitGrsWeight_Name;
                                resultItem.UnitGrsWeightRatio = FindGIL.UnitGrsWeightRatio;

                                resultItem.GrsWeight = (resultItem.Qty ?? 0) * (FindGIL.UnitGrsWeight ?? 0);
                                resultItem.GrsWeight_Index = FindGIL.GrsWeight_Index;
                                resultItem.GrsWeight_Id = FindGIL.GrsWeight_Id;
                                resultItem.GrsWeight_Name = FindGIL.GrsWeight_Name;
                                resultItem.GrsWeightRatio = FindGIL.GrsWeightRatio;

                                resultItem.UnitWidth = FindGIL.UnitWidth;
                                resultItem.UnitWidth_Index = FindGIL.UnitWidth_Index;
                                resultItem.UnitWidth_Id = FindGIL.UnitWidth_Id;
                                resultItem.UnitWidth_Name = FindGIL.UnitWidth_Name;
                                resultItem.UnitWidthRatio = FindGIL.UnitWidthRatio;

                                resultItem.Width = (resultItem.Qty ?? 0) * FindGIL.UnitWidth;
                                resultItem.Width_Index = FindGIL.Width_Index;
                                resultItem.Width_Id = FindGIL.Width_Id;
                                resultItem.Width_Name = FindGIL.Width_Name;
                                resultItem.WidthRatio = FindGIL.WidthRatio;

                                resultItem.UnitLength = FindGIL.UnitLength;
                                resultItem.UnitLength_Index = FindGIL.UnitLength_Index;
                                resultItem.UnitLength_Id = FindGIL.UnitLength_Id;
                                resultItem.UnitLength_Name = FindGIL.UnitLength_Name;
                                resultItem.UnitLengthRatio = FindGIL.UnitLengthRatio;

                                resultItem.Length = (resultItem.Qty ?? 0) * FindGIL.UnitLength;
                                resultItem.Length_Index = FindGIL.Length_Index;
                                resultItem.Length_Id = FindGIL.Length_Id;
                                resultItem.Length_Name = FindGIL.Length_Name;
                                resultItem.LengthRatio = FindGIL.LengthRatio;

                                resultItem.UnitHeight = FindGIL.UnitHeight;
                                resultItem.UnitHeight_Index = FindGIL.UnitHeight_Index;
                                resultItem.UnitHeight_Id = FindGIL.UnitHeight_Id;
                                resultItem.UnitHeight_Name = FindGIL.UnitHeight_Name;
                                resultItem.UnitHeightRatio = FindGIL.UnitHeightRatio;

                                resultItem.Height = (resultItem.Qty ?? 0) * FindGIL.UnitHeight;
                                resultItem.Height_Index = FindGIL.Height_Index;
                                resultItem.Height_Id = FindGIL.Height_Id;
                                resultItem.Height_Name = FindGIL.Height_Name;
                                resultItem.HeightRatio = FindGIL.HeightRatio;

                                resultItem.UnitVolume = FindGIL.UnitVolume;
                                resultItem.Volume = (resultItem.Qty ?? 0) * FindGIL.UnitVolume;

                                resultItem.UnitPrice = FindGIL.UnitPrice;
                                resultItem.UnitPrice_Index = FindGIL.UnitPrice_Index;
                                resultItem.UnitPrice_Id = FindGIL.UnitPrice_Id;
                                resultItem.UnitPrice_Name = FindGIL.UnitPrice_Name;
                                resultItem.Price = (resultItem.Qty ?? 0) * FindGIL.UnitPrice;
                                resultItem.Price_Index = FindGIL.Price_Index;
                                resultItem.Price_Id = FindGIL.Price_Id;
                                resultItem.Price_Name = FindGIL.Price_Name;

                                resultItem.DocumentRef_No1 = FindGIL.DocumentRef_No1;
                                resultItem.DocumentRef_No2 = FindGIL.DocumentRef_No2;
                                resultItem.DocumentRef_No3 = FindGIL.DocumentRef_No3;
                                resultItem.DocumentRef_No4 = FindGIL.DocumentRef_No4;
                                resultItem.DocumentRef_No5 = FindGIL.DocumentRef_No5;
                                resultItem.Document_Status = 0;
                                resultItem.UDF_1 = FindGIL.UDF_1;
                                resultItem.UDF_2 = FindGIL.UDF_2;
                                resultItem.UDF_3 = FindGIL.UDF_3;
                                resultItem.UDF_4 = FindGIL.UDF_2;
                                resultItem.UDF_5 = FindGIL.UDF_5;
                                resultItem.Ref_Process_Index = new Guid("2E026669-99BD-4DE0-8818-534F29F7B89D");
                                resultItem.Ref_Document_Index = FindGIL.GoodsIssue_Index;
                                resultItem.Ref_Document_No = itemResult.goodsIssue_No;
                                resultItem.Ref_Document_LineNum = FindGIL.LineNum;
                                resultItem.Ref_DocumentItem_Index = FindGIL.GoodsIssueItemLocation_Index;
                                resultItem.PlanGoodsIssue_Index = FindGIL.Ref_Document_Index;
                                resultItem.PlanGoodsIssueItem_Index = FindGIL.Ref_DocumentItem_Index;
                                resultItem.PlanGoodsIssue_No = FindGIL.Ref_Document_No;
                                resultItem.Create_By = Create_By;
                                resultItem.Create_Date = DateTime.Now;
                                resultItem.BinBalance_Index = FindGIL.BinBalance_Index;

                                resultItem.Invoice_No = FindGIL.Invoice_No;
                                resultItem.Invoice_No_Out = FindGIL.Invoice_No_Out;
                                resultItem.Declaration_No = FindGIL.Declaration_No;
                                resultItem.Declaration_No_Out = FindGIL.Declaration_No_Out;
                                resultItem.HS_Code = FindGIL.HS_Code;
                                resultItem.Conutry_of_Origin = FindGIL.Conutry_of_Origin;
                                resultItem.Tax1 = FindGIL.Tax1;
                                resultItem.Tax1_Currency_Index = FindGIL.Tax1_Currency_Index;
                                resultItem.Tax1_Currency_Id = FindGIL.Tax1_Currency_Id;
                                resultItem.Tax1_Currency_Name = FindGIL.Tax1_Currency_Name;
                                resultItem.Tax2 = FindGIL.Tax2;
                                resultItem.Tax2_Currency_Index = FindGIL.Tax2_Currency_Index;
                                resultItem.Tax2_Currency_Id = FindGIL.Tax2_Currency_Id;
                                resultItem.Tax2_Currency_Name = FindGIL.Tax2_Currency_Name;
                                resultItem.Tax3 = FindGIL.Tax3;
                                resultItem.Tax3_Currency_Index = FindGIL.Tax3_Currency_Index;
                                resultItem.Tax3_Currency_Id = FindGIL.Tax3_Currency_Id;
                                resultItem.Tax3_Currency_Name = FindGIL.Tax3_Currency_Name;
                                resultItem.Tax4 = FindGIL.Tax4;
                                resultItem.Tax4_Currency_Index = FindGIL.Tax4_Currency_Index;
                                resultItem.Tax4_Currency_Id = FindGIL.Tax4_Currency_Id;
                                resultItem.Tax4_Currency_Name = FindGIL.Tax4_Currency_Name;
                                resultItem.Tax5 = FindGIL.Tax5;
                                resultItem.Tax5_Currency_Index = FindGIL.Tax5_Currency_Index;
                                resultItem.Tax5_Currency_Id = FindGIL.Tax5_Currency_Id;
                                resultItem.Tax5_Currency_Name = FindGIL.Tax5_Currency_Name;

                                db.IM_TaskItem.Add(resultItem);

                                CountQty = CountQty - GILQty;
                                GILQty = 0;
                                i = (int)Math.Ceiling(GILQty);

                            }

                            #endregion
                        }

                    }

                }


                else
                {
                    #region Create Task Header



                    var result = new im_Task();


                    var Gen = new List<GenDocumentTypeViewModel>();

                    var filterModel = new GenDocumentTypeViewModel();


                    filterModel.process_Index = new Guid("065A991E-77BD-4D28-83A7-0060ED68DE26");
                    filterModel.documentType_Index = new Guid("2F1985B9-E9E8-4059-9320-E07B4FB66E9D");
                    //GetConfig
                    Gen = utils.SendDataApi<List<GenDocumentTypeViewModel>>(new AppSettingConfig().GetUrl("dropDownDocumentType"), filterModel.sJson());

                    var genDoc = new AutoNumberService();
                    //string DocNo = "";
                    DateTime DocumentDate = DateTime.Now;
                    TaskNo = genDoc.genAutoDocmentNumber(Gen, DocumentDate);


                    result.Task_Index = Guid.NewGuid();
                    result.Task_No = TaskNo;
                    result.Document_Status = 1;
                    result.Create_By = Create_By;
                    result.Create_Date = DateTime.Now;

                    db.IM_Task.Add(result);

                    #endregion

                    #region Create TaskItem

                    var FindGIL = db.IM_GoodsIssueItemLocation.Where(c => c.GoodsIssue_Index == Index && c.Document_Status == 0).ToList();

                    var TaskItem = new List<im_TaskItem>();


                    foreach (var listGIL in FindGIL)
                    {
                        var resultItem = new im_TaskItem();

                        resultItem.TaskItem_Index = Guid.NewGuid();
                        resultItem.Task_Index = result.Task_Index;
                        resultItem.Task_No = TaskNo;
                        resultItem.Tag_Index = listGIL.Tag_Index;
                        resultItem.TagItem_Index = listGIL.TagItem_Index;
                        resultItem.Tag_No = listGIL.Tag_No;
                        resultItem.Product_Index = listGIL.Product_Index;
                        resultItem.Product_Id = listGIL.Product_Id;
                        resultItem.Product_Name = listGIL.Product_Name;
                        resultItem.Product_SecondName = listGIL.Product_SecondName;
                        resultItem.Product_ThirdName = listGIL.Product_ThirdName;
                        resultItem.Product_Lot = listGIL.Product_Lot;
                        resultItem.ItemStatus_Index = listGIL.ItemStatus_Index;
                        resultItem.ItemStatus_Id = listGIL.ItemStatus_Id;
                        resultItem.ItemStatus_Name = listGIL.ItemStatus_Name;
                        resultItem.Location_Index = listGIL.Location_Index;
                        resultItem.Location_Id = listGIL.Location_Id;
                        resultItem.Location_Name = listGIL.Location_Name;
                        resultItem.Qty = listGIL.Qty;
                        resultItem.Ratio = listGIL.Ratio;
                        resultItem.TotalQty = listGIL.TotalQty;
                        resultItem.ProductConversion_Index = listGIL.ProductConversion_Index;
                        resultItem.ProductConversion_Id = listGIL.ProductConversion_Id;
                        resultItem.ProductConversion_Name = listGIL.ProductConversion_Name;
                        resultItem.MFG_Date = listGIL.MFG_Date;
                        resultItem.EXP_Date = listGIL.EXP_Date;

                        resultItem.UnitWeight = listGIL.UnitWeight;
                        resultItem.UnitWeight_Index = listGIL.UnitWeight_Index;
                        resultItem.UnitWeight_Id = listGIL.UnitWeight_Id;
                        resultItem.UnitWeight_Name = listGIL.UnitWeight_Name;
                        resultItem.UnitWeightRatio = listGIL.UnitWeightRatio;

                        resultItem.Weight = listGIL.Weight;
                        resultItem.Weight_Index = listGIL.Weight_Index;
                        resultItem.Weight_Id = listGIL.Weight_Id;
                        resultItem.Weight_Name = listGIL.Weight_Name;
                        resultItem.WeightRatio = listGIL.WeightRatio;

                        resultItem.UnitNetWeight = listGIL.UnitNetWeight;
                        resultItem.UnitNetWeight_Index = listGIL.UnitNetWeight_Index;
                        resultItem.UnitNetWeight_Id = listGIL.UnitNetWeight_Id;
                        resultItem.UnitNetWeight_Name = listGIL.UnitNetWeight_Name;
                        resultItem.UnitNetWeightRatio = listGIL.UnitNetWeightRatio;

                        resultItem.NetWeight = listGIL.NetWeight;
                        resultItem.NetWeight_Index = listGIL.NetWeight_Index;
                        resultItem.NetWeight_Id = listGIL.NetWeight_Id;
                        resultItem.NetWeight_Name = listGIL.NetWeight_Name;
                        resultItem.NetWeightRatio = listGIL.NetWeightRatio;

                        resultItem.UnitGrsWeight = listGIL.UnitGrsWeight;
                        resultItem.UnitGrsWeight_Index = listGIL.UnitGrsWeight_Index;
                        resultItem.UnitGrsWeight_Id = listGIL.UnitGrsWeight_Id;
                        resultItem.UnitGrsWeight_Name = listGIL.UnitGrsWeight_Name;
                        resultItem.UnitGrsWeightRatio = listGIL.UnitGrsWeightRatio;

                        resultItem.GrsWeight = listGIL.GrsWeight;
                        resultItem.GrsWeight_Index = listGIL.GrsWeight_Index;
                        resultItem.GrsWeight_Id = listGIL.GrsWeight_Id;
                        resultItem.GrsWeight_Name = listGIL.GrsWeight_Name;
                        resultItem.GrsWeightRatio = listGIL.GrsWeightRatio;

                        resultItem.UnitWidth = listGIL.UnitWidth;
                        resultItem.UnitWidth_Index = listGIL.UnitWidth_Index;
                        resultItem.UnitWidth_Id = listGIL.UnitWidth_Id;
                        resultItem.UnitWidth_Name = listGIL.UnitWidth_Name;
                        resultItem.UnitWidthRatio = listGIL.UnitWidthRatio;

                        resultItem.Width = listGIL.Width;
                        resultItem.Width_Index = listGIL.Width_Index;
                        resultItem.Width_Id = listGIL.Width_Id;
                        resultItem.Width_Name = listGIL.Width_Name;
                        resultItem.WidthRatio = listGIL.WidthRatio;

                        resultItem.UnitLength = listGIL.UnitLength;
                        resultItem.UnitLength_Index = listGIL.UnitLength_Index;
                        resultItem.UnitLength_Id = listGIL.UnitLength_Id;
                        resultItem.UnitLength_Name = listGIL.UnitLength_Name;
                        resultItem.UnitLengthRatio = listGIL.UnitLengthRatio;

                        resultItem.Length = listGIL.Length;
                        resultItem.Length_Index = listGIL.Length_Index;
                        resultItem.Length_Id = listGIL.Length_Id;
                        resultItem.Length_Name = listGIL.Length_Name;
                        resultItem.LengthRatio = listGIL.LengthRatio;

                        resultItem.UnitHeight = listGIL.UnitHeight;
                        resultItem.UnitHeight_Index = listGIL.UnitHeight_Index;
                        resultItem.UnitHeight_Id = listGIL.UnitHeight_Id;
                        resultItem.UnitHeight_Name = listGIL.UnitHeight_Name;
                        resultItem.UnitHeightRatio = listGIL.UnitHeightRatio;

                        resultItem.Height = listGIL.Height;
                        resultItem.Height_Index = listGIL.Height_Index;
                        resultItem.Height_Id = listGIL.Height_Id;
                        resultItem.Height_Name = listGIL.Height_Name;
                        resultItem.HeightRatio = listGIL.HeightRatio;

                        resultItem.UnitVolume = listGIL.UnitVolume;
                        resultItem.Volume = listGIL.Volume;

                        resultItem.UnitPrice = listGIL.UnitPrice;
                        resultItem.UnitPrice_Index = listGIL.UnitPrice_Index;
                        resultItem.UnitPrice_Id = listGIL.UnitPrice_Id;
                        resultItem.UnitPrice_Name = listGIL.UnitPrice_Name;
                        resultItem.Price = listGIL.Price;
                        resultItem.Price_Index = listGIL.Price_Index;
                        resultItem.Price_Id = listGIL.Price_Id;
                        resultItem.Price_Name = listGIL.Price_Name;

                        resultItem.DocumentRef_No1 = listGIL.DocumentRef_No1;
                        resultItem.DocumentRef_No2 = listGIL.DocumentRef_No2;
                        resultItem.DocumentRef_No3 = listGIL.DocumentRef_No3;
                        resultItem.DocumentRef_No4 = listGIL.DocumentRef_No4;
                        resultItem.DocumentRef_No5 = listGIL.DocumentRef_No5;
                        resultItem.Document_Status = 0;
                        resultItem.UDF_1 = listGIL.UDF_1;
                        resultItem.UDF_2 = listGIL.UDF_2;
                        resultItem.UDF_3 = listGIL.UDF_3;
                        resultItem.UDF_4 = listGIL.UDF_2;
                        resultItem.UDF_5 = listGIL.UDF_5;
                        resultItem.Ref_Process_Index = new Guid("2E026669-99BD-4DE0-8818-534F29F7B89D");
                        resultItem.Ref_Document_Index = listGIL.GoodsIssue_Index;
                        resultItem.Ref_Document_No = listGIL.GoodsIssue_No;
                        resultItem.Ref_Document_LineNum = listGIL.LineNum;
                        resultItem.Ref_DocumentItem_Index = listGIL.GoodsIssueItemLocation_Index;
                        resultItem.PlanGoodsIssue_Index = listGIL.Ref_Document_Index;
                        resultItem.PlanGoodsIssueItem_Index = listGIL.Ref_DocumentItem_Index;
                        resultItem.PlanGoodsIssue_No = listGIL.Ref_Document_No;
                        resultItem.Create_By = Create_By;
                        resultItem.Create_Date = DateTime.Now;
                        resultItem.BinBalance_Index = listGIL.BinBalance_Index;

                        resultItem.Invoice_No = listGIL.Invoice_No;
                        resultItem.Invoice_No_Out = listGIL.Invoice_No_Out;
                        resultItem.Declaration_No = listGIL.Declaration_No;
                        resultItem.Declaration_No_Out = listGIL.Declaration_No_Out;
                        resultItem.HS_Code = listGIL.HS_Code;
                        resultItem.Conutry_of_Origin = listGIL.Conutry_of_Origin;
                        resultItem.Tax1 = listGIL.Tax1;
                        resultItem.Tax1_Currency_Index = listGIL.Tax1_Currency_Index;
                        resultItem.Tax1_Currency_Id = listGIL.Tax1_Currency_Id;
                        resultItem.Tax1_Currency_Name = listGIL.Tax1_Currency_Name;
                        resultItem.Tax2 = listGIL.Tax2;
                        resultItem.Tax2_Currency_Index = listGIL.Tax2_Currency_Index;
                        resultItem.Tax2_Currency_Id = listGIL.Tax2_Currency_Id;
                        resultItem.Tax2_Currency_Name = listGIL.Tax2_Currency_Name;
                        resultItem.Tax3 = listGIL.Tax3;
                        resultItem.Tax3_Currency_Index = listGIL.Tax3_Currency_Index;
                        resultItem.Tax3_Currency_Id = listGIL.Tax3_Currency_Id;
                        resultItem.Tax3_Currency_Name = listGIL.Tax3_Currency_Name;
                        resultItem.Tax4 = listGIL.Tax4;
                        resultItem.Tax4_Currency_Index = listGIL.Tax4_Currency_Index;
                        resultItem.Tax4_Currency_Id = listGIL.Tax4_Currency_Id;
                        resultItem.Tax4_Currency_Name = listGIL.Tax4_Currency_Name;
                        resultItem.Tax5 = listGIL.Tax5;
                        resultItem.Tax5_Currency_Index = listGIL.Tax5_Currency_Index;
                        resultItem.Tax5_Currency_Id = listGIL.Tax5_Currency_Id;
                        resultItem.Tax5_Currency_Name = listGIL.Tax5_Currency_Name;

                        db.IM_TaskItem.Add(resultItem);

                    }

                    #endregion

                }


                return "success";
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }
        public String CreateTaskByLocation(Guid? Index, DateTime? GID, List<View_AssignTaskJobViewModel> ResultItem, String Create_By, String Tempalate, String pLocation_Index, String pLocation_Name, String pTag_No)
        {
            decimal GILQty = 0;
            decimal CountQty = 0;
            decimal QtyBreak = 50000;
            String TaskIndex = "";
            String TaskNo = "";
            String State = "Start";
            String msglog = "";
            var olog = new logtxt();

            try
            {
                olog.logging("CreateTaskByLocation", State);
                if (Tempalate != "1")
                {
                    State = "Tempalate not 1 ";
                    olog.logging("CreateTaskByLocation", State);

                    foreach (var itemResult in ResultItem)
                    {

                        GILQty = itemResult.qty;


                        for (int i = (int)Math.Ceiling(GILQty); i > 0;)
                        {
                            if (CountQty == 0)
                            {
                                #region Create Task Header


                                #region GenDoc
                                var Gen = new List<GenDocumentTypeViewModel>();
                                var filterModel = new GenDocumentTypeViewModel();
                                filterModel.process_Index = new Guid("065A991E-77BD-4D28-83A7-0060ED68DE26");
                                filterModel.documentType_Index = new Guid("2F1985B9-E9E8-4059-9320-E07B4FB66E9D");
                                Gen = utils.SendDataApi<List<GenDocumentTypeViewModel>>(new AppSettingConfig().GetUrl("dropDownDocumentType"), filterModel.sJson());

                                ///////////////////
                                var genDoc = new AutoNumberService();
                                //string DocNo = "";
                                DateTime DocumentDate = DateTime.Now;
                                TaskNo = genDoc.genAutoDocmentNumber(Gen, DocumentDate);
                                #endregion

                                var result = new im_Task();

                                result.Task_Index = Guid.NewGuid();
                                result.Task_No = TaskNo;
                                result.Document_Status = 1;
                                result.Create_By = Create_By;
                                result.Create_Date = DateTime.Now;

                                db.IM_Task.Add(result);

                                TaskIndex = result.Task_Index.ToString();
                                CountQty = QtyBreak;

                                #endregion
                            }

                            #region Create TaskItem

                            var resultItem = new im_TaskItem();

                            var FindGIL = db.IM_GoodsIssueItemLocation.Where(c => c.GoodsIssueItemLocation_Index == itemResult.goodsIssueItemLocation_Index).FirstOrDefault();


                            if (GILQty >= CountQty)
                            {

                                resultItem.TaskItem_Index = Guid.NewGuid();
                                resultItem.Task_Index = new Guid(TaskIndex);
                                resultItem.Task_No = TaskNo;
                                resultItem.Tag_Index = FindGIL.Tag_Index;
                                resultItem.TagItem_Index = FindGIL.TagItem_Index;
                                resultItem.Tag_No = FindGIL.Tag_No;
                                resultItem.Product_Index = FindGIL.Product_Index;
                                resultItem.Product_Id = FindGIL.Product_Id;
                                resultItem.Product_Name = FindGIL.Product_Name;
                                resultItem.Product_SecondName = FindGIL.Product_SecondName;
                                resultItem.Product_ThirdName = FindGIL.Product_ThirdName;
                                resultItem.Product_Lot = FindGIL.Product_Lot;
                                resultItem.ItemStatus_Index = FindGIL.ItemStatus_Index;
                                resultItem.ItemStatus_Id = FindGIL.ItemStatus_Id;
                                resultItem.ItemStatus_Name = FindGIL.ItemStatus_Name;
                                resultItem.Location_Index = FindGIL.Location_Index;
                                resultItem.Location_Id = FindGIL.Location_Id;
                                resultItem.Location_Name = FindGIL.Location_Name;
                                resultItem.Qty = CountQty;
                                resultItem.Ratio = FindGIL.Ratio;
                                resultItem.TotalQty = (resultItem.Qty * resultItem.Ratio);
                                resultItem.ProductConversion_Index = FindGIL.ProductConversion_Index;
                                resultItem.ProductConversion_Id = FindGIL.ProductConversion_Id;
                                resultItem.ProductConversion_Name = FindGIL.ProductConversion_Name;
                                resultItem.MFG_Date = FindGIL.MFG_Date;
                                resultItem.EXP_Date = FindGIL.EXP_Date;

                                resultItem.UnitWeight = FindGIL.UnitWeight;
                                resultItem.UnitWeight_Index = FindGIL.UnitWeight_Index;
                                resultItem.UnitWeight_Id = FindGIL.UnitWeight_Id;
                                resultItem.UnitWeight_Name = FindGIL.UnitWeight_Name;
                                resultItem.UnitWeightRatio = FindGIL.UnitWeightRatio;

                                resultItem.Weight = (resultItem.Qty ?? 0) * (FindGIL.UnitWeight ?? 0);
                                resultItem.Weight_Index = FindGIL.Weight_Index;
                                resultItem.Weight_Id = FindGIL.Weight_Id;
                                resultItem.Weight_Name = FindGIL.Weight_Name;
                                resultItem.WeightRatio = FindGIL.WeightRatio;

                                resultItem.UnitNetWeight = FindGIL.UnitNetWeight;
                                resultItem.UnitNetWeight_Index = FindGIL.UnitNetWeight_Index;
                                resultItem.UnitNetWeight_Id = FindGIL.UnitNetWeight_Id;
                                resultItem.UnitNetWeight_Name = FindGIL.UnitNetWeight_Name;
                                resultItem.UnitNetWeightRatio = FindGIL.UnitNetWeightRatio;

                                resultItem.NetWeight = (resultItem.Qty ?? 0) * (FindGIL.UnitNetWeight ?? 0);
                                resultItem.NetWeight_Index = FindGIL.NetWeight_Index;
                                resultItem.NetWeight_Id = FindGIL.NetWeight_Id;
                                resultItem.NetWeight_Name = FindGIL.NetWeight_Name;
                                resultItem.NetWeightRatio = FindGIL.NetWeightRatio;

                                resultItem.UnitGrsWeight = FindGIL.UnitGrsWeight;
                                resultItem.UnitGrsWeight_Index = FindGIL.UnitGrsWeight_Index;
                                resultItem.UnitGrsWeight_Id = FindGIL.UnitGrsWeight_Id;
                                resultItem.UnitGrsWeight_Name = FindGIL.UnitGrsWeight_Name;
                                resultItem.UnitGrsWeightRatio = FindGIL.UnitGrsWeightRatio;

                                resultItem.GrsWeight = (resultItem.Qty ?? 0) * (FindGIL.UnitGrsWeight ?? 0);
                                resultItem.GrsWeight_Index = FindGIL.GrsWeight_Index;
                                resultItem.GrsWeight_Id = FindGIL.GrsWeight_Id;
                                resultItem.GrsWeight_Name = FindGIL.GrsWeight_Name;
                                resultItem.GrsWeightRatio = FindGIL.GrsWeightRatio;

                                resultItem.UnitWidth = FindGIL.UnitWidth;
                                resultItem.UnitWidth_Index = FindGIL.UnitWidth_Index;
                                resultItem.UnitWidth_Id = FindGIL.UnitWidth_Id;
                                resultItem.UnitWidth_Name = FindGIL.UnitWidth_Name;
                                resultItem.UnitWidthRatio = FindGIL.UnitWidthRatio;

                                resultItem.Width = (resultItem.Qty ?? 0) * FindGIL.UnitWidth;
                                resultItem.Width_Index = FindGIL.Width_Index;
                                resultItem.Width_Id = FindGIL.Width_Id;
                                resultItem.Width_Name = FindGIL.Width_Name;
                                resultItem.WidthRatio = FindGIL.WidthRatio;

                                resultItem.UnitLength = FindGIL.UnitLength;
                                resultItem.UnitLength_Index = FindGIL.UnitLength_Index;
                                resultItem.UnitLength_Id = FindGIL.UnitLength_Id;
                                resultItem.UnitLength_Name = FindGIL.UnitLength_Name;
                                resultItem.UnitLengthRatio = FindGIL.UnitLengthRatio;

                                resultItem.Length = (resultItem.Qty ?? 0) * FindGIL.UnitLength;
                                resultItem.Length_Index = FindGIL.Length_Index;
                                resultItem.Length_Id = FindGIL.Length_Id;
                                resultItem.Length_Name = FindGIL.Length_Name;
                                resultItem.LengthRatio = FindGIL.LengthRatio;

                                resultItem.UnitHeight = FindGIL.UnitHeight;
                                resultItem.UnitHeight_Index = FindGIL.UnitHeight_Index;
                                resultItem.UnitHeight_Id = FindGIL.UnitHeight_Id;
                                resultItem.UnitHeight_Name = FindGIL.UnitHeight_Name;
                                resultItem.UnitHeightRatio = FindGIL.UnitHeightRatio;

                                resultItem.Height = (resultItem.Qty ?? 0) * FindGIL.UnitHeight;
                                resultItem.Height_Index = FindGIL.Height_Index;
                                resultItem.Height_Id = FindGIL.Height_Id;
                                resultItem.Height_Name = FindGIL.Height_Name;
                                resultItem.HeightRatio = FindGIL.HeightRatio;

                                resultItem.UnitVolume = FindGIL.UnitVolume;
                                resultItem.Volume = (resultItem.Qty ?? 0) * FindGIL.UnitVolume;

                                resultItem.UnitPrice = FindGIL.UnitPrice;
                                resultItem.UnitPrice_Index = FindGIL.UnitPrice_Index;
                                resultItem.UnitPrice_Id = FindGIL.UnitPrice_Id;
                                resultItem.UnitPrice_Name = FindGIL.UnitPrice_Name;
                                resultItem.Price = (resultItem.Qty ?? 0) * FindGIL.UnitPrice;
                                resultItem.Price_Index = FindGIL.Price_Index;
                                resultItem.Price_Id = FindGIL.Price_Id;
                                resultItem.Price_Name = FindGIL.Price_Name;

                                resultItem.DocumentRef_No1 = ""; //FindGIL.DocumentRef_No1;
                                resultItem.DocumentRef_No2 = "";//FindGIL.DocumentRef_No2;
                                resultItem.DocumentRef_No3 = "";//FindGIL.DocumentRef_No3;
                                resultItem.DocumentRef_No4 = "";//FindGIL.DocumentRef_No4;
                                resultItem.DocumentRef_No5 = "";//FindGIL.DocumentRef_No5;
                                resultItem.Document_Status = 0;
                                resultItem.UDF_1 = "";//FindGIL.UDF_1;
                                resultItem.UDF_2 = "";//FindGIL.UDF_2;
                                resultItem.UDF_3 = "";//FindGIL.UDF_3;
                                resultItem.UDF_4 = "";//FindGIL.UDF_2;
                                resultItem.UDF_5 = "";//FindGIL.UDF_5;
                                resultItem.Ref_Process_Index = new Guid("2E026669-99BD-4DE0-8818-534F29F7B89D");
                                resultItem.Ref_Document_Index = FindGIL.GoodsIssue_Index;
                                resultItem.Ref_Document_No = itemResult.goodsIssue_No;
                                resultItem.Ref_Document_LineNum = FindGIL.LineNum;
                                resultItem.Ref_DocumentItem_Index = FindGIL.GoodsIssueItemLocation_Index;
                                resultItem.PlanGoodsIssue_Index = FindGIL.Ref_Document_Index;
                                resultItem.PlanGoodsIssueItem_Index = FindGIL.Ref_DocumentItem_Index;
                                resultItem.PlanGoodsIssue_No = FindGIL.Ref_Document_No;
                                resultItem.Create_By = Create_By;
                                resultItem.Create_Date = DateTime.Now;
                                resultItem.BinBalance_Index = FindGIL.BinBalance_Index;

                                resultItem.Invoice_No = FindGIL.Invoice_No;
                                resultItem.Invoice_No_Out = FindGIL.Invoice_No_Out;
                                resultItem.Declaration_No = FindGIL.Declaration_No;
                                resultItem.Declaration_No_Out = FindGIL.Declaration_No_Out;
                                resultItem.HS_Code = FindGIL.HS_Code;
                                resultItem.Conutry_of_Origin = FindGIL.Conutry_of_Origin;
                                resultItem.Tax1 = FindGIL.Tax1;
                                resultItem.Tax1_Currency_Index = FindGIL.Tax1_Currency_Index;
                                resultItem.Tax1_Currency_Id = FindGIL.Tax1_Currency_Id;
                                resultItem.Tax1_Currency_Name = FindGIL.Tax1_Currency_Name;
                                resultItem.Tax2 = FindGIL.Tax2;
                                resultItem.Tax2_Currency_Index = FindGIL.Tax2_Currency_Index;
                                resultItem.Tax2_Currency_Id = FindGIL.Tax2_Currency_Id;
                                resultItem.Tax2_Currency_Name = FindGIL.Tax2_Currency_Name;
                                resultItem.Tax3 = FindGIL.Tax3;
                                resultItem.Tax3_Currency_Index = FindGIL.Tax3_Currency_Index;
                                resultItem.Tax3_Currency_Id = FindGIL.Tax3_Currency_Id;
                                resultItem.Tax3_Currency_Name = FindGIL.Tax3_Currency_Name;
                                resultItem.Tax4 = FindGIL.Tax4;
                                resultItem.Tax4_Currency_Index = FindGIL.Tax4_Currency_Index;
                                resultItem.Tax4_Currency_Id = FindGIL.Tax4_Currency_Id;
                                resultItem.Tax4_Currency_Name = FindGIL.Tax4_Currency_Name;
                                resultItem.Tax5 = FindGIL.Tax5;
                                resultItem.Tax5_Currency_Index = FindGIL.Tax5_Currency_Index;
                                resultItem.Tax5_Currency_Id = FindGIL.Tax5_Currency_Id;
                                resultItem.Tax5_Currency_Name = FindGIL.Tax5_Currency_Name;


                                db.IM_TaskItem.Add(resultItem);

                                GILQty = GILQty - CountQty;
                                CountQty = 0;
                                i = (int)Math.Ceiling(GILQty);


                            }

                            else if (GILQty < QtyBreak)
                            {
                                resultItem.TaskItem_Index = Guid.NewGuid();
                                resultItem.Task_Index = new Guid(TaskIndex);
                                resultItem.Task_No = TaskNo;
                                resultItem.Tag_Index = FindGIL.Tag_Index;
                                resultItem.TagItem_Index = FindGIL.TagItem_Index;
                                resultItem.Tag_No = FindGIL.Tag_No;
                                resultItem.Product_Index = FindGIL.Product_Index;
                                resultItem.Product_Id = FindGIL.Product_Id;
                                resultItem.Product_Name = FindGIL.Product_Name;
                                resultItem.Product_SecondName = FindGIL.Product_SecondName;
                                resultItem.Product_ThirdName = FindGIL.Product_ThirdName;
                                resultItem.Product_Lot = FindGIL.Product_Lot;
                                resultItem.ItemStatus_Index = FindGIL.ItemStatus_Index;
                                resultItem.ItemStatus_Id = FindGIL.ItemStatus_Id;
                                resultItem.ItemStatus_Name = FindGIL.ItemStatus_Name;
                                resultItem.Location_Index = FindGIL.Location_Index;
                                resultItem.Location_Id = FindGIL.Location_Id;
                                resultItem.Location_Name = FindGIL.Location_Name;
                                resultItem.Qty = GILQty;
                                resultItem.Ratio = FindGIL.Ratio;
                                resultItem.TotalQty = (resultItem.Qty * resultItem.Ratio);
                                resultItem.ProductConversion_Index = FindGIL.ProductConversion_Index;
                                resultItem.ProductConversion_Id = FindGIL.ProductConversion_Id;
                                resultItem.ProductConversion_Name = FindGIL.ProductConversion_Name;
                                resultItem.MFG_Date = FindGIL.MFG_Date;
                                resultItem.EXP_Date = FindGIL.EXP_Date;

                                resultItem.UnitWeight = FindGIL.UnitWeight;
                                resultItem.UnitWeight_Index = FindGIL.UnitWeight_Index;
                                resultItem.UnitWeight_Id = FindGIL.UnitWeight_Id;
                                resultItem.UnitWeight_Name = FindGIL.UnitWeight_Name;
                                resultItem.UnitWeightRatio = FindGIL.UnitWeightRatio;

                                resultItem.Weight = (resultItem.Qty ?? 0) * (FindGIL.UnitWeight ?? 0);
                                resultItem.Weight_Index = FindGIL.Weight_Index;
                                resultItem.Weight_Id = FindGIL.Weight_Id;
                                resultItem.Weight_Name = FindGIL.Weight_Name;
                                resultItem.WeightRatio = FindGIL.WeightRatio;

                                resultItem.UnitNetWeight = FindGIL.UnitNetWeight;
                                resultItem.UnitNetWeight_Index = FindGIL.UnitNetWeight_Index;
                                resultItem.UnitNetWeight_Id = FindGIL.UnitNetWeight_Id;
                                resultItem.UnitNetWeight_Name = FindGIL.UnitNetWeight_Name;
                                resultItem.UnitNetWeightRatio = FindGIL.UnitNetWeightRatio;

                                resultItem.NetWeight = (resultItem.Qty ?? 0) * (FindGIL.UnitNetWeight ?? 0);
                                resultItem.NetWeight_Index = FindGIL.NetWeight_Index;
                                resultItem.NetWeight_Id = FindGIL.NetWeight_Id;
                                resultItem.NetWeight_Name = FindGIL.NetWeight_Name;
                                resultItem.NetWeightRatio = FindGIL.NetWeightRatio;

                                resultItem.UnitGrsWeight = FindGIL.UnitGrsWeight;
                                resultItem.UnitGrsWeight_Index = FindGIL.UnitGrsWeight_Index;
                                resultItem.UnitGrsWeight_Id = FindGIL.UnitGrsWeight_Id;
                                resultItem.UnitGrsWeight_Name = FindGIL.UnitGrsWeight_Name;
                                resultItem.UnitGrsWeightRatio = FindGIL.UnitGrsWeightRatio;

                                resultItem.GrsWeight = (resultItem.Qty ?? 0) * (FindGIL.UnitGrsWeight ?? 0);
                                resultItem.GrsWeight_Index = FindGIL.GrsWeight_Index;
                                resultItem.GrsWeight_Id = FindGIL.GrsWeight_Id;
                                resultItem.GrsWeight_Name = FindGIL.GrsWeight_Name;
                                resultItem.GrsWeightRatio = FindGIL.GrsWeightRatio;

                                resultItem.UnitWidth = FindGIL.UnitWidth;
                                resultItem.UnitWidth_Index = FindGIL.UnitWidth_Index;
                                resultItem.UnitWidth_Id = FindGIL.UnitWidth_Id;
                                resultItem.UnitWidth_Name = FindGIL.UnitWidth_Name;
                                resultItem.UnitWidthRatio = FindGIL.UnitWidthRatio;

                                resultItem.Width = (resultItem.Qty ?? 0) * FindGIL.UnitWidth;
                                resultItem.Width_Index = FindGIL.Width_Index;
                                resultItem.Width_Id = FindGIL.Width_Id;
                                resultItem.Width_Name = FindGIL.Width_Name;
                                resultItem.WidthRatio = FindGIL.WidthRatio;

                                resultItem.UnitLength = FindGIL.UnitLength;
                                resultItem.UnitLength_Index = FindGIL.UnitLength_Index;
                                resultItem.UnitLength_Id = FindGIL.UnitLength_Id;
                                resultItem.UnitLength_Name = FindGIL.UnitLength_Name;
                                resultItem.UnitLengthRatio = FindGIL.UnitLengthRatio;

                                resultItem.Length = (resultItem.Qty ?? 0) * FindGIL.UnitLength;
                                resultItem.Length_Index = FindGIL.Length_Index;
                                resultItem.Length_Id = FindGIL.Length_Id;
                                resultItem.Length_Name = FindGIL.Length_Name;
                                resultItem.LengthRatio = FindGIL.LengthRatio;

                                resultItem.UnitHeight = FindGIL.UnitHeight;
                                resultItem.UnitHeight_Index = FindGIL.UnitHeight_Index;
                                resultItem.UnitHeight_Id = FindGIL.UnitHeight_Id;
                                resultItem.UnitHeight_Name = FindGIL.UnitHeight_Name;
                                resultItem.UnitHeightRatio = FindGIL.UnitHeightRatio;

                                resultItem.Height = (resultItem.Qty ?? 0) * FindGIL.UnitHeight;
                                resultItem.Height_Index = FindGIL.Height_Index;
                                resultItem.Height_Id = FindGIL.Height_Id;
                                resultItem.Height_Name = FindGIL.Height_Name;
                                resultItem.HeightRatio = FindGIL.HeightRatio;

                                resultItem.UnitVolume = FindGIL.UnitVolume;
                                resultItem.Volume = (resultItem.Qty ?? 0) * FindGIL.UnitVolume;

                                resultItem.UnitPrice = FindGIL.UnitPrice;
                                resultItem.UnitPrice_Index = FindGIL.UnitPrice_Index;
                                resultItem.UnitPrice_Id = FindGIL.UnitPrice_Id;
                                resultItem.UnitPrice_Name = FindGIL.UnitPrice_Name;
                                resultItem.Price = (resultItem.Qty ?? 0) * FindGIL.UnitPrice;
                                resultItem.Price_Index = FindGIL.Price_Index;
                                resultItem.Price_Id = FindGIL.Price_Id;
                                resultItem.Price_Name = FindGIL.Price_Name;

                                resultItem.DocumentRef_No1 = "";//FindGIL.DocumentRef_No1;
                                resultItem.DocumentRef_No2 = "";//FindGIL.DocumentRef_No2;
                                resultItem.DocumentRef_No3 = "";//FindGIL.DocumentRef_No3;
                                resultItem.DocumentRef_No4 = "";//FindGIL.DocumentRef_No4;
                                resultItem.DocumentRef_No5 = "";//FindGIL.DocumentRef_No5;
                                resultItem.Document_Status = 0;
                                resultItem.UDF_1 = "";//FindGIL.UDF_1;
                                resultItem.UDF_2 = "";//FindGIL.UDF_2;
                                resultItem.UDF_3 = "";//FindGIL.UDF_3;
                                resultItem.UDF_4 = "";//FindGIL.UDF_2;
                                resultItem.UDF_5 = "";//FindGIL.UDF_5;
                                resultItem.Ref_Process_Index = new Guid("2E026669-99BD-4DE0-8818-534F29F7B89D");
                                resultItem.Ref_Document_Index = FindGIL.GoodsIssue_Index;
                                resultItem.Ref_Document_No = itemResult.goodsIssue_No;
                                resultItem.Ref_Document_LineNum = FindGIL.LineNum;
                                resultItem.Ref_DocumentItem_Index = FindGIL.GoodsIssueItemLocation_Index;
                                resultItem.PlanGoodsIssue_Index = FindGIL.Ref_Document_Index;
                                resultItem.PlanGoodsIssueItem_Index = FindGIL.Ref_DocumentItem_Index;
                                resultItem.PlanGoodsIssue_No = FindGIL.Ref_Document_No;
                                resultItem.Create_By = Create_By;
                                resultItem.Create_Date = DateTime.Now;
                                resultItem.BinBalance_Index = FindGIL.BinBalance_Index;

                                resultItem.Invoice_No = FindGIL.Invoice_No;
                                resultItem.Invoice_No_Out = FindGIL.Invoice_No_Out;
                                resultItem.Declaration_No = FindGIL.Declaration_No;
                                resultItem.Declaration_No_Out = FindGIL.Declaration_No_Out;
                                resultItem.HS_Code = FindGIL.HS_Code;
                                resultItem.Conutry_of_Origin = FindGIL.Conutry_of_Origin;
                                resultItem.Tax1 = FindGIL.Tax1;
                                resultItem.Tax1_Currency_Index = FindGIL.Tax1_Currency_Index;
                                resultItem.Tax1_Currency_Id = FindGIL.Tax1_Currency_Id;
                                resultItem.Tax1_Currency_Name = FindGIL.Tax1_Currency_Name;
                                resultItem.Tax2 = FindGIL.Tax2;
                                resultItem.Tax2_Currency_Index = FindGIL.Tax2_Currency_Index;
                                resultItem.Tax2_Currency_Id = FindGIL.Tax2_Currency_Id;
                                resultItem.Tax2_Currency_Name = FindGIL.Tax2_Currency_Name;
                                resultItem.Tax3 = FindGIL.Tax3;
                                resultItem.Tax3_Currency_Index = FindGIL.Tax3_Currency_Index;
                                resultItem.Tax3_Currency_Id = FindGIL.Tax3_Currency_Id;
                                resultItem.Tax3_Currency_Name = FindGIL.Tax3_Currency_Name;
                                resultItem.Tax4 = FindGIL.Tax4;
                                resultItem.Tax4_Currency_Index = FindGIL.Tax4_Currency_Index;
                                resultItem.Tax4_Currency_Id = FindGIL.Tax4_Currency_Id;
                                resultItem.Tax4_Currency_Name = FindGIL.Tax4_Currency_Name;
                                resultItem.Tax5 = FindGIL.Tax5;
                                resultItem.Tax5_Currency_Index = FindGIL.Tax5_Currency_Index;
                                resultItem.Tax5_Currency_Id = FindGIL.Tax5_Currency_Id;
                                resultItem.Tax5_Currency_Name = FindGIL.Tax5_Currency_Name;

                                db.IM_TaskItem.Add(resultItem);

                                CountQty = CountQty - GILQty;
                                GILQty = 0;
                                i = (int)Math.Ceiling(GILQty);

                            }

                            #endregion
                        }

                    }

                }


                else
                {
                    #region Create Task Header


                    State = "Tempalate is  1 ";
                    olog.logging("CreateTaskByLocation", State);

                    var result = new im_Task();


                    var Gen = new List<GenDocumentTypeViewModel>();

                    var filterModel = new GenDocumentTypeViewModel();


                    filterModel.process_Index = new Guid("065A991E-77BD-4D28-83A7-0060ED68DE26");
                    filterModel.documentType_Index = new Guid("2F1985B9-E9E8-4059-9320-E07B4FB66E9D");
                    //GetConfig
                    Gen = utils.SendDataApi<List<GenDocumentTypeViewModel>>(new AppSettingConfig().GetUrl("dropDownDocumentType"), filterModel.sJson());

                    var FindGIL = db.IM_GoodsIssueItemLocation.Where(c => c.GoodsIssue_Index == Index && c.Document_Status == 0 && c.Location_Index == Guid.Parse(pLocation_Index) && c.Tag_No == pTag_No).ToList();

                    var genDoc = new AutoNumberService();
                    //string DocNo = "";
                    DateTime DocumentDate = DateTime.Now;
                    TaskNo = genDoc.genAutoDocmentNumber(Gen, DocumentDate);


                    result.Task_Index = Guid.NewGuid();
                    result.Task_No = TaskNo;
                    result.DocumentRef_No1 = pLocation_Name;
                    result.Document_Status = 1;
                    result.Create_By = Create_By;
                    result.Create_Date = DateTime.Now;
                    

                    db.IM_Task.Add(result);

                    #endregion

                    #region Create TaskItem
                    //#region Create TaskItem

                    

                    var TaskItem = new List<im_TaskItem>();


                    foreach (var listGIL in FindGIL)
                    {
                        var resultItem = new im_TaskItem();

                        resultItem.TaskItem_Index = Guid.NewGuid();
                        resultItem.Task_Index = result.Task_Index;
                        resultItem.Task_No = TaskNo;
                        resultItem.Tag_Index = listGIL.Tag_Index;
                        resultItem.TagItem_Index = listGIL.TagItem_Index;
                        resultItem.Tag_No = listGIL.Tag_No;
                        resultItem.Product_Index = listGIL.Product_Index;
                        resultItem.Product_Id = listGIL.Product_Id;
                        resultItem.Product_Name = listGIL.Product_Name;
                        resultItem.Product_SecondName = listGIL.Product_SecondName;
                        resultItem.Product_ThirdName = listGIL.Product_ThirdName;
                        resultItem.Product_Lot = listGIL.Product_Lot;
                        resultItem.ItemStatus_Index = listGIL.ItemStatus_Index;
                        resultItem.ItemStatus_Id = listGIL.ItemStatus_Id;
                        resultItem.ItemStatus_Name = listGIL.ItemStatus_Name;
                        resultItem.Location_Index = listGIL.Location_Index;
                        resultItem.Location_Id = listGIL.Location_Id;
                        resultItem.Location_Name = listGIL.Location_Name;
                        resultItem.Qty = listGIL.Qty;
                        resultItem.Ratio = listGIL.Ratio;
                        resultItem.TotalQty = listGIL.TotalQty;
                        resultItem.ProductConversion_Index = listGIL.ProductConversion_Index;
                        resultItem.ProductConversion_Id = listGIL.ProductConversion_Id;
                        resultItem.ProductConversion_Name = listGIL.ProductConversion_Name;
                        resultItem.MFG_Date = listGIL.MFG_Date;
                        resultItem.EXP_Date = listGIL.EXP_Date;

                        resultItem.UnitWeight = listGIL.UnitWeight;
                        resultItem.UnitWeight_Index = listGIL.UnitWeight_Index;
                        resultItem.UnitWeight_Id = listGIL.UnitWeight_Id;
                        resultItem.UnitWeight_Name = listGIL.UnitWeight_Name;
                        resultItem.UnitWeightRatio = listGIL.UnitWeightRatio;

                        resultItem.Weight = listGIL.Weight;
                        resultItem.Weight_Index = listGIL.Weight_Index;
                        resultItem.Weight_Id = listGIL.Weight_Id;
                        resultItem.Weight_Name = listGIL.Weight_Name;
                        resultItem.WeightRatio = listGIL.WeightRatio;

                        resultItem.UnitNetWeight = listGIL.UnitNetWeight;
                        resultItem.UnitNetWeight_Index = listGIL.UnitNetWeight_Index;
                        resultItem.UnitNetWeight_Id = listGIL.UnitNetWeight_Id;
                        resultItem.UnitNetWeight_Name = listGIL.UnitNetWeight_Name;
                        resultItem.UnitNetWeightRatio = listGIL.UnitNetWeightRatio;

                        resultItem.NetWeight = listGIL.NetWeight;
                        resultItem.NetWeight_Index = listGIL.NetWeight_Index;
                        resultItem.NetWeight_Id = listGIL.NetWeight_Id;
                        resultItem.NetWeight_Name = listGIL.NetWeight_Name;
                        resultItem.NetWeightRatio = listGIL.NetWeightRatio;

                        resultItem.UnitGrsWeight = listGIL.UnitGrsWeight;
                        resultItem.UnitGrsWeight_Index = listGIL.UnitGrsWeight_Index;
                        resultItem.UnitGrsWeight_Id = listGIL.UnitGrsWeight_Id;
                        resultItem.UnitGrsWeight_Name = listGIL.UnitGrsWeight_Name;
                        resultItem.UnitGrsWeightRatio = listGIL.UnitGrsWeightRatio;

                        resultItem.GrsWeight = listGIL.GrsWeight;
                        resultItem.GrsWeight_Index = listGIL.GrsWeight_Index;
                        resultItem.GrsWeight_Id = listGIL.GrsWeight_Id;
                        resultItem.GrsWeight_Name = listGIL.GrsWeight_Name;
                        resultItem.GrsWeightRatio = listGIL.GrsWeightRatio;

                        resultItem.UnitWidth = listGIL.UnitWidth;
                        resultItem.UnitWidth_Index = listGIL.UnitWidth_Index;
                        resultItem.UnitWidth_Id = listGIL.UnitWidth_Id;
                        resultItem.UnitWidth_Name = listGIL.UnitWidth_Name;
                        resultItem.UnitWidthRatio = listGIL.UnitWidthRatio;

                        resultItem.Width = listGIL.Width;
                        resultItem.Width_Index = listGIL.Width_Index;
                        resultItem.Width_Id = listGIL.Width_Id;
                        resultItem.Width_Name = listGIL.Width_Name;
                        resultItem.WidthRatio = listGIL.WidthRatio;

                        resultItem.UnitLength = listGIL.UnitLength;
                        resultItem.UnitLength_Index = listGIL.UnitLength_Index;
                        resultItem.UnitLength_Id = listGIL.UnitLength_Id;
                        resultItem.UnitLength_Name = listGIL.UnitLength_Name;
                        resultItem.UnitLengthRatio = listGIL.UnitLengthRatio;

                        resultItem.Length = listGIL.Length;
                        resultItem.Length_Index = listGIL.Length_Index;
                        resultItem.Length_Id = listGIL.Length_Id;
                        resultItem.Length_Name = listGIL.Length_Name;
                        resultItem.LengthRatio = listGIL.LengthRatio;

                        resultItem.UnitHeight = listGIL.UnitHeight;
                        resultItem.UnitHeight_Index = listGIL.UnitHeight_Index;
                        resultItem.UnitHeight_Id = listGIL.UnitHeight_Id;
                        resultItem.UnitHeight_Name = listGIL.UnitHeight_Name;
                        resultItem.UnitHeightRatio = listGIL.UnitHeightRatio;

                        resultItem.Height = listGIL.Height;
                        resultItem.Height_Index = listGIL.Height_Index;
                        resultItem.Height_Id = listGIL.Height_Id;
                        resultItem.Height_Name = listGIL.Height_Name;
                        resultItem.HeightRatio = listGIL.HeightRatio;

                        resultItem.UnitVolume = listGIL.UnitVolume;
                        resultItem.Volume = listGIL.Volume;

                        resultItem.UnitPrice = listGIL.UnitPrice;
                        resultItem.UnitPrice_Index = listGIL.UnitPrice_Index;
                        resultItem.UnitPrice_Id = listGIL.UnitPrice_Id;
                        resultItem.UnitPrice_Name = listGIL.UnitPrice_Name;
                        resultItem.Price = listGIL.Price;
                        resultItem.Price_Index = listGIL.Price_Index;
                        resultItem.Price_Id = listGIL.Price_Id;
                        resultItem.Price_Name = listGIL.Price_Name;

                        resultItem.DocumentRef_No1 = "";// listGIL.DocumentRef_No1;
                        resultItem.DocumentRef_No2 = ""; // listGIL.DocumentRef_No2;
                        resultItem.DocumentRef_No3 = ""; // listGIL.DocumentRef_No3;
                        resultItem.DocumentRef_No4 = ""; // listGIL.DocumentRef_No4;
                        resultItem.DocumentRef_No5 = ""; // listGIL.DocumentRef_No5;
                        resultItem.Document_Status = 0;
                        resultItem.UDF_1 = listGIL.UDF_1;
                        resultItem.UDF_2 = listGIL.UDF_2;
                        resultItem.UDF_3 = listGIL.UDF_3;
                        resultItem.UDF_4 = listGIL.UDF_2;
                        resultItem.UDF_5 = listGIL.UDF_5;
                        resultItem.Ref_Process_Index = new Guid("2E026669-99BD-4DE0-8818-534F29F7B89D");
                        resultItem.Ref_Document_Index = listGIL.GoodsIssue_Index;
                        resultItem.Ref_Document_No = listGIL.GoodsIssue_No;
                        resultItem.Ref_Document_LineNum = listGIL.LineNum;
                        resultItem.Ref_DocumentItem_Index = listGIL.GoodsIssueItemLocation_Index;
                        resultItem.PlanGoodsIssue_Index = listGIL.Ref_Document_Index;
                        resultItem.PlanGoodsIssueItem_Index = listGIL.Ref_DocumentItem_Index;
                        resultItem.PlanGoodsIssue_No = listGIL.Ref_Document_No;
                        resultItem.Create_By = Create_By;
                        resultItem.Create_Date = DateTime.Now;
                        resultItem.BinBalance_Index = listGIL.BinBalance_Index;

                        resultItem.Invoice_No = listGIL.Invoice_No;
                        resultItem.Invoice_No_Out = listGIL.Invoice_No_Out;
                        resultItem.Declaration_No = listGIL.Declaration_No;
                        resultItem.Declaration_No_Out = listGIL.Declaration_No_Out;
                        resultItem.HS_Code = listGIL.HS_Code;
                        resultItem.Conutry_of_Origin = listGIL.Conutry_of_Origin;
                        resultItem.Tax1 = listGIL.Tax1;
                        resultItem.Tax1_Currency_Index = listGIL.Tax1_Currency_Index;
                        resultItem.Tax1_Currency_Id = listGIL.Tax1_Currency_Id;
                        resultItem.Tax1_Currency_Name = listGIL.Tax1_Currency_Name;
                        resultItem.Tax2 = listGIL.Tax2;
                        resultItem.Tax2_Currency_Index = listGIL.Tax2_Currency_Index;
                        resultItem.Tax2_Currency_Id = listGIL.Tax2_Currency_Id;
                        resultItem.Tax2_Currency_Name = listGIL.Tax2_Currency_Name;
                        resultItem.Tax3 = listGIL.Tax3;
                        resultItem.Tax3_Currency_Index = listGIL.Tax3_Currency_Index;
                        resultItem.Tax3_Currency_Id = listGIL.Tax3_Currency_Id;
                        resultItem.Tax3_Currency_Name = listGIL.Tax3_Currency_Name;
                        resultItem.Tax4 = listGIL.Tax4;
                        resultItem.Tax4_Currency_Index = listGIL.Tax4_Currency_Index;
                        resultItem.Tax4_Currency_Id = listGIL.Tax4_Currency_Id;
                        resultItem.Tax4_Currency_Name = listGIL.Tax4_Currency_Name;
                        resultItem.Tax5 = listGIL.Tax5;
                        resultItem.Tax5_Currency_Index = listGIL.Tax5_Currency_Index;
                        resultItem.Tax5_Currency_Id = listGIL.Tax5_Currency_Id;
                        resultItem.Tax5_Currency_Name = listGIL.Tax5_Currency_Name;
                        resultItem.Export_type = listGIL.Export_type;

                        db.IM_TaskItem.Add(resultItem);

                    }

                    #endregion

                }

                State = "success";
                olog.logging("CreateTaskByLocation", State);

                return "success";
            }
            catch (Exception ex)
            {


                msglog = State + " ex " + ex.Message.ToString();
                olog.logging("CreateTaskByLocation", msglog);
                olog.logging("CreateTaskByLocation", "ex inner - " + ex.InnerException.Message.ToString());

                throw ex;
            }
        }

        #endregion

        #region RunWaveByRound
        public ResultRunWave RunWaveByRound(WaveByRoundViewModel model)
        {
            String State = "Start";
            String msglog = "";
            var olog = new logtxt();
            String msg = "";

            var resultWave = new ResultRunWave(); 
            try
            {
                if (string.IsNullOrEmpty(model.planGoodsIssue_Due_Date) || model.round_id == null)
                {
                    resultWave.resultIsUse = false;
                    resultWave.resultMsg = "กรณาระบุค่าให้ครบก่อนค้นหา";
                    return resultWave;
                }
                else
                {
                    var Round_Id = new SqlParameter("@Round_Id", model.round_id);
                    DateTime dateStart = (model.planGoodsIssue_Due_Date.toBetweenDate().start);
                    var PlanGoodsIssue_Due_Date = new SqlParameter("@PlanGoodsIssue_Due_Date", dateStart);
                    var CheckB4Wave_Result = db.CheckB4Wave.FromSql("sp_CheckB4Wave @Round_Id ,@PlanGoodsIssue_Due_Date", Round_Id, PlanGoodsIssue_Due_Date).ToList();


                    foreach (var item in CheckB4Wave_Result)
                    {
                        if (item.CountRows > 0)
                        {
                            resultWave.resultIsUse = false;
                            resultWave.resultMsg = "กรุณาตรวจสอบ : " + item.msgCheck;
                            return resultWave;
                        }

                    }

                    var checkFOCs = db.CheckFOC.FromSql("sp_CheckFOC @Round_Id ,@PlanGoodsIssue_Due_Date", Round_Id, PlanGoodsIssue_Due_Date).ToList();

                    foreach (var item in checkFOCs)
                    {
                        try
                        {
                            Responcheckbudget result_api = utils.GetDataApi<Responcheckbudget>(new AppSettingConfig().GetUrl("checkbudget"), item.PlanGoodsIssue_No);
                        }
                        catch (Exception ex)
                        {
                            resultWave.resultIsUse = false;
                            resultWave.resultMsg = "ไม่สามารถตรวจสอบ FOC Order : "+ item.PlanGoodsIssue_No + " กรุณาแจ้ง Admin";
                            return resultWave;
                        }
                    }


                    var result = AutoWaveByRound(model.round_id, model.planGoodsIssue_Due_Date,"", model.create_by);

                    if (result != null)
                    {
                        if (result.goodsIssue_No != null)
                        {
                            var goodsIssue_No = new SqlParameter("@GoodsIssue_No", result.goodsIssue_No);
                            var CheckWaveDip_Result = db.CheckWaveDip.FromSql("sp_CheckWaveDip  @GoodsIssue_No ,@Round_Id ,@PlanGoodsIssue_Due_Date", goodsIssue_No, Round_Id, PlanGoodsIssue_Due_Date).ToList();
                            var CheckWaveDipbyWave_Result = db.CheckWaveDipbyWave.FromSql("sp_CheckWaveDipbyWave  @GoodsIssue_No ,@Round_Id ,@PlanGoodsIssue_Due_Date", goodsIssue_No, Round_Id, PlanGoodsIssue_Due_Date).ToList();

                            foreach (var item in CheckWaveDip_Result)
                            {
                                CheckWaveDipmodel dipmodel = new CheckWaveDipmodel();
                                dipmodel.TruckLoad_No = item.TruckLoad_No;
                                dipmodel.Appointment_Id = item.Appointment_Id;
                                dipmodel.Dock_Name = item.Dock_Name;
                                dipmodel.Appointment_Date = item.Appointment_Date;
                                dipmodel.Appointment_Time = item.Appointment_Time;
                                dipmodel.PlanGoodsIssue_No = item.PlanGoodsIssue_No;
                                dipmodel.ShipTo_Id = item.ShipTo_Id;
                                dipmodel.ShipTo_Name = item.ShipTo_Name;
                                dipmodel.BranchCode = item.BranchCode;
                                dipmodel.Product_Id = item.Product_Id;
                                dipmodel.Product_Name = item.Product_Name;
                                dipmodel.Order_Qty = item.Order_Qty;
                                dipmodel.Order_Unit = item.Order_Unit;

                                resultWave.CheckWaveDipmodel.Add(dipmodel);
                            }

                            foreach (var item in CheckWaveDipbyWave_Result)
                            {
                                CheckWaveDipbyWavemodel dipbyWavemodel = new CheckWaveDipbyWavemodel();
                                dipbyWavemodel.Appointment_Id = item.Appointment_Id;
                                dipbyWavemodel.Appointment_Date = item.Appointment_Date;
                                dipbyWavemodel.Appointment_Time = item.Appointment_Time;
                                dipbyWavemodel.TruckLoad_No = item.TruckLoad_No;
                                dipbyWavemodel.Order_Seq = item.Order_Seq;
                                dipbyWavemodel.PlanGoodsIssue_No = item.PlanGoodsIssue_No;
                                dipbyWavemodel.LineNum = item.LineNum;
                                dipbyWavemodel.Product_Id = item.Product_Id;
                                dipbyWavemodel.Product_Name = item.Product_Name;
                                dipbyWavemodel.BU_Order_TotalQty = item.BU_Order_TotalQty;
                                dipbyWavemodel.BU_GI_TotalQty = item.BU_GI_TotalQty;
                                dipbyWavemodel.SU_Order_TotalQty = item.SU_Order_TotalQty;
                                dipbyWavemodel.SU_GI_TotalQty = item.SU_GI_TotalQty;
                                dipbyWavemodel.SU_Unit = item.SU_Unit;
                                dipbyWavemodel.ERP_Location = item.ERP_Location;
                                dipbyWavemodel.Product_Lot = item.Product_Lot;
                                dipbyWavemodel.SU_Diff = item.SU_Diff;
                                dipbyWavemodel.GoodsIssue_No = item.GoodsIssue_No;
                                dipbyWavemodel.Document_Remark = item.Document_Remark;
                                dipbyWavemodel.DocumentRef_No3 = item.DocumentRef_No3;

                                resultWave.CheckWaveDipbyWavemodel.Add(dipbyWavemodel);
                            }

                            resultWave.resultIsUse = true;
                            resultWave.ready = true;
                            resultWave.goodsIssue_No = result.goodsIssue_No;
                            resultWave.goodsIssue_Index = result.goodsIssue_Index;
                        }
                    }
                    else
                    {
                        resultWave.resultIsUse = false;
                        resultWave.resultMsg = "Wave ไม่สมบูรณ์";
                        return resultWave;
                    }


                }
                return resultWave;


            }
            catch (Exception ex)
            {
                resultWave.resultIsUse = false;
                resultWave.resultMsg = "Wave ไม่สำเร็จ เนื่องจากมีการ Process พร้อมกัน กรุณา ซ่อมเวฟ" ;
                return resultWave;
            }
        }
        #endregion

        #region RunWaveByRound
        public ResultRunWave Update_pickingplan(WaveByRoundViewModel model)
        {
            String State = "Start";
            String msglog = "";
            var olog = new logtxt();
            String msg = "";

            var resultWave = new ResultRunWave();
            try
            {
                var goodsIssue_No = new SqlParameter("@GoodsIssue_No", model.goodsIssue_No);
                var CheckB4PickPlan_Result = db.CheckB4Wave.FromSql("sp_CheckB4PickPlan @GoodsIssue_No", goodsIssue_No).ToList();


                foreach (var item in CheckB4PickPlan_Result)
                {
                    if (item.CountRows > 0)
                    {
                        resultWave.resultIsUse = false;
                        resultWave.resultMsg = "กรุณาตรวจสอบ : " + item.msgCheck;
                        return resultWave;
                    }

                }
                db.Database.SetCommandTimeout(360);
                var pstrGoodsIssue_Index = new SqlParameter("@GoodsIssue_Index", model.goodsIssue_Index);
                var resultPickingplan = db.Database.ExecuteSqlCommand("EXEC sp_CreatePickingplan_V2 @GoodsIssue_Index", pstrGoodsIssue_Index);

                resultWave.resultIsUse = true;

                return resultWave;


            }
            catch (Exception ex)
            {
                resultWave.resultIsUse = false;
                resultWave.resultMsg = "Wave ไม่สำเร็จ";
                return resultWave;
            }
        }
        #endregion

        #region CheckbyWave
        public ResultRunWave CheckbyWave(WaveByRoundViewModel model)
        {
            String State = "Start";
            String msglog = "";
            var olog = new logtxt();
            String msg = "";

            var resultWave = new ResultRunWave();
            //var resultWave = new Fixwave();

            try
            {

                if (string.IsNullOrEmpty(model.planGoodsIssue_Due_Date) || model.round_id == null)
                {
                    resultWave.resultIsUse = false;
                    resultWave.resultMsg = "กรณาระบุค่าให้ครบก่อนค้นหา";
                    return resultWave;
                }
                else
                {
                    
                    if (model.goodsIssue_No != null)
                    {
                        var Round_Id = new SqlParameter("@Round_Id", model.round_id);
                        DateTime dateStart = (model.planGoodsIssue_Due_Date.toBetweenDate().start);
                        var PlanGoodsIssue_Due_Date = new SqlParameter("@PlanGoodsIssue_Due_Date", dateStart);
                        var goodsIssue_No = new SqlParameter("@GoodsIssue_No", model.goodsIssue_No);
                        var CheckWaveDip_Result = db.CheckWaveDip.FromSql("sp_CheckWaveDip  @GoodsIssue_No ,@Round_Id ,@PlanGoodsIssue_Due_Date", goodsIssue_No, Round_Id, PlanGoodsIssue_Due_Date).ToList();
                        var CheckWaveDipbyWave_Result = db.CheckWaveDipbyWave.FromSql("sp_CheckWaveDipbyWave  @GoodsIssue_No ,@Round_Id ,@PlanGoodsIssue_Due_Date", goodsIssue_No, Round_Id, PlanGoodsIssue_Due_Date).ToList();

                        foreach (var item in CheckWaveDip_Result)
                        {
                            CheckWaveDipmodel dipmodel = new CheckWaveDipmodel();
                            dipmodel.TruckLoad_No = item.TruckLoad_No;
                            dipmodel.Appointment_Id = item.Appointment_Id;
                            dipmodel.Dock_Name = item.Dock_Name;
                            dipmodel.Appointment_Date = item.Appointment_Date;
                            dipmodel.Appointment_Time = item.Appointment_Time;
                            dipmodel.PlanGoodsIssue_No = item.PlanGoodsIssue_No;
                            dipmodel.ShipTo_Id = item.ShipTo_Id;
                            dipmodel.ShipTo_Name = item.ShipTo_Name;
                            dipmodel.BranchCode = item.BranchCode;
                            dipmodel.Product_Id = item.Product_Id;
                            dipmodel.Product_Name = item.Product_Name;
                            dipmodel.Order_Qty = item.Order_Qty;
                            dipmodel.Order_Unit = item.Order_Unit;
                            dipmodel.Flag_ClaimReturn = item.Flag_ClaimReturn;
                            

                            resultWave.CheckWaveDipmodel.Add(dipmodel);
                        }

                        foreach (var item in CheckWaveDipbyWave_Result)
                        {
                            CheckWaveDipbyWavemodel dipbyWavemodel = new CheckWaveDipbyWavemodel();
                            dipbyWavemodel.Appointment_Id = item.Appointment_Id;
                            dipbyWavemodel.Appointment_Date = item.Appointment_Date;
                            dipbyWavemodel.Appointment_Time = item.Appointment_Time;
                            dipbyWavemodel.TruckLoad_No = item.TruckLoad_No;
                            dipbyWavemodel.Order_Seq = item.Order_Seq;
                            dipbyWavemodel.PlanGoodsIssue_No = item.PlanGoodsIssue_No;
                            dipbyWavemodel.LineNum = item.LineNum;
                            dipbyWavemodel.Product_Id = item.Product_Id;
                            dipbyWavemodel.Product_Name = item.Product_Name;
                            dipbyWavemodel.BU_Order_TotalQty = item.BU_Order_TotalQty;
                            dipbyWavemodel.BU_GI_TotalQty = item.BU_GI_TotalQty;
                            dipbyWavemodel.SU_Order_TotalQty = item.SU_Order_TotalQty;
                            dipbyWavemodel.SU_GI_TotalQty = item.SU_GI_TotalQty;
                            dipbyWavemodel.SU_Unit = item.SU_Unit;
                            dipbyWavemodel.ERP_Location = item.ERP_Location;
                            dipbyWavemodel.Product_Lot = item.Product_Lot;
                            dipbyWavemodel.SU_Diff = item.SU_Diff;
                            dipbyWavemodel.GoodsIssue_No = item.GoodsIssue_No;
                            dipbyWavemodel.Document_Remark = item.Document_Remark;
                            dipbyWavemodel.DocumentRef_No3 = item.DocumentRef_No3;
                            dipbyWavemodel.Flag_ClaimReturn = item.Flag_ClaimReturn;
                            dipbyWavemodel.Flag_Export = item.Flag_Export;

                            resultWave.CheckWaveDipbyWavemodel.Add(dipbyWavemodel);
                        }

                        resultWave.resultIsUse = true;
                        resultWave.ready = true;
                        //resultWave.goodsIssue_No = result.goodsIssue_No;
                        //resultWave.goodsIssue_Index = result.goodsIssue_Index;
                    }
                   


                }
                //return resultWave;


                resultWave.fixWave_Count = 0;
                //if (model.goodsIssue_No != null)
                //{
                //    var db = new GIDbContext();
                //    var goodsIssue_No = new SqlParameter("@GoodsIssue_No", model.goodsIssue_No);
                //    var Fixwave = db.sp_Fixwave.FromSql("sp_Fixwave @GoodsIssue_No", goodsIssue_No).ToList();
                //    var Item = new List<sp_Fixwave>();
                //    Item = Fixwave.ToList();

                //    foreach (var item in Item)
                //    {
                //        fixwavemodel fixwave = new fixwavemodel();
                //        fixwave.Detail = item.Detail;
                //        fixwave.Binbalance_index = item.Binbalance_index;
                //        fixwave.Tag_No = item.Tag_No;
                //        fixwave.Product_Id = item.Product_Id;
                //        fixwave.Product_Name = item.Product_Name;
                //        fixwave.BinBalance_QtyBal = item.BinBalance_QtyBal;
                //        fixwave.BinBalance_QtyReserve = item.BinBalance_QtyReserve;
                //        fixwave.GI_TotalQty = item.GI_TotalQty;
                //        fixwave.diff = item.diff;
                //        fixwave.GoodsIssue_No = item.GoodsIssue_No;

                //        resultWave.fixwavemodel.Add(fixwave);
                //        resultWave.fixWave_Count = 1;
                //    }
                //    resultWave.resultIsUse = true;
                //}

                return resultWave;

            }
            catch (Exception ex)
            {
                resultWave.resultIsUse = false;
                resultWave.resultMsg = "Wave ไม่สำเร็จ";
                return resultWave;
            }

            //var resultFixWave = new Fixwave();
            //try
            //{
            //    resultFixWave.fixWave_Count = 0;
            //    if (model.goodsIssue_No != null)
            //    {
            //        var db = new GIDbContext();
            //        var goodsIssue_No = new SqlParameter("@GoodsIssue_No", model.goodsIssue_No);
            //        var Fixwave = db.sp_Fixwave.FromSql("sp_Fixwave @GoodsIssue_No", goodsIssue_No).ToList();
            //        var Item = new List<sp_Fixwave>();
            //        Item = Fixwave.ToList();

            //        foreach (var item in Item)
            //        {
            //            fixwavemodel fixwave = new fixwavemodel();
            //            fixwave.Detail = item.Detail;
            //            fixwave.Binbalance_index = item.Binbalance_index;
            //            fixwave.Tag_No = item.Tag_No;
            //            fixwave.Product_Id = item.Product_Id;
            //            fixwave.Product_Name = item.Product_Name;
            //            fixwave.BinBalance_QtyBal = item.BinBalance_QtyBal;
            //            fixwave.BinBalance_QtyReserve = item.BinBalance_QtyReserve;
            //            fixwave.GI_TotalQty = item.GI_TotalQty;
            //            fixwave.diff = item.diff;

            //            resultFixWave.fixwavemodel.Add(fixwave);
            //            resultFixWave.fixWave_Count = 1;
            //        }
            //        resultFixWave.resultIsUse = true;
            //    }

            //    return resultFixWave;
            //}
            //catch (Exception ex)
            //{
            //    resultFixWave.resultIsUse = false;
            //    resultFixWave.resultMsg = "Wave ไม่สำเร็จ";
            //    return resultFixWave;
            //}
        }
        #endregion



        #region checkWaveWCS
        public ResultCheckWaveWCS checkWaveWCS(ResultRunWave model)
        {
            String State = "Start";
            String msglog = "";
            var olog = new logtxt();
            String msg = "";

            var resultWave = new ResultCheckWaveWCS();
            try
            {
                var goodsIssue_No = new SqlParameter("@WaveNo", model.goodsIssue_No);

                if (model.tap == "1")
                {
                    var CheckWaveWCS_respo = db.CheckWaveWCS.FromSql("sp_CheckWaveWCS_resp  @WaveNo", goodsIssue_No).ToList();
                    foreach (var item in CheckWaveWCS_respo)
                    {
                        ResultCheckWaveWCS WCSmodel = new ResultCheckWaveWCS();

                        WCSmodel.header = item.header;
                        WCSmodel.Remaining = item.Remaining;
                        WCSmodel.descip = item.descip;

                        resultWave.CheckWaveWCS_respomodel.Add(WCSmodel);
                    }
                    
                }
                else if(model.tap == "2") {
                    var CheckWaveWCS_result = db.CheckWaveWCS_status.FromSql("sp_CheckWaveWCS  @WaveNo", goodsIssue_No).ToList();
                    foreach (var item in CheckWaveWCS_result)
                    {
                        ResultCheckWaveWCS WCSmodel = new ResultCheckWaveWCS();

                        WCSmodel.header = item.header;
                        WCSmodel.Remaining = item.RemainingQty.ToString();
                        WCSmodel.descip = item.descip;

                        resultWave.CheckWaveWCSmodel.Add(WCSmodel);
                    }
                }
                else if (model.tap == "4")
                {
                    var CheckWaveWCS_result = db.View_location_PP_waveEnd.OrderBy(c=> c.Location_ID).ToList();
                    foreach (var item in CheckWaveWCS_result)
                    {
                        ResultChecklocation_PP resultChecklocation = new ResultChecklocation_PP();

                        resultChecklocation.PalletSuggestion = item.PalletSuggestion;
                        resultChecklocation.Location_ID = item.Location_ID;
                        resultChecklocation.PalletID = item.PalletID;
                        resultChecklocation.ProductID = item.ProductID;
                        resultChecklocation.Product_Name = item.Product_Name;
                        resultChecklocation.QtySaleUnit = item.QtySaleUnit;
                        resultChecklocation.UOM = item.UOM;
                        resultChecklocation.ERP_Location = item.ERP_Location;
                        resultChecklocation.WMS_QTYBal = item.WMS_QTYBal;
                        resultChecklocation.WMS_QtyReserve = item.WMS_QtyReserve;

                        resultWave.Checklocation_PPmodel.Add(resultChecklocation);
                    }
                }

                return resultWave;


            }
            catch (Exception ex)
            {

                throw ex;
            }
        }
        #endregion

        #region AutoWaveByRound
        public actionResultRunWaveV2ViewModelViewModel AutoWaveByRound(string round_id, string planGoodsIssue_Due_Date , string goodsissue_index , string create_by)
        {
            String State = "Start";
            String msglog = "";
            var olog = new logtxt();
            String msg = "";

            var resultWave = new actionResultRunWaveV2ViewModelViewModel();
            try
            {


                olog.logging("AutoWaveByRound", State);


                olog.logging("AutoWaveByRound", "Round ID : " + round_id + " " + planGoodsIssue_Due_Date);
                DateTime DocumentDate = DateTime.Now;
                //var pgi = db2.IM_PlanGoodsIssueItem.Where(c => PlanGiRunWave.Contains(c.PlanGoodsIssueItem_Index) && c.Document_Status == 0).ToList();
                var PGI = db.IM_PlanGoodsIssue.Where(c => c.Round_Id == round_id && c.Document_Status == 1 && c.PlanGoodsIssue_Due_Date == planGoodsIssue_Due_Date.toDateDefault()).ToList();

                olog.logging("AutoWaveByRound", "PGI Count : " + PGI.Count.ToString());

                if (PGI.Count < 1)
                {
                    olog.logging("AutoWaveByRound", "PGI Not Found");

                    resultWave.resultIsUse = false;
                    resultWave.resultMsg = "PGI Not Found";

                    return resultWave;
                }
                var PGII = db.IM_PlanGoodsIssueItem.Where(c => c.Document_Status != -1 && PGI.Select(s => s.PlanGoodsIssue_Index).Contains(c.PlanGoodsIssue_Index)).ToList();
                olog.logging("AutoWaveByRound", "PGII Count : " + PGII.Count.ToString());
                if (PGII.Count < 1)
                {
                    olog.logging("AutoWaveByRound", "PGII Not Found");

                    resultWave.resultIsUse = false;
                    resultWave.resultMsg = "PGII Not Found";
                    return resultWave;
                }

                olog.logging("AutoWaveByRound", "Prepare model");

                //dataSource.StateList.Where(s => countryCodes.Contains(s.CountryCode))
                RunWaveFilterV2ViewModel model = new RunWaveFilterV2ViewModel();
                plangoodsissueitemViewModel plangi = new plangoodsissueitemViewModel();
                List<plangoodsissueitemViewModel> listPlanGI = new List<plangoodsissueitemViewModel>();
                //List<plangoodsissueitemViewModel>
                model.wave_Index = "7EFA474A-8FF4-439E-A5D7-8C844CB53B56";
                model.wave_Id = "1";
                model.wave_Name = "Wave No1";
                model.owner_Index = PGI[0].Owner_Index.ToString();
                model.owner_Id = PGI[0].Owner_Id;
                model.owner_Name = PGI[0].Owner_Name;
                model.documentType_Index = "4949340C-E5CB-4D6C-B9CF-15013C9EEF11";
                model.documentType_Id = "GI10";
                model.documentType_Name = "ประเภทเบิกทั่วไป";
                model.goodsIssue_Date = planGoodsIssue_Due_Date;
                model.goodsIssue_Index = goodsissue_index;
                // model.goodsIssue_Time;
                model.documentRef_No1 = round_id;
                model.documentRef_No2 = "";
                model.documentRef_No3 = "";
                model.documentRef_No4 = "";
                model.documentRef_No5 = "";
                model.document_Remark = "";
                //   model.documentPriority_Status
                model.document_Date = planGoodsIssue_Due_Date;
                model.warehouse_Index = "B0AD4E8F-A7B1-4952-BAC7-1A9482BABA79";
                model.warehouse_Id = "DC7";
                model.warehouse_Name = "Amazon วังน้อย";
                model.create_by = create_by;
                foreach (var item in PGII)
                {
                    plangi = new plangoodsissueitemViewModel();

                    plangi.planGoodsIssue_Index = item.PlanGoodsIssue_Index;
                    plangi.planGoodsIssueItem_Index = item.PlanGoodsIssueItem_Index;
                    listPlanGI.Add(plangi);

                }


                model.listGoodsIssueItemViewModel = listPlanGI;


                olog.logging("AutoWaveByRound", "Create WAVE");

                //1. Create WAVE
                //resultWave = runwaveandHeader(model);
                GoodIssue_ExportService exportService = new GoodIssue_ExportService();
                resultWave = exportService.runwaveandHeader(model);


                // Resonse
                var GI_Index = resultWave.goodsIssue_Index;
                var GI_No = resultWave.goodsIssue_No;


                olog.logging("AutoWaveByRound", "CheckGI");
                //2. Create Task
                var CheckGI = db.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == new Guid(GI_Index) && c.GI_status == 1 && c.TaskGI_status == 0 && c.TagOut_status == 0 && c.WCS_status == 0).ToList();
                if (CheckGI.Count > 0)
                {


                    olog.logging("AutoWaveByRound", "Create Task");
                    try
                    {
                        // var CreateTask = SaveAutoWaveByRound(GI_Index, "");

                    }
                    catch (Exception exTask)
                    {
                        olog.logging("AutoWaveByRound", " Err Create Task : " + exTask.Message);
                        throw exTask;
                    }

                }

                // 3.Create Tagout
                olog.logging("AutoWaveByRound", "CheckTaskGI");
                var CheckTaskGI = db.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == new Guid(GI_Index) && c.GI_status == 1 && c.TaskGI_status == 1 && c.TagOut_status == 0 && c.WCS_status == 0).ToList();
                if (CheckTaskGI.Count > 0)
                {
                    olog.logging("AutoWaveByRound", "Create Tagout");
                    try
                    {
                        var service = new TagoutService();
                        var Models = new findtagViewModelItem();
                        Models.GoodsIssue_No = GI_No;
                        // var CreateTagout = service.maketagOut_V3(Models);

                    }
                    catch (Exception exTagout)
                    {
                        olog.logging("AutoWaveByRound", " Err Create Tagout : " + exTagout.Message);
                        throw exTagout;
                    }





                }

                // 4. Create WCS
                olog.logging("AutoWaveByRound", "CheckTagout");
                var CheckTagout = db.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == new Guid(GI_Index) && c.GI_status == 1 && c.TaskGI_status == 1 && c.TagOut_status == 1 && c.WCS_status == 0).ToList();
                if (CheckTagout.Count > 0)
                {
                    // Send API  WCS

                    olog.logging("AutoWaveByRound", "Create WCS");
                    try
                    {



                    }
                    catch (Exception exWCS)
                    {
                        olog.logging("AutoWaveByRound", " Err Create WCS : " + exWCS.Message);
                        throw exWCS;
                    }



                }



                return resultWave;


            }
            catch (Exception ex)
            {
                olog.logging("AutoWaveByRound", " Err ex : " + ex.Message);
                throw ex;
            }
        }


        public ResultRunWave SaveAutoWaveByRound(string pgoodsIssue_Index, string resultmsg)
        {
            String State = "Start";
            String msglog = "";
            var olog = new logtxt();

            String msg = "";
            var resultWave = new ResultRunWave();
            //Result a = new Result();
            try
            {







                olog.logging("SaveAutoWaveByRound", State + " " + pgoodsIssue_Index);

                olog.logging("SaveAutoWaveByRound", "S.sp_GetCheckAfterTaskWave2 ");

                db.Database.SetCommandTimeout(360);



                //resultWave.resultIsUse = false;
                //resultWave.resultMsg = "กรุณาตรวจสอบ : " + item.msgCheck;
                //return resultWave;


                var GI_Index = new SqlParameter("@GI_Index", pgoodsIssue_Index);
                var resultx = db.Database.ExecuteSqlCommand("EXEC sp_GetCheckAfterTaskWave2 @GI_Index", GI_Index);


                olog.logging("SaveAutoWaveByRound", "E.sp_GetCheckAfterTaskWave2 ");


                olog.logging("SaveAutoWaveByRound", "S.sp_CheckB4Task ");
                var pstrGoodsIssue_Index = new SqlParameter("@GoodsIssue_Index", pgoodsIssue_Index);
                var CheckB4Task_Result = db.CheckB4Wave.FromSql("sp_CheckB4Task @GoodsIssue_Index ", pstrGoodsIssue_Index).ToList();


                foreach (var item in CheckB4Task_Result)
                {
                    if (item.CountRows > 0)
                    {
                        resultWave.resultIsUse = false;
                        resultWave.resultMsg = "กรุณาตรวจสอบ : " + item.msgCheck;
                        return resultWave;
                    }

                }


                olog.logging("SaveAutoWaveByRound", "E.sp_CheckB4Task ");


                if (pgoodsIssue_Index != null)
                {
                    var cmdGI = "";
                    var cmdGIL = "";
                    cmdGI = "  Update  im_GoodsIssue set   " +
                             "  Document_Status = 0      " +
                             "  ,Update_By = 'AutoWMS'        " +
                             "  ,Update_Date = getdate()     " +
                             "  where GoodsIssue_Index = '" + pgoodsIssue_Index + "'  " +
                             "   and Document_Status<> -1 ";



                    cmdGIL = "    Update  im_GoodsIssueItemLocation set " +
                                    "Document_Status = 0             " +
                                    ",Update_By = 'AutoWMS'                 " +
                                    ",Update_Date = getdate()        " +
                                  "  where GoodsIssue_Index = '" + pgoodsIssue_Index + "'  " +
                                    "and Document_Status<> -1        ";




                    var transaction = db.Database.BeginTransaction();
                    try
                    {
                        var GIRes = db.Database.ExecuteSqlCommand(cmdGI);
                        var GILRes = db.Database.ExecuteSqlCommand(cmdGIL);
                        transaction.Commit();
                        // End Trasaction get Running



                    }
                    catch (Exception exTrans)
                    {
                        transaction.Rollback();

                        msglog = State + " exTrans Rollback " + exTrans.Message.ToString();
                        olog.logging("SaveAutoWaveByRound", msglog);
                        olog.logging("SaveAutoWaveByRound", "exTrans inner - " + exTrans.InnerException.Message.ToString());



                        throw exTrans;
                    }



                    olog.logging("SaveAutoWaveByRound", "Update TaskGI_status ");
                    if (pgoodsIssue_Index != null)
                    {
                        var cmdGITASK = "";

                        cmdGITASK = "  Update  im_GoodsIssue set   " +
                                 "  TaskGI_status = 1       " +
                                 "  ,Update_By = 'AutoWMS'        " +
                                 "  ,Update_Date = getdate()     " +
                                 "  where GoodsIssue_Index = '" + pgoodsIssue_Index + "'  " +
                                 "  and isnull(TaskGI_status,0) = 0 " +
                                 "   and Document_Status<> -1 ";




                        var transaction2 = db.Database.BeginTransaction();
                        try
                        {
                            var GITaskRes = db.Database.ExecuteSqlCommand(cmdGITASK);

                            transaction2.Commit();
                            // End Trasaction get Running



                        }
                        catch (Exception exTrans2)
                        {
                            transaction2.Rollback();

                            msglog = State + " exTrans2 Rollback " + exTrans2.Message.ToString();
                            olog.logging("SaveAutoWaveByRound", msglog);
                            olog.logging("SaveAutoWaveByRound", "exTrans2 inner - " + exTrans2.InnerException.Message.ToString());



                            throw exTrans2;
                        }

                    }
                    ////
                    ////

                    olog.logging("SaveAutoWaveByRound", "END Update TaskGI_status ");

                    var modelSave = new GoodsIssueViewModel();
                    var listGiItemViewModel = new List<GoodIssueViewModelItem>();
                    var gi = new GoodIssueViewModelItem();
                    using (var db2 = new GIDbContext())
                    {

                        olog.logging("SaveAutoWaveByRound", "1");
                        var GI = db.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(pgoodsIssue_Index) && c.Document_Status != -1).ToList();
                        var dbGIL = db.IM_GoodsIssueItemLocation.Where(c => c.GoodsIssue_Index == Guid.Parse(pgoodsIssue_Index) && c.Document_Status != -1).ToList();
                        modelSave.goodsIssue_Index = GI[0].GoodsIssue_Index.ToString();
                        modelSave.goodsIssue_Date = GI[0].GoodsIssue_Date.ToString("yyyyMMdd");
                        modelSave.goodsIssue_Time = "";// GI[0].GoodsIssue_Time.ToString();
                        modelSave.document_Date = GI[0].GoodsIssue_Date.ToString("yyyyMMdd");
                        modelSave.goodsIssue_Due_Date = GI[0].GoodsIssue_Date.ToString();
                        //  modelSave.operations = "ADD";
                        modelSave.owner_Index = GI[0].Owner_Index.ToString();
                        modelSave.owner_Id = GI[0].Owner_Id.ToString();
                        modelSave.owner_Name = GI[0].Owner_Name.ToString();
                        // modelSave.ischkPopupGi = true;
                        modelSave.documentType_Index = GI[0].DocumentType_Index.ToString();
                        modelSave.documentType_Id = GI[0].DocumentType_Id.ToString();
                        modelSave.documentType_Name = GI[0].DocumentType_Name.ToString();
                        modelSave.warehouse_Index = GI[0].Warehouse_Index.ToString();
                        modelSave.warehouse_Id = GI[0].Warehouse_Id.ToString();
                        modelSave.warehouse_Name = GI[0].Warehouse_Name.ToString();
                        //    modelSave.document_Remark = resultWave.resultMsg;
                        //modelSave.wave_Index = GI[0].DocumentType_Name.ToString();
                        //modelSave.wave_Id = GI[0].DocumentType_Name.ToString();
                        //modelSave.wave_Name = GI[0].DocumentType_Name.ToString();
                        modelSave.create_by = GI[0].Create_By.ToString();
                        olog.logging("SaveAutoWaveByRound", "2");
                        foreach (var itemGIL in dbGIL)
                        {
                            gi = new GoodIssueViewModelItem();

                            gi.goodsIssueItemLocation_Index = itemGIL.GoodsIssueItemLocation_Index.ToString();
                            gi.goodsIssueItem_Index = null;
                            gi.goodsIssue_Index = itemGIL.GoodsIssue_Index.ToString();
                            gi.lineNum = null;
                            gi.tagItem_Index = itemGIL.TagItem_Index.ToString();
                            gi.tag_Index = itemGIL.Tag_Index.ToString();
                            gi.tag_No = itemGIL.Tag_No.ToString();
                            gi.product_Index = itemGIL.Product_Index.ToString();
                            gi.product_Id = itemGIL.Product_Id.ToString();
                            gi.product_Name = itemGIL.Product_Name.ToString();
                            gi.product_SecondName = itemGIL.Product_SecondName;
                            gi.product_ThirdName = itemGIL.Product_ThirdName;
                            gi.product_Lot = itemGIL.Product_Lot;
                            gi.itemStatus_Index = itemGIL.ItemStatus_Index.ToString();
                            gi.itemStatus_Id = itemGIL.ItemStatus_Id.ToString();
                            gi.itemStatus_Name = itemGIL.ItemStatus_Name.ToString();
                            gi.location_Index = itemGIL.Location_Index.ToString();
                            gi.location_Id = itemGIL.Location_Id.ToString();
                            gi.location_Name = itemGIL.Location_Name.ToString();
                            gi.qtyPlan = itemGIL.QtyPlan;
                            gi.qty = itemGIL.Qty;
                            gi.ratio = itemGIL.Ratio;
                            gi.totalQty = itemGIL.TotalQty;
                            gi.productConversion_Index = itemGIL.ProductConversion_Index.ToString();
                            gi.productConversion_Id = itemGIL.ProductConversion_Id.ToString();
                            gi.productConversion_Name = itemGIL.ProductConversion_Name.ToString();
                            gi.productConversion_Base = itemGIL.ProductConversion_Name.ToString();
                            gi.mfg_Date = itemGIL.MFG_Date.ToString();
                            gi.exp_Date = itemGIL.EXP_Date.ToString();
                            gi.unitWeight = null;
                            gi.weight = 0;
                            gi.unitWidth = 0;
                            gi.unitLength = 0;
                            gi.unitHeight = 0;
                            gi.unitVolume = 0;
                            gi.volume = 0;
                            gi.unitPrice = 0;
                            gi.price = 0;
                            gi.documentRef_No1 = "";
                            gi.documentRef_No2 = "";
                            gi.documentRef_No3 = "";
                            gi.documentRef_No4 = "";
                            gi.documentRef_No5 = "";
                            gi.document_Status = -2;
                            gi.udf_1 = "";
                            gi.udf_2 = "";
                            gi.udf_3 = "";
                            gi.udf_4 = "";
                            gi.udf_5 = "";
                            gi.ref_Process_Index = "22744590-55d8-4448-88ef-5997c252111f";
                            gi.ref_Document_No = itemGIL.Ref_Document_No.ToString();
                            gi.ref_Document_LineNum = null;
                            gi.ref_Document_Index = itemGIL.Ref_Document_Index.ToString();
                            gi.ref_DocumentItem_Index = itemGIL.Ref_DocumentItem_Index.ToString();
                            gi.goodsReceiveItem_Index = itemGIL.GoodsReceiveItem_Index.ToString();
                            gi.create_By = itemGIL.Create_By.ToString();
                            gi.create_Date = itemGIL.Create_Date.ToString();
                            gi.update_By = null;
                            gi.update_Date = "";
                            gi.cancel_By = null;
                            gi.cancel_Date = "";
                            gi.picking_Status = null;
                            gi.picking_By = null;
                            gi.picking_Date = "";
                            gi.picking_Ref1 = null;
                            gi.picking_Ref2 = null;
                            gi.picking_Qty = null;
                            gi.picking_Ratio = null;
                            gi.picking_TotalQty = null;
                            gi.picking_ProductConversion_Index = "";
                            gi.mashall_Status = null;
                            gi.mashall_Qty = null;
                            gi.cancel_Status = null;
                            gi.goodsIssue_No = itemGIL.GoodsIssue_No.ToString();
                            gi.goodsReceive_No = null; // "GR-2021020010";
                            gi.goodsReceive_date = null; // "20210208160700";
                            gi.goodsReceive_Index = null; // "9281d296-1dd6-49e7-a3ad-f5a785841beb";
                            gi.binBalance_Index = itemGIL.BinBalance_Index.ToString();
                            gi.warehouse_Name_To = null;
                            gi.documentItem_Remark = null;
                            gi.invoice_No = null;
                            gi.invoice_No_Out = null;
                            gi.declaration_No = null;
                            gi.declaration_No_Out = null;
                            gi.hs_Code = null;
                            gi.conutry_of_Origin = null;
                            gi.tax1 = null;
                            gi.tax1_Currency_Index = null;
                            gi.tax1_Currency_Id = null;
                            gi.tax1_Currency_Name = null;
                            gi.tax2 = null;
                            gi.tax2_Currency_Index = null;
                            gi.tax2_Currency_Id = null;
                            gi.tax2_Currency_Name = null;
                            gi.tax3 = null;
                            gi.tax3_Currency_Index = null;
                            gi.tax3_Currency_Id = null;
                            gi.tax3_Currency_Name = null;
                            gi.tax4 = null;
                            gi.tax4_Currency_Index = null;
                            gi.tax4_Currency_Id = null;
                            gi.tax4_Currency_Name = null;
                            gi.tax5 = null;
                            gi.tax5_Currency_Index = null;
                            gi.tax5_Currency_Id = null;
                            gi.tax5_Currency_Name = null;
                            gi.create_date_balance = null; //  "20210208161134";
                            gi.product_Id_RefNo2 = null;
                            gi.ERP_location = itemGIL.ERP_Location.ToString();
                            gi.Export_type = itemGIL.Export_type;



                            listGiItemViewModel.Add(gi);



                        }

                        //   public List<GoodIssueViewModelItem> listGoodsIssueItemViewModel { get; set; }
                        modelSave.listGoodsIssueItemViewModel = listGiItemViewModel;

                    }
                    olog.logging("SaveAutoWaveByRound", "3");


                    ////




                    #region Create Task
                    var GoodsIssueLocation = modelSave.listGoodsIssueItemViewModel;
                    var GoodsIssue = db.IM_GoodsIssue.Where(c => c.GoodsIssue_Index == Guid.Parse(modelSave.goodsIssue_Index) && c.Document_Status == 0).ToList();

                    olog.logging("SaveAutoWaveByRound", "4");

                    #region 1 : 1

                    var ViewJoinWarehouse = (from GIL in GoodsIssueLocation
                                             join Gi in GoodsIssue on new Guid(GIL.goodsIssue_Index) equals Guid.Parse(pgoodsIssue_Index)

                                             select new View_AssignTaskJobViewModel
                                             {
                                                 goodsIssue_Index = Gi.GoodsIssue_Index,
                                                 goodsIssue_No = Gi.GoodsIssue_No,
                                                 goodsIssueItemLocation_Index = new Guid(GIL.goodsIssueItemLocation_Index),
                                                 goodsIssue_Date = Gi.GoodsIssue_Date,
                                                 qty = GIL.qty,
                                                 totalQty = GIL.totalQty,

                                                 location_Index = new Guid(GIL.location_Index),
                                                 location_Id = GIL.location_Id,
                                                 location_Name = GIL.location_Name,
                                                 tag_No = GIL.tag_No,

                                             }).AsQueryable();

                    olog.logging("SaveAutoWaveByRound", "5");
                    var ResultGroup = ViewJoinWarehouse.GroupBy(c => new { c.goodsIssue_Index, c.goodsIssue_Date, c.location_Index, c.location_Id, c.location_Name, c.tag_No })
                     .Select(group => new
                     {
                         GI = group.Key.goodsIssue_Index,
                         GID = group.Key.goodsIssue_Date,

                         LOCI = group.Key.location_Index,
                         LOCID = group.Key.location_Id,
                         LOCN = group.Key.location_Name,
                         TAG = group.Key.tag_No,
                         ResultItem = group.OrderByDescending(o => o.location_Id).ThenByDescending(o => o.product_Id).ThenByDescending(o => o.qty).ToList()
                     }).ToList();


                    //var Template = "1";
                    var Template = "1";
                    olog.logging("SaveAutoWaveByRound", "S.CreateTaskByLocation ");
                    foreach (var item in ResultGroup)
                    {
                        this.CreateTaskByLocation(item.GI, item.GID, item.ResultItem, modelSave.create_by, Template, item.LOCI.ToString(), item.LOCN.ToString(), item.TAG.ToString());
                    }

                    #endregion
                    olog.logging("SaveAutoWaveByRound", "E.CreateTaskByLocation ");


                    var transactionX = db.Database.BeginTransaction();
                    try
                    {
                        db.SaveChanges();
                        transactionX.Commit();
                        resultWave.resultIsUse = true;

                        try
                        {
                            olog.logging("SaveAutoWaveByRound", "S.updateCheckBOM ");

                            var AdjBom = updateCheckBOM(modelSave);

                            olog.logging("SaveAutoWaveByRound", "E.updateCheckBOM ");



                        }
                        catch (Exception exxxx)
                        {

                            olog.logging("SaveAutoWaveByRound", "Err.updateCheckBOM  exxxx " + exxxx.Message.ToString());

                            //throw exxx;
                        }



                        //[sp_GetCheckAfterTask]
                        try
                        {
                            olog.logging("SaveAutoWaveByRound", "S.sp_GetCheckAfterTask ");

                            var GITask_Index = new SqlParameter("@GI_Index", pgoodsIssue_Index);
                            var resultTask = db.Database.ExecuteSqlCommand("EXEC sp_GetCheckAfterTask @GI_Index", GITask_Index);
                            olog.logging("SaveAutoWaveByRound", "E.sp_GetCheckAfterTask ");

                        }
                        catch (Exception exxx)
                        {
                            msglog = State + " exxx sp_GetCheckAfterTask " + exxx.Message.ToString();
                            olog.logging("SaveAutoWaveByRound", "Err.sp_GetCheckAfterTask   inner - " + exxx.InnerException.Message.ToString());
                            olog.logging("SaveAutoWaveByRound", msglog);
                            //throw exxx;
                        }






                        olog.logging("SaveAutoWaveByRound", "Update TaskGI_status 2 ");
                        if (pgoodsIssue_Index != null)
                        {
                            var cmdGITASK2 = "";

                            cmdGITASK2 = "  Update  im_GoodsIssue set   " +
                                     "  TaskGI_status = 2       " +
                                     "  ,Update_By = 'AutoWMS'        " +
                                     "  ,Update_Date = getdate()     " +
                                     "  where GoodsIssue_Index = '" + pgoodsIssue_Index + "'  " +
                                     "  and isnull(TaskGI_status,0) = 1 " +
                                     "   and Document_Status<> -1 ";




                            var transactiontask = db.Database.BeginTransaction();
                            try
                            {
                                var GITaskRes2 = db.Database.ExecuteSqlCommand(cmdGITASK2);

                                transactiontask.Commit();
                                // End Trasaction get Running



                            }
                            catch (Exception exTranstask)
                            {
                                transactiontask.Rollback();

                                msglog = State + " exTranstask Rollback " + exTranstask.Message.ToString();
                                olog.logging("SaveAutoWaveByRound", msglog);
                                olog.logging("SaveAutoWaveByRound", "exTranstask inner - " + exTranstask.InnerException.Message.ToString());



                                throw exTranstask;
                            }

                        }
                        ////
                        ////

                        olog.logging("SaveAutoWaveByRound", "END Update TaskGI_status 2");


                    }

                    catch (Exception exy)
                    {
                        resultWave.resultIsUse = false;
                        msglog = State + " exy Rollback " + exy.Message.ToString();
                        olog.logging("SaveAutoWaveByRound", msglog);
                        transactionX.Rollback();
                        olog.logging("SaveAutoWaveByRound", "exy Rollback    inner - " + exy.InnerException.Message.ToString());
                        throw exy;
                    }
                    #endregion



                    return resultWave;
                }



                return resultWave;
            }
            catch (Exception ex)
            {

                throw ex;

            }
        }
        #endregion

        #region Start Wave
        public Result Start_wave(GoodsIssueHeaderViewModel data)
        {
            var result = new Result();
            try
            {
                if (!string.IsNullOrEmpty(data.goodsIssue_No))
                {
                    var GI = new { docNo = data.goodsIssue_No };
                    TagOutitemViewModel getWaveRule = utils.SendDataApi<TagOutitemViewModel>(new AppSettingConfig().GetUrl("update_Wave_WCS"), GI.sJson());
                    if (getWaveRule.status == "10")
                    {
                        result.resultIsUse = true;
                    }
                    else
                    {
                        result.resultIsUse = false;
                        result.resultMsg = getWaveRule.message.description;
                    }
                }
                return result;
            }
            catch (Exception EX)
            {
                result.resultIsUse = false;
                result.resultMsg = EX.Message;
                throw EX;
            }
        }
        #endregion


    }
}
